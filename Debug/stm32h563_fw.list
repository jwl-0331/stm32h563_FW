
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f060  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000030  0800f2b0  0800f2b0  0001f2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       0000059c  0800f2e0  0800f2e0  0001f2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800f87c  0800f87c  000200b4  2**0
                  CONTENTS
  5 .ARM          00000008  0800f87c  0800f87c  0001f87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800f884  0800f884  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800f884  0800f884  0001f884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800f888  0800f888  0001f888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000b4  20000000  0800f88c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001464  200000b4  0800f940  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001518  0800f940  00021518  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ea  2**0
                  CONTENTS, READONLY
 14 .debug_info   000287d2  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000057ac  00000000  00000000  000488ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002250  00000000  00000000  0004e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a8f  00000000  00000000  00050300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036b33  00000000  00000000  00051d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ad72  00000000  00000000  000888c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00158df6  00000000  00000000  000b3634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000096ec  00000000  00000000  0020c42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00215b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200000b4 	.word	0x200000b4
 800026c:	00000000 	.word	0x00000000
 8000270:	0800f298 	.word	0x0800f298

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200000b8 	.word	0x200000b8
 800028c:	0800f298 	.word	0x0800f298

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
#include "svPlatform.h"
#include "svCLI.h"
#include "svDebug.h"
#include "svRingBuffer.h"
void AppMain()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
}
 80005dc:	bf00      	nop
  __enable_irq();

  RESET_Init();
 80005de:	f002 f915 	bl	800280c <RESET_Init>
  LED_Init();
 80005e2:	f002 f863 	bl	80026ac <LED_Init>
  LED_SimpleAnimation();
 80005e6:	f002 f8bb 	bl	8002760 <LED_SimpleAnimation>

  svDebugInit();
 80005ea:	f002 fb25 	bl	8002c38 <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 80005ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f2:	2000      	movs	r0, #0
 80005f4:	f002 f972 	bl	80028dc <UART_Init>

  CAN_Init();
 80005f8:	f000 fda6 	bl	8001148 <CAN_Init>
  CAN_Open(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
 80005fc:	2305      	movs	r3, #5
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fe22 	bl	8001250 <CAN_Open>
  // Chk Reset Count
  uint32_t pre_time = HAL_GetTick();
 800060c:	f002 fbb8 	bl	8002d80 <HAL_GetTick>
 8000610:	6078      	str	r0, [r7, #4]

  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <AppMain+0x54>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d902      	bls.n	8000620 <AppMain+0x4c>
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <AppMain+0x58>)
 800061c:	f002 fb40 	bl	8002ca0 <svDebugMessage>
  /* Start scheduler */
  //osKernelStart();
  while(1)
  {

    svDebugProcess();
 8000620:	f002 fab2 	bl	8002b88 <svDebugProcess>
 8000624:	e7fc      	b.n	8000620 <AppMain+0x4c>
 8000626:	bf00      	nop
 8000628:	20000028 	.word	0x20000028
 800062c:	0800f2e0 	.word	0x0800f2e0

08000630 <HAL_GPIO_EXTI_Rising_Callback>:
    */
  }
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000640:	d103      	bne.n	800064a <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 8000642:	2101      	movs	r1, #1
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8000646:	f004 f939 	bl	80048bc <HAL_GPIO_TogglePin>
  }
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	42020400 	.word	0x42020400

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f002 fb56 	bl	8002d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f810 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f972 	bl	800094c <MX_GPIO_Init>
  MX_FLASH_Init();
 8000668:	f000 f8bc 	bl	80007e4 <MX_FLASH_Init>
  MX_ICACHE_Init();
 800066c:	f000 f8cc 	bl	8000808 <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 8000670:	f000 f8d6 	bl	8000820 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000674:	f000 f91e 	bl	80008b4 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000678:	f000 f86e 	bl	8000758 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  AppMain();
 800067c:	f7ff ffaa 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x28>
	...

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	; 0x70
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2250      	movs	r2, #80	; 0x50
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00e fa04 	bl	800eaa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <SystemClock_Config+0xd0>)
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	4a29      	ldr	r2, [pc, #164]	; (8000754 <SystemClock_Config+0xd0>)
 80006b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006b4:	6113      	str	r3, [r2, #16]
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <SystemClock_Config+0xd0>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c2:	bf00      	nop
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <SystemClock_Config+0xd0>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	2b08      	cmp	r3, #8
 80006ce:	d1f9      	bne.n	80006c4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006d0:	2309      	movs	r3, #9
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 80006d4:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006e4:	2303      	movs	r3, #3
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006ec:	2314      	movs	r3, #20
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80006fc:	230c      	movs	r3, #12
 80006fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000700:	2300      	movs	r3, #0
 8000702:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f004 f931 	bl	8004974 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000718:	f000 fa18 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	231f      	movs	r3, #31
 800071e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2103      	movs	r1, #3
 800073a:	4618      	mov	r0, r3
 800073c:	f004 fd52 	bl	80051e4 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000746:	f000 fa01 	bl	8000b4c <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3770      	adds	r7, #112	; 0x70
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	44020800 	.word	0x44020800

08000758 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <MX_FDCAN1_Init+0x88>)
 8000760:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000776:	2200      	movs	r2, #0
 8000778:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800077c:	2200      	movs	r2, #0
 800077e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000782:	2200      	movs	r2, #0
 8000784:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000788:	2210      	movs	r2, #16
 800078a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800078e:	2201      	movs	r2, #1
 8000790:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000794:	2202      	movs	r2, #2
 8000796:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800079a:	2202      	movs	r2, #2
 800079c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007be:	2200      	movs	r2, #0
 80007c0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007ca:	f002 fc8f 	bl	80030ec <HAL_FDCAN_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80007d4:	f000 f9ba 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000d0 	.word	0x200000d0
 80007e0:	4000a400 	.word	0x4000a400

080007e4 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 80007e8:	f003 fcc8 	bl	800417c <HAL_FLASH_Unlock>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 80007f2:	f000 f9ab 	bl	8000b4c <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80007f6:	f003 fce7 	bl	80041c8 <HAL_FLASH_Lock>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000800:	f000 f9a4 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800080c:	f004 f8a2 	bl	8004954 <HAL_ICACHE_Enable>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000816:	f000 f999 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000824:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000826:	4a21      	ldr	r2, [pc, #132]	; (80008ac <MX_LPUART1_UART_Init+0x8c>)
 8000828:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800082e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000844:	220c      	movs	r2, #12
 8000846:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 800085c:	2200      	movs	r2, #0
 800085e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000860:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000862:	f00a fc9f 	bl	800b1a4 <HAL_UART_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800086c:	f000 f96e 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000874:	f00c fbd5 	bl	800d022 <HAL_UARTEx_SetTxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800087e:	f000 f965 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000886:	f00c fc0a 	bl	800d09e <HAL_UARTEx_SetRxFifoThreshold>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000890:	f000 f95c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000896:	f00c fb8b 	bl	800cfb0 <HAL_UARTEx_DisableFifoMode>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80008a0:	f000 f954 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000134 	.word	0x20000134
 80008ac:	44002400 	.word	0x44002400
 80008b0:	00033324 	.word	0x00033324

080008b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <MX_USART3_UART_Init+0x94>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008fe:	f00a fc51 	bl	800b1a4 <HAL_UART_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f920 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000910:	f00c fb87 	bl	800d022 <HAL_UARTEx_SetTxFifoThreshold>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 f917 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000922:	f00c fbbc 	bl	800d09e <HAL_UARTEx_SetRxFifoThreshold>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 f90e 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000932:	f00c fb3d 	bl	800cfb0 <HAL_UARTEx_DisableFifoMode>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800093c:	f000 f906 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001c8 	.word	0x200001c8
 8000948:	40004800 	.word	0x40004800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	4b6b      	ldr	r3, [pc, #428]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000968:	4a69      	ldr	r2, [pc, #420]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000972:	4b67      	ldr	r3, [pc, #412]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000978:	f003 0310 	and.w	r3, r3, #16
 800097c:	623b      	str	r3, [r7, #32]
 800097e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	4b63      	ldr	r3, [pc, #396]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000986:	4a62      	ldr	r2, [pc, #392]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000990:	4b5f      	ldr	r3, [pc, #380]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099e:	4b5c      	ldr	r3, [pc, #368]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a4:	4a5a      	ldr	r2, [pc, #360]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009a6:	f043 0320 	orr.w	r3, r3, #32
 80009aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ae:	4b58      	ldr	r3, [pc, #352]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	61bb      	str	r3, [r7, #24]
 80009ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009bc:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c2:	4a53      	ldr	r2, [pc, #332]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009cc:	4b50      	ldr	r3, [pc, #320]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009e0:	4a4b      	ldr	r2, [pc, #300]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ea:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f8:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fe:	4a44      	ldr	r2, [pc, #272]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a08:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1c:	4a3c      	ldr	r2, [pc, #240]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a26:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a3a:	4a35      	ldr	r2, [pc, #212]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	482f      	ldr	r0, [pc, #188]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000a58:	f003 ff18 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2101      	movs	r1, #1
 8000a60:	482d      	ldr	r0, [pc, #180]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 8000a62:	f003 ff13 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	482c      	ldr	r0, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x1d0>)
 8000a6c:	f003 ff0e 	bl	800488c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_GPIO_Init+0x1d4>)
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4827      	ldr	r0, [pc, #156]	; (8000b24 <MX_GPIO_Init+0x1d8>)
 8000a86:	f003 fdaf 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000aa2:	f003 fda1 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4816      	ldr	r0, [pc, #88]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 8000abe:	f003 fd93 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <MX_GPIO_Init+0x1d0>)
 8000ada:	f003 fd85 	bl	80045e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_GPIO_Init+0x1d4>)
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <MX_GPIO_Init+0x1d0>)
 8000af2:	f003 fd79 	bl	80045e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2105      	movs	r1, #5
 8000afa:	2018      	movs	r0, #24
 8000afc:	f002 fa28 	bl	8002f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b00:	2018      	movs	r0, #24
 8000b02:	f002 fa3f 	bl	8002f84 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	; 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	44020c00 	.word	0x44020c00
 8000b14:	42021400 	.word	0x42021400
 8000b18:	42020400 	.word	0x42020400
 8000b1c:	42021800 	.word	0x42021800
 8000b20:	10110000 	.word	0x10110000
 8000b24:	42020800 	.word	0x42020800

08000b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3a:	f002 f90d 	bl	8002d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40001000 	.word	0x40001000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>

08000b56 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	f06f 0001 	mvn.w	r0, #1
 8000b62:	f002 f9f5 	bl	8002f50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0d0      	sub	sp, #320	; 0x140
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000b7a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b94:	4618      	mov	r0, r3
 8000b96:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f00d ff7f 	bl	800eaa0 <memset>
  if(huart->Instance==LPUART1)
 8000ba2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ba6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a9e      	ldr	r2, [pc, #632]	; (8000e28 <HAL_UART_MspInit+0x2bc>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d15e      	bne.n	8000c72 <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bb8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000bbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000bc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bcc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 fe7c 	bl	80058d8 <HAL_RCCEx_PeriphCLKConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000be6:	f7ff ffb1 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bea:	4b90      	ldr	r3, [pc, #576]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000bec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000bf0:	4a8e      	ldr	r2, [pc, #568]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000bfa:	4b8c      	ldr	r3, [pc, #560]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000bfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c00:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c12:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c16:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b84      	ldr	r3, [pc, #528]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c1e:	4a83      	ldr	r2, [pc, #524]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c28:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c2e:	f003 0202 	and.w	r2, r3, #2
 8000c32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c44:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23c0      	movs	r3, #192	; 0xc0
 8000c48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4871      	ldr	r0, [pc, #452]	; (8000e30 <HAL_UART_MspInit+0x2c4>)
 8000c6c:	f003 fcbc 	bl	80045e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c70:	e0d5      	b.n	8000e1e <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000c72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a6d      	ldr	r2, [pc, #436]	; (8000e34 <HAL_UART_MspInit+0x2c8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d165      	bne.n	8000d50 <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c88:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000c8c:	f04f 0202 	mov.w	r2, #2
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fe15 	bl	80058d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000cb4:	f7ff ff4a 	bl	8000b4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb8:	4b5c      	ldr	r3, [pc, #368]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cbe:	4a5b      	ldr	r2, [pc, #364]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000cc8:	4b58      	ldr	r3, [pc, #352]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cce:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000cd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ce4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	4b51      	ldr	r3, [pc, #324]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cec:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cfc:	f003 0208 	and.w	r2, r3, #8
 8000d00:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d12:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d14:	2360      	movs	r3, #96	; 0x60
 8000d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d32:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000d36:	4619      	mov	r1, r3
 8000d38:	483f      	ldr	r0, [pc, #252]	; (8000e38 <HAL_UART_MspInit+0x2cc>)
 8000d3a:	f003 fc55 	bl	80045e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2105      	movs	r1, #5
 8000d42:	203b      	movs	r0, #59	; 0x3b
 8000d44:	f002 f904 	bl	8002f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d48:	203b      	movs	r0, #59	; 0x3b
 8000d4a:	f002 f91b 	bl	8002f84 <HAL_NVIC_EnableIRQ>
}
 8000d4e:	e066      	b.n	8000e1e <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8000d50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a37      	ldr	r2, [pc, #220]	; (8000e3c <HAL_UART_MspInit+0x2d0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d15d      	bne.n	8000e1e <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d66:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d6a:	f04f 0204 	mov.w	r2, #4
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d7e:	2200      	movs	r2, #0
 8000d80:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 fda6 	bl	80058d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8000d92:	f7ff fedb 	bl	8000b4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d9c:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dac:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000db0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000db4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dbe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000dc2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dda:	f003 0208 	and.w	r2, r3, #8
 8000dde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000de2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dec:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000df0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <HAL_UART_MspInit+0x2cc>)
 8000e1a:	f003 fbe5 	bl	80045e8 <HAL_GPIO_Init>
}
 8000e1e:	bf00      	nop
 8000e20:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	44002400 	.word	0x44002400
 8000e2c:	44020c00 	.word	0x44020c00
 8000e30:	42020400 	.word	0x42020400
 8000e34:	40004400 	.word	0x40004400
 8000e38:	42020c00 	.word	0x42020c00
 8000e3c:	40004800 	.word	0x40004800

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <HAL_InitTick+0xd8>)
 8000e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e4e:	4a32      	ldr	r2, [pc, #200]	; (8000f18 <HAL_InitTick+0xd8>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_InitTick+0xd8>)
 8000e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e66:	f107 020c 	add.w	r2, r7, #12
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fcf9 	bl	8005868 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d103      	bne.n	8000e88 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e80:	f004 fcb0 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8000e84:	6378      	str	r0, [r7, #52]	; 0x34
 8000e86:	e004      	b.n	8000e92 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e88:	f004 fcac 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	095b      	lsrs	r3, r3, #5
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_InitTick+0xdc>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	09db      	lsrs	r3, r3, #7
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_InitTick+0xe0>)
 8000ea4:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <HAL_InitTick+0xe4>)
 8000ea6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_InitTick+0xe0>)
 8000eaa:	2263      	movs	r2, #99	; 0x63
 8000eac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_InitTick+0xe0>)
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_InitTick+0xe0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_InitTick+0xe0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ec0:	4817      	ldr	r0, [pc, #92]	; (8000f20 <HAL_InitTick+0xe0>)
 8000ec2:	f009 fd89 	bl	800a9d8 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d118      	bne.n	8000f06 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <HAL_InitTick+0xe0>)
 8000ed6:	f009 fde1 	bl	800aa9c <HAL_TIM_Base_Start_IT>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10e      	bne.n	8000f06 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	d808      	bhi.n	8000f00 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	2031      	movs	r0, #49	; 0x31
 8000ef4:	f002 f82c 	bl	8002f50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_InitTick+0xe8>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e002      	b.n	8000f06 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000f06:	2031      	movs	r0, #49	; 0x31
 8000f08:	f002 f83c 	bl	8002f84 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3738      	adds	r7, #56	; 0x38
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	44020c00 	.word	0x44020c00
 8000f1c:	0a7c5ac5 	.word	0x0a7c5ac5
 8000f20:	2000025c 	.word	0x2000025c
 8000f24:	40001000 	.word	0x40001000
 8000f28:	2000002c 	.word	0x2000002c

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f60:	f003 fcc6 	bl	80048f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM6_IRQHandler+0x10>)
 8000f6e:	f009 fe43 	bl	800abf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000025c 	.word	0x2000025c

08000f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <USART2_IRQHandler+0x10>)
 8000f82:	f00a fa5f 	bl	800b444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000860 	.word	0x20000860

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f00d fd9a 	bl	800eaf8 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200a0000 	.word	0x200a0000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	200002a8 	.word	0x200002a8
 8000ff8:	20001518 	.word	0x20001518

08000ffc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <SystemInit+0xdc>)
 8001004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001008:	4a33      	ldr	r2, [pc, #204]	; (80010d8 <SystemInit+0xdc>)
 800100a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800100e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001012:	4b32      	ldr	r3, [pc, #200]	; (80010dc <SystemInit+0xe0>)
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <SystemInit+0xe0>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <SystemInit+0xe0>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <SystemInit+0xe0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	492c      	ldr	r1, [pc, #176]	; (80010dc <SystemInit+0xe0>)
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <SystemInit+0xe4>)
 800102c:	4013      	ands	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <SystemInit+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <SystemInit+0xe0>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <SystemInit+0xe0>)
 800103e:	2200      	movs	r2, #0
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <SystemInit+0xe0>)
 8001044:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <SystemInit+0xe8>)
 8001046:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <SystemInit+0xe0>)
 800104a:	2200      	movs	r2, #0
 800104c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <SystemInit+0xe0>)
 8001050:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <SystemInit+0xe8>)
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <SystemInit+0xe0>)
 8001056:	2200      	movs	r2, #0
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <SystemInit+0xe0>)
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <SystemInit+0xe8>)
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <SystemInit+0xe0>)
 8001062:	2200      	movs	r2, #0
 8001064:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <SystemInit+0xe0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <SystemInit+0xe0>)
 800106c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <SystemInit+0xe0>)
 8001074:	2200      	movs	r2, #0
 8001076:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <SystemInit+0xdc>)
 800107a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <SystemInit+0xec>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001088:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001090:	d003      	beq.n	800109a <SystemInit+0x9e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001098:	d117      	bne.n	80010ca <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SystemInit+0xec>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <SystemInit+0xec>)
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <SystemInit+0xf0>)
 80010aa:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <SystemInit+0xec>)
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <SystemInit+0xf4>)
 80010b0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <SystemInit+0xec>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <SystemInit+0xec>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <SystemInit+0xec>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <SystemInit+0xec>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	61d3      	str	r3, [r2, #28]
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	44020c00 	.word	0x44020c00
 80010e0:	eae2eae3 	.word	0xeae2eae3
 80010e4:	01010280 	.word	0x01010280
 80010e8:	40022000 	.word	0x40022000
 80010ec:	08192a3b 	.word	0x08192a3b
 80010f0:	4c5d6e7f 	.word	0x4c5d6e7f

080010f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f8:	f7ff ff80 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <LoopForever+0x6>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LoopForever+0xe>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	; (8001140 <LoopForever+0x16>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001122:	f00d fcef 	bl	800eb04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001126:	f7ff fa97 	bl	8000658 <main>

0800112a <LoopForever>:

LoopForever:
    b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   r0, =_estack
 800112c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001138:	0800f88c 	.word	0x0800f88c
  ldr r2, =_sbss
 800113c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001140:	20001518 	.word	0x20001518

08001144 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_IRQHandler>
	...

08001148 <CAN_Init>:
static volatile uint32_t err_int_cnt = 0;

static void CAN_ErrUpdate(uint8_t ch);

BOOL     CAN_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 800114e:	2301      	movs	r3, #1
 8001150:	603b      	str	r3, [r7, #0]

  for(int i=0; i<CAN_MAX_CH; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e070      	b.n	800123a <CAN_Init+0xf2>
  {
    can_tbl[i].is_init = TRUE;
 8001158:	4a3c      	ldr	r2, [pc, #240]	; (800124c <CAN_Init+0x104>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f240 516c 	movw	r1, #1388	; 0x56c
 8001160:	fb01 f303 	mul.w	r3, r1, r3
 8001164:	4413      	add	r3, r2
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
    can_tbl[i].is_open = TRUE;
 800116a:	4a38      	ldr	r2, [pc, #224]	; (800124c <CAN_Init+0x104>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	4413      	add	r3, r2
 8001178:	3304      	adds	r3, #4
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 800117e:	4a33      	ldr	r2, [pc, #204]	; (800124c <CAN_Init+0x104>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f240 516c 	movw	r1, #1388	; 0x56c
 8001186:	fb01 f303 	mul.w	r3, r1, r3
 800118a:	4413      	add	r3, r2
 800118c:	3308      	adds	r3, #8
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
    can_tbl[i].state = 0;
 8001192:	4a2e      	ldr	r2, [pc, #184]	; (800124c <CAN_Init+0x104>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f240 516c 	movw	r1, #1388	; 0x56c
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	4413      	add	r3, r2
 80011a0:	330c      	adds	r3, #12
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 80011a6:	4a29      	ldr	r2, [pc, #164]	; (800124c <CAN_Init+0x104>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f240 516c 	movw	r1, #1388	; 0x56c
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	3310      	adds	r3, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 80011ba:	4a24      	ldr	r2, [pc, #144]	; (800124c <CAN_Init+0x104>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f240 516c 	movw	r1, #1388	; 0x56c
 80011c2:	fb01 f303 	mul.w	r3, r1, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	3314      	adds	r3, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <CAN_Init+0x104>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f240 516c 	movw	r1, #1388	; 0x56c
 80011d6:	fb01 f303 	mul.w	r3, r1, r3
 80011da:	4413      	add	r3, r2
 80011dc:	3318      	adds	r3, #24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <CAN_Init+0x104>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f240 516c 	movw	r1, #1388	; 0x56c
 80011ea:	fb01 f303 	mul.w	r3, r1, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	331c      	adds	r3, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <CAN_Init+0x104>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f240 516c 	movw	r1, #1388	; 0x56c
 80011fe:	fb01 f303 	mul.w	r3, r1, r3
 8001202:	4413      	add	r3, r2
 8001204:	3320      	adds	r3, #32
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(CAN_MSG_t), CAN_MSG_RX_BUF_MAX);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f240 526c 	movw	r2, #1388	; 0x56c
 8001210:	fb02 f303 	mul.w	r3, r2, r3
 8001214:	3398      	adds	r3, #152	; 0x98
 8001216:	4a0d      	ldr	r2, [pc, #52]	; (800124c <CAN_Init+0x104>)
 8001218:	1898      	adds	r0, r3, r2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f240 526c 	movw	r2, #1388	; 0x56c
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	33a8      	adds	r3, #168	; 0xa8
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <CAN_Init+0x104>)
 8001228:	4413      	add	r3, r2
 800122a:	1d19      	adds	r1, r3, #4
 800122c:	2310      	movs	r3, #16
 800122e:	224c      	movs	r2, #76	; 0x4c
 8001230:	f00b ffc2 	bl	800d1b8 <qbufferCreateBySize>
  for(int i=0; i<CAN_MAX_CH; i++)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3301      	adds	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd8b      	ble.n	8001158 <CAN_Init+0x10>

  }
  return ret;
 8001240:	683b      	ldr	r3, [r7, #0]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200002ac 	.word	0x200002ac

08001250 <CAN_Open>:

BOOL     CAN_Open(uint8_t ch, CAN_MODE_t mode, CAN_FRAME_t frame, CAN_BAUD_t baud, CAN_BAUD_t baud_data)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4604      	mov	r4, r0
 8001258:	4608      	mov	r0, r1
 800125a:	4611      	mov	r1, r2
 800125c:	461a      	mov	r2, r3
 800125e:	4623      	mov	r3, r4
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	4603      	mov	r3, r0
 8001264:	71bb      	strb	r3, [r7, #6]
 8001266:	460b      	mov	r3, r1
 8001268:	717b      	strb	r3, [r7, #5]
 800126a:	4613      	mov	r3, r2
 800126c:	713b      	strb	r3, [r7, #4]
  BOOL ret = TRUE;
 800126e:	2301      	movs	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;

  p_can = &can_tbl[ch].hfdcan;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f240 526c 	movw	r2, #1388	; 0x56c
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	3330      	adds	r3, #48	; 0x30
 800127e:	4a90      	ldr	r2, [pc, #576]	; (80014c0 <CAN_Open+0x270>)
 8001280:	4413      	add	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
  if(ch >= CAN_MAX_CH) return FALSE;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <CAN_Open+0x3e>
 800128a:	2300      	movs	r3, #0
 800128c:	e114      	b.n	80014b8 <CAN_Open+0x268>

  switch(ch)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	f040 80a8 	bne.w	80013e6 <CAN_Open+0x196>
  {
    case _DEF_CAN1:
      p_can->Instance = FDCAN1;
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4a8a      	ldr	r2, [pc, #552]	; (80014c4 <CAN_Open+0x274>)
 800129a:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat = frame_tbl[frame];
 80012a2:	797b      	ldrb	r3, [r7, #5]
 80012a4:	4a88      	ldr	r2, [pc, #544]	; (80014c8 <CAN_Open+0x278>)
 80012a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode = mode_tbl[mode];
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	4a86      	ldr	r2, [pc, #536]	; (80014cc <CAN_Open+0x27c>)
 80012b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission = ENABLE;
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2201      	movs	r2, #1
 80012be:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause = ENABLE;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2201      	movs	r2, #1
 80012c4:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException = ENABLE;
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2201      	movs	r2, #1
 80012ca:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 80012cc:	4b80      	ldr	r3, [pc, #512]	; (80014d0 <CAN_Open+0x280>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	793b      	ldrb	r3, [r7, #4]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 80012dc:	4b7c      	ldr	r3, [pc, #496]	; (80014d0 <CAN_Open+0x280>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	793b      	ldrb	r3, [r7, #4]
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	4413      	add	r3, r2
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 80012ec:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <CAN_Open+0x280>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 80012fc:	4b74      	ldr	r3, [pc, #464]	; (80014d0 <CAN_Open+0x280>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	793b      	ldrb	r3, [r7, #4]
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4413      	add	r3, r2
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 800130c:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <CAN_Open+0x284>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 800131e:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <CAN_Open+0x284>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 8001330:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <CAN_Open+0x284>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	4413      	add	r3, r2
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <CAN_Open+0x284>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr = 28;
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	221c      	movs	r2, #28
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr = 8;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	2208      	movs	r2, #8
 800135e:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION; //FIFO MODE
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2200      	movs	r2, #0
 8001364:	63da      	str	r2, [r3, #60]	; 0x3c
      can_tbl[ch].mode                  = mode;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a55      	ldr	r2, [pc, #340]	; (80014c0 <CAN_Open+0x270>)
 800136a:	f240 516c 	movw	r1, #1388	; 0x56c
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	332c      	adds	r3, #44	; 0x2c
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4a50      	ldr	r2, [pc, #320]	; (80014c0 <CAN_Open+0x270>)
 800137e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001382:	fb01 f303 	mul.w	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	332d      	adds	r3, #45	; 0x2d
 800138a:	797a      	ldrb	r2, [r7, #5]
 800138c:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <CAN_Open+0x270>)
 8001392:	f240 516c 	movw	r1, #1388	; 0x56c
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	332e      	adds	r3, #46	; 0x2e
 800139e:	793a      	ldrb	r2, [r7, #4]
 80013a0:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <CAN_Open+0x270>)
 80013a6:	f240 516c 	movw	r1, #1388	; 0x56c
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	332f      	adds	r3, #47	; 0x2f
 80013b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80013b6:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4a41      	ldr	r2, [pc, #260]	; (80014c0 <CAN_Open+0x270>)
 80013bc:	f240 516c 	movw	r1, #1388	; 0x56c
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	3324      	adds	r3, #36	; 0x24
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4a3c      	ldr	r2, [pc, #240]	; (80014c0 <CAN_Open+0x270>)
 80013d0:	f240 516c 	movw	r1, #1388	; 0x56c
 80013d4:	fb01 f303 	mul.w	r3, r1, r3
 80013d8:	4413      	add	r3, r2
 80013da:	3328      	adds	r3, #40	; 0x28
 80013dc:	4a3e      	ldr	r2, [pc, #248]	; (80014d8 <CAN_Open+0x288>)
 80013de:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;

      ret = TRUE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]

      break;
 80013e4:	bf00      	nop
  }

  if(ret != TRUE)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d001      	beq.n	80013f0 <CAN_Open+0x1a0>
  {
    return FALSE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e063      	b.n	80014b8 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 80013f0:	6938      	ldr	r0, [r7, #16]
 80013f2:	f001 fe7b 	bl	80030ec <HAL_FDCAN_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <CAN_Open+0x1b0>
  {
    return FALSE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e05b      	b.n	80014b8 <CAN_Open+0x268>
  }

  CAN_ConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 8001400:	79f8      	ldrb	r0, [r7, #7]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	f000 f866 	bl	80014dc <CAN_ConfigFilter>
  CAN_ConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 8001410:	79f8      	ldrb	r0, [r7, #7]
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2201      	movs	r2, #1
 800141a:	2100      	movs	r1, #0
 800141c:	f000 f85e 	bl	80014dc <CAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8001420:	2300      	movs	r3, #0
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2300      	movs	r3, #0
 8001426:	2202      	movs	r2, #2
 8001428:	2102      	movs	r1, #2
 800142a:	6938      	ldr	r0, [r7, #16]
 800142c:	f002 f812 	bl	8003454 <HAL_FDCAN_ConfigGlobalFilter>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <CAN_Open+0x1ea>
  {
    return FALSE;
 8001436:	2300      	movs	r3, #0
 8001438:	e03e      	b.n	80014b8 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <CAN_Open+0x270>)
 800143e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001442:	fb01 f303 	mul.w	r3, r1, r3
 8001446:	4413      	add	r3, r2
 8001448:	3328      	adds	r3, #40	; 0x28
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	6938      	ldr	r0, [r7, #16]
 8001452:	f002 fade 	bl	8003a12 <HAL_FDCAN_ActivateNotification>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <CAN_Open+0x210>
  {
    return FALSE;
 800145c:	2300      	movs	r3, #0
 800145e:	e02b      	b.n	80014b8 <CAN_Open+0x268>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return FALSE;
 800146e:	2200      	movs	r2, #0
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	6938      	ldr	r0, [r7, #16]
 8001474:	f002 f81f 	bl	80034b6 <HAL_FDCAN_ConfigTxDelayCompensation>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <CAN_Open+0x232>
 800147e:	2300      	movs	r3, #0
 8001480:	e01a      	b.n	80014b8 <CAN_Open+0x268>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return FALSE;
 8001482:	6938      	ldr	r0, [r7, #16]
 8001484:	f002 f839 	bl	80034fa <HAL_FDCAN_EnableTxDelayCompensation>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <CAN_Open+0x242>
 800148e:	2300      	movs	r3, #0
 8001490:	e012      	b.n	80014b8 <CAN_Open+0x268>

  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 8001492:	6938      	ldr	r0, [r7, #16]
 8001494:	f002 f852 	bl	800353c <HAL_FDCAN_Start>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <CAN_Open+0x252>
  {
    return FALSE;
 800149e:	2300      	movs	r3, #0
 80014a0:	e00a      	b.n	80014b8 <CAN_Open+0x268>
  }

  can_tbl[ch].is_open = TRUE;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <CAN_Open+0x270>)
 80014a6:	f240 516c 	movw	r1, #1388	; 0x56c
 80014aa:	fb01 f303 	mul.w	r3, r1, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	3304      	adds	r3, #4
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

  return ret;
 80014b6:	697b      	ldr	r3, [r7, #20]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	200002ac 	.word	0x200002ac
 80014c4:	4000a400 	.word	0x4000a400
 80014c8:	0800f7f8 	.word	0x0800f7f8
 80014cc:	0800f804 	.word	0x0800f804
 80014d0:	20000004 	.word	0x20000004
 80014d4:	20000008 	.word	0x20000008
 80014d8:	000e0007 	.word	0x000e0007

080014dc <CAN_ConfigFilter>:
void     CAN_Close(uint8_t ch)
{

}
BOOL     CAN_ConfigFilter(uint8_t ch, uint8_t index, CAN_ID_TYPE_t id_type, uint32_t id, uint32_t id_mask)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	460b      	mov	r3, r1
 80014ea:	71bb      	strb	r3, [r7, #6]
 80014ec:	4613      	mov	r3, r2
 80014ee:	717b      	strb	r3, [r7, #5]
  BOOL ret = FALSE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24

  FDCAN_FilterTypeDef sFilterConfig;

  if (ch >= CAN_MAX_CH) return FALSE;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <CAN_ConfigFilter+0x22>
 80014fa:	2300      	movs	r3, #0
 80014fc:	e034      	b.n	8001568 <CAN_ConfigFilter+0x8c>


  if (id_type == CAN_STD)
 80014fe:	797b      	ldrb	r3, [r7, #5]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <CAN_ConfigFilter+0x2e>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e002      	b.n	8001510 <CAN_ConfigFilter+0x34>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800150a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150e:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <CAN_ConfigFilter+0x94>)
 8001514:	f240 516c 	movw	r1, #1388	; 0x56c
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	4413      	add	r3, r2
 800151e:	3324      	adds	r3, #36	; 0x24
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b40      	cmp	r3, #64	; 0x40
 8001524:	d102      	bne.n	800152c <CAN_ConfigFilter+0x50>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	e001      	b.n	8001530 <CAN_ConfigFilter+0x54>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK; //Classic filter
 8001534:	2302      	movs	r3, #2
 8001536:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 800153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153e:	623b      	str	r3, [r7, #32]


  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f240 526c 	movw	r2, #1388	; 0x56c
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	3330      	adds	r3, #48	; 0x30
 800154c:	4a08      	ldr	r2, [pc, #32]	; (8001570 <CAN_ConfigFilter+0x94>)
 800154e:	4413      	add	r3, r2
 8001550:	f107 020c 	add.w	r2, r7, #12
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f001 ff22 	bl	80033a0 <HAL_FDCAN_ConfigFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <CAN_ConfigFilter+0x8a>
  {
    ret = TRUE;
 8001562:	2301      	movs	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001568:	4618      	mov	r0, r3
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200002ac 	.word	0x200002ac

08001574 <CAN_MsgAvailable>:

uint32_t CAN_MsgAvailable(uint8_t ch)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d901      	bls.n	8001588 <CAN_MsgAvailable+0x14>
 8001584:	2300      	movs	r3, #0
 8001586:	e00b      	b.n	80015a0 <CAN_MsgAvailable+0x2c>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f240 526c 	movw	r2, #1388	; 0x56c
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	3398      	adds	r3, #152	; 0x98
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <CAN_MsgAvailable+0x34>)
 8001596:	4413      	add	r3, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f00b fef0 	bl	800d37e <qbufferAvailable>
 800159e:	4603      	mov	r3, r0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002ac 	.word	0x200002ac

080015ac <CAN_MsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return TRUE;
}

BOOL     CAN_MsgWrite(uint8_t ch, CAN_MSG_t *p_msg, uint32_t timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b090      	sub	sp, #64	; 0x40
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	73fb      	strb	r3, [r7, #15]
  {
    FDCAN_HandleTypeDef  *p_can;
    FDCAN_TxHeaderTypeDef tx_header;
    uint32_t pre_time;
    BOOL ret = TRUE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	63fb      	str	r3, [r7, #60]	; 0x3c


    if(ch > CAN_MAX_CH) return FALSE;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d901      	bls.n	80015c8 <CAN_MsgWrite+0x1c>
 80015c4:	2300      	movs	r3, #0
 80015c6:	e083      	b.n	80016d0 <CAN_MsgWrite+0x124>

    if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return FALSE;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <CAN_MsgWrite+0x12c>)
 80015cc:	f240 516c 	movw	r1, #1388	; 0x56c
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	3308      	adds	r3, #8
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <CAN_MsgWrite+0x3a>
 80015e2:	2300      	movs	r3, #0
 80015e4:	e074      	b.n	80016d0 <CAN_MsgWrite+0x124>


    p_can = &can_tbl[ch].hfdcan;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	f240 526c 	movw	r2, #1388	; 0x56c
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	3330      	adds	r3, #48	; 0x30
 80015f2:	4a39      	ldr	r2, [pc, #228]	; (80016d8 <CAN_MsgWrite+0x12c>)
 80015f4:	4413      	add	r3, r2
 80015f6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch(p_msg->id_type)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <CAN_MsgWrite+0x5c>
 8001602:	2b01      	cmp	r3, #1
 8001604:	d003      	beq.n	800160e <CAN_MsgWrite+0x62>
 8001606:	e006      	b.n	8001616 <CAN_MsgWrite+0x6a>
    {
      case CAN_STD :
        tx_header.IdType = FDCAN_STANDARD_ID;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
        break;
 800160c:	e003      	b.n	8001616 <CAN_MsgWrite+0x6a>

      case CAN_EXT :
        tx_header.IdType = FDCAN_EXTENDED_ID;
 800160e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001612:	617b      	str	r3, [r7, #20]
        break;
 8001614:	bf00      	nop
    }

    switch(p_msg->frame)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800161c:	2b02      	cmp	r3, #2
 800161e:	d011      	beq.n	8001644 <CAN_MsgWrite+0x98>
 8001620:	2b02      	cmp	r3, #2
 8001622:	dc16      	bgt.n	8001652 <CAN_MsgWrite+0xa6>
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <CAN_MsgWrite+0x82>
 8001628:	2b01      	cmp	r3, #1
 800162a:	d005      	beq.n	8001638 <CAN_MsgWrite+0x8c>
 800162c:	e011      	b.n	8001652 <CAN_MsgWrite+0xa6>
    {
      case CAN_CLASSIC:
        tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001636:	e00c      	b.n	8001652 <CAN_MsgWrite+0xa6>

      case CAN_FD_NO_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 8001638:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001642:	e006      	b.n	8001652 <CAN_MsgWrite+0xa6>

      case CAN_FD_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 8001644:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_ON;
 800164a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001650:	bf00      	nop
    }

    tx_header.Identifier          = p_msg->id;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
    tx_header.MessageMarker       = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
    tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
    tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800166e:	461a      	mov	r2, r3
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <CAN_MsgWrite+0x130>)
 8001672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001676:	61fb      	str	r3, [r7, #28]


    if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8001678:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800167a:	f002 f9b8 	bl	80039ee <HAL_FDCAN_GetTxFifoFreeLevel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <CAN_MsgWrite+0xdc>
    {
      return FALSE;
 8001684:	2300      	movs	r3, #0
 8001686:	e023      	b.n	80016d0 <CAN_MsgWrite+0x124>
    }


    pre_time = HAL_GetTick();
 8001688:	f001 fb7a 	bl	8002d80 <HAL_GetTick>
 800168c:	6378      	str	r0, [r7, #52]	; 0x34
    if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1d9a      	adds	r2, r3, #6
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800169a:	f001 ffe7 	bl	800366c <HAL_FDCAN_AddMessageToTxFifoQ>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d112      	bne.n	80016ca <CAN_MsgWrite+0x11e>
    {
      /* Wait transmission complete */
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 80016a4:	e00a      	b.n	80016bc <CAN_MsgWrite+0x110>
      {
        if (HAL_GetTick()-pre_time >= timeout)
 80016a6:	f001 fb6b 	bl	8002d80 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d802      	bhi.n	80016bc <CAN_MsgWrite+0x110>
        {
          ret = FALSE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80016ba:	e008      	b.n	80016ce <CAN_MsgWrite+0x122>
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 80016bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016be:	f002 f996 	bl	80039ee <HAL_FDCAN_GetTxFifoFreeLevel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ee      	beq.n	80016a6 <CAN_MsgWrite+0xfa>
 80016c8:	e001      	b.n	80016ce <CAN_MsgWrite+0x122>
        }
      }
    }
    else
    {
      ret = FALSE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    return ret;
 80016ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  }
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3740      	adds	r7, #64	; 0x40
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200002ac 	.word	0x200002ac
 80016dc:	0800f7b8 	.word	0x0800f7b8

080016e0 <CAN_MsgRead>:
BOOL     CAN_MsgRead(uint8_t ch, CAN_MSG_t *p_msg)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  BOOL ret = TRUE;
 80016ec:	2301      	movs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]

  if(ch > CAN_MAX_CH) return 0;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d901      	bls.n	80016fa <CAN_MsgRead+0x1a>
 80016f6:	2300      	movs	r3, #0
 80016f8:	e00e      	b.n	8001718 <CAN_MsgRead+0x38>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f240 526c 	movw	r2, #1388	; 0x56c
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	3398      	adds	r3, #152	; 0x98
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <CAN_MsgRead+0x40>)
 8001708:	4413      	add	r3, r2
 800170a:	2201      	movs	r2, #1
 800170c:	6839      	ldr	r1, [r7, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f00b fdca 	bl	800d2a8 <qbufferRead>
 8001714:	60f8      	str	r0, [r7, #12]

  return ret;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200002ac 	.word	0x200002ac

08001724 <CAN_GetRxErrCount>:

uint16_t CAN_GetRxErrCount(uint8_t ch)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d901      	bls.n	800173c <CAN_GetRxErrCount+0x18>
 8001738:	2300      	movs	r3, #0
 800173a:	e015      	b.n	8001768 <CAN_GetRxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f240 526c 	movw	r2, #1388	; 0x56c
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	3330      	adds	r3, #48	; 0x30
 8001748:	4a09      	ldr	r2, [pc, #36]	; (8001770 <CAN_GetRxErrCount+0x4c>)
 800174a:	4413      	add	r3, r2
 800174c:	f107 020c 	add.w	r2, r7, #12
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f002 f926 	bl	80039a4 <HAL_FDCAN_GetErrorCounters>
 8001758:	4603      	mov	r3, r0
 800175a:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 800175c:	7f7b      	ldrb	r3, [r7, #29]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <CAN_GetRxErrCount+0x42>
  {
    ret = error_counters.RxErrorCnt;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8001766:	8bfb      	ldrh	r3, [r7, #30]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200002ac 	.word	0x200002ac

08001774 <CAN_GetTxErrCount>:
uint16_t CAN_GetTxErrCount(uint8_t ch)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d901      	bls.n	800178c <CAN_GetTxErrCount+0x18>
 8001788:	2300      	movs	r3, #0
 800178a:	e015      	b.n	80017b8 <CAN_GetTxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f240 526c 	movw	r2, #1388	; 0x56c
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	3330      	adds	r3, #48	; 0x30
 8001798:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <CAN_GetTxErrCount+0x4c>)
 800179a:	4413      	add	r3, r2
 800179c:	f107 020c 	add.w	r2, r7, #12
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 f8fe 	bl	80039a4 <HAL_FDCAN_GetErrorCounters>
 80017a8:	4603      	mov	r3, r0
 80017aa:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 80017ac:	7f7b      	ldrb	r3, [r7, #29]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <CAN_GetTxErrCount+0x42>
  {
    ret = error_counters.TxErrorCnt;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 80017b6:	8bfb      	ldrh	r3, [r7, #30]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200002ac 	.word	0x200002ac

080017c4 <CAN_RxFifoCallback>:
  return HAL_FDCAN_GetState(&can_tbl[ch].hfdcan);
}


void CAN_RxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  CAN_MSG_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (CAN_MSG_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f240 526c 	movw	r2, #1388	; 0x56c
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	3398      	adds	r3, #152	; 0x98
 80017dc:	4a4b      	ldr	r2, [pc, #300]	; (800190c <CAN_RxFifoCallback+0x148>)
 80017de:	4413      	add	r3, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00b fdb9 	bl	800d358 <qbufferPeekWrite>
 80017e6:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4a48      	ldr	r2, [pc, #288]	; (800190c <CAN_RxFifoCallback+0x148>)
 80017ec:	f240 516c 	movw	r1, #1388	; 0x56c
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	3324      	adds	r3, #36	; 0x24
 80017f8:	6819      	ldr	r1, [r3, #0]
 80017fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fc:	3306      	adds	r3, #6
 80017fe:	f107 020c 	add.w	r2, r7, #12
 8001802:	6838      	ldr	r0, [r7, #0]
 8001804:	f001 ff76 	bl	80036f4 <HAL_FDCAN_GetRxMessage>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d179      	bne.n	8001902 <CAN_RxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <CAN_RxFifoCallback+0x60>
    {
      rx_buf->id      = rx_header.Identifier;
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001818:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 800181a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001822:	e006      	b.n	8001832 <CAN_RxFifoCallback+0x6e>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	4a35      	ldr	r2, [pc, #212]	; (8001910 <CAN_RxFifoCallback+0x14c>)
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	b29a      	uxth	r2, r3
 8001842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001844:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800184c:	d10d      	bne.n	800186a <CAN_RxFifoCallback+0xa6>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001854:	d104      	bne.n	8001860 <CAN_RxFifoCallback+0x9c>
      {
        rx_buf->frame = CAN_FD_BRS;
 8001856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001858:	2202      	movs	r2, #2
 800185a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800185e:	e008      	b.n	8001872 <CAN_RxFifoCallback+0xae>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 8001860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001868:	e003      	b.n	8001872 <CAN_RxFifoCallback+0xae>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != TRUE)
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f240 526c 	movw	r2, #1388	; 0x56c
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	3398      	adds	r3, #152	; 0x98
 800187e:	4a23      	ldr	r2, [pc, #140]	; (800190c <CAN_RxFifoCallback+0x148>)
 8001880:	4413      	add	r3, r2
 8001882:	2201      	movs	r2, #1
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f00b fcb5 	bl	800d1f6 <qbufferWrite>
 800188c:	4603      	mov	r3, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	d011      	beq.n	80018b6 <CAN_RxFifoCallback+0xf2>
    {
      can_tbl[ch].q_rx_full_cnt++;
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	491d      	ldr	r1, [pc, #116]	; (800190c <CAN_RxFifoCallback+0x148>)
 8001896:	f240 526c 	movw	r2, #1388	; 0x56c
 800189a:	fb03 f202 	mul.w	r2, r3, r2
 800189e:	440a      	add	r2, r1
 80018a0:	3214      	adds	r2, #20
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	3201      	adds	r2, #1
 80018a6:	4919      	ldr	r1, [pc, #100]	; (800190c <CAN_RxFifoCallback+0x148>)
 80018a8:	f240 506c 	movw	r0, #1388	; 0x56c
 80018ac:	fb00 f303 	mul.w	r3, r0, r3
 80018b0:	440b      	add	r3, r1
 80018b2:	3314      	adds	r3, #20
 80018b4:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <CAN_RxFifoCallback+0x148>)
 80018ba:	f240 516c 	movw	r1, #1388	; 0x56c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3394      	adds	r3, #148	; 0x94
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d01a      	beq.n	8001902 <CAN_RxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == TRUE)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <CAN_RxFifoCallback+0x148>)
 80018d0:	f240 516c 	movw	r1, #1388	; 0x56c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	3394      	adds	r3, #148	; 0x94
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018e0:	4798      	blx	r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d10c      	bne.n	8001902 <CAN_RxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f240 526c 	movw	r2, #1388	; 0x56c
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	3398      	adds	r3, #152	; 0x98
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <CAN_RxFifoCallback+0x148>)
 80018f6:	4413      	add	r3, r2
 80018f8:	2201      	movs	r2, #1
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00b fcd3 	bl	800d2a8 <qbufferRead>
      }
    }
  }
}
 8001902:	bf00      	nop
 8001904:	3738      	adds	r7, #56	; 0x38
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002ac 	.word	0x200002ac
 8001910:	0800f778 	.word	0x0800f778

08001914 <CAN_Recovery>:

  can_tbl[ch].handler = NULL;
}

void CAN_Recovery(uint8_t ch)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d828      	bhi.n	8001976 <CAN_Recovery+0x62>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f240 526c 	movw	r2, #1388	; 0x56c
 800192a:	fb02 f303 	mul.w	r3, r2, r3
 800192e:	3330      	adds	r3, #48	; 0x30
 8001930:	4a13      	ldr	r2, [pc, #76]	; (8001980 <CAN_Recovery+0x6c>)
 8001932:	4413      	add	r3, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f001 fe29 	bl	800358c <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f240 526c 	movw	r2, #1388	; 0x56c
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	3330      	adds	r3, #48	; 0x30
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <CAN_Recovery+0x6c>)
 8001948:	4413      	add	r3, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f001 fdf6 	bl	800353c <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	490b      	ldr	r1, [pc, #44]	; (8001980 <CAN_Recovery+0x6c>)
 8001954:	f240 526c 	movw	r2, #1388	; 0x56c
 8001958:	fb03 f202 	mul.w	r2, r3, r2
 800195c:	440a      	add	r2, r1
 800195e:	3210      	adds	r2, #16
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	3201      	adds	r2, #1
 8001964:	4906      	ldr	r1, [pc, #24]	; (8001980 <CAN_Recovery+0x6c>)
 8001966:	f240 506c 	movw	r0, #1388	; 0x56c
 800196a:	fb00 f303 	mul.w	r3, r0, r3
 800196e:	440b      	add	r3, r1
 8001970:	3310      	adds	r3, #16
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e000      	b.n	8001978 <CAN_Recovery+0x64>
  if(ch > CAN_MAX_CH) return;
 8001976:	bf00      	nop
}
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002ac 	.word	0x200002ac

08001984 <CAN_Update>:

BOOL     CAN_Update(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
  BOOL ret = FALSE;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  CAN_TBL_t *p_can;

  for (int i=0; i<CAN_MAX_CH; i++)
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	e02f      	b.n	80019f4 <CAN_Update+0x70>
  {
    p_can = &can_tbl[i];
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f240 526c 	movw	r2, #1388	; 0x56c
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <CAN_Update+0x80>)
 80019a0:	4413      	add	r3, r2
 80019a2:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7b1b      	ldrb	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <CAN_Update+0x2e>
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d011      	beq.n	80019d4 <CAN_Update+0x50>
 80019b0:	e01d      	b.n	80019ee <CAN_Update+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d014      	beq.n	80019e8 <CAN_Update+0x64>
        {
          CAN_Recovery(i);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ffa6 	bl	8001914 <CAN_Recovery>
          p_can->state = 1;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	731a      	strb	r2, [r3, #12]
          ret = TRUE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80019d2:	e009      	b.n	80019e8 <CAN_Update+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <CAN_Update+0x68>
        {
          p_can->state = 0;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	731a      	strb	r2, [r3, #12]
        }
        break;
 80019e6:	e001      	b.n	80019ec <CAN_Update+0x68>
        break;
 80019e8:	bf00      	nop
 80019ea:	e000      	b.n	80019ee <CAN_Update+0x6a>
        break;
 80019ec:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	ddcc      	ble.n	8001994 <CAN_Update+0x10>
    }
  }

  return ret;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200002ac 	.word	0x200002ac

08001a08 <CAN_ErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void     CAN_ErrPrint(uint8_t ch)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d822      	bhi.n	8001a5e <CAN_ErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <CAN_ErrPrint+0x60>)
 8001a1c:	f240 516c 	movw	r1, #1388	; 0x56c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3308      	adds	r3, #8
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) UART_Printf("  ERR : CAN_ERR_PASSIVE\n");
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <CAN_ErrPrint+0x34>
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <CAN_ErrPrint+0x64>)
 8001a38:	f001 f81c 	bl	8002a74 <UART_Printf>
  if (err_code & CAN_ERR_WARNING) UART_Printf("  ERR : CAN_ERR_WARNING\n");
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <CAN_ErrPrint+0x44>
 8001a46:	480a      	ldr	r0, [pc, #40]	; (8001a70 <CAN_ErrPrint+0x68>)
 8001a48:	f001 f814 	bl	8002a74 <UART_Printf>
  if (err_code & CAN_ERR_BUS_OFF) UART_Printf("  ERR : CAN_ERR_BUS_OFF\n");
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <CAN_ErrPrint+0x58>
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <CAN_ErrPrint+0x6c>)
 8001a58:	f001 f80c 	bl	8002a74 <UART_Printf>
 8001a5c:	e000      	b.n	8001a60 <CAN_ErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 8001a5e:	bf00      	nop
}
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200002ac 	.word	0x200002ac
 8001a6c:	0800f2f8 	.word	0x0800f2f8
 8001a70:	0800f314 	.word	0x0800f314
 8001a74:	0800f330 	.word	0x0800f330

08001a78 <CAN_ErrUpdate>:

void CAN_ErrUpdate(uint8_t ch)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f240 526c 	movw	r2, #1388	; 0x56c
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	3330      	adds	r3, #48	; 0x30
 8001a8e:	4a48      	ldr	r2, [pc, #288]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001a90:	4413      	add	r3, r2
 8001a92:	f107 020c 	add.w	r2, r7, #12
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 ff33 	bl	8003904 <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d014      	beq.n	8001ace <CAN_ErrUpdate+0x56>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4a42      	ldr	r2, [pc, #264]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001aa8:	f240 516c 	movw	r1, #1388	; 0x56c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	493c      	ldr	r1, [pc, #240]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001abe:	f240 506c 	movw	r0, #1388	; 0x56c
 8001ac2:	fb00 f303 	mul.w	r3, r0, r3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3308      	adds	r3, #8
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e013      	b.n	8001af6 <CAN_ErrUpdate+0x7e>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001ad2:	f240 516c 	movw	r1, #1388	; 0x56c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3308      	adds	r3, #8
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	4932      	ldr	r1, [pc, #200]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001ae8:	f240 506c 	movw	r0, #1388	; 0x56c
 8001aec:	fb00 f303 	mul.w	r3, r0, r3
 8001af0:	440b      	add	r3, r1
 8001af2:	3308      	adds	r3, #8
 8001af4:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d014      	beq.n	8001b26 <CAN_ErrUpdate+0xae>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	4a2c      	ldr	r2, [pc, #176]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001b00:	f240 516c 	movw	r1, #1388	; 0x56c
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f042 0202 	orr.w	r2, r2, #2
 8001b14:	4926      	ldr	r1, [pc, #152]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001b16:	f240 506c 	movw	r0, #1388	; 0x56c
 8001b1a:	fb00 f303 	mul.w	r3, r0, r3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3308      	adds	r3, #8
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e013      	b.n	8001b4e <CAN_ErrUpdate+0xd6>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001b2a:	f240 516c 	movw	r1, #1388	; 0x56c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3308      	adds	r3, #8
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f022 0202 	bic.w	r2, r2, #2
 8001b3e:	491c      	ldr	r1, [pc, #112]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001b40:	f240 506c 	movw	r0, #1388	; 0x56c
 8001b44:	fb00 f303 	mul.w	r3, r0, r3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d014      	beq.n	8001b7e <CAN_ErrUpdate+0x106>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001b58:	f240 516c 	movw	r1, #1388	; 0x56c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	3308      	adds	r3, #8
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f042 0204 	orr.w	r2, r2, #4
 8001b6c:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001b6e:	f240 506c 	movw	r0, #1388	; 0x56c
 8001b72:	fb00 f303 	mul.w	r3, r0, r3
 8001b76:	440b      	add	r3, r1
 8001b78:	3308      	adds	r3, #8
 8001b7a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8001b7c:	e013      	b.n	8001ba6 <CAN_ErrUpdate+0x12e>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001b82:	f240 516c 	movw	r1, #1388	; 0x56c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f022 0204 	bic.w	r2, r2, #4
 8001b96:	4906      	ldr	r1, [pc, #24]	; (8001bb0 <CAN_ErrUpdate+0x138>)
 8001b98:	f240 506c 	movw	r0, #1388	; 0x56c
 8001b9c:	fb00 f303 	mul.w	r3, r0, r3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	3738      	adds	r7, #56	; 0x38
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200002ac 	.word	0x200002ac

08001bb4 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]

  CAN_ErrUpdate(ch);
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff57 	bl	8001a78 <CAN_ErrUpdate>
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_FDCAN_ErrorCallback+0x54>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_FDCAN_ErrorCallback+0x54>)
 8001be8:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d013      	beq.n	8001c1a <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_FDCAN_ErrorCallback+0x58>)
 8001bf6:	f240 516c 	movw	r1, #1388	; 0x56c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3308      	adds	r3, #8
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	f042 0210 	orr.w	r2, r2, #16
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <HAL_FDCAN_ErrorCallback+0x58>)
 8001c0c:	f240 506c 	movw	r0, #1388	; 0x56c
 8001c10:	fb00 f303 	mul.w	r3, r0, r3
 8001c14:	440b      	add	r3, r1
 8001c16:	3308      	adds	r3, #8
 8001c18:	601a      	str	r2, [r3, #0]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000818 	.word	0x20000818
 8001c2c:	200002ac 	.word	0x200002ac

08001c30 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN1].hfdcan);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <FDCAN1_IT0_IRQHandler+0x10>)
 8001c36:	f001 ffd2 	bl	8003bde <HAL_FDCAN_IRQHandler>
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200002dc 	.word	0x200002dc

08001c44 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    CAN_RxFifoCallback(_DEF_CAN1, hfdcan);
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7ff fdb2 	bl	80017c4 <CAN_RxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001c72:	61d3      	str	r3, [r2, #28]
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d004      	beq.n	8001c88 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a02      	ldr	r2, [pc, #8]	; (8001c90 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001c86:	6213      	str	r3, [r2, #32]
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200002ac 	.word	0x200002ac

08001c94 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0cc      	sub	sp, #304	; 0x130
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ca2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cb8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	f00c feeb 	bl	800eaa0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a37      	ldr	r2, [pc, #220]	; (8001db4 <HAL_FDCAN_MspInit+0x120>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d166      	bne.n	8001daa <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ce0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0304 	mov.w	r3, #4
 8001cec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cf4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fde8 	bl	80058d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 8001d0e:	f7fe ff1d 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d12:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_FDCAN_MspInit+0x124>)
 8001d14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d18:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <HAL_FDCAN_MspInit+0x124>)
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <HAL_FDCAN_MspInit+0x124>)
 8001d24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d28:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d30:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d3a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d3e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_FDCAN_MspInit+0x124>)
 8001d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d46:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <HAL_FDCAN_MspInit+0x124>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_FDCAN_MspInit+0x124>)
 8001d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d68:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d6c:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d88:	2309      	movs	r3, #9
 8001d8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001d92:	4619      	mov	r1, r3
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <HAL_FDCAN_MspInit+0x128>)
 8001d96:	f002 fc27 	bl	80045e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	2027      	movs	r0, #39	; 0x27
 8001da0:	f001 f8d6 	bl	8002f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001da4:	2027      	movs	r0, #39	; 0x27
 8001da6:	f001 f8ed 	bl	8002f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001daa:	bf00      	nop
 8001dac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	4000a400 	.word	0x4000a400
 8001db8:	44020c00 	.word	0x44020c00
 8001dbc:	42020000 	.word	0x42020000

08001dc0 <CLI_FDCANTest>:
}

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (CAN_TEST, "CAN", "CAN [1(INFO),2(READ),3(SEND)] [SEND ID]", CLI_FDCANTest)
static void CLI_FDCANTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b0a1      	sub	sp, #132	; 0x84
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
  BOOL ret = FALSE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (nCount == 2)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	f040 822b 	bne.w	8002230 <CLI_FDCANTest+0x470>
  {
    switch(nFirst)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	f000 80d3 	beq.w	8001f88 <CLI_FDCANTest+0x1c8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	f200 8223 	bhi.w	8002230 <CLI_FDCANTest+0x470>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d003      	beq.n	8001df8 <CLI_FDCANTest+0x38>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d062      	beq.n	8001ebc <CLI_FDCANTest+0xfc>
          }
        }
        ret = TRUE;
    }
  }
}
 8001df6:	e21b      	b.n	8002230 <CLI_FDCANTest+0x470>
        for (int i=0; i<CAN_MAX_CH; i++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dfc:	e057      	b.n	8001eae <CLI_FDCANTest+0xee>
          DebugMsg(DEBUGMSG_CLI,"is_open       : %d\n", can_tbl[i].is_open);
 8001dfe:	4b94      	ldr	r3, [pc, #592]	; (8002050 <CLI_FDCANTest+0x290>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <CLI_FDCANTest+0x60>
 8001e06:	4a93      	ldr	r2, [pc, #588]	; (8002054 <CLI_FDCANTest+0x294>)
 8001e08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e0a:	f240 516c 	movw	r1, #1388	; 0x56c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	488f      	ldr	r0, [pc, #572]	; (8002058 <CLI_FDCANTest+0x298>)
 8001e1c:	f000 ff40 	bl	8002ca0 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8001e20:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <CLI_FDCANTest+0x290>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00c      	beq.n	8001e42 <CLI_FDCANTest+0x82>
 8001e28:	4a8a      	ldr	r2, [pc, #552]	; (8002054 <CLI_FDCANTest+0x294>)
 8001e2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e2c:	f240 516c 	movw	r1, #1388	; 0x56c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3314      	adds	r3, #20
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4887      	ldr	r0, [pc, #540]	; (800205c <CLI_FDCANTest+0x29c>)
 8001e3e:	f000 ff2f 	bl	8002ca0 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 8001e42:	4b83      	ldr	r3, [pc, #524]	; (8002050 <CLI_FDCANTest+0x290>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <CLI_FDCANTest+0xa4>
 8001e4a:	4a82      	ldr	r2, [pc, #520]	; (8002054 <CLI_FDCANTest+0x294>)
 8001e4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e4e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3318      	adds	r3, #24
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4880      	ldr	r0, [pc, #512]	; (8002060 <CLI_FDCANTest+0x2a0>)
 8001e60:	f000 ff1e 	bl	8002ca0 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 8001e64:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <CLI_FDCANTest+0x290>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00c      	beq.n	8001e86 <CLI_FDCANTest+0xc6>
 8001e6c:	4a79      	ldr	r2, [pc, #484]	; (8002054 <CLI_FDCANTest+0x294>)
 8001e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e70:	f240 516c 	movw	r1, #1388	; 0x56c
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	331c      	adds	r3, #28
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4878      	ldr	r0, [pc, #480]	; (8002064 <CLI_FDCANTest+0x2a4>)
 8001e82:	f000 ff0d 	bl	8002ca0 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 8001e86:	4b72      	ldr	r3, [pc, #456]	; (8002050 <CLI_FDCANTest+0x290>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00c      	beq.n	8001ea8 <CLI_FDCANTest+0xe8>
 8001e8e:	4a71      	ldr	r2, [pc, #452]	; (8002054 <CLI_FDCANTest+0x294>)
 8001e90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e92:	f240 516c 	movw	r1, #1388	; 0x56c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3320      	adds	r3, #32
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4871      	ldr	r0, [pc, #452]	; (8002068 <CLI_FDCANTest+0x2a8>)
 8001ea4:	f000 fefc 	bl	8002ca0 <svDebugMessage>
        for (int i=0; i<CAN_MAX_CH; i++)
 8001ea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eaa:	3301      	adds	r3, #1
 8001eac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001eae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	dda4      	ble.n	8001dfe <CLI_FDCANTest+0x3e>
        ret = TRUE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 8001eb8:	bf00      	nop
}
 8001eba:	e1b9      	b.n	8002230 <CLI_FDCANTest+0x470>
        uint32_t index = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	67bb      	str	r3, [r7, #120]	; 0x78
        while(svCLI_KeepLoop())
 8001ec0:	e05d      	b.n	8001f7e <CLI_FDCANTest+0x1be>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff fb56 	bl	8001574 <CAN_MsgAvailable>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d057      	beq.n	8001f7e <CLI_FDCANTest+0x1be>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff fc03 	bl	80016e0 <CAN_MsgRead>
            index %= 1000;
 8001eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001edc:	4a63      	ldr	r2, [pc, #396]	; (800206c <CLI_FDCANTest+0x2ac>)
 8001ede:	fba2 1203 	umull	r1, r2, r2, r3
 8001ee2:	0992      	lsrs	r2, r2, #6
 8001ee4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ee8:	fb01 f202 	mul.w	r2, r1, r2
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", index++);
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <CLI_FDCANTest+0x290>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <CLI_FDCANTest+0x146>
 8001ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	67ba      	str	r2, [r7, #120]	; 0x78
 8001efe:	4619      	mov	r1, r3
 8001f00:	485b      	ldr	r0, [pc, #364]	; (8002070 <CLI_FDCANTest+0x2b0>)
 8001f02:	f000 fecd 	bl	8002ca0 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8001f06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d107      	bne.n	8001f1e <CLI_FDCANTest+0x15e>
              DebugMsg(DEBUGMSG_CLI,"std ");
 8001f0e:	4b50      	ldr	r3, [pc, #320]	; (8002050 <CLI_FDCANTest+0x290>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <CLI_FDCANTest+0x16c>
 8001f16:	4857      	ldr	r0, [pc, #348]	; (8002074 <CLI_FDCANTest+0x2b4>)
 8001f18:	f000 fec2 	bl	8002ca0 <svDebugMessage>
 8001f1c:	e006      	b.n	8001f2c <CLI_FDCANTest+0x16c>
              DebugMsg(DEBUGMSG_CLI,"ext ");
 8001f1e:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <CLI_FDCANTest+0x290>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <CLI_FDCANTest+0x16c>
 8001f26:	4854      	ldr	r0, [pc, #336]	; (8002078 <CLI_FDCANTest+0x2b8>)
 8001f28:	f000 feba 	bl	8002ca0 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8001f2c:	4b48      	ldr	r3, [pc, #288]	; (8002050 <CLI_FDCANTest+0x290>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <CLI_FDCANTest+0x180>
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	8aba      	ldrh	r2, [r7, #20]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4850      	ldr	r0, [pc, #320]	; (800207c <CLI_FDCANTest+0x2bc>)
 8001f3c:	f000 feb0 	bl	8002ca0 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	677b      	str	r3, [r7, #116]	; 0x74
 8001f44:	e00f      	b.n	8001f66 <CLI_FDCANTest+0x1a6>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8001f46:	4b42      	ldr	r3, [pc, #264]	; (8002050 <CLI_FDCANTest+0x290>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <CLI_FDCANTest+0x1a0>
 8001f4e:	f107 0216 	add.w	r2, r7, #22
 8001f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f54:	4413      	add	r3, r2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4849      	ldr	r0, [pc, #292]	; (8002080 <CLI_FDCANTest+0x2c0>)
 8001f5c:	f000 fea0 	bl	8002ca0 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8001f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f62:	3301      	adds	r3, #1
 8001f64:	677b      	str	r3, [r7, #116]	; 0x74
 8001f66:	8abb      	ldrh	r3, [r7, #20]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	dbea      	blt.n	8001f46 <CLI_FDCANTest+0x186>
            DebugMsg(DEBUGMSG_CLI,"\n");
 8001f70:	4b37      	ldr	r3, [pc, #220]	; (8002050 <CLI_FDCANTest+0x290>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <CLI_FDCANTest+0x1be>
 8001f78:	4842      	ldr	r0, [pc, #264]	; (8002084 <CLI_FDCANTest+0x2c4>)
 8001f7a:	f000 fe91 	bl	8002ca0 <svDebugMessage>
        while(svCLI_KeepLoop())
 8001f7e:	f00b fb05 	bl	800d58c <svCLI_KeepLoop>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d19c      	bne.n	8001ec2 <CLI_FDCANTest+0x102>
        uint32_t num = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
        err_code = can_tbl[_DEF_CAN1].err_code;
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <CLI_FDCANTest+0x294>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	66bb      	str	r3, [r7, #104]	; 0x68
        while(svCLI_KeepLoop())
 8001f92:	e145      	b.n	8002220 <CLI_FDCANTest+0x460>
          if (HAL_GetTick()-pre_time >= 1000)
 8001f94:	f000 fef4 	bl	8002d80 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fa2:	f0c0 80be 	bcc.w	8002122 <CLI_FDCANTest+0x362>
            pre_time = HAL_GetTick();
 8001fa6:	f000 feeb 	bl	8002d80 <HAL_GetTick>
 8001faa:	6738      	str	r0, [r7, #112]	; 0x70
            msg.frame   = CAN_CLASSIC;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            msg.id_type = CAN_EXT;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg.dlc     = CAN_DLC_2;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            msg.id      = nAddress;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	613b      	str	r3, [r7, #16]
            msg.length  = 2;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	82bb      	strh	r3, [r7, #20]
            msg.data[0] = 1;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	75bb      	strb	r3, [r7, #22]
            msg.data[1] = 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	75fb      	strb	r3, [r7, #23]
            if (CAN_MsgWrite(_DEF_CAN1, &msg, 10) > 0)
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	220a      	movs	r2, #10
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff fae8 	bl	80015ac <CAN_MsgWrite>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d070      	beq.n	80020c4 <CLI_FDCANTest+0x304>
              index %= 1000;
 8001fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe4:	4a21      	ldr	r2, [pc, #132]	; (800206c <CLI_FDCANTest+0x2ac>)
 8001fe6:	fba2 1203 	umull	r1, r2, r2, r3
 8001fea:	0992      	lsrs	r2, r2, #6
 8001fec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ff0:	fb01 f202 	mul.w	r2, r1, r2
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	67bb      	str	r3, [r7, #120]	; 0x78
              DebugMsg(DEBUGMSG_CLI,"%03d(T) -> id ", num++);
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <CLI_FDCANTest+0x290>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <CLI_FDCANTest+0x24e>
 8002000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002006:	4619      	mov	r1, r3
 8002008:	481f      	ldr	r0, [pc, #124]	; (8002088 <CLI_FDCANTest+0x2c8>)
 800200a:	f000 fe49 	bl	8002ca0 <svDebugMessage>
              if (msg.id_type == CAN_STD)
 800200e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002012:	2b00      	cmp	r3, #0
 8002014:	d107      	bne.n	8002026 <CLI_FDCANTest+0x266>
                DebugMsg(DEBUGMSG_CLI,"std ");
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <CLI_FDCANTest+0x290>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <CLI_FDCANTest+0x274>
 800201e:	4815      	ldr	r0, [pc, #84]	; (8002074 <CLI_FDCANTest+0x2b4>)
 8002020:	f000 fe3e 	bl	8002ca0 <svDebugMessage>
 8002024:	e006      	b.n	8002034 <CLI_FDCANTest+0x274>
                DebugMsg(DEBUGMSG_CLI,"ext ");
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <CLI_FDCANTest+0x290>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <CLI_FDCANTest+0x274>
 800202e:	4812      	ldr	r0, [pc, #72]	; (8002078 <CLI_FDCANTest+0x2b8>)
 8002030:	f000 fe36 	bl	8002ca0 <svDebugMessage>
              DebugMsg(DEBUGMSG_CLI, ": 0x%08X, L:%02d, ", msg.id, msg.length);
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <CLI_FDCANTest+0x290>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <CLI_FDCANTest+0x288>
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	8aba      	ldrh	r2, [r7, #20]
 8002040:	4619      	mov	r1, r3
 8002042:	480e      	ldr	r0, [pc, #56]	; (800207c <CLI_FDCANTest+0x2bc>)
 8002044:	f000 fe2c 	bl	8002ca0 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	667b      	str	r3, [r7, #100]	; 0x64
 800204c:	e02e      	b.n	80020ac <CLI_FDCANTest+0x2ec>
 800204e:	bf00      	nop
 8002050:	20000028 	.word	0x20000028
 8002054:	200002ac 	.word	0x200002ac
 8002058:	0800f378 	.word	0x0800f378
 800205c:	0800f38c 	.word	0x0800f38c
 8002060:	0800f3a0 	.word	0x0800f3a0
 8002064:	0800f3b4 	.word	0x0800f3b4
 8002068:	0800f3c8 	.word	0x0800f3c8
 800206c:	10624dd3 	.word	0x10624dd3
 8002070:	0800f3dc 	.word	0x0800f3dc
 8002074:	0800f3ec 	.word	0x0800f3ec
 8002078:	0800f3f4 	.word	0x0800f3f4
 800207c:	0800f3fc 	.word	0x0800f3fc
 8002080:	0800f410 	.word	0x0800f410
 8002084:	0800f418 	.word	0x0800f418
 8002088:	0800f41c 	.word	0x0800f41c
                DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 800208c:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <CLI_FDCANTest+0x478>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <CLI_FDCANTest+0x2e6>
 8002094:	f107 0216 	add.w	r2, r7, #22
 8002098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4619      	mov	r1, r3
 80020a0:	4866      	ldr	r0, [pc, #408]	; (800223c <CLI_FDCANTest+0x47c>)
 80020a2:	f000 fdfd 	bl	8002ca0 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 80020a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020a8:	3301      	adds	r3, #1
 80020aa:	667b      	str	r3, [r7, #100]	; 0x64
 80020ac:	8abb      	ldrh	r3, [r7, #20]
 80020ae:	461a      	mov	r2, r3
 80020b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020b2:	4293      	cmp	r3, r2
 80020b4:	dbea      	blt.n	800208c <CLI_FDCANTest+0x2cc>
              DebugMsg(DEBUGMSG_CLI,"\n");
 80020b6:	4b60      	ldr	r3, [pc, #384]	; (8002238 <CLI_FDCANTest+0x478>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <CLI_FDCANTest+0x304>
 80020be:	4860      	ldr	r0, [pc, #384]	; (8002240 <CLI_FDCANTest+0x480>)
 80020c0:	f000 fdee 	bl	8002ca0 <svDebugMessage>
            if (CAN_GetRxErrCount(_DEF_CAN1) > 0 || CAN_GetTxErrCount(_DEF_CAN1) > 0)
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fb2d 	bl	8001724 <CAN_GetRxErrCount>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <CLI_FDCANTest+0x31c>
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff fb4f 	bl	8001774 <CAN_GetTxErrCount>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d011      	beq.n	8002100 <CLI_FDCANTest+0x340>
              DebugMsg(DEBUGMSG_CLI,"ErrCnt : %d, %d\n", CAN_GetRxErrCount(_DEF_CAN1), CAN_GetTxErrCount(_DEF_CAN1));
 80020dc:	4b56      	ldr	r3, [pc, #344]	; (8002238 <CLI_FDCANTest+0x478>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00d      	beq.n	8002100 <CLI_FDCANTest+0x340>
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fb1d 	bl	8001724 <CAN_GetRxErrCount>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461c      	mov	r4, r3
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7ff fb40 	bl	8001774 <CAN_GetTxErrCount>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	4621      	mov	r1, r4
 80020fa:	4852      	ldr	r0, [pc, #328]	; (8002244 <CLI_FDCANTest+0x484>)
 80020fc:	f000 fdd0 	bl	8002ca0 <svDebugMessage>
            if (err_int_cnt > 0)
 8002100:	4b51      	ldr	r3, [pc, #324]	; (8002248 <CLI_FDCANTest+0x488>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00c      	beq.n	8002122 <CLI_FDCANTest+0x362>
              DebugMsg(DEBUGMSG_CLI,"Cnt : %d\n",err_int_cnt);
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <CLI_FDCANTest+0x478>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <CLI_FDCANTest+0x35c>
 8002110:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <CLI_FDCANTest+0x488>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	484d      	ldr	r0, [pc, #308]	; (800224c <CLI_FDCANTest+0x48c>)
 8002118:	f000 fdc2 	bl	8002ca0 <svDebugMessage>
              err_int_cnt = 0;
 800211c:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <CLI_FDCANTest+0x488>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
          if (can_tbl[_DEF_CAN1].err_code != err_code)
 8002122:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <CLI_FDCANTest+0x490>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002128:	429a      	cmp	r2, r3
 800212a:	d00f      	beq.n	800214c <CLI_FDCANTest+0x38c>
            DebugMsg(DEBUGMSG_CLI, "ErrCode : 0x%X\n", can_tbl[_DEF_CAN1].err_code);
 800212c:	4b42      	ldr	r3, [pc, #264]	; (8002238 <CLI_FDCANTest+0x478>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <CLI_FDCANTest+0x380>
 8002134:	4b46      	ldr	r3, [pc, #280]	; (8002250 <CLI_FDCANTest+0x490>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4619      	mov	r1, r3
 800213a:	4846      	ldr	r0, [pc, #280]	; (8002254 <CLI_FDCANTest+0x494>)
 800213c:	f000 fdb0 	bl	8002ca0 <svDebugMessage>
            CAN_ErrPrint(_DEF_CAN1);
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fc61 	bl	8001a08 <CAN_ErrPrint>
            err_code = can_tbl[_DEF_CAN1].err_code;
 8002146:	4b42      	ldr	r3, [pc, #264]	; (8002250 <CLI_FDCANTest+0x490>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	66bb      	str	r3, [r7, #104]	; 0x68
          if (CAN_Update())
 800214c:	f7ff fc1a 	bl	8001984 <CAN_Update>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d006      	beq.n	8002164 <CLI_FDCANTest+0x3a4>
            DebugMsg(DEBUGMSG_CLI,"BusOff Recovery\n");
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <CLI_FDCANTest+0x478>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <CLI_FDCANTest+0x3a4>
 800215e:	483e      	ldr	r0, [pc, #248]	; (8002258 <CLI_FDCANTest+0x498>)
 8002160:	f000 fd9e 	bl	8002ca0 <svDebugMessage>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff fa05 	bl	8001574 <CAN_MsgAvailable>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d057      	beq.n	8002220 <CLI_FDCANTest+0x460>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4619      	mov	r1, r3
 8002176:	2000      	movs	r0, #0
 8002178:	f7ff fab2 	bl	80016e0 <CAN_MsgRead>
            index %= 1000;
 800217c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800217e:	4a37      	ldr	r2, [pc, #220]	; (800225c <CLI_FDCANTest+0x49c>)
 8002180:	fba2 1203 	umull	r1, r2, r2, r3
 8002184:	0992      	lsrs	r2, r2, #6
 8002186:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800218a:	fb01 f202 	mul.w	r2, r1, r2
 800218e:	1a9b      	subs	r3, r3, r2
 8002190:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", num++);
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <CLI_FDCANTest+0x478>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <CLI_FDCANTest+0x3e8>
 800219a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021a0:	4619      	mov	r1, r3
 80021a2:	482f      	ldr	r0, [pc, #188]	; (8002260 <CLI_FDCANTest+0x4a0>)
 80021a4:	f000 fd7c 	bl	8002ca0 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 80021a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <CLI_FDCANTest+0x400>
              DebugMsg(DEBUGMSG_CLI, "std ");
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <CLI_FDCANTest+0x478>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <CLI_FDCANTest+0x40e>
 80021b8:	482a      	ldr	r0, [pc, #168]	; (8002264 <CLI_FDCANTest+0x4a4>)
 80021ba:	f000 fd71 	bl	8002ca0 <svDebugMessage>
 80021be:	e006      	b.n	80021ce <CLI_FDCANTest+0x40e>
              DebugMsg(DEBUGMSG_CLI, "ext ");
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <CLI_FDCANTest+0x478>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <CLI_FDCANTest+0x40e>
 80021c8:	4827      	ldr	r0, [pc, #156]	; (8002268 <CLI_FDCANTest+0x4a8>)
 80021ca:	f000 fd69 	bl	8002ca0 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 80021ce:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <CLI_FDCANTest+0x478>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <CLI_FDCANTest+0x422>
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	8aba      	ldrh	r2, [r7, #20]
 80021da:	4619      	mov	r1, r3
 80021dc:	4823      	ldr	r0, [pc, #140]	; (800226c <CLI_FDCANTest+0x4ac>)
 80021de:	f000 fd5f 	bl	8002ca0 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	663b      	str	r3, [r7, #96]	; 0x60
 80021e6:	e00f      	b.n	8002208 <CLI_FDCANTest+0x448>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <CLI_FDCANTest+0x478>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <CLI_FDCANTest+0x442>
 80021f0:	f107 0216 	add.w	r2, r7, #22
 80021f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f6:	4413      	add	r3, r2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4619      	mov	r1, r3
 80021fc:	480f      	ldr	r0, [pc, #60]	; (800223c <CLI_FDCANTest+0x47c>)
 80021fe:	f000 fd4f 	bl	8002ca0 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8002202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002204:	3301      	adds	r3, #1
 8002206:	663b      	str	r3, [r7, #96]	; 0x60
 8002208:	8abb      	ldrh	r3, [r7, #20]
 800220a:	461a      	mov	r2, r3
 800220c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800220e:	4293      	cmp	r3, r2
 8002210:	dbea      	blt.n	80021e8 <CLI_FDCANTest+0x428>
            DebugMsg(DEBUGMSG_CLI,"\n");
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <CLI_FDCANTest+0x478>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <CLI_FDCANTest+0x460>
 800221a:	4809      	ldr	r0, [pc, #36]	; (8002240 <CLI_FDCANTest+0x480>)
 800221c:	f000 fd40 	bl	8002ca0 <svDebugMessage>
        while(svCLI_KeepLoop())
 8002220:	f00b f9b4 	bl	800d58c <svCLI_KeepLoop>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f aeb4 	bne.w	8001f94 <CLI_FDCANTest+0x1d4>
        ret = TRUE;
 800222c:	2301      	movs	r3, #1
 800222e:	65fb      	str	r3, [r7, #92]	; 0x5c
}
 8002230:	bf00      	nop
 8002232:	3784      	adds	r7, #132	; 0x84
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}
 8002238:	20000028 	.word	0x20000028
 800223c:	0800f410 	.word	0x0800f410
 8002240:	0800f418 	.word	0x0800f418
 8002244:	0800f42c 	.word	0x0800f42c
 8002248:	20000818 	.word	0x20000818
 800224c:	0800f440 	.word	0x0800f440
 8002250:	200002ac 	.word	0x200002ac
 8002254:	0800f44c 	.word	0x0800f44c
 8002258:	0800f45c 	.word	0x0800f45c
 800225c:	10624dd3 	.word	0x10624dd3
 8002260:	0800f3dc 	.word	0x0800f3dc
 8002264:	0800f3ec 	.word	0x0800f3ec
 8002268:	0800f3f4 	.word	0x0800f3f4
 800226c:	0800f3fc 	.word	0x0800f3fc

08002270 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	; 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 800228a:	f001 ff77 	bl	800417c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <Flash_Erase+0xb0>)
 8002290:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002294:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
 80022a6:	e013      	b.n	80022d0 <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f837 	bl	8002324 <Flash_InSector>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d106      	bne.n	80022ca <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da01      	bge.n	80022c6 <Flash_Erase+0x56>
      {
        start_sector = i;
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	3301      	adds	r3, #1
 80022ce:	623b      	str	r3, [r7, #32]
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	2b7f      	cmp	r3, #127	; 0x7f
 80022d4:	dde8      	ble.n	80022a8 <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db19      	blt.n	8002310 <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80022dc:	2304      	movs	r3, #4
 80022de:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 80022e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80022f2:	f107 0208 	add.w	r2, r7, #8
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 f86f 	bl	80043e0 <HAL_FLASHEx_Erase>
 8002302:	4603      	mov	r3, r0
 8002304:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 8002306:	7ffb      	ldrb	r3, [r7, #31]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <Flash_Erase+0xa0>
    {
      ret = TRUE;
 800230c:	2301      	movs	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 8002310:	f001 ff5a 	bl	80041c8 <HAL_FLASH_Lock>
  return ret;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002316:	4618      	mov	r0, r3
 8002318:	3730      	adds	r7, #48	; 0x30
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40022000 	.word	0x40022000

08002324 <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8002324:	b480      	push	{r7}
 8002326:	b08b      	sub	sp, #44	; 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800233c:	035b      	lsls	r3, r3, #13
 800233e:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8002346:	331f      	adds	r3, #31
 8002348:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3b01      	subs	r3, #1
 8002356:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8002358:	6a3a      	ldr	r2, [r7, #32]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	d305      	bcc.n	800236c <Flash_InSector+0x48>
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	429a      	cmp	r2, r3
 8002366:	d801      	bhi.n	800236c <Flash_InSector+0x48>
  {
    ret = TRUE;
 8002368:	2301      	movs	r3, #1
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	429a      	cmp	r2, r3
 8002372:	d305      	bcc.n	8002380 <Flash_InSector+0x5c>
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	d801      	bhi.n	8002380 <Flash_InSector+0x5c>
  {
    ret = TRUE;
 800237c:	2301      	movs	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	429a      	cmp	r2, r3
 8002386:	d305      	bcc.n	8002394 <Flash_InSector+0x70>
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	429a      	cmp	r2, r3
 800238e:	d801      	bhi.n	8002394 <Flash_InSector+0x70>
  {
    ret = TRUE;
 8002390:	2301      	movs	r3, #1
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	429a      	cmp	r2, r3
 800239a:	d305      	bcc.n	80023a8 <Flash_InSector+0x84>
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d801      	bhi.n	80023a8 <Flash_InSector+0x84>
  {
    ret = TRUE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	372c      	adds	r7, #44	; 0x2c
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b092      	sub	sp, #72	; 0x48
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 80023c2:	2301      	movs	r3, #1
 80023c4:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 80023c6:	f001 fed9 	bl	800417c <HAL_FLASH_Unlock>

  index = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 80023d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <Flash_Write+0x2e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	f200 808e 	bhi.w	8002500 <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 80023ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	2210      	movs	r2, #16
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00c fbab 	bl	800eb50 <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 80023fa:	f107 0210 	add.w	r2, r7, #16
 80023fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002400:	18d0      	adds	r0, r2, r3
 8002402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002404:	f1c3 0210 	rsb	r2, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4293      	cmp	r3, r2
 800240c:	bf28      	it	cs
 800240e:	4613      	movcs	r3, r2
 8002410:	461a      	mov	r2, r3
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	f00c fb9c 	bl	800eb50 <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8002418:	f107 0310 	add.w	r3, r7, #16
 800241c:	461a      	mov	r2, r3
 800241e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002420:	2002      	movs	r0, #2
 8002422:	f001 fe33 	bl	800408c <HAL_FLASH_Program>
 8002426:	4603      	mov	r3, r0
 8002428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 800242c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <Flash_Write+0x82>
    {
      return FALSE;
 8002434:	2300      	movs	r3, #0
 8002436:	e06c      	b.n	8002512 <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 8002438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d107      	bne.n	800244e <Flash_Write+0x98>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d804      	bhi.n	800244e <Flash_Write+0x98>
    {
      index += length;
 8002444:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	643b      	str	r3, [r7, #64]	; 0x40
 800244c:	e004      	b.n	8002458 <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 800244e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	3310      	adds	r3, #16
 8002456:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 8002458:	e052      	b.n	8002500 <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b10      	cmp	r3, #16
 8002462:	bf28      	it	cs
 8002464:	2310      	movcs	r3, #16
 8002466:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	2b10      	cmp	r3, #16
 800246c:	d117      	bne.n	800249e <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002472:	18d1      	adds	r1, r2, r3
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002478:	4413      	add	r3, r2
 800247a:	461a      	mov	r2, r3
 800247c:	2002      	movs	r0, #2
 800247e:	f001 fe05 	bl	800408c <HAL_FLASH_Program>
 8002482:	4603      	mov	r3, r0
 8002484:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8002488:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <Flash_Write+0xe0>
      {
        ret = FALSE;
 8002490:	2300      	movs	r3, #0
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002494:	e03a      	b.n	800250c <Flash_Write+0x156>
      }
      index += write_length;
 8002496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	4413      	add	r3, r2
 800249c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d02c      	beq.n	8002500 <Flash_Write+0x14a>
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d827      	bhi.n	8002500 <Flash_Write+0x14a>
    {
      offset = length - index;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024bc:	4413      	add	r3, r2
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 80024c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	2210      	movs	r2, #16
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00c fb41 	bl	800eb50 <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d2:	18d1      	adds	r1, r2, r3
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024da:	4618      	mov	r0, r3
 80024dc:	f00c fb38 	bl	800eb50 <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	461a      	mov	r2, r3
 80024e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024e8:	2002      	movs	r0, #2
 80024ea:	f001 fdcf 	bl	800408c <HAL_FLASH_Program>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 80024f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <Flash_Write+0x154>
      {
        return FALSE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e008      	b.n	8002512 <Flash_Write+0x15c>
  while(index < length)
 8002500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d3a8      	bcc.n	800245a <Flash_Write+0xa4>
 8002508:	e000      	b.n	800250c <Flash_Write+0x156>
      }
      break;
 800250a:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 800250c:	f001 fe5c 	bl	80041c8 <HAL_FLASH_Lock>
  return ret;
 8002510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002512:	4618      	mov	r0, r3
 8002514:	3748      	adds	r7, #72	; 0x48
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 800251a:	b480      	push	{r7}
 800251c:	b089      	sub	sp, #36	; 0x24
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e00c      	b.n	800254e <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4413      	add	r3, r2
 800253a:	7819      	ldrb	r1, [r3, #0]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	4413      	add	r3, r2
 8002544:	460a      	mov	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3301      	adds	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	d8ee      	bhi.n	8002534 <Flash_Read+0x1a>
  }



  return ret;
 8002556:	69bb      	ldr	r3, [r7, #24]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3724      	adds	r7, #36	; 0x24
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b09a      	sub	sp, #104	; 0x68
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b02      	cmp	r3, #2
 8002576:	f040 8085 	bne.w	8002684 <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d049      	beq.n	8002614 <CLI_FlashTest+0xb0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d871      	bhi.n	800266a <CLI_FlashTest+0x106>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d003      	beq.n	8002594 <CLI_FlashTest+0x30>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d029      	beq.n	80025e6 <CLI_FlashTest+0x82>
 8002592:	e06a      	b.n	800266a <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 8002594:	4b3d      	ldr	r3, [pc, #244]	; (800268c <CLI_FlashTest+0x128>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <CLI_FlashTest+0x3e>
 800259c:	483c      	ldr	r0, [pc, #240]	; (8002690 <CLI_FlashTest+0x12c>)
 800259e:	f000 fb7f 	bl	8002ca0 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	2210      	movs	r2, #16
 80025a8:	4619      	mov	r1, r3
 80025aa:	6838      	ldr	r0, [r7, #0]
 80025ac:	f7ff ffb5 	bl	800251a <Flash_Read>
        for(int i=0; i<16; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	667b      	str	r3, [r7, #100]	; 0x64
 80025b4:	e013      	b.n	80025de <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 80025b6:	4b35      	ldr	r3, [pc, #212]	; (800268c <CLI_FlashTest+0x128>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <CLI_FlashTest+0x74>
 80025be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	18d1      	adds	r1, r2, r3
 80025c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	3368      	adds	r3, #104	; 0x68
 80025ca:	443b      	add	r3, r7
 80025cc:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4830      	ldr	r0, [pc, #192]	; (8002694 <CLI_FlashTest+0x130>)
 80025d4:	f000 fb64 	bl	8002ca0 <svDebugMessage>
        for(int i=0; i<16; i++)
 80025d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025da:	3301      	adds	r3, #1
 80025dc:	667b      	str	r3, [r7, #100]	; 0x64
 80025de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e0:	2b0f      	cmp	r3, #15
 80025e2:	dde8      	ble.n	80025b6 <CLI_FlashTest+0x52>
        }
        break;
 80025e4:	e04e      	b.n	8002684 <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 80025e6:	2110      	movs	r1, #16
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	f7ff fe41 	bl	8002270 <Flash_Erase>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d107      	bne.n	8002604 <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 80025f4:	4b25      	ldr	r3, [pc, #148]	; (800268c <CLI_FlashTest+0x128>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d03e      	beq.n	800267a <CLI_FlashTest+0x116>
 80025fc:	4826      	ldr	r0, [pc, #152]	; (8002698 <CLI_FlashTest+0x134>)
 80025fe:	f000 fb4f 	bl	8002ca0 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 8002602:	e03a      	b.n	800267a <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <CLI_FlashTest+0x128>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d036      	beq.n	800267a <CLI_FlashTest+0x116>
 800260c:	4823      	ldr	r0, [pc, #140]	; (800269c <CLI_FlashTest+0x138>)
 800260e:	f000 fb47 	bl	8002ca0 <svDebugMessage>
        break;
 8002612:	e032      	b.n	800267a <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	663b      	str	r3, [r7, #96]	; 0x60
 8002618:	e00a      	b.n	8002630 <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 800261a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800261c:	b2d9      	uxtb	r1, r3
 800261e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002624:	4413      	add	r3, r2
 8002626:	460a      	mov	r2, r1
 8002628:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 800262a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800262c:	3301      	adds	r3, #1
 800262e:	663b      	str	r3, [r7, #96]	; 0x60
 8002630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002632:	2b0f      	cmp	r3, #15
 8002634:	ddf1      	ble.n	800261a <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 8002636:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800263a:	2210      	movs	r2, #16
 800263c:	4619      	mov	r1, r3
 800263e:	6838      	ldr	r0, [r7, #0]
 8002640:	f7ff feb9 	bl	80023b6 <Flash_Write>
 8002644:	4603      	mov	r3, r0
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <CLI_FlashTest+0x128>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d015      	beq.n	800267e <CLI_FlashTest+0x11a>
 8002652:	4813      	ldr	r0, [pc, #76]	; (80026a0 <CLI_FlashTest+0x13c>)
 8002654:	f000 fb24 	bl	8002ca0 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 8002658:	e011      	b.n	800267e <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <CLI_FlashTest+0x128>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <CLI_FlashTest+0x11a>
 8002662:	4810      	ldr	r0, [pc, #64]	; (80026a4 <CLI_FlashTest+0x140>)
 8002664:	f000 fb1c 	bl	8002ca0 <svDebugMessage>
        break;
 8002668:	e009      	b.n	800267e <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <CLI_FlashTest+0x128>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <CLI_FlashTest+0x11e>
 8002672:	480d      	ldr	r0, [pc, #52]	; (80026a8 <CLI_FlashTest+0x144>)
 8002674:	f000 fb14 	bl	8002ca0 <svDebugMessage>
        break;
 8002678:	e003      	b.n	8002682 <CLI_FlashTest+0x11e>
        break;
 800267a:	bf00      	nop
 800267c:	e002      	b.n	8002684 <CLI_FlashTest+0x120>
        break;
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <CLI_FlashTest+0x120>
        break;
 8002682:	bf00      	nop
    }
  }
}
 8002684:	bf00      	nop
 8002686:	3768      	adds	r7, #104	; 0x68
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000028 	.word	0x20000028
 8002690:	0800f4b4 	.word	0x0800f4b4
 8002694:	0800f4e4 	.word	0x0800f4e4
 8002698:	0800f4f4 	.word	0x0800f4f4
 800269c:	0800f500 	.word	0x0800f500
 80026a0:	0800f50c 	.word	0x0800f50c
 80026a4:	0800f518 	.word	0x0800f518
 80026a8:	0800f524 	.word	0x0800f524

080026ac <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <LED_Init+0x1c>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <LED_Init+0x20>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	2000081c 	.word	0x2000081c
 80026cc:	20000820 	.word	0x20000820

080026d0 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <LED_OnOff+0x7c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d02d      	beq.n	8002740 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <LED_OnOff+0x80>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d02c      	beq.n	8002746 <LED_OnOff+0x76>
  {
    switch(eLED){
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d010      	beq.n	8002714 <LED_OnOff+0x44>
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	dc26      	bgt.n	8002744 <LED_OnOff+0x74>
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d002      	beq.n	8002700 <LED_OnOff+0x30>
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d005      	beq.n	800270a <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 80026fe:	e021      	b.n	8002744 <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <LED_OnOff+0x84>)
 8002702:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 8002704:	2301      	movs	r3, #1
 8002706:	817b      	strh	r3, [r7, #10]
        break;
 8002708:	e009      	b.n	800271e <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <LED_OnOff+0x88>)
 800270c:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 800270e:	2310      	movs	r3, #16
 8002710:	817b      	strh	r3, [r7, #10]
        break;
 8002712:	e004      	b.n	800271e <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <LED_OnOff+0x8c>)
 8002716:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 8002718:	2310      	movs	r3, #16
 800271a:	817b      	strh	r3, [r7, #10]
        break;
 800271c:	bf00      	nop
        break;
    }
    if(bOn)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d006      	beq.n	8002732 <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	2201      	movs	r2, #1
 8002728:	4619      	mov	r1, r3
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f002 f8ae 	bl	800488c <HAL_GPIO_WritePin>
 8002730:	e009      	b.n	8002746 <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	2200      	movs	r2, #0
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f002 f8a7 	bl	800488c <HAL_GPIO_WritePin>
 800273e:	e002      	b.n	8002746 <LED_OnOff+0x76>
    return;
 8002740:	bf00      	nop
 8002742:	e000      	b.n	8002746 <LED_OnOff+0x76>
        return;
 8002744:	bf00      	nop
    }
  }
}
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000820 	.word	0x20000820
 8002750:	2000081c 	.word	0x2000081c
 8002754:	42020400 	.word	0x42020400
 8002758:	42021400 	.word	0x42021400
 800275c:	42021800 	.word	0x42021800

08002760 <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	e02c      	b.n	80027c6 <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 800276c:	2101      	movs	r1, #1
 800276e:	2001      	movs	r0, #1
 8002770:	f7ff ffae 	bl	80026d0 <LED_OnOff>
    HAL_Delay(50);
 8002774:	2032      	movs	r0, #50	; 0x32
 8002776:	f000 fb0f 	bl	8002d98 <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 800277a:	2100      	movs	r1, #0
 800277c:	2001      	movs	r0, #1
 800277e:	f7ff ffa7 	bl	80026d0 <LED_OnOff>
    HAL_Delay(50);
 8002782:	2032      	movs	r0, #50	; 0x32
 8002784:	f000 fb08 	bl	8002d98 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 8002788:	2101      	movs	r1, #1
 800278a:	2002      	movs	r0, #2
 800278c:	f7ff ffa0 	bl	80026d0 <LED_OnOff>
    HAL_Delay(50);
 8002790:	2032      	movs	r0, #50	; 0x32
 8002792:	f000 fb01 	bl	8002d98 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 8002796:	2100      	movs	r1, #0
 8002798:	2002      	movs	r0, #2
 800279a:	f7ff ff99 	bl	80026d0 <LED_OnOff>
    HAL_Delay(50);
 800279e:	2032      	movs	r0, #50	; 0x32
 80027a0:	f000 fafa 	bl	8002d98 <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 80027a4:	2101      	movs	r1, #1
 80027a6:	2003      	movs	r0, #3
 80027a8:	f7ff ff92 	bl	80026d0 <LED_OnOff>
    HAL_Delay(50);
 80027ac:	2032      	movs	r0, #50	; 0x32
 80027ae:	f000 faf3 	bl	8002d98 <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 80027b2:	2100      	movs	r1, #0
 80027b4:	2003      	movs	r0, #3
 80027b6:	f7ff ff8b 	bl	80026d0 <LED_OnOff>
    HAL_Delay(50);
 80027ba:	2032      	movs	r0, #50	; 0x32
 80027bc:	f000 faec 	bl	8002d98 <HAL_Delay>
  for(int i =0; i<3; i++)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	ddcf      	ble.n	800276c <LED_SimpleAnimation+0xc>
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d10b      	bne.n	8002802 <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf14      	ite	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	2300      	moveq	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7ff ff67 	bl	80026d0 <LED_OnOff>
  }
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8002812:	2301      	movs	r3, #1
 8002814:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <RESET_Init+0x80>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 8002826:	2301      	movs	r3, #1
 8002828:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 800282a:	4919      	ldr	r1, [pc, #100]	; (8002890 <RESET_Init+0x84>)
 800282c:	2002      	movs	r0, #2
 800282e:	f000 f845 	bl	80028bc <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <RESET_Init+0x88>)
 8002834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01c      	beq.n	800287a <RESET_Init+0x6e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d019      	beq.n	800287a <RESET_Init+0x6e>
 8002846:	2002      	movs	r0, #2
 8002848:	f000 f828 	bl	800289c <RTC_ReadBackupReg>
 800284c:	4603      	mov	r3, r0
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <RESET_Init+0x84>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d112      	bne.n	800287a <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 8002854:	2001      	movs	r0, #1
 8002856:	f000 f821 	bl	800289c <RTC_ReadBackupReg>
 800285a:	4603      	mov	r3, r0
 800285c:	3301      	adds	r3, #1
 800285e:	4619      	mov	r1, r3
 8002860:	2001      	movs	r0, #1
 8002862:	f000 f82b 	bl	80028bc <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 8002866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800286a:	f000 fa95 	bl	8002d98 <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 800286e:	2001      	movs	r0, #1
 8002870:	f000 f814 	bl	800289c <RTC_ReadBackupReg>
 8002874:	4603      	mov	r3, r0
 8002876:	4a08      	ldr	r2, [pc, #32]	; (8002898 <RESET_Init+0x8c>)
 8002878:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 800287a:	2100      	movs	r1, #0
 800287c:	2001      	movs	r0, #1
 800287e:	f000 f81d 	bl	80028bc <RTC_WriteBackupReg>

  return ret;
 8002882:	683b      	ldr	r3, [r7, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	e000edf0 	.word	0xe000edf0
 8002890:	20240215 	.word	0x20240215
 8002894:	44020c00 	.word	0x44020c00
 8002898:	20000824 	.word	0x20000824

0800289c <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4804      	ldr	r0, [pc, #16]	; (80028b8 <RTC_ReadBackupReg+0x1c>)
 80028a8:	f008 f880 	bl	800a9ac <HAL_RTCEx_BKUPRead>
 80028ac:	4603      	mov	r3, r0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000828 	.word	0x20000828

080028bc <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4803      	ldr	r0, [pc, #12]	; (80028d8 <RTC_WriteBackupReg+0x1c>)
 80028cc:	f008 f856 	bl	800a97c <HAL_RTCEx_BKUPWrite>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000828 	.word	0x20000828

080028dc <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d177      	bne.n	80029de <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <UART_Init+0x10c>)
 80028f0:	4a3e      	ldr	r2, [pc, #248]	; (80029ec <UART_Init+0x110>)
 80028f2:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 80028f4:	4a3c      	ldr	r2, [pc, #240]	; (80029e8 <UART_Init+0x10c>)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028fa:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <UART_Init+0x10c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8002900:	4b39      	ldr	r3, [pc, #228]	; (80029e8 <UART_Init+0x10c>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <UART_Init+0x10c>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 800290c:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <UART_Init+0x10c>)
 800290e:	220c      	movs	r2, #12
 8002910:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002912:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <UART_Init+0x10c>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002918:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <UART_Init+0x10c>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800291e:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <UART_Init+0x10c>)
 8002920:	2200      	movs	r2, #0
 8002922:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002924:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <UART_Init+0x10c>)
 8002926:	2200      	movs	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800292a:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <UART_Init+0x10c>)
 800292c:	2200      	movs	r2, #0
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 8002930:	482d      	ldr	r0, [pc, #180]	; (80029e8 <UART_Init+0x10c>)
 8002932:	f008 fc37 	bl	800b1a4 <HAL_UART_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <UART_Init+0x72>
      {
        Error_Handler();
 800293c:	f7fe f906 	bl	8000b4c <Error_Handler>
        s_bUARTConnected = FALSE;
 8002940:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <UART_Init+0x114>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <UART_Init+0x118>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e031      	b.n	80029b2 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800294e:	2100      	movs	r1, #0
 8002950:	4825      	ldr	r0, [pc, #148]	; (80029e8 <UART_Init+0x10c>)
 8002952:	f00a fb66 	bl	800d022 <HAL_UARTEx_SetTxFifoThreshold>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <UART_Init+0x92>
      {
        Error_Handler();
 800295c:	f7fe f8f6 	bl	8000b4c <Error_Handler>
        s_bUARTConnected = FALSE;
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <UART_Init+0x114>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8002966:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <UART_Init+0x118>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e021      	b.n	80029b2 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296e:	2100      	movs	r1, #0
 8002970:	481d      	ldr	r0, [pc, #116]	; (80029e8 <UART_Init+0x10c>)
 8002972:	f00a fb94 	bl	800d09e <HAL_UARTEx_SetRxFifoThreshold>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <UART_Init+0xb2>
      {
        Error_Handler();
 800297c:	f7fe f8e6 	bl	8000b4c <Error_Handler>
        s_bUARTConnected = FALSE;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <UART_Init+0x114>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8002986:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <UART_Init+0x118>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e011      	b.n	80029b2 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800298e:	4816      	ldr	r0, [pc, #88]	; (80029e8 <UART_Init+0x10c>)
 8002990:	f00a fb0e 	bl	800cfb0 <HAL_UARTEx_DisableFifoMode>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <UART_Init+0xd0>
      {
        Error_Handler();
 800299a:	f7fe f8d7 	bl	8000b4c <Error_Handler>
        s_bUARTConnected = FALSE;
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <UART_Init+0x114>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <UART_Init+0x118>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e002      	b.n	80029b2 <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 80029ac:	4812      	ldr	r0, [pc, #72]	; (80029f8 <UART_Init+0x11c>)
 80029ae:	f00b fb00 	bl	800dfb2 <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 80029b2:	2201      	movs	r2, #1
 80029b4:	4911      	ldr	r1, [pc, #68]	; (80029fc <UART_Init+0x120>)
 80029b6:	480c      	ldr	r0, [pc, #48]	; (80029e8 <UART_Init+0x10c>)
 80029b8:	f008 fce2 	bl	800b380 <HAL_UART_Receive_IT>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <UART_Init+0x114>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <UART_Init+0x118>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 80029ce:	e007      	b.n	80029e0 <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <UART_Init+0x114>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <UART_Init+0x118>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]
      break;
 80029dc:	e000      	b.n	80029e0 <UART_Init+0x104>
    default:
      break;
 80029de:	bf00      	nop
  }
  return;
 80029e0:	bf00      	nop
}
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000860 	.word	0x20000860
 80029ec:	40004400 	.word	0x40004400
 80029f0:	2000085c 	.word	0x2000085c
 80029f4:	20000974 	.word	0x20000974
 80029f8:	2000000c 	.word	0x2000000c
 80029fc:	20000858 	.word	0x20000858

08002a00 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 8002a0a:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <IsUartConnected+0x1c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000085c 	.word	0x2000085c

08002a20 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d110      	bne.n	8002a5c <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 8002a3a:	88ba      	ldrh	r2, [r7, #4]
 8002a3c:	2364      	movs	r3, #100	; 0x64
 8002a3e:	6839      	ldr	r1, [r7, #0]
 8002a40:	480a      	ldr	r0, [pc, #40]	; (8002a6c <UART_Write+0x4c>)
 8002a42:	f008 fbff 	bl	800b244 <HAL_UART_Transmit>
 8002a46:	4603      	mov	r3, r0
 8002a48:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d107      	bne.n	8002a60 <UART_Write+0x40>
      {
        ret = Len;
 8002a50:	88bb      	ldrh	r3, [r7, #4]
 8002a52:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <UART_Write+0x50>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
      }
      break;
 8002a5a:	e001      	b.n	8002a60 <UART_Write+0x40>
    default:
      break;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <UART_Write+0x42>
      break;
 8002a60:	bf00      	nop
  }
  return ret;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000860 	.word	0x20000860
 8002a70:	20000974 	.word	0x20000974

08002a74 <UART_Printf>:
  return ret;
}


uint32_t UART_Printf(uint8_t ch, char* fmt, ...) // ... arg
{
 8002a74:	b40e      	push	{r1, r2, r3}
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b0c7      	sub	sp, #284	; 0x11c
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a82:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002a86:	701a      	strb	r2, [r3, #0]
  va_list args;

  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002a88:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002a8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a94:	601a      	str	r2, [r3, #0]
  // printf 결과를 buf 에 저장
  len = vsnprintf(buf, 256, fmt, args);
 8002a96:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a9e:	f107 0010 	add.w	r0, r7, #16
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002aa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aac:	f00b ffca 	bl	800ea44 <vsniprintf>
 8002ab0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = UART_Write(ch, (uint8_t *)buf, len);
 8002ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	f107 0110 	add.w	r1, r7, #16
 8002abe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ac2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ffa9 	bl	8002a20 <UART_Write>
 8002ace:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8002ad2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002adc:	46bd      	mov	sp, r7
 8002ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ae2:	b003      	add	sp, #12
 8002ae4:	4770      	bx	lr
	...

08002ae8 <Uart_Available>:

uint32_t Uart_Available(uint8_t ch)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <Uart_Available+0x1e>
  {
    case _DEF_UART1:
      ret = svRingBuffer_GetCount(&g_uartRxBuff);
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <Uart_Available+0x28>)
 8002afe:	f00b fa36 	bl	800df6e <svRingBuffer_GetCount>
 8002b02:	60f8      	str	r0, [r7, #12]
      break;
 8002b04:	bf00      	nop
  }

  return ret;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	2000000c 	.word	0x2000000c

08002b14 <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <HAL_UART_RxCpltCallback+0x40>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d112      	bne.n	8002b4c <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_UART_RxCpltCallback+0x44>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	480b      	ldr	r0, [pc, #44]	; (8002b5c <HAL_UART_RxCpltCallback+0x48>)
 8002b2e:	f00b fa58 	bl	800dfe2 <svRingBuffer_Push>
 8002b32:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f113 0f02 	cmn.w	r3, #2
 8002b3a:	d102      	bne.n	8002b42 <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8002b3c:	4807      	ldr	r0, [pc, #28]	; (8002b5c <HAL_UART_RxCpltCallback+0x48>)
 8002b3e:	f00b fa38 	bl	800dfb2 <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8002b42:	2201      	movs	r2, #1
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_UART_RxCpltCallback+0x44>)
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <HAL_UART_RxCpltCallback+0x4c>)
 8002b48:	f008 fc1a 	bl	800b380 <HAL_UART_Receive_IT>
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40004400 	.word	0x40004400
 8002b58:	20000858 	.word	0x20000858
 8002b5c:	2000000c 	.word	0x2000000c
 8002b60:	20000860 	.word	0x20000860

08002b64 <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8002b68:	4806      	ldr	r0, [pc, #24]	; (8002b84 <svDebugRxChar+0x20>)
 8002b6a:	f00b fa00 	bl	800df6e <svRingBuffer_GetCount>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8002b74:	4803      	ldr	r0, [pc, #12]	; (8002b84 <svDebugRxChar+0x20>)
 8002b76:	f00b fa68 	bl	800e04a <svRingBuffer_Pop>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	e000      	b.n	8002b80 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8002b7e:	2300      	movs	r3, #0
	}
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	2000000c 	.word	0x2000000c

08002b88 <svDebugProcess>:

void svDebugProcess(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7ff ff36 	bl	8002a00 <IsUartConnected>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01a      	beq.n	8002bd0 <svDebugProcess+0x48>
	  svCLI_Handler();
 8002b9a:	f00b f895 	bl	800dcc8 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <svDebugProcess+0x50>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d114      	bne.n	8002bd0 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <svDebugProcess+0x54>)
 8002ba8:	f00b fe09 	bl	800e7be <lwrb_get_linear_block_read_length>
 8002bac:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8002bb4:	4809      	ldr	r0, [pc, #36]	; (8002bdc <svDebugProcess+0x54>)
 8002bb6:	f00b fde6 	bl	800e786 <lwrb_get_linear_block_read_address>
 8002bba:	4601      	mov	r1, r0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7ff ff2c 	bl	8002a20 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4804      	ldr	r0, [pc, #16]	; (8002bdc <svDebugProcess+0x54>)
 8002bcc:	f00b fe2a 	bl	800e824 <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000974 	.word	0x20000974
 8002bdc:	20000978 	.word	0x20000978

08002be0 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	460b      	mov	r3, r1
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d11a      	bne.n	8002c2a <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7ff ff03 	bl	8002a00 <IsUartConnected>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d014      	beq.n	8002c2a <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8002c00:	f000 f8be 	bl	8002d80 <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8002c06:	e003      	b.n	8002c10 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8002c08:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <svDebugCallback+0x54>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d006      	beq.n	8002c1e <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8002c10:	6978      	ldr	r0, [r7, #20]
 8002c12:	f000 f863 	bl	8002cdc <GetElapsedTime>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b63      	cmp	r3, #99	; 0x63
 8002c1a:	d9f5      	bls.n	8002c08 <svDebugCallback+0x28>
 8002c1c:	e000      	b.n	8002c20 <svDebugCallback+0x40>
					break;
 8002c1e:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <svDebugCallback+0x54>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8002c26:	f7ff ffaf 	bl	8002b88 <svDebugProcess>
		}
	}
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000974 	.word	0x20000974

08002c38 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8002c3c:	4809      	ldr	r0, [pc, #36]	; (8002c64 <svDebugInit+0x2c>)
 8002c3e:	f00b f9b8 	bl	800dfb2 <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8002c42:	2200      	movs	r2, #0
 8002c44:	4908      	ldr	r1, [pc, #32]	; (8002c68 <svDebugInit+0x30>)
 8002c46:	4809      	ldr	r0, [pc, #36]	; (8002c6c <svDebugInit+0x34>)
 8002c48:	f00a fbb2 	bl	800d3b0 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8002c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c50:	4907      	ldr	r1, [pc, #28]	; (8002c70 <svDebugInit+0x38>)
 8002c52:	4808      	ldr	r0, [pc, #32]	; (8002c74 <svDebugInit+0x3c>)
 8002c54:	f00b fc78 	bl	800e548 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <svDebugInit+0x40>)
 8002c5a:	4806      	ldr	r0, [pc, #24]	; (8002c74 <svDebugInit+0x3c>)
 8002c5c:	f00b fc95 	bl	800e58a <lwrb_set_evt_fn>
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	2000000c 	.word	0x2000000c
 8002c68:	08002c7d 	.word	0x08002c7d
 8002c6c:	08002b65 	.word	0x08002b65
 8002c70:	2000098c 	.word	0x2000098c
 8002c74:	20000978 	.word	0x20000978
 8002c78:	08002be1 	.word	0x08002be1

08002c7c <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8002c86:	1dfb      	adds	r3, r7, #7
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <svDebugPutChar+0x20>)
 8002c8e:	f00b fc95 	bl	800e5bc <lwrb_write>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000978 	.word	0x20000978

08002ca0 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8002ca0:	b40f      	push	{r0, r1, r2, r3}
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	6939      	ldr	r1, [r7, #16]
 8002cb2:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <svDebugMessage+0x34>)
 8002cb4:	f00b feea 	bl	800ea8c <vsiprintf>
 8002cb8:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4905      	ldr	r1, [pc, #20]	; (8002cd4 <svDebugMessage+0x34>)
 8002cc0:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <svDebugMessage+0x38>)
 8002cc2:	f00b fc7b 	bl	800e5bc <lwrb_write>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cd0:	b004      	add	sp, #16
 8002cd2:	4770      	bx	lr
 8002cd4:	20000b90 	.word	0x20000b90
 8002cd8:	20000978 	.word	0x20000978

08002cdc <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8002ce4:	f000 f84c 	bl	8002d80 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d204      	bcs.n	8002cfc <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	e002      	b.n	8002d02 <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	1ad3      	subs	r3, r2, r3
	}
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d10:	2003      	movs	r0, #3
 8002d12:	f000 f912 	bl	8002f3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d16:	f002 fc1d 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_Init+0x40>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	490a      	ldr	r1, [pc, #40]	; (8002d50 <HAL_Init+0x44>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2c:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_Init+0x48>)
 8002d2e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d30:	200f      	movs	r0, #15
 8002d32:	f7fe f885 	bl	8000e40 <HAL_InitTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e002      	b.n	8002d46 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d40:	f7fd ff09 	bl	8000b56 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	44020c00 	.word	0x44020c00
 8002d50:	0800f690 	.word	0x0800f690
 8002d54:	20000000 	.word	0x20000000

08002d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x20>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x24>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_IncTick+0x24>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000030 	.word	0x20000030
 8002d7c:	20000c10 	.word	0x20000c10

08002d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_GetTick+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000c10 	.word	0x20000c10

08002d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7ff ffee 	bl	8002d80 <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d005      	beq.n	8002dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_Delay+0x44>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dbe:	bf00      	nop
 8002dc0:	f7ff ffde 	bl	8002d80 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d8f7      	bhi.n	8002dc0 <HAL_Delay+0x28>
  {
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000030 	.word	0x20000030

08002de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e12:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	60d3      	str	r3, [r2, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <__NVIC_GetPriorityGrouping+0x18>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	f003 0307 	and.w	r3, r3, #7
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	db0b      	blt.n	8002e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	4907      	ldr	r1, [pc, #28]	; (8002e7c <__NVIC_EnableIRQ+0x38>)
 8002e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2001      	movs	r0, #1
 8002e66:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100

08002e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db0a      	blt.n	8002eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	490c      	ldr	r1, [pc, #48]	; (8002ecc <__NVIC_SetPriority+0x4c>)
 8002e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea8:	e00a      	b.n	8002ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <__NVIC_SetPriority+0x50>)
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	761a      	strb	r2, [r3, #24]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000e100 	.word	0xe000e100
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f1c3 0307 	rsb	r3, r3, #7
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf28      	it	cs
 8002ef2:	2304      	movcs	r3, #4
 8002ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d902      	bls.n	8002f04 <NVIC_EncodePriority+0x30>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3b03      	subs	r3, #3
 8002f02:	e000      	b.n	8002f06 <NVIC_EncodePriority+0x32>
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43d9      	mvns	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	4313      	orrs	r3, r2
         );
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ff4c 	bl	8002de0 <__NVIC_SetPriorityGrouping>
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5e:	f7ff ff63 	bl	8002e28 <__NVIC_GetPriorityGrouping>
 8002f62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	6978      	ldr	r0, [r7, #20]
 8002f6a:	f7ff ffb3 	bl	8002ed4 <NVIC_EncodePriority>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ff82 	bl	8002e80 <__NVIC_SetPriority>
}
 8002f7c:	bf00      	nop
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff56 	bl	8002e44 <__NVIC_EnableIRQ>
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002fa8:	f7ff feea 	bl	8002d80 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e06b      	b.n	8003090 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e05c      	b.n	8003090 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0204 	orr.w	r2, r2, #4
 8002fe4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2205      	movs	r2, #5
 8002fea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002fee:	e020      	b.n	8003032 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002ff0:	f7ff fec6 	bl	8002d80 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d919      	bls.n	8003032 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	f043 0210 	orr.w	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003022:	2201      	movs	r2, #1
 8003024:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e02e      	b.n	8003090 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0d7      	beq.n	8002ff0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0202 	orr.w	r2, r2, #2
 800304e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2204      	movs	r2, #4
 8003054:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003060:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	2201      	movs	r2, #1
 800307c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e019      	b.n	80030de <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d004      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e00e      	b.n	80030de <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2204      	movs	r2, #4
 80030c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030d6:	f043 0304 	orr.w	r3, r3, #4
 80030da:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e147      	b.n	800338e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe fdbe 	bl	8001c94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0210 	bic.w	r2, r2, #16
 8003126:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003128:	f7ff fe2a 	bl	8002d80 <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800312e:	e012      	b.n	8003156 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003130:	f7ff fe26 	bl	8002d80 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b0a      	cmp	r3, #10
 800313c:	d90b      	bls.n	8003156 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2203      	movs	r2, #3
 800314e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e11b      	b.n	800338e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b08      	cmp	r3, #8
 8003162:	d0e5      	beq.n	8003130 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003174:	f7ff fe04 	bl	8002d80 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800317a:	e012      	b.n	80031a2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800317c:	f7ff fe00 	bl	8002d80 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b0a      	cmp	r3, #10
 8003188:	d90b      	bls.n	80031a2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0f5      	b.n	800338e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0e5      	beq.n	800317c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0202 	orr.w	r2, r2, #2
 80031be:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a74      	ldr	r2, [pc, #464]	; (8003398 <HAL_FDCAN_Init+0x2ac>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d103      	bne.n	80031d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80031ca:	4a74      	ldr	r2, [pc, #464]	; (800339c <HAL_FDCAN_Init+0x2b0>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	7c1b      	ldrb	r3, [r3, #16]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d108      	bne.n	80031ec <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e8:	619a      	str	r2, [r3, #24]
 80031ea:	e007      	b.n	80031fc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7c5b      	ldrb	r3, [r3, #17]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d108      	bne.n	8003216 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003212:	619a      	str	r2, [r3, #24]
 8003214:	e007      	b.n	8003226 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003224:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7c9b      	ldrb	r3, [r3, #18]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800323c:	619a      	str	r2, [r3, #24]
 800323e:	e007      	b.n	8003250 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800324e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003274:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0210 	bic.w	r2, r2, #16
 8003284:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d108      	bne.n	80032a0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0204 	orr.w	r2, r2, #4
 800329c:	619a      	str	r2, [r3, #24]
 800329e:	e02c      	b.n	80032fa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d028      	beq.n	80032fa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d01c      	beq.n	80032ea <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032be:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0210 	orr.w	r2, r2, #16
 80032ce:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d110      	bne.n	80032fa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0220 	orr.w	r2, r2, #32
 80032e6:	619a      	str	r2, [r3, #24]
 80032e8:	e007      	b.n	80032fa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	3b01      	subs	r3, #1
 8003300:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	3b01      	subs	r3, #1
 8003308:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800330a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003312:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	3b01      	subs	r3, #1
 800331c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003322:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003324:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332e:	d115      	bne.n	800335c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	3b01      	subs	r3, #1
 800333c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800333e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	3b01      	subs	r3, #1
 8003346:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003348:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	3b01      	subs	r3, #1
 8003352:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003358:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800335a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fdac 	bl	8003ed0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	4000a400 	.word	0x4000a400
 800339c:	4000a500 	.word	0x4000a500

080033a0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033b0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d002      	beq.n	80033be <HAL_FDCAN_ConfigFilter+0x1e>
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d13d      	bne.n	800343a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d119      	bne.n	80033fa <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80033d2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80033da:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e01d      	b.n	8003436 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	075a      	lsls	r2, r3, #29
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	079a      	lsls	r2, r3, #30
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3304      	adds	r3, #4
 800342e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e006      	b.n	8003448 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	f043 0202 	orr.w	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d116      	bne.n	800349c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003476:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	011a      	lsls	r2, r3, #4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	431a      	orrs	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	431a      	orrs	r2, r3
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	431a      	orrs	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e006      	b.n	80034aa <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d108      	bne.n	80034e0 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	0219      	lsls	r1, r3, #8
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	430a      	orrs	r2, r1
 80034da:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e006      	b.n	80034ee <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e4:	f043 0204 	orr.w	r2, r3, #4
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d109      	bne.n	8003522 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800351c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e006      	b.n	8003530 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	f043 0204 	orr.w	r2, r3, #4
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d110      	bne.n	8003572 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e006      	b.n	8003580 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003576:	f043 0204 	orr.w	r2, r3, #4
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d156      	bne.n	8003652 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035b4:	e011      	b.n	80035da <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b0a      	cmp	r3, #10
 80035ba:	d90b      	bls.n	80035d4 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2203      	movs	r2, #3
 80035cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e045      	b.n	8003660 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0e6      	beq.n	80035b6 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0210 	bic.w	r2, r2, #16
 80035fa:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035fc:	e011      	b.n	8003622 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b0a      	cmp	r3, #10
 8003602:	d90b      	bls.n	800361c <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2203      	movs	r2, #3
 8003614:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e021      	b.n	8003660 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3301      	adds	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b08      	cmp	r3, #8
 800362e:	d0e6      	beq.n	80035fe <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0202 	orr.w	r2, r2, #2
 800363e:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e006      	b.n	8003660 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003656:	f043 0208 	orr.w	r2, r3, #8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
  }
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d12c      	bne.n	80036de <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003698:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e023      	b.n	80036ec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fc6a 	bl	8003f94 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2101      	movs	r1, #1
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	fa01 f202 	lsl.w	r2, r1, r2
 80036cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80036d0:	2201      	movs	r2, #1
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	e006      	b.n	80036ec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e2:	f043 0208 	orr.w	r2, r3, #8
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b08b      	sub	sp, #44	; 0x2c
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800370c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800370e:	7efb      	ldrb	r3, [r7, #27]
 8003710:	2b02      	cmp	r3, #2
 8003712:	f040 80e8 	bne.w	80038e6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d137      	bne.n	800378c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0db      	b.n	80038f4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	0e1b      	lsrs	r3, r3, #24
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b01      	cmp	r3, #1
 800374c:	d10a      	bne.n	8003764 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003756:	0a5b      	lsrs	r3, r3, #9
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e036      	b.n	80037fa <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	2b00      	cmp	r3, #0
 800379a:	d107      	bne.n	80037ac <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0a3      	b.n	80038f4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b4:	0e1b      	lsrs	r3, r3, #24
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10a      	bne.n	80037d4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c6:	0a1b      	lsrs	r3, r3, #8
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80037d0:	2301      	movs	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	440b      	add	r3, r1
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	0c9b      	lsrs	r3, r3, #18
 8003814:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e005      	b.n	800382a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	3304      	adds	r3, #4
 8003846:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b29a      	uxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	0e1b      	lsrs	r3, r3, #24
 800387e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	0fda      	lsrs	r2, r3, #31
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	3304      	adds	r3, #4
 8003894:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800389a:	2300      	movs	r3, #0
 800389c:	623b      	str	r3, [r7, #32]
 800389e:	e00a      	b.n	80038b6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	441a      	add	r2, r3
 80038a6:	6839      	ldr	r1, [r7, #0]
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	440b      	add	r3, r1
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	3301      	adds	r3, #1
 80038b4:	623b      	str	r3, [r7, #32]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	4a11      	ldr	r2, [pc, #68]	; (8003900 <HAL_FDCAN_GetRxMessage+0x20c>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	461a      	mov	r2, r3
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d3ec      	bcc.n	80038a0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d105      	bne.n	80038d8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80038d6:	e004      	b.n	80038e2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e006      	b.n	80038f4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	f043 0208 	orr.w	r2, r3, #8
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
  }
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	372c      	adds	r7, #44	; 0x2c
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	0800f810 	.word	0x0800f810

08003904 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0207 	and.w	r2, r3, #7
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 0207 	and.w	r2, r3, #7
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0218 	and.w	r2, r3, #24
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	f003 0201 	and.w	r2, r3, #1
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	f003 0201 	and.w	r2, r3, #1
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	09db      	lsrs	r3, r3, #7
 8003952:	f003 0201 	and.w	r2, r3, #1
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	0adb      	lsrs	r3, r3, #11
 800395e:	f003 0201 	and.w	r2, r3, #1
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	0b1b      	lsrs	r3, r3, #12
 800396a:	f003 0201 	and.w	r2, r3, #1
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	0b5b      	lsrs	r3, r3, #13
 8003976:	f003 0201 	and.w	r2, r3, #1
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0b9b      	lsrs	r3, r3, #14
 8003982:	f003 0201 	and.w	r2, r3, #1
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	0bdb      	lsrs	r3, r3, #15
 80039ce:	f003 0201 	and.w	r2, r3, #1
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003a04:	68fb      	ldr	r3, [r7, #12]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b087      	sub	sp, #28
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a24:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d003      	beq.n	8003a34 <HAL_FDCAN_ActivateNotification+0x22>
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	f040 80c8 	bne.w	8003bc4 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d03b      	beq.n	8003ac8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d031      	beq.n	8003ac8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d027      	beq.n	8003ac8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00c      	beq.n	8003ad8 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d13b      	bne.n	8003b64 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d131      	bne.n	8003b64 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d127      	bne.n	8003b64 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11d      	bne.n	8003b64 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d113      	bne.n	8003b64 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0202 	orr.w	r2, r2, #2
 8003b72:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d009      	beq.n	8003bb0 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e006      	b.n	8003bd2 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	f043 0202 	orr.w	r2, r3, #2
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b08c      	sub	sp, #48	; 0x30
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bec:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c12:	4013      	ands	r3, r2
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003c38:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	4013      	ands	r3, r2
 8003c44:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c50:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6c:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2240      	movs	r2, #64	; 0x40
 8003c88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f916 	bl	8003ebc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d019      	beq.n	8003cce <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d014      	beq.n	8003cce <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003cac:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003cc6:	6939      	ldr	r1, [r7, #16]
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f8d8 	bl	8003e7e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cda:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8a2 	bl	8003e28 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cf0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fd ffa5 	bl	8001c44 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d06:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f897 	bl	8003e3e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00c      	beq.n	8003d34 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f890 	bl	8003e54 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d013      	beq.n	8003d70 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003d50:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003d68:	68f9      	ldr	r1, [r7, #12]
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f87c 	bl	8003e68 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d8c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f880 	bl	8003e94 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f878 	bl	8003ea8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dda:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003df0:	69f9      	ldr	r1, [r7, #28]
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd fede 	bl	8001bb4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a3a      	ldr	r2, [r7, #32]
 8003e04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fd feda 	bl	8001bd4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003e20:	bf00      	nop
 8003e22:	3730      	adds	r7, #48	; 0x30
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003ed8:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003eda:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d103      	bne.n	8003eee <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003eec:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efc:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	041a      	lsls	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f22:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	061a      	lsls	r2, r3, #24
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e005      	b.n	8003f70 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d3f3      	bcc.n	8003f64 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	4000ac00 	.word	0x4000ac00
 8003f90:	4000a800 	.word	0x4000a800

08003f94 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003fb2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e00a      	b.n	8003fd6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003fc8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003fce:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003fe0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003fe6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003fec:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	440b      	add	r3, r1
 8004008:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	3304      	adds	r3, #4
 8004014:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	3304      	adds	r3, #4
 8004020:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e020      	b.n	800406a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3303      	adds	r3, #3
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3302      	adds	r3, #2
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	440b      	add	r3, r1
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004040:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	3301      	adds	r3, #1
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	440b      	add	r3, r1
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800404e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	440a      	add	r2, r1
 8004056:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004058:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	3304      	adds	r3, #4
 8004062:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3304      	adds	r3, #4
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	4a06      	ldr	r2, [pc, #24]	; (8004088 <FDCAN_CopyMessageToRAM+0xf4>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
 8004072:	461a      	mov	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4293      	cmp	r3, r2
 8004078:	d3d6      	bcc.n	8004028 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	3724      	adds	r7, #36	; 0x24
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	0800f810 	.word	0x0800f810

0800408c <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004098:	4b32      	ldr	r3, [pc, #200]	; (8004164 <HAL_FLASH_Program+0xd8>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_FLASH_Program+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e05a      	b.n	800415a <HAL_FLASH_Program+0xce>
 80040a4:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_FLASH_Program+0xd8>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040aa:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_FLASH_Program+0xd8>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040b4:	f000 f8a4 	bl	8004200 <FLASH_WaitForLastOperation>
 80040b8:	4603      	mov	r3, r0
 80040ba:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 80040bc:	7ffb      	ldrb	r3, [r7, #31]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d147      	bne.n	8004152 <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 80040c2:	4a28      	ldr	r2, [pc, #160]	; (8004164 <HAL_FLASH_Program+0xd8>)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80040c8:	4b27      	ldr	r3, [pc, #156]	; (8004168 <HAL_FLASH_Program+0xdc>)
 80040ca:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d104      	bne.n	80040e0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	68b8      	ldr	r0, [r7, #8]
 80040da:	f000 f8df 	bl	800429c <FLASH_Program_QuadWord>
 80040de:	e01b      	b.n	8004118 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a22      	ldr	r2, [pc, #136]	; (800416c <HAL_FLASH_Program+0xe0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <HAL_FLASH_Program+0x64>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a21      	ldr	r2, [pc, #132]	; (8004170 <HAL_FLASH_Program+0xe4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d104      	bne.n	80040fa <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	68b8      	ldr	r0, [r7, #8]
 80040f4:	f000 f90e 	bl	8004314 <FLASH_Program_QuadWord_OBK>
 80040f8:	e00e      	b.n	8004118 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004100:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <HAL_FLASH_Program+0xe8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d104      	bne.n	8004110 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	68b8      	ldr	r0, [r7, #8]
 800410a:	f000 f94f 	bl	80043ac <FLASH_Program_HalfWord>
 800410e:	e003      	b.n	8004118 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	68b8      	ldr	r0, [r7, #8]
 8004114:	f000 f94a 	bl	80043ac <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800411c:	f000 f870 	bl	8004200 <FLASH_WaitForLastOperation>
 8004120:	4603      	mov	r3, r0
 8004122:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 800412e:	f023 0304 	bic.w	r3, r3, #4
 8004132:	43db      	mvns	r3, r3
 8004134:	401a      	ands	r2, r3
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <HAL_FLASH_Program+0xe4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d107      	bne.n	8004152 <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_FLASH_Program+0xec>)
 8004144:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 0204 	bic.w	r2, r3, #4
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <HAL_FLASH_Program+0xd8>)
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004158:	7ffb      	ldrb	r3, [r7, #31]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000034 	.word	0x20000034
 8004168:	40022028 	.word	0x40022028
 800416c:	10000002 	.word	0x10000002
 8004170:	10000006 	.word	0x10000006
 8004174:	40000002 	.word	0x40000002
 8004178:	40022040 	.word	0x40022040

0800417c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_FLASH_Unlock+0x40>)
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_FLASH_Unlock+0x40>)
 8004194:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <HAL_FLASH_Unlock+0x44>)
 8004196:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <HAL_FLASH_Unlock+0x40>)
 800419a:	4a0a      	ldr	r2, [pc, #40]	; (80041c4 <HAL_FLASH_Unlock+0x48>)
 800419c:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <HAL_FLASH_Unlock+0x40>)
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 80041ae:	79fb      	ldrb	r3, [r7, #7]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40022000 	.word	0x40022000
 80041c0:	45670123 	.word	0x45670123
 80041c4:	cdef89ab 	.word	0xcdef89ab

080041c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_FLASH_Lock+0x34>)
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	4a09      	ldr	r2, [pc, #36]	; (80041fc <HAL_FLASH_Lock+0x34>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_FLASH_Lock+0x34>)
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 80041ee:	79fb      	ldrb	r3, [r7, #7]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40022000 	.word	0x40022000

08004200 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8004208:	f7fe fdba 	bl	8002d80 <HAL_GetTick>
 800420c:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <FLASH_WaitForLastOperation+0x90>)
 8004210:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8004212:	e010      	b.n	8004236 <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d00c      	beq.n	8004236 <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800421c:	f7fe fdb0 	bl	8002d80 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <FLASH_WaitForLastOperation+0x32>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e027      	b.n	8004286 <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 030b 	and.w	r3, r3, #11
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e8      	bne.n	8004214 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <FLASH_WaitForLastOperation+0x94>)
 8004244:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 800424e:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00c      	beq.n	8004270 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <FLASH_WaitForLastOperation+0x98>)
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4313      	orrs	r3, r2
 800425e:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <FLASH_WaitForLastOperation+0x98>)
 8004260:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e00a      	b.n	8004286 <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004282:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40022020 	.word	0x40022020
 8004294:	40022030 	.word	0x40022030
 8004298:	20000034 	.word	0x20000034

0800429c <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 800429c:	b480      	push	{r7}
 800429e:	b08b      	sub	sp, #44	; 0x2c
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 80042a6:	2304      	movs	r3, #4
 80042a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80042b4:	4b16      	ldr	r3, [pc, #88]	; (8004310 <FLASH_Program_QuadWord+0x74>)
 80042b6:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f043 0202 	orr.w	r2, r3, #2
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042c4:	f3ef 8310 	mrs	r3, PRIMASK
 80042c8:	613b      	str	r3, [r7, #16]
  return(result);
 80042ca:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80042cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80042ce:	b672      	cpsid	i
}
 80042d0:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	3304      	adds	r3, #4
 80042de:	623b      	str	r3, [r7, #32]
    src_addr++;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	3304      	adds	r3, #4
 80042e4:	61fb      	str	r3, [r7, #28]
    index--;
 80042e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ea:	3b01      	subs	r3, #1
 80042ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 80042f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ec      	bne.n	80042d2 <FLASH_Program_QuadWord+0x36>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f383 8810 	msr	PRIMASK, r3
}
 8004302:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004304:	bf00      	nop
 8004306:	372c      	adds	r7, #44	; 0x2c
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40022028 	.word	0x40022028

08004314 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8004314:	b480      	push	{r7}
 8004316:	b08b      	sub	sp, #44	; 0x2c
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 800431e:	2304      	movs	r3, #4
 8004320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <FLASH_Program_QuadWord_OBK+0x8c>)
 800432e:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8004330:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <FLASH_Program_QuadWord_OBK+0x90>)
 8004332:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f043 0202 	orr.w	r2, r3, #2
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <FLASH_Program_QuadWord_OBK+0x94>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	431a      	orrs	r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004352:	f3ef 8310 	mrs	r3, PRIMASK
 8004356:	60fb      	str	r3, [r7, #12]
  return(result);
 8004358:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800435a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800435c:	b672      	cpsid	i
}
 800435e:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	3304      	adds	r3, #4
 800436c:	623b      	str	r3, [r7, #32]
    src_addr++;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3304      	adds	r3, #4
 8004372:	61fb      	str	r3, [r7, #28]
    index--;
 8004374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004378:	3b01      	subs	r3, #1
 800437a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 800437e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1ec      	bne.n	8004360 <FLASH_Program_QuadWord_OBK+0x4c>
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004392:	bf00      	nop
 8004394:	372c      	adds	r7, #44	; 0x2c
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40022028 	.word	0x40022028
 80043a4:	40022040 	.word	0x40022040
 80043a8:	20000034 	.word	0x20000034

080043ac <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <FLASH_Program_HalfWord+0x30>)
 80043b8:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f043 0202 	orr.w	r2, r3, #2
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8812      	ldrh	r2, [r2, #0]
 80043cc:	b292      	uxth	r2, r2
 80043ce:	801a      	strh	r2, [r3, #0]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40022028 	.word	0x40022028

080043e0 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043ea:	4b3a      	ldr	r3, [pc, #232]	; (80044d4 <HAL_FLASHEx_Erase+0xf4>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_FLASHEx_Erase+0x16>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e06a      	b.n	80044cc <HAL_FLASHEx_Erase+0xec>
 80043f6:	4b37      	ldr	r3, [pc, #220]	; (80044d4 <HAL_FLASHEx_Erase+0xf4>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043fc:	4b35      	ldr	r3, [pc, #212]	; (80044d4 <HAL_FLASHEx_Erase+0xf4>)
 80043fe:	2200      	movs	r2, #0
 8004400:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004406:	f7ff fefb 	bl	8004200 <FLASH_WaitForLastOperation>
 800440a:	4603      	mov	r3, r0
 800440c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800440e:	7dfb      	ldrb	r3, [r7, #23]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d157      	bne.n	80044c4 <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2e      	ldr	r2, [pc, #184]	; (80044d4 <HAL_FLASHEx_Erase+0xf4>)
 800441a:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800441c:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <HAL_FLASHEx_Erase+0xf8>)
 800441e:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004428:	f248 0208 	movw	r2, #32776	; 0x8008
 800442c:	4293      	cmp	r3, r2
 800442e:	d10b      	bne.n	8004448 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	f000 f853 	bl	80044e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800443a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800443e:	f7ff fedf 	bl	8004200 <FLASH_WaitForLastOperation>
 8004442:	4603      	mov	r3, r0
 8004444:	75fb      	strb	r3, [r7, #23]
 8004446:	e033      	b.n	80044b0 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_FLASHEx_Erase+0xfc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d108      	bne.n	8004464 <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8004452:	f000 f8b5 	bl	80045c0 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004456:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800445a:	f7ff fed1 	bl	8004200 <FLASH_WaitForLastOperation>
 800445e:	4603      	mov	r3, r0
 8004460:	75fb      	strb	r3, [r7, #23]
 8004462:	e025      	b.n	80044b0 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	e015      	b.n	80044a0 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4619      	mov	r1, r3
 800447a:	6938      	ldr	r0, [r7, #16]
 800447c:	f000 f868 	bl	8004550 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004484:	f7ff febc 	bl	8004200 <FLASH_WaitForLastOperation>
 8004488:	4603      	mov	r3, r0
 800448a:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	601a      	str	r2, [r3, #0]
          break;
 8004498:	e00a      	b.n	80044b0 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3301      	adds	r3, #1
 800449e:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4413      	add	r3, r2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d3e1      	bcc.n	8004474 <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_FLASHEx_Erase+0xf4>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]

  return status;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000034 	.word	0x20000034
 80044d8:	40022028 	.word	0x40022028
 80044dc:	80000008 	.word	0x80000008

080044e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80044e8:	4b18      	ldr	r3, [pc, #96]	; (800454c <FLASH_MassErase+0x6c>)
 80044ea:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d108      	bne.n	8004508 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044fe:	f043 0320 	orr.w	r3, r3, #32
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8004506:	e01b      	b.n	8004540 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800451a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800451e:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004538:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	6013      	str	r3, [r2, #0]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40022028 	.word	0x40022028

08004550 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <FLASH_Erase_Sector+0x6c>)
 800455c:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d011      	beq.n	800458c <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004570:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	019b      	lsls	r3, r3, #6
 8004580:	4313      	orrs	r3, r2
 8004582:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 800458a:	e010      	b.n	80045ae <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	019b      	lsls	r3, r3, #6
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045a6:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	6013      	str	r3, [r2, #0]
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40022028 	.word	0x40022028

080045c0 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80045c6:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <FLASH_OBKErase+0x24>)
 80045c8:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f043 0208 	orr.w	r2, r3, #8
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40022040 	.word	0x40022040

080045e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80045f6:	e136      	b.n	8004866 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	2101      	movs	r1, #1
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	fa01 f303 	lsl.w	r3, r1, r3
 8004604:	4013      	ands	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8128 	beq.w	8004860 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d003      	beq.n	8004620 <HAL_GPIO_Init+0x38>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b12      	cmp	r3, #18
 800461e:	d125      	bne.n	800466c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	08da      	lsrs	r2, r3, #3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3208      	adds	r2, #8
 8004628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	220f      	movs	r2, #15
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4013      	ands	r3, r2
 8004642:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	08da      	lsrs	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3208      	adds	r2, #8
 8004666:	6979      	ldr	r1, [r7, #20]
 8004668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	2203      	movs	r2, #3
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4013      	ands	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 0203 	and.w	r2, r3, #3
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d00b      	beq.n	80046c0 <HAL_GPIO_Init+0xd8>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d007      	beq.n	80046c0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046b4:	2b11      	cmp	r3, #17
 80046b6:	d003      	beq.n	80046c0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b12      	cmp	r3, #18
 80046be:	d130      	bne.n	8004722 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	2203      	movs	r2, #3
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4013      	ands	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046f6:	2201      	movs	r2, #1
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4013      	ands	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	f003 0201 	and.w	r2, r3, #1
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d017      	beq.n	800475a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4013      	ands	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d07c      	beq.n	8004860 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004766:	4a47      	ldr	r2, [pc, #284]	; (8004884 <HAL_GPIO_Init+0x29c>)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	3318      	adds	r3, #24
 800476e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004772:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	220f      	movs	r2, #15
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4013      	ands	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0a9a      	lsrs	r2, r3, #10
 800478e:	4b3e      	ldr	r3, [pc, #248]	; (8004888 <HAL_GPIO_Init+0x2a0>)
 8004790:	4013      	ands	r3, r2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	f002 0203 	and.w	r2, r2, #3
 8004798:	00d2      	lsls	r2, r2, #3
 800479a:	4093      	lsls	r3, r2
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80047a2:	4938      	ldr	r1, [pc, #224]	; (8004884 <HAL_GPIO_Init+0x29c>)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	089b      	lsrs	r3, r3, #2
 80047a8:	3318      	adds	r3, #24
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80047b0:	4b34      	ldr	r3, [pc, #208]	; (8004884 <HAL_GPIO_Init+0x29c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4013      	ands	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80047d4:	4a2b      	ldr	r2, [pc, #172]	; (8004884 <HAL_GPIO_Init+0x29c>)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80047da:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <HAL_GPIO_Init+0x29c>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	43db      	mvns	r3, r3
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4013      	ands	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80047fe:	4a21      	ldr	r2, [pc, #132]	; (8004884 <HAL_GPIO_Init+0x29c>)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004804:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <HAL_GPIO_Init+0x29c>)
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	43db      	mvns	r3, r3
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4013      	ands	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800482a:	4a16      	ldr	r2, [pc, #88]	; (8004884 <HAL_GPIO_Init+0x29c>)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_GPIO_Init+0x29c>)
 8004834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004838:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	43db      	mvns	r3, r3
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4013      	ands	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004858:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <HAL_GPIO_Init+0x29c>)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	3301      	adds	r3, #1
 8004864:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f aec1 	bne.w	80045f8 <HAL_GPIO_Init+0x10>
  }
}
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	44022000 	.word	0x44022000
 8004888:	002f7f7f 	.word	0x002f7f7f

0800488c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
 8004898:	4613      	mov	r3, r2
 800489a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800489c:	787b      	ldrb	r3, [r7, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048a2:	887a      	ldrh	r2, [r7, #2]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048a8:	e002      	b.n	80048b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048ce:	887a      	ldrh	r2, [r7, #2]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	041a      	lsls	r2, r3, #16
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	43d9      	mvns	r1, r3
 80048da:	887b      	ldrh	r3, [r7, #2]
 80048dc:	400b      	ands	r3, r1
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	619a      	str	r2, [r3, #24]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80048fa:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d006      	beq.n	8004914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004906:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fe8e 	bl	8000630 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d006      	beq.n	800492e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004920:	4a05      	ldr	r2, [pc, #20]	; (8004938 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 f807 	bl	800493c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	44022000 	.word	0x44022000

0800493c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_ICACHE_Enable+0x1c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <HAL_ICACHE_Enable+0x1c>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40030400 	.word	0x40030400

08004974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f000 bc28 	b.w	80051d8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004988:	4b94      	ldr	r3, [pc, #592]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f003 0318 	and.w	r3, r3, #24
 8004990:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004992:	4b92      	ldr	r3, [pc, #584]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d05b      	beq.n	8004a60 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d005      	beq.n	80049ba <HAL_RCC_OscConfig+0x46>
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2b18      	cmp	r3, #24
 80049b2:	d114      	bne.n	80049de <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d111      	bne.n	80049de <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f000 bc08 	b.w	80051d8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80049c8:	4b84      	ldr	r3, [pc, #528]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	4981      	ldr	r1, [pc, #516]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80049dc:	e040      	b.n	8004a60 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d023      	beq.n	8004a2e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049e6:	4b7d      	ldr	r3, [pc, #500]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a7c      	ldr	r2, [pc, #496]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 80049ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fe f9c5 	bl	8002d80 <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80049fa:	f7fe f9c1 	bl	8002d80 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e3e5      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004a0c:	4b73      	ldr	r3, [pc, #460]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004a18:	4b70      	ldr	r3, [pc, #448]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	496d      	ldr	r1, [pc, #436]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	618b      	str	r3, [r1, #24]
 8004a2c:	e018      	b.n	8004a60 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a2e:	4b6b      	ldr	r3, [pc, #428]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a6a      	ldr	r2, [pc, #424]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3a:	f7fe f9a1 	bl	8002d80 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004a42:	f7fe f99d 	bl	8002d80 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e3c1      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a54:	4b61      	ldr	r3, [pc, #388]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f0      	bne.n	8004a42 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80a0 	beq.w	8004bae <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_OscConfig+0x10c>
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b18      	cmp	r3, #24
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f040 8092 	bne.w	8004bae <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e3a4      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x132>
 8004a98:	4b50      	ldr	r3, [pc, #320]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a4f      	ldr	r2, [pc, #316]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e058      	b.n	8004b58 <HAL_RCC_OscConfig+0x1e4>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d112      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x160>
 8004aae:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a4a      	ldr	r2, [pc, #296]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	4b48      	ldr	r3, [pc, #288]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a47      	ldr	r2, [pc, #284]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004ac0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b45      	ldr	r3, [pc, #276]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a44      	ldr	r2, [pc, #272]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e041      	b.n	8004b58 <HAL_RCC_OscConfig+0x1e4>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004adc:	d112      	bne.n	8004b04 <HAL_RCC_OscConfig+0x190>
 8004ade:	4b3f      	ldr	r3, [pc, #252]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a3e      	ldr	r2, [pc, #248]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b3c      	ldr	r3, [pc, #240]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a3b      	ldr	r2, [pc, #236]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004af0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a38      	ldr	r2, [pc, #224]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e029      	b.n	8004b58 <HAL_RCC_OscConfig+0x1e4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004b0c:	d112      	bne.n	8004b34 <HAL_RCC_OscConfig+0x1c0>
 8004b0e:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a32      	ldr	r2, [pc, #200]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	4b30      	ldr	r3, [pc, #192]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2f      	ldr	r2, [pc, #188]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2c      	ldr	r2, [pc, #176]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e011      	b.n	8004b58 <HAL_RCC_OscConfig+0x1e4>
 8004b34:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d013      	beq.n	8004b88 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fe f90e 	bl	8002d80 <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004b68:	f7fe f90a 	bl	8002d80 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e32e      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x1f4>
 8004b86:	e012      	b.n	8004bae <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fe f8fa 	bl	8002d80 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004b90:	f7fe f8f6 	bl	8002d80 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e31a      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <HAL_RCC_OscConfig+0x268>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 809a 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_RCC_OscConfig+0x25a>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2b18      	cmp	r3, #24
 8004bc6:	d149      	bne.n	8004c5c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d146      	bne.n	8004c5c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e2fe      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
 8004bda:	bf00      	nop
 8004bdc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004be6:	4b9a      	ldr	r3, [pc, #616]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0218 	and.w	r2, r3, #24
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d014      	beq.n	8004c20 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004bf6:	4b96      	ldr	r3, [pc, #600]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 0218 	bic.w	r2, r3, #24
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	4993      	ldr	r1, [pc, #588]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004c08:	f000 fdd0 	bl	80057ac <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c0c:	4b91      	ldr	r3, [pc, #580]	; (8004e54 <HAL_RCC_OscConfig+0x4e0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fc f915 	bl	8000e40 <HAL_InitTick>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e2db      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fe f8ae 	bl	8002d80 <HAL_GetTick>
 8004c24:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004c28:	f7fe f8aa 	bl	8002d80 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e2ce      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c3a:	4b85      	ldr	r3, [pc, #532]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004c46:	4b82      	ldr	r3, [pc, #520]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	497e      	ldr	r1, [pc, #504]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004c5a:	e049      	b.n	8004cf0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004c64:	4b7a      	ldr	r3, [pc, #488]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 0218 	bic.w	r2, r3, #24
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	4977      	ldr	r1, [pc, #476]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004c76:	4b76      	ldr	r3, [pc, #472]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a75      	ldr	r2, [pc, #468]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fe f87d 	bl	8002d80 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004c8a:	f7fe f879 	bl	8002d80 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e29d      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c9c:	4b6c      	ldr	r3, [pc, #432]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004ca8:	4b69      	ldr	r3, [pc, #420]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	4966      	ldr	r1, [pc, #408]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	610b      	str	r3, [r1, #16]
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b64      	ldr	r3, [pc, #400]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a63      	ldr	r2, [pc, #396]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fe f859 	bl	8002d80 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004cd2:	f7fe f855 	bl	8002d80 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e279      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce4:	4b5a      	ldr	r3, [pc, #360]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d03c      	beq.n	8004d76 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01c      	beq.n	8004d3e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d04:	4b52      	ldr	r3, [pc, #328]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d0a:	4a51      	ldr	r2, [pc, #324]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004d0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fe f834 	bl	8002d80 <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004d1c:	f7fe f830 	bl	8002d80 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e254      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004d2e:	4b48      	ldr	r3, [pc, #288]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ef      	beq.n	8004d1c <HAL_RCC_OscConfig+0x3a8>
 8004d3c:	e01b      	b.n	8004d76 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3e:	4b44      	ldr	r3, [pc, #272]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d44:	4a42      	ldr	r2, [pc, #264]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4e:	f7fe f817 	bl	8002d80 <HAL_GetTick>
 8004d52:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004d56:	f7fe f813 	bl	8002d80 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e237      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d68:	4b39      	ldr	r3, [pc, #228]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ef      	bne.n	8004d56 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80d2 	beq.w	8004f28 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d84:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <HAL_RCC_OscConfig+0x4e4>)
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d118      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004d90:	4b31      	ldr	r3, [pc, #196]	; (8004e58 <HAL_RCC_OscConfig+0x4e4>)
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	4a30      	ldr	r2, [pc, #192]	; (8004e58 <HAL_RCC_OscConfig+0x4e4>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d9c:	f7fd fff0 	bl	8002d80 <HAL_GetTick>
 8004da0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fd ffec 	bl	8002d80 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e210      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004db6:	4b28      	ldr	r3, [pc, #160]	; (8004e58 <HAL_RCC_OscConfig+0x4e4>)
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d108      	bne.n	8004ddc <HAL_RCC_OscConfig+0x468>
 8004dca:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004dda:	e074      	b.n	8004ec6 <HAL_RCC_OscConfig+0x552>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d118      	bne.n	8004e16 <HAL_RCC_OscConfig+0x4a2>
 8004de4:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dea:	4a19      	ldr	r2, [pc, #100]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004df4:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dfa:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e04:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e0a:	4a11      	ldr	r2, [pc, #68]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004e0c:	f023 0304 	bic.w	r3, r3, #4
 8004e10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e14:	e057      	b.n	8004ec6 <HAL_RCC_OscConfig+0x552>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d11e      	bne.n	8004e5c <HAL_RCC_OscConfig+0x4e8>
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e24:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004e26:	f043 0304 	orr.w	r3, r3, #4
 8004e2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e2e:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e34:	4a06      	ldr	r2, [pc, #24]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e3e:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e44:	4a02      	ldr	r2, [pc, #8]	; (8004e50 <HAL_RCC_OscConfig+0x4dc>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e4e:	e03a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x552>
 8004e50:	44020c00 	.word	0x44020c00
 8004e54:	2000002c 	.word	0x2000002c
 8004e58:	44020800 	.word	0x44020800
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b85      	cmp	r3, #133	; 0x85
 8004e62:	d118      	bne.n	8004e96 <HAL_RCC_OscConfig+0x522>
 8004e64:	4ba2      	ldr	r3, [pc, #648]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e6a:	4aa1      	ldr	r2, [pc, #644]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004e6c:	f043 0304 	orr.w	r3, r3, #4
 8004e70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e74:	4b9e      	ldr	r3, [pc, #632]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e7a:	4a9d      	ldr	r2, [pc, #628]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e84:	4b9a      	ldr	r3, [pc, #616]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e8a:	4a99      	ldr	r2, [pc, #612]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e94:	e017      	b.n	8004ec6 <HAL_RCC_OscConfig+0x552>
 8004e96:	4b96      	ldr	r3, [pc, #600]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e9c:	4a94      	ldr	r2, [pc, #592]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ea6:	4b92      	ldr	r3, [pc, #584]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eac:	4a90      	ldr	r2, [pc, #576]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004eae:	f023 0304 	bic.w	r3, r3, #4
 8004eb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004eb6:	4b8e      	ldr	r3, [pc, #568]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ebc:	4a8c      	ldr	r2, [pc, #560]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d016      	beq.n	8004efc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ece:	f7fd ff57 	bl	8002d80 <HAL_GetTick>
 8004ed2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed4:	e00a      	b.n	8004eec <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7fd ff53 	bl	8002d80 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e175      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eec:	4b80      	ldr	r3, [pc, #512]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0ed      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x562>
 8004efa:	e015      	b.n	8004f28 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fd ff40 	bl	8002d80 <HAL_GetTick>
 8004f00:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f04:	f7fd ff3c 	bl	8002d80 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e15e      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f1a:	4b75      	ldr	r3, [pc, #468]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ed      	bne.n	8004f04 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d036      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d019      	beq.n	8004f70 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f3c:	4b6c      	ldr	r3, [pc, #432]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a6b      	ldr	r2, [pc, #428]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fd ff1a 	bl	8002d80 <HAL_GetTick>
 8004f4c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004f50:	f7fd ff16 	bl	8002d80 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e13a      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f62:	4b63      	ldr	r3, [pc, #396]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x5dc>
 8004f6e:	e018      	b.n	8004fa2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f70:	4b5f      	ldr	r3, [pc, #380]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a5e      	ldr	r2, [pc, #376]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fd ff00 	bl	8002d80 <HAL_GetTick>
 8004f80:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004f84:	f7fd fefc 	bl	8002d80 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e120      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f96:	4b56      	ldr	r3, [pc, #344]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8115 	beq.w	80051d6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b18      	cmp	r3, #24
 8004fb0:	f000 80af 	beq.w	8005112 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	f040 8086 	bne.w	80050ca <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004fbe:	4b4c      	ldr	r3, [pc, #304]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4b      	ldr	r2, [pc, #300]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fd fed9 	bl	8002d80 <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004fd2:	f7fd fed5 	bl	8002d80 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e0f9      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004fe4:	4b42      	ldr	r3, [pc, #264]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f0      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004ff0:	4b3f      	ldr	r3, [pc, #252]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ff8:	f023 0303 	bic.w	r3, r3, #3
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005004:	0212      	lsls	r2, r2, #8
 8005006:	430a      	orrs	r2, r1
 8005008:	4939      	ldr	r1, [pc, #228]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	628b      	str	r3, [r1, #40]	; 0x28
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	3b01      	subs	r3, #1
 8005014:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	3b01      	subs	r3, #1
 800501e:	025b      	lsls	r3, r3, #9
 8005020:	b29b      	uxth	r3, r3
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005028:	3b01      	subs	r3, #1
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	3b01      	subs	r3, #1
 8005038:	061b      	lsls	r3, r3, #24
 800503a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800503e:	492c      	ldr	r1, [pc, #176]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005044:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 800504a:	f023 0310 	bic.w	r3, r3, #16
 800504e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800505a:	4b25      	ldr	r3, [pc, #148]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	4a24      	ldr	r2, [pc, #144]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8005060:	f043 0310 	orr.w	r3, r3, #16
 8005064:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005066:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	f023 020c 	bic.w	r2, r3, #12
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	491f      	ldr	r1, [pc, #124]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8005074:	4313      	orrs	r3, r2
 8005076:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f023 0220 	bic.w	r2, r3, #32
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005084:	491a      	ldr	r1, [pc, #104]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800508a:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005094:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005096:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 800509c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fd fe6d 	bl	8002d80 <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80050aa:	f7fd fe69 	bl	8002d80 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e08d      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x736>
 80050c8:	e085      	b.n	80051d6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <HAL_RCC_OscConfig+0x77c>)
 80050d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7fd fe53 	bl	8002d80 <HAL_GetTick>
 80050da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80050de:	f7fd fe4f 	bl	8002d80 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d903      	bls.n	80050f4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e073      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
 80050f0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050f4:	4b3a      	ldr	r3, [pc, #232]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ee      	bne.n	80050de <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005100:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	4a36      	ldr	r2, [pc, #216]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 8005106:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	6293      	str	r3, [r2, #40]	; 0x28
 8005110:	e061      	b.n	80051d6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005112:	4b33      	ldr	r3, [pc, #204]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005118:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	2b01      	cmp	r3, #1
 8005124:	d031      	beq.n	800518a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f003 0203 	and.w	r2, r3, #3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d12a      	bne.n	800518a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	0a1b      	lsrs	r3, r3, #8
 8005138:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d122      	bne.n	800518a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005150:	429a      	cmp	r2, r3
 8005152:	d11a      	bne.n	800518a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	0a5b      	lsrs	r3, r3, #9
 8005158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d111      	bne.n	800518a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005172:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d108      	bne.n	800518a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	0e1b      	lsrs	r3, r3, #24
 800517c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d001      	beq.n	800518e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e024      	b.n	80051d8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	08db      	lsrs	r3, r3, #3
 8005194:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800519c:	429a      	cmp	r2, r3
 800519e:	d01a      	beq.n	80051d6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 80051a6:	f023 0310 	bic.w	r3, r3, #16
 80051aa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fd fde8 	bl	8002d80 <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80051b2:	bf00      	nop
 80051b4:	f7fd fde4 	bl	8002d80 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	4293      	cmp	r3, r2
 80051be:	d0f9      	beq.n	80051b4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c4:	4a06      	ldr	r2, [pc, #24]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	4a04      	ldr	r2, [pc, #16]	; (80051e0 <HAL_RCC_OscConfig+0x86c>)
 80051d0:	f043 0310 	orr.w	r3, r3, #16
 80051d4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	44020c00 	.word	0x44020c00

080051e4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e19e      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051f8:	4b83      	ldr	r3, [pc, #524]	; (8005408 <HAL_RCC_ClockConfig+0x224>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d910      	bls.n	8005228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005206:	4b80      	ldr	r3, [pc, #512]	; (8005408 <HAL_RCC_ClockConfig+0x224>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 020f 	bic.w	r2, r3, #15
 800520e:	497e      	ldr	r1, [pc, #504]	; (8005408 <HAL_RCC_ClockConfig+0x224>)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	4313      	orrs	r3, r2
 8005214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005216:	4b7c      	ldr	r3, [pc, #496]	; (8005408 <HAL_RCC_ClockConfig+0x224>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d001      	beq.n	8005228 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e186      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	d012      	beq.n	800525a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	4b74      	ldr	r3, [pc, #464]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005242:	429a      	cmp	r2, r3
 8005244:	d909      	bls.n	800525a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005246:	4b71      	ldr	r3, [pc, #452]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	496d      	ldr	r1, [pc, #436]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 8005256:	4313      	orrs	r3, r2
 8005258:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d012      	beq.n	800528c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	4b68      	ldr	r3, [pc, #416]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	091b      	lsrs	r3, r3, #4
 8005270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005274:	429a      	cmp	r2, r3
 8005276:	d909      	bls.n	800528c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005278:	4b64      	ldr	r3, [pc, #400]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	4961      	ldr	r1, [pc, #388]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 8005288:	4313      	orrs	r3, r2
 800528a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	4b5b      	ldr	r3, [pc, #364]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d908      	bls.n	80052ba <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80052a8:	4b58      	ldr	r3, [pc, #352]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4955      	ldr	r1, [pc, #340]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d010      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	4b50      	ldr	r3, [pc, #320]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d908      	bls.n	80052e8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80052d6:	4b4d      	ldr	r3, [pc, #308]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 020f 	bic.w	r2, r3, #15
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	494a      	ldr	r1, [pc, #296]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8093 	beq.w	800541c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80052fe:	4b43      	ldr	r3, [pc, #268]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d121      	bne.n	800534e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e113      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d107      	bne.n	8005326 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005316:	4b3d      	ldr	r3, [pc, #244]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d115      	bne.n	800534e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e107      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800532e:	4b37      	ldr	r3, [pc, #220]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e0fb      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533e:	4b33      	ldr	r3, [pc, #204]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e0f3      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800534e:	4b2f      	ldr	r3, [pc, #188]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f023 0203 	bic.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	492c      	ldr	r1, [pc, #176]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 800535c:	4313      	orrs	r3, r2
 800535e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005360:	f7fd fd0e 	bl	8002d80 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b03      	cmp	r3, #3
 800536c:	d112      	bne.n	8005394 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800536e:	e00a      	b.n	8005386 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005370:	f7fd fd06 	bl	8002d80 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	; 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e0d7      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005386:	4b21      	ldr	r3, [pc, #132]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 0318 	and.w	r3, r3, #24
 800538e:	2b18      	cmp	r3, #24
 8005390:	d1ee      	bne.n	8005370 <HAL_RCC_ClockConfig+0x18c>
 8005392:	e043      	b.n	800541c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d112      	bne.n	80053c2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800539c:	e00a      	b.n	80053b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800539e:	f7fd fcef 	bl	8002d80 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0c0      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053b4:	4b15      	ldr	r3, [pc, #84]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f003 0318 	and.w	r3, r3, #24
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d1ee      	bne.n	800539e <HAL_RCC_ClockConfig+0x1ba>
 80053c0:	e02c      	b.n	800541c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d122      	bne.n	8005410 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80053ca:	e00a      	b.n	80053e2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80053cc:	f7fd fcd8 	bl	8002d80 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e0a9      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <HAL_RCC_ClockConfig+0x228>)
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f003 0318 	and.w	r3, r3, #24
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d1ee      	bne.n	80053cc <HAL_RCC_ClockConfig+0x1e8>
 80053ee:	e015      	b.n	800541c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80053f0:	f7fd fcc6 	bl	8002d80 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d906      	bls.n	8005410 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e097      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
 8005406:	bf00      	nop
 8005408:	40022000 	.word	0x40022000
 800540c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005410:	4b4b      	ldr	r3, [pc, #300]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f003 0318 	and.w	r3, r3, #24
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e9      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d010      	beq.n	800544a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	4b44      	ldr	r3, [pc, #272]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	429a      	cmp	r2, r3
 8005436:	d208      	bcs.n	800544a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005438:	4b41      	ldr	r3, [pc, #260]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f023 020f 	bic.w	r2, r3, #15
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	493e      	ldr	r1, [pc, #248]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800544a:	4b3e      	ldr	r3, [pc, #248]	; (8005544 <HAL_RCC_ClockConfig+0x360>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d210      	bcs.n	800547a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005458:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <HAL_RCC_ClockConfig+0x360>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f023 020f 	bic.w	r2, r3, #15
 8005460:	4938      	ldr	r1, [pc, #224]	; (8005544 <HAL_RCC_ClockConfig+0x360>)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005468:	4b36      	ldr	r3, [pc, #216]	; (8005544 <HAL_RCC_ClockConfig+0x360>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d001      	beq.n	800547a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e05d      	b.n	8005536 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d010      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005492:	429a      	cmp	r2, r3
 8005494:	d208      	bcs.n	80054a8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005496:	4b2a      	ldr	r3, [pc, #168]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	4927      	ldr	r1, [pc, #156]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d012      	beq.n	80054da <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d209      	bcs.n	80054da <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80054c6:	4b1e      	ldr	r3, [pc, #120]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	491a      	ldr	r1, [pc, #104]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d012      	beq.n	800550c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d209      	bcs.n	800550c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80054f8:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	490e      	ldr	r1, [pc, #56]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800550c:	f000 f822 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_ClockConfig+0x35c>)
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	490b      	ldr	r1, [pc, #44]	; (8005548 <HAL_RCC_ClockConfig+0x364>)
 800551c:	5ccb      	ldrb	r3, [r1, r3]
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <HAL_RCC_ClockConfig+0x368>)
 8005524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <HAL_RCC_ClockConfig+0x36c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7fb fc88 	bl	8000e40 <HAL_InitTick>
 8005530:	4603      	mov	r3, r0
 8005532:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005534:	7afb      	ldrb	r3, [r7, #11]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	44020c00 	.word	0x44020c00
 8005544:	40022000 	.word	0x40022000
 8005548:	0800f690 	.word	0x0800f690
 800554c:	20000000 	.word	0x20000000
 8005550:	2000002c 	.word	0x2000002c

08005554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	; 0x24
 8005558:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800555a:	4b8c      	ldr	r3, [pc, #560]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 0318 	and.w	r3, r3, #24
 8005562:	2b08      	cmp	r3, #8
 8005564:	d102      	bne.n	800556c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005566:	4b8a      	ldr	r3, [pc, #552]	; (8005790 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	e107      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800556c:	4b87      	ldr	r3, [pc, #540]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f003 0318 	and.w	r3, r3, #24
 8005574:	2b00      	cmp	r3, #0
 8005576:	d112      	bne.n	800559e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005578:	4b84      	ldr	r3, [pc, #528]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005584:	4b81      	ldr	r3, [pc, #516]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	08db      	lsrs	r3, r3, #3
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	4a81      	ldr	r2, [pc, #516]	; (8005794 <HAL_RCC_GetSysClockFreq+0x240>)
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e0f1      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005598:	4b7e      	ldr	r3, [pc, #504]	; (8005794 <HAL_RCC_GetSysClockFreq+0x240>)
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	e0ee      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800559e:	4b7b      	ldr	r3, [pc, #492]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f003 0318 	and.w	r3, r3, #24
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d102      	bne.n	80055b0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055aa:	4b7b      	ldr	r3, [pc, #492]	; (8005798 <HAL_RCC_GetSysClockFreq+0x244>)
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	e0e5      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055b0:	4b76      	ldr	r3, [pc, #472]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 0318 	and.w	r3, r3, #24
 80055b8:	2b18      	cmp	r3, #24
 80055ba:	f040 80dd 	bne.w	8005778 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80055be:	4b73      	ldr	r3, [pc, #460]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80055c8:	4b70      	ldr	r3, [pc, #448]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80055d4:	4b6d      	ldr	r3, [pc, #436]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80055e0:	4b6a      	ldr	r3, [pc, #424]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	fb02 f303 	mul.w	r3, r2, r3
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 80b7 	beq.w	8005772 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d003      	beq.n	8005612 <HAL_RCC_GetSysClockFreq+0xbe>
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d056      	beq.n	80056be <HAL_RCC_GetSysClockFreq+0x16a>
 8005610:	e077      	b.n	8005702 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005612:	4b5e      	ldr	r3, [pc, #376]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d02d      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800561e:	4b5b      	ldr	r3, [pc, #364]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	08db      	lsrs	r3, r3, #3
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	4a5a      	ldr	r2, [pc, #360]	; (8005794 <HAL_RCC_GetSysClockFreq+0x240>)
 800562a:	fa22 f303 	lsr.w	r3, r2, r3
 800562e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005648:	4b50      	ldr	r3, [pc, #320]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 800564a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005658:	ed97 6a02 	vldr	s12, [r7, #8]
 800565c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800579c <HAL_RCC_GetSysClockFreq+0x248>
 8005660:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005664:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800566c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005674:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005678:	e065      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005684:	eddf 6a46 	vldr	s13, [pc, #280]	; 80057a0 <HAL_RCC_GetSysClockFreq+0x24c>
 8005688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800568c:	4b3f      	ldr	r3, [pc, #252]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800569c:	ed97 6a02 	vldr	s12, [r7, #8]
 80056a0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800579c <HAL_RCC_GetSysClockFreq+0x248>
 80056a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80056bc:	e043      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	ee07 3a90 	vmov	s15, r3
 80056c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c8:	eddf 6a36 	vldr	s13, [pc, #216]	; 80057a4 <HAL_RCC_GetSysClockFreq+0x250>
 80056cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d0:	4b2e      	ldr	r3, [pc, #184]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 80056d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80056e4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800579c <HAL_RCC_GetSysClockFreq+0x248>
 80056e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005700:	e021      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	ee07 3a90 	vmov	s15, r3
 8005708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80057a8 <HAL_RCC_GetSysClockFreq+0x254>
 8005710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005714:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005724:	ed97 6a02 	vldr	s12, [r7, #8]
 8005728:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800579c <HAL_RCC_GetSysClockFreq+0x248>
 800572c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005730:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005738:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800573c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005740:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005744:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005746:	4b11      	ldr	r3, [pc, #68]	; (800578c <HAL_RCC_GetSysClockFreq+0x238>)
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	0a5b      	lsrs	r3, r3, #9
 800574c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005750:	3301      	adds	r3, #1
 8005752:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800575e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576a:	ee17 3a90 	vmov	r3, s15
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	e004      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
 8005776:	e001      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <HAL_RCC_GetSysClockFreq+0x240>)
 800577a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800577c:	69fb      	ldr	r3, [r7, #28]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3724      	adds	r7, #36	; 0x24
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	44020c00 	.word	0x44020c00
 8005790:	003d0900 	.word	0x003d0900
 8005794:	03d09000 	.word	0x03d09000
 8005798:	007a1200 	.word	0x007a1200
 800579c:	46000000 	.word	0x46000000
 80057a0:	4c742400 	.word	0x4c742400
 80057a4:	4af42400 	.word	0x4af42400
 80057a8:	4a742400 	.word	0x4a742400

080057ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80057b0:	f7ff fed0 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 80057b4:	4602      	mov	r2, r0
 80057b6:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80057b8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80057ba:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80057be:	4907      	ldr	r1, [pc, #28]	; (80057dc <HAL_RCC_GetHCLKFreq+0x30>)
 80057c0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80057c2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80057c6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ca:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80057cc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80057ce:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80057d0:	681b      	ldr	r3, [r3, #0]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	44020c00 	.word	0x44020c00
 80057dc:	0800f690 	.word	0x0800f690
 80057e0:	20000000 	.word	0x20000000

080057e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80057e8:	f7ff ffe0 	bl	80057ac <HAL_RCC_GetHCLKFreq>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	4904      	ldr	r1, [pc, #16]	; (800580c <HAL_RCC_GetPCLK1Freq+0x28>)
 80057fa:	5ccb      	ldrb	r3, [r1, r3]
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	44020c00 	.word	0x44020c00
 800580c:	0800f6a0 	.word	0x0800f6a0

08005810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005814:	f7ff ffca 	bl	80057ac <HAL_RCC_GetHCLKFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	4b06      	ldr	r3, [pc, #24]	; (8005834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	4904      	ldr	r1, [pc, #16]	; (8005838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005830:	4618      	mov	r0, r3
 8005832:	bd80      	pop	{r7, pc}
 8005834:	44020c00 	.word	0x44020c00
 8005838:	0800f6a0 	.word	0x0800f6a0

0800583c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005840:	f7ff ffb4 	bl	80057ac <HAL_RCC_GetHCLKFreq>
 8005844:	4602      	mov	r2, r0
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	0b1b      	lsrs	r3, r3, #12
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	4904      	ldr	r1, [pc, #16]	; (8005864 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005852:	5ccb      	ldrb	r3, [r1, r3]
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800585c:	4618      	mov	r0, r3
 800585e:	bd80      	pop	{r7, pc}
 8005860:	44020c00 	.word	0x44020c00
 8005864:	0800f6a0 	.word	0x0800f6a0

08005868 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	221f      	movs	r2, #31
 8005876:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <HAL_RCC_GetClockConfig+0x68>)
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f003 0203 	and.w	r2, r3, #3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <HAL_RCC_GetClockConfig+0x68>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f003 020f 	and.w	r2, r3, #15
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	0a1b      	lsrs	r3, r3, #8
 80058ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <HAL_RCC_GetClockConfig+0x6c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 020f 	and.w	r2, r3, #15
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	601a      	str	r2, [r3, #0]
}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	44020c00 	.word	0x44020c00
 80058d4:	40022000 	.word	0x40022000

080058d8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80058d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058dc:	b0d8      	sub	sp, #352	; 0x160
 80058de:	af00      	add	r7, sp, #0
 80058e0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058e4:	2300      	movs	r3, #0
 80058e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058ea:	2300      	movs	r3, #0
 80058ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80058fc:	2500      	movs	r5, #0
 80058fe:	ea54 0305 	orrs.w	r3, r4, r5
 8005902:	d00b      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005904:	4bcd      	ldr	r3, [pc, #820]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800590a:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800590e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	4ac9      	ldr	r2, [pc, #804]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005916:	430b      	orrs	r3, r1
 8005918:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800591c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f002 0801 	and.w	r8, r2, #1
 8005928:	f04f 0900 	mov.w	r9, #0
 800592c:	ea58 0309 	orrs.w	r3, r8, r9
 8005930:	d042      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005938:	2b05      	cmp	r3, #5
 800593a:	d823      	bhi.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800593c:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	0800598d 	.word	0x0800598d
 8005948:	0800595d 	.word	0x0800595d
 800594c:	08005971 	.word	0x08005971
 8005950:	0800598d 	.word	0x0800598d
 8005954:	0800598d 	.word	0x0800598d
 8005958:	0800598d 	.word	0x0800598d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800595c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005960:	3308      	adds	r3, #8
 8005962:	4618      	mov	r0, r3
 8005964:	f004 feda 	bl	800a71c <RCCEx_PLL2_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800596e:	e00e      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005974:	3330      	adds	r3, #48	; 0x30
 8005976:	4618      	mov	r0, r3
 8005978:	f004 ff68 	bl	800a84c <RCCEx_PLL3_Config>
 800597c:	4603      	mov	r3, r0
 800597e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005982:	e004      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800598a:	e000      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800598c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10c      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005996:	4ba9      	ldr	r3, [pc, #676]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800599c:	f023 0107 	bic.w	r1, r3, #7
 80059a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a6:	4aa5      	ldr	r2, [pc, #660]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80059a8:	430b      	orrs	r3, r1
 80059aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80059ae:	e003      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f002 0a02 	and.w	sl, r2, #2
 80059c4:	f04f 0b00 	mov.w	fp, #0
 80059c8:	ea5a 030b 	orrs.w	r3, sl, fp
 80059cc:	f000 8088 	beq.w	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80059d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d6:	2b28      	cmp	r3, #40	; 0x28
 80059d8:	d868      	bhi.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005ab5 	.word	0x08005ab5
 80059e4:	08005aad 	.word	0x08005aad
 80059e8:	08005aad 	.word	0x08005aad
 80059ec:	08005aad 	.word	0x08005aad
 80059f0:	08005aad 	.word	0x08005aad
 80059f4:	08005aad 	.word	0x08005aad
 80059f8:	08005aad 	.word	0x08005aad
 80059fc:	08005aad 	.word	0x08005aad
 8005a00:	08005a85 	.word	0x08005a85
 8005a04:	08005aad 	.word	0x08005aad
 8005a08:	08005aad 	.word	0x08005aad
 8005a0c:	08005aad 	.word	0x08005aad
 8005a10:	08005aad 	.word	0x08005aad
 8005a14:	08005aad 	.word	0x08005aad
 8005a18:	08005aad 	.word	0x08005aad
 8005a1c:	08005aad 	.word	0x08005aad
 8005a20:	08005a99 	.word	0x08005a99
 8005a24:	08005aad 	.word	0x08005aad
 8005a28:	08005aad 	.word	0x08005aad
 8005a2c:	08005aad 	.word	0x08005aad
 8005a30:	08005aad 	.word	0x08005aad
 8005a34:	08005aad 	.word	0x08005aad
 8005a38:	08005aad 	.word	0x08005aad
 8005a3c:	08005aad 	.word	0x08005aad
 8005a40:	08005ab5 	.word	0x08005ab5
 8005a44:	08005aad 	.word	0x08005aad
 8005a48:	08005aad 	.word	0x08005aad
 8005a4c:	08005aad 	.word	0x08005aad
 8005a50:	08005aad 	.word	0x08005aad
 8005a54:	08005aad 	.word	0x08005aad
 8005a58:	08005aad 	.word	0x08005aad
 8005a5c:	08005aad 	.word	0x08005aad
 8005a60:	08005ab5 	.word	0x08005ab5
 8005a64:	08005aad 	.word	0x08005aad
 8005a68:	08005aad 	.word	0x08005aad
 8005a6c:	08005aad 	.word	0x08005aad
 8005a70:	08005aad 	.word	0x08005aad
 8005a74:	08005aad 	.word	0x08005aad
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005aad 	.word	0x08005aad
 8005a80:	08005ab5 	.word	0x08005ab5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a88:	3308      	adds	r3, #8
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f004 fe46 	bl	800a71c <RCCEx_PLL2_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005a96:	e00e      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a9c:	3330      	adds	r3, #48	; 0x30
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f004 fed4 	bl	800a84c <RCCEx_PLL3_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005aaa:	e004      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005ab2:	e000      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005abe:	4b5f      	ldr	r3, [pc, #380]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005ac0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005ac4:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ace:	4a5b      	ldr	r2, [pc, #364]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005ad6:	e003      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005adc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f002 0304 	and.w	r3, r2, #4
 8005aec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005af6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8005afa:	460b      	mov	r3, r1
 8005afc:	4313      	orrs	r3, r2
 8005afe:	d04e      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005b00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b06:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005b0a:	d02c      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005b0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005b10:	d825      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b16:	d028      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b1c:	d81f      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b20:	d025      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005b22:	2bc0      	cmp	r3, #192	; 0xc0
 8005b24:	d81b      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005b26:	2b80      	cmp	r3, #128	; 0x80
 8005b28:	d00f      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005b2a:	2b80      	cmp	r3, #128	; 0x80
 8005b2c:	d817      	bhi.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01f      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d113      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f004 fded 	bl	800a71c <RCCEx_PLL2_Config>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005b48:	e014      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b4e:	3330      	adds	r3, #48	; 0x30
 8005b50:	4618      	mov	r0, r3
 8005b52:	f004 fe7b 	bl	800a84c <RCCEx_PLL3_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b64:	e006      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b66:	bf00      	nop
 8005b68:	e004      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10c      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005b7c:	4b2f      	ldr	r3, [pc, #188]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b82:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005b86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b8c:	4a2b      	ldr	r2, [pc, #172]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005b94:	e003      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b9a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f002 0308 	and.w	r3, r2, #8
 8005baa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005bb4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	d056      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005bc8:	d031      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005bca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005bce:	d82a      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd4:	d02d      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bda:	d824      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005bdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005be0:	d029      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005be2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005be6:	d81e      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bec:	d011      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf2:	d818      	bhi.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d023      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bfc:	d113      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c02:	3308      	adds	r3, #8
 8005c04:	4618      	mov	r0, r3
 8005c06:	f004 fd89 	bl	800a71c <RCCEx_PLL2_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005c10:	e017      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c16:	3330      	adds	r3, #48	; 0x30
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f004 fe17 	bl	800a84c <RCCEx_PLL3_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005c24:	e00d      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c2c:	e009      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e007      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005c32:	bf00      	nop
 8005c34:	e005      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005c36:	bf00      	nop
 8005c38:	e003      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005c3a:	bf00      	nop
 8005c3c:	44020c00 	.word	0x44020c00
        break;
 8005c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10c      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005c4a:	4bbb      	ldr	r3, [pc, #748]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005c50:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005c54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c5a:	4ab7      	ldr	r2, [pc, #732]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005c62:	e003      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f002 0310 	and.w	r3, r2, #16
 8005c78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005c82:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8005c86:	460b      	mov	r3, r1
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	d053      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c92:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c96:	d031      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005c98:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c9c:	d82a      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ca2:	d02d      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ca8:	d824      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cae:	d029      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005cb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cb4:	d81e      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cba:	d011      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc0:	d818      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d020      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cca:	d113      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f004 fd22 	bl	800a71c <RCCEx_PLL2_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005cde:	e014      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ce4:	3330      	adds	r3, #48	; 0x30
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f004 fdb0 	bl	800a84c <RCCEx_PLL3_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005cfa:	e006      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005cfc:	bf00      	nop
 8005cfe:	e004      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005d00:	bf00      	nop
 8005d02:	e002      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005d04:	bf00      	nop
 8005d06:	e000      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005d12:	4b89      	ldr	r3, [pc, #548]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005d18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d22:	4a85      	ldr	r2, [pc, #532]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005d24:	430b      	orrs	r3, r1
 8005d26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005d2a:	e003      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d30:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f002 0320 	and.w	r3, r2, #32
 8005d40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005d44:	2300      	movs	r3, #0
 8005d46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005d4a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4313      	orrs	r3, r2
 8005d52:	d053      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005d5e:	d031      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005d60:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005d64:	d82a      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d6a:	d02d      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d70:	d824      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d72:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005d76:	d029      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005d78:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005d7c:	d81e      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d82:	d011      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d88:	d818      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d020      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d92:	d113      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d98:	3308      	adds	r3, #8
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f004 fcbe 	bl	800a71c <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005da6:	e014      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dac:	3330      	adds	r3, #48	; 0x30
 8005dae:	4618      	mov	r0, r3
 8005db0:	f004 fd4c 	bl	800a84c <RCCEx_PLL3_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005dc2:	e006      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005dc4:	bf00      	nop
 8005dc6:	e004      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005dc8:	bf00      	nop
 8005dca:	e002      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005dcc:	bf00      	nop
 8005dce:	e000      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10c      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005dda:	4b57      	ldr	r3, [pc, #348]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005ddc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005de0:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8005de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	4a53      	ldr	r2, [pc, #332]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005df8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005e08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e12:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d053      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e22:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e26:	d031      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005e28:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005e2c:	d82a      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e32:	d02d      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e38:	d824      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e3e:	d029      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005e40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e44:	d81e      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e4a:	d011      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005e4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e50:	d818      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d020      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e5a:	d113      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e60:	3308      	adds	r3, #8
 8005e62:	4618      	mov	r0, r3
 8005e64:	f004 fc5a 	bl	800a71c <RCCEx_PLL2_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005e6e:	e014      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e74:	3330      	adds	r3, #48	; 0x30
 8005e76:	4618      	mov	r0, r3
 8005e78:	f004 fce8 	bl	800a84c <RCCEx_PLL3_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005e82:	e00a      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e8a:	e006      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e8c:	bf00      	nop
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e90:	bf00      	nop
 8005e92:	e002      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e94:	bf00      	nop
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005ea2:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005ea4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005ea8:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8005eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb2:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005eba:	e003      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ec0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ed0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005eda:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	d055      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eea:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005eee:	d033      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005ef0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ef4:	d82c      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005ef6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005efa:	d02f      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005efc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f00:	d826      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005f02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f06:	d02b      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005f08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f0c:	d820      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f12:	d013      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f18:	d81a      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d022      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f22:	d115      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f28:	3308      	adds	r3, #8
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f004 fbf6 	bl	800a71c <RCCEx_PLL2_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005f36:	e016      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005f38:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f40:	3330      	adds	r3, #48	; 0x30
 8005f42:	4618      	mov	r0, r3
 8005f44:	f004 fc82 	bl	800a84c <RCCEx_PLL3_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005f4e:	e00a      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f56:	e006      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f58:	bf00      	nop
 8005f5a:	e004      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f5c:	bf00      	nop
 8005f5e:	e002      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f60:	bf00      	nop
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005f6e:	4bbb      	ldr	r3, [pc, #748]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f74:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005f78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f7e:	4ab7      	ldr	r2, [pc, #732]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005f86:	e003      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f8c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005f9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005fa6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8005faa:	460b      	mov	r3, r1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	d053      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005fba:	d031      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005fbc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005fc0:	d82a      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fc6:	d02d      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fcc:	d824      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005fce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fd2:	d029      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005fd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fd8:	d81e      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fde:	d011      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fe4:	d818      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d020      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005fea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fee:	d113      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f004 fb90 	bl	800a71c <RCCEx_PLL2_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8006002:	e014      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006008:	3330      	adds	r3, #48	; 0x30
 800600a:	4618      	mov	r0, r3
 800600c:	f004 fc1e 	bl	800a84c <RCCEx_PLL3_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8006016:	e00a      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800601e:	e006      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006020:	bf00      	nop
 8006022:	e004      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006024:	bf00      	nop
 8006026:	e002      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006028:	bf00      	nop
 800602a:	e000      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800602c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10c      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8006036:	4b89      	ldr	r3, [pc, #548]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800603c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006040:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006046:	4a85      	ldr	r2, [pc, #532]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006048:	430b      	orrs	r3, r1
 800604a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800604e:	e003      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006054:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006058:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006064:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006068:	2300      	movs	r3, #0
 800606a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800606e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006072:	460b      	mov	r3, r1
 8006074:	4313      	orrs	r3, r2
 8006076:	d055      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8006078:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800607c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006080:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8006084:	d031      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x812>
 8006086:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800608a:	d82a      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800608c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006090:	d02d      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006096:	d824      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006098:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800609c:	d029      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800609e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80060a2:	d81e      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80060a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a8:	d011      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80060aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ae:	d818      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d020      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80060b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b8:	d113      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060be:	3308      	adds	r3, #8
 80060c0:	4618      	mov	r0, r3
 80060c2:	f004 fb2b 	bl	800a71c <RCCEx_PLL2_Config>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80060cc:	e014      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060d2:	3330      	adds	r3, #48	; 0x30
 80060d4:	4618      	mov	r0, r3
 80060d6:	f004 fbb9 	bl	800a84c <RCCEx_PLL3_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80060e0:	e00a      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80060e8:	e006      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060ea:	bf00      	nop
 80060ec:	e004      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060ee:	bf00      	nop
 80060f0:	e002      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060f2:	bf00      	nop
 80060f4:	e000      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10d      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8006100:	4b56      	ldr	r3, [pc, #344]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006106:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 800610a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800610e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006112:	4a52      	ldr	r2, [pc, #328]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006114:	430b      	orrs	r3, r1
 8006116:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800611a:	e003      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006120:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8006124:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006130:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800613a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800613e:	460b      	mov	r3, r1
 8006140:	4313      	orrs	r3, r2
 8006142:	d044      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8006144:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614c:	2b05      	cmp	r3, #5
 800614e:	d823      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006150:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	080061a1 	.word	0x080061a1
 800615c:	08006171 	.word	0x08006171
 8006160:	08006185 	.word	0x08006185
 8006164:	080061a1 	.word	0x080061a1
 8006168:	080061a1 	.word	0x080061a1
 800616c:	080061a1 	.word	0x080061a1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006170:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006174:	3308      	adds	r3, #8
 8006176:	4618      	mov	r0, r3
 8006178:	f004 fad0 	bl	800a71c <RCCEx_PLL2_Config>
 800617c:	4603      	mov	r3, r0
 800617e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006182:	e00e      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006188:	3330      	adds	r3, #48	; 0x30
 800618a:	4618      	mov	r0, r3
 800618c:	f004 fb5e 	bl	800a84c <RCCEx_PLL3_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006196:	e004      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800619e:	e000      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80061a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10d      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80061aa:	4b2c      	ldr	r3, [pc, #176]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80061ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061b0:	f023 0107 	bic.w	r1, r3, #7
 80061b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061bc:	4a27      	ldr	r2, [pc, #156]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80061be:	430b      	orrs	r3, r1
 80061c0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80061c4:	e003      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80061ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80061ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80061da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061de:	2300      	movs	r3, #0
 80061e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061e4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80061e8:	460b      	mov	r3, r1
 80061ea:	4313      	orrs	r3, r2
 80061ec:	d04f      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80061ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f6:	2b50      	cmp	r3, #80	; 0x50
 80061f8:	d029      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80061fa:	2b50      	cmp	r3, #80	; 0x50
 80061fc:	d823      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061fe:	2b40      	cmp	r3, #64	; 0x40
 8006200:	d027      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8006202:	2b40      	cmp	r3, #64	; 0x40
 8006204:	d81f      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006206:	2b30      	cmp	r3, #48	; 0x30
 8006208:	d025      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800620a:	2b30      	cmp	r3, #48	; 0x30
 800620c:	d81b      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800620e:	2b20      	cmp	r3, #32
 8006210:	d00f      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006212:	2b20      	cmp	r3, #32
 8006214:	d817      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d022      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800621a:	2b10      	cmp	r3, #16
 800621c:	d113      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800621e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006222:	3308      	adds	r3, #8
 8006224:	4618      	mov	r0, r3
 8006226:	f004 fa79 	bl	800a71c <RCCEx_PLL2_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006230:	e017      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006232:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006236:	3330      	adds	r3, #48	; 0x30
 8006238:	4618      	mov	r0, r3
 800623a:	f004 fb07 	bl	800a84c <RCCEx_PLL3_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006244:	e00d      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800624c:	e009      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800624e:	bf00      	nop
 8006250:	e007      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006252:	bf00      	nop
 8006254:	e005      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006256:	bf00      	nop
 8006258:	e003      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800625a:	bf00      	nop
 800625c:	44020c00 	.word	0x44020c00
        break;
 8006260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006262:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10d      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800626a:	4baf      	ldr	r3, [pc, #700]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800626c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006270:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006274:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627c:	4aaa      	ldr	r2, [pc, #680]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800627e:	430b      	orrs	r3, r1
 8006280:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006284:	e003      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006286:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800628a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800628e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800629a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800629e:	2300      	movs	r3, #0
 80062a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4313      	orrs	r3, r2
 80062ac:	d055      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80062ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80062ba:	d031      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80062bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80062c0:	d82a      	bhi.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80062c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062c6:	d02d      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80062c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062cc:	d824      	bhi.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80062ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062d2:	d029      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80062d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062d8:	d81e      	bhi.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80062da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062de:	d011      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80062e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062e4:	d818      	bhi.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d020      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80062ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062ee:	d113      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062f4:	3308      	adds	r3, #8
 80062f6:	4618      	mov	r0, r3
 80062f8:	f004 fa10 	bl	800a71c <RCCEx_PLL2_Config>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006302:	e014      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006304:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006308:	3330      	adds	r3, #48	; 0x30
 800630a:	4618      	mov	r0, r3
 800630c:	f004 fa9e 	bl	800a84c <RCCEx_PLL3_Config>
 8006310:	4603      	mov	r3, r0
 8006312:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006316:	e00a      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800631e:	e006      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006320:	bf00      	nop
 8006322:	e004      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006324:	bf00      	nop
 8006326:	e002      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006328:	bf00      	nop
 800632a:	e000      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800632c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10d      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006336:	4b7c      	ldr	r3, [pc, #496]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800633c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006340:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006348:	4a77      	ldr	r2, [pc, #476]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800634a:	430b      	orrs	r3, r1
 800634c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006350:	e003      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006356:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800635a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800636a:	2300      	movs	r3, #0
 800636c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006370:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006374:	460b      	mov	r3, r1
 8006376:	4313      	orrs	r3, r2
 8006378:	d03d      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800637a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006386:	d01b      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8006388:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800638c:	d814      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800638e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006392:	d017      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8006394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006398:	d80e      	bhi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d014      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800639e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a2:	d109      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063a8:	3330      	adds	r3, #48	; 0x30
 80063aa:	4618      	mov	r0, r3
 80063ac:	f004 fa4e 	bl	800a84c <RCCEx_PLL3_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80063b6:	e008      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80063be:	e004      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80063c0:	bf00      	nop
 80063c2:	e002      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80063c4:	bf00      	nop
 80063c6:	e000      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80063c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10d      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80063d2:	4b55      	ldr	r3, [pc, #340]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80063d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80063d8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80063dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e4:	4a50      	ldr	r2, [pc, #320]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80063e6:	430b      	orrs	r3, r1
 80063e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80063ec:	e003      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80063f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006402:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006406:	2300      	movs	r3, #0
 8006408:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800640c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006410:	460b      	mov	r3, r1
 8006412:	4313      	orrs	r3, r2
 8006414:	d03d      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006416:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800641a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800641e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006422:	d01b      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8006424:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006428:	d814      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800642a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800642e:	d017      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006430:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006434:	d80e      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d014      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800643a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800643e:	d109      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006440:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006444:	3330      	adds	r3, #48	; 0x30
 8006446:	4618      	mov	r0, r3
 8006448:	f004 fa00 	bl	800a84c <RCCEx_PLL3_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006452:	e008      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800645a:	e004      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800645c:	bf00      	nop
 800645e:	e002      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006460:	bf00      	nop
 8006462:	e000      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006466:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10d      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800646e:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006474:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006478:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800647c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006480:	4a29      	ldr	r2, [pc, #164]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006482:	430b      	orrs	r3, r1
 8006484:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006488:	e003      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800648e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006492:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800649e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064a2:	2300      	movs	r3, #0
 80064a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064ac:	460b      	mov	r3, r1
 80064ae:	4313      	orrs	r3, r2
 80064b0:	d040      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80064b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064be:	d01b      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80064c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064c4:	d814      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80064c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064ca:	d017      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80064cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064d0:	d80e      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d014      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80064d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064da:	d109      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064e0:	3330      	adds	r3, #48	; 0x30
 80064e2:	4618      	mov	r0, r3
 80064e4:	f004 f9b2 	bl	800a84c <RCCEx_PLL3_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80064ee:	e008      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80064f8:	bf00      	nop
 80064fa:	e002      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80064fc:	bf00      	nop
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006506:	2b00      	cmp	r3, #0
 8006508:	d110      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800650c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006510:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006514:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800651c:	4a02      	ldr	r2, [pc, #8]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800651e:	430b      	orrs	r3, r1
 8006520:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006524:	e006      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8006526:	bf00      	nop
 8006528:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006530:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	2100      	movs	r1, #0
 800653e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800654a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d03d      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8006554:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006558:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800655c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006560:	d01b      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006562:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006566:	d814      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006568:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800656c:	d017      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800656e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006572:	d80e      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d014      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800657c:	d109      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800657e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006582:	3330      	adds	r3, #48	; 0x30
 8006584:	4618      	mov	r0, r3
 8006586:	f004 f961 	bl	800a84c <RCCEx_PLL3_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8006590:	e008      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006598:	e004      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800659a:	bf00      	nop
 800659c:	e002      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800659e:	bf00      	nop
 80065a0:	e000      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80065a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10d      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80065ac:	4bbe      	ldr	r3, [pc, #760]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065b2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80065b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065be:	4aba      	ldr	r2, [pc, #744]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065c0:	430b      	orrs	r3, r1
 80065c2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80065c6:	e003      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80065cc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80065d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80065dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065e0:	2300      	movs	r3, #0
 80065e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80065ea:	460b      	mov	r3, r1
 80065ec:	4313      	orrs	r3, r2
 80065ee:	d035      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80065f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065fc:	d015      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80065fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006602:	d80e      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d012      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8006608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800660c:	d109      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800660e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006612:	3330      	adds	r3, #48	; 0x30
 8006614:	4618      	mov	r0, r3
 8006616:	f004 f919 	bl	800a84c <RCCEx_PLL3_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006620:	e006      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006628:	e002      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800662e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006630:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10d      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006638:	4b9b      	ldr	r3, [pc, #620]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800663a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800663e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8006642:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006646:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800664a:	4a97      	ldr	r2, [pc, #604]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800664c:	430b      	orrs	r3, r1
 800664e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006652:	e003      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006654:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006658:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800665c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	2100      	movs	r1, #0
 8006666:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800666a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800666e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006672:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006676:	460b      	mov	r3, r1
 8006678:	4313      	orrs	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800667c:	4b8a      	ldr	r3, [pc, #552]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	4a89      	ldr	r2, [pc, #548]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006682:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006686:	61d3      	str	r3, [r2, #28]
 8006688:	4b87      	ldr	r3, [pc, #540]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800668a:	69d9      	ldr	r1, [r3, #28]
 800668c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006690:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006694:	4a84      	ldr	r2, [pc, #528]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006696:	430b      	orrs	r3, r1
 8006698:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800669a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80066a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066aa:	2300      	movs	r3, #0
 80066ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80066b4:	460b      	mov	r3, r1
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d055      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80066ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80066c6:	d031      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80066c8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80066cc:	d82a      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d02d      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d8:	d824      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066de:	d029      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80066e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066e4:	d81e      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ea:	d011      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80066ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f0:	d818      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d020      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fa:	d113      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006700:	3308      	adds	r3, #8
 8006702:	4618      	mov	r0, r3
 8006704:	f004 f80a 	bl	800a71c <RCCEx_PLL2_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800670e:	e014      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006710:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006714:	3330      	adds	r3, #48	; 0x30
 8006716:	4618      	mov	r0, r3
 8006718:	f004 f898 	bl	800a84c <RCCEx_PLL3_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006722:	e00a      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800672a:	e006      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800672c:	bf00      	nop
 800672e:	e004      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006730:	bf00      	nop
 8006732:	e002      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006734:	bf00      	nop
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10d      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006742:	4b59      	ldr	r3, [pc, #356]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006744:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006748:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800674c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006754:	4a54      	ldr	r2, [pc, #336]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006756:	430b      	orrs	r3, r1
 8006758:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800675c:	e003      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006762:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006766:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006776:	2300      	movs	r3, #0
 8006778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800677c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006780:	460b      	mov	r3, r1
 8006782:	4313      	orrs	r3, r2
 8006784:	d055      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006786:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800678a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800678e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006792:	d031      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8006794:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006798:	d82a      	bhi.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800679a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800679e:	d02d      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80067a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067a4:	d824      	bhi.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80067a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067aa:	d029      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80067ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067b0:	d81e      	bhi.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80067b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b6:	d011      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80067b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067bc:	d818      	bhi.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d020      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80067c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c6:	d113      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067cc:	3308      	adds	r3, #8
 80067ce:	4618      	mov	r0, r3
 80067d0:	f003 ffa4 	bl	800a71c <RCCEx_PLL2_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80067da:	e014      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067e0:	3330      	adds	r3, #48	; 0x30
 80067e2:	4618      	mov	r0, r3
 80067e4:	f004 f832 	bl	800a84c <RCCEx_PLL3_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80067ee:	e00a      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80067f6:	e006      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067f8:	bf00      	nop
 80067fa:	e004      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067fc:	bf00      	nop
 80067fe:	e002      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006800:	bf00      	nop
 8006802:	e000      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006806:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10d      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800680e:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006810:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006814:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006818:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800681c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006820:	4a21      	ldr	r2, [pc, #132]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006822:	430b      	orrs	r3, r1
 8006824:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006828:	e003      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800682e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006832:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	2100      	movs	r1, #0
 800683c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006848:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800684c:	460b      	mov	r3, r1
 800684e:	4313      	orrs	r3, r2
 8006850:	d057      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006852:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800685a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800685e:	d033      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006864:	d82c      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006866:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800686a:	d02f      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800686c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006870:	d826      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006872:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006876:	d02b      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006878:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800687c:	d820      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800687e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006882:	d013      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006888:	d81a      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d022      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800688e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006892:	d115      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006894:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006898:	3308      	adds	r3, #8
 800689a:	4618      	mov	r0, r3
 800689c:	f003 ff3e 	bl	800a71c <RCCEx_PLL2_Config>
 80068a0:	4603      	mov	r3, r0
 80068a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80068a6:	e016      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80068a8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068b0:	3330      	adds	r3, #48	; 0x30
 80068b2:	4618      	mov	r0, r3
 80068b4:	f003 ffca 	bl	800a84c <RCCEx_PLL3_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80068be:	e00a      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80068c6:	e006      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068c8:	bf00      	nop
 80068ca:	e004      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068cc:	bf00      	nop
 80068ce:	e002      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068d0:	bf00      	nop
 80068d2:	e000      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10d      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80068de:	4bbb      	ldr	r3, [pc, #748]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80068e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80068e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80068e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068f0:	4ab6      	ldr	r2, [pc, #728]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80068f2:	430b      	orrs	r3, r1
 80068f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80068f8:	e003      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80068fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006902:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	2100      	movs	r1, #0
 800690c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006918:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800691c:	460b      	mov	r3, r1
 800691e:	4313      	orrs	r3, r2
 8006920:	d055      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006922:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800692a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800692e:	d031      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006930:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006934:	d82a      	bhi.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800693a:	d02d      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800693c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006940:	d824      	bhi.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006942:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006946:	d029      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800694c:	d81e      	bhi.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800694e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006952:	d011      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006958:	d818      	bhi.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d020      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800695e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006962:	d113      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006964:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006968:	3308      	adds	r3, #8
 800696a:	4618      	mov	r0, r3
 800696c:	f003 fed6 	bl	800a71c <RCCEx_PLL2_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006976:	e014      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006978:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800697c:	3330      	adds	r3, #48	; 0x30
 800697e:	4618      	mov	r0, r3
 8006980:	f003 ff64 	bl	800a84c <RCCEx_PLL3_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800698a:	e00a      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006992:	e006      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006994:	bf00      	nop
 8006996:	e004      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006998:	bf00      	nop
 800699a:	e002      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80069a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10d      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80069aa:	4b88      	ldr	r3, [pc, #544]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80069ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80069b0:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80069b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069bc:	4a83      	ldr	r2, [pc, #524]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80069be:	430b      	orrs	r3, r1
 80069c0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80069c4:	e003      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80069ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80069ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	2100      	movs	r1, #0
 80069d8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80069dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d055      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80069ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80069fa:	d031      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80069fc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006a00:	d82a      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a06:	d02d      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006a08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a0c:	d824      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006a0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a12:	d029      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006a14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a18:	d81e      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a1e:	d011      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a24:	d818      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d020      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8006a2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a2e:	d113      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a34:	3308      	adds	r3, #8
 8006a36:	4618      	mov	r0, r3
 8006a38:	f003 fe70 	bl	800a71c <RCCEx_PLL2_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006a42:	e014      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a48:	3330      	adds	r3, #48	; 0x30
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f003 fefe 	bl	800a84c <RCCEx_PLL3_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006a56:	e00a      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006a5e:	e006      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a60:	bf00      	nop
 8006a62:	e004      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a64:	bf00      	nop
 8006a66:	e002      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a68:	bf00      	nop
 8006a6a:	e000      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10d      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006a76:	4b55      	ldr	r3, [pc, #340]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006a78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a7c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a88:	4a50      	ldr	r2, [pc, #320]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006a90:	e003      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006a96:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8006aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ab0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d055      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006abe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ac6:	d031      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006acc:	d82a      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad2:	d02d      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad8:	d824      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006ada:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ade:	d029      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006ae0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ae4:	d81e      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aea:	d011      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006af0:	d818      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d020      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006afa:	d113      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b00:	3308      	adds	r3, #8
 8006b02:	4618      	mov	r0, r3
 8006b04:	f003 fe0a 	bl	800a71c <RCCEx_PLL2_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006b0e:	e014      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b14:	3330      	adds	r3, #48	; 0x30
 8006b16:	4618      	mov	r0, r3
 8006b18:	f003 fe98 	bl	800a84c <RCCEx_PLL3_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006b22:	e00a      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006b2a:	e006      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b2c:	bf00      	nop
 8006b2e:	e004      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b30:	bf00      	nop
 8006b32:	e002      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b34:	bf00      	nop
 8006b36:	e000      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10d      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006b42:	4b22      	ldr	r3, [pc, #136]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006b48:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006b54:	4a1d      	ldr	r2, [pc, #116]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b56:	430b      	orrs	r3, r1
 8006b58:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006b5c:	e003      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006b62:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b76:	2300      	movs	r3, #0
 8006b78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006b7c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d055      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006b86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b92:	d035      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006b94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b98:	d82e      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b9e:	d031      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006ba0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ba4:	d828      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006baa:	d01b      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb0:	d822      	bhi.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bba:	d009      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006bbc:	e01c      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bbe:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	4a02      	ldr	r2, [pc, #8]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006bca:	e01c      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006bcc:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f003 fda0 	bl	800a71c <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006be2:	e010      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006be8:	3330      	adds	r3, #48	; 0x30
 8006bea:	4618      	mov	r0, r3
 8006bec:	f003 fe2e 	bl	800a84c <RCCEx_PLL3_Config>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006bf6:	e006      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006bfe:	e002      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10d      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006c0e:	4bc3      	ldr	r3, [pc, #780]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c14:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c20:	4abe      	ldr	r2, [pc, #760]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c22:	430b      	orrs	r3, r1
 8006c24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c28:	e003      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c2e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006c3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c42:	2300      	movs	r3, #0
 8006c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c48:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d051      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c5e:	d033      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006c60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c64:	d82c      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c66:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006c6a:	d02d      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006c6c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006c70:	d826      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c76:	d019      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7c:	d820      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8006c82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c86:	d007      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006c88:	e01a      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c8a:	4ba4      	ldr	r3, [pc, #656]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	4aa3      	ldr	r2, [pc, #652]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c94:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006c96:	e018      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f003 fd3c 	bl	800a71c <RCCEx_PLL2_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006caa:	e00e      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cb0:	3330      	adds	r3, #48	; 0x30
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f003 fdca 	bl	800a84c <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006cbe:	e004      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006cd2:	4b92      	ldr	r3, [pc, #584]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cd8:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8006cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ce0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006ce4:	4a8d      	ldr	r2, [pc, #564]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006cec:	e003      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006cf2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006d02:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d04:	2300      	movs	r3, #0
 8006d06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	d032      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006d12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	d80f      	bhi.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d211      	bcs.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d911      	bls.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d109      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d2e:	3308      	adds	r3, #8
 8006d30:	4618      	mov	r0, r3
 8006d32:	f003 fcf3 	bl	800a71c <RCCEx_PLL2_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006d3c:	e006      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006d46:	bf00      	nop
 8006d48:	e000      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10d      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006d54:	4b71      	ldr	r3, [pc, #452]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d5a:	f023 0107 	bic.w	r1, r3, #7
 8006d5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006d66:	4a6d      	ldr	r2, [pc, #436]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d6e:	e003      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d74:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	2100      	movs	r1, #0
 8006d82:	6739      	str	r1, [r7, #112]	; 0x70
 8006d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d88:	677b      	str	r3, [r7, #116]	; 0x74
 8006d8a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d024      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d005      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006daa:	e002      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006dac:	bf00      	nop
 8006dae:	e000      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006dba:	4b58      	ldr	r3, [pc, #352]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dc0:	f023 0108 	bic.w	r1, r3, #8
 8006dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006dcc:	4a53      	ldr	r2, [pc, #332]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006dd4:	e003      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006dda:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dec:	2300      	movs	r3, #0
 8006dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006df0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006df4:	460b      	mov	r3, r1
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f000 80b9 	beq.w	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006dfc:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	4a47      	ldr	r2, [pc, #284]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006e02:	f043 0301 	orr.w	r3, r3, #1
 8006e06:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e08:	f7fb ffba 	bl	8002d80 <HAL_GetTick>
 8006e0c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006e10:	e00b      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e12:	f7fb ffb5 	bl	8002d80 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d903      	bls.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006e28:	e005      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006e2a:	4b3d      	ldr	r3, [pc, #244]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0ed      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006e36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 8093 	bne.w	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e40:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006e4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d023      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e5a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8006e5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d01b      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e66:	4b2d      	ldr	r3, [pc, #180]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e70:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e74:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e7a:	4a28      	ldr	r2, [pc, #160]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e84:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e8a:	4a24      	ldr	r2, [pc, #144]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e94:	4a21      	ldr	r2, [pc, #132]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006e9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d019      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eaa:	f7fb ff69 	bl	8002d80 <HAL_GetTick>
 8006eae:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eb2:	e00d      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eb4:	f7fb ff64 	bl	8002d80 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d903      	bls.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8006ece:	e006      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ed0:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ed2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0ea      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006ede:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d13a      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006ee6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006eea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ef6:	d115      	bne.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006ef8:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006efa:	69db      	ldr	r3, [r3, #28]
 8006efc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f04:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006f12:	4a02      	ldr	r2, [pc, #8]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006f14:	430b      	orrs	r3, r1
 8006f16:	61d3      	str	r3, [r2, #28]
 8006f18:	e00a      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006f1a:	bf00      	nop
 8006f1c:	44020c00 	.word	0x44020c00
 8006f20:	44020800 	.word	0x44020800
 8006f24:	4b9f      	ldr	r3, [pc, #636]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	4a9e      	ldr	r2, [pc, #632]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f2e:	61d3      	str	r3, [r2, #28]
 8006f30:	4b9c      	ldr	r3, [pc, #624]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f36:	4a9b      	ldr	r2, [pc, #620]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006f40:	4b98      	ldr	r3, [pc, #608]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f42:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8006f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f4a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f52:	4a94      	ldr	r2, [pc, #592]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f54:	430b      	orrs	r3, r1
 8006f56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006f5a:	e008      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8006f64:	e003      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f6a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8006f80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006f84:	460b      	mov	r3, r1
 8006f86:	4313      	orrs	r3, r2
 8006f88:	d035      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006f8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006f92:	2b30      	cmp	r3, #48	; 0x30
 8006f94:	d014      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006f96:	2b30      	cmp	r3, #48	; 0x30
 8006f98:	d80e      	bhi.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d012      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d80a      	bhi.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d010      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006fa6:	2b10      	cmp	r3, #16
 8006fa8:	d106      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006faa:	4b7e      	ldr	r3, [pc, #504]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	4a7d      	ldr	r2, [pc, #500]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb4:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fb6:	e008      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006fbe:	e004      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006fc0:	bf00      	nop
 8006fc2:	e002      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006fc4:	bf00      	nop
 8006fc6:	e000      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10d      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006fd2:	4b74      	ldr	r3, [pc, #464]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fd8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fe0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006fe4:	4a6f      	ldr	r2, [pc, #444]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006fec:	e003      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006ff2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006ff6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007002:	65bb      	str	r3, [r7, #88]	; 0x58
 8007004:	2300      	movs	r3, #0
 8007006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007008:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800700c:	460b      	mov	r3, r1
 800700e:	4313      	orrs	r3, r2
 8007010:	d033      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007012:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007016:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d007      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8007022:	e010      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007024:	4b5f      	ldr	r3, [pc, #380]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	4a5e      	ldr	r2, [pc, #376]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800702a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007030:	e00d      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007032:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007036:	3308      	adds	r3, #8
 8007038:	4618      	mov	r0, r3
 800703a:	f003 fb6f 	bl	800a71c <RCCEx_PLL2_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007044:	e003      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800704c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800704e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10d      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007056:	4b53      	ldr	r3, [pc, #332]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007058:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800705c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8007060:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007064:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8007068:	4a4e      	ldr	r2, [pc, #312]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800706a:	430b      	orrs	r3, r1
 800706c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007070:	e003      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007072:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007076:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800707a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007086:	653b      	str	r3, [r7, #80]	; 0x50
 8007088:	2300      	movs	r3, #0
 800708a:	657b      	str	r3, [r7, #84]	; 0x54
 800708c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007090:	460b      	mov	r3, r1
 8007092:	4313      	orrs	r3, r2
 8007094:	d033      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8007096:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800709a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80070a2:	2b80      	cmp	r3, #128	; 0x80
 80070a4:	d007      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80070a6:	e010      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a8:	4b3e      	ldr	r3, [pc, #248]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	4a3d      	ldr	r2, [pc, #244]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80070b4:	e00d      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070ba:	3308      	adds	r3, #8
 80070bc:	4618      	mov	r0, r3
 80070be:	f003 fb2d 	bl	800a71c <RCCEx_PLL2_Config>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80070c8:	e003      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80070d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10d      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80070da:	4b32      	ldr	r3, [pc, #200]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80070e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80070e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80070ec:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070ee:	430b      	orrs	r3, r1
 80070f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80070f4:	e003      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80070fa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80070fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800710a:	64bb      	str	r3, [r7, #72]	; 0x48
 800710c:	2300      	movs	r3, #0
 800710e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007110:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007114:	460b      	mov	r3, r1
 8007116:	4313      	orrs	r3, r2
 8007118:	d04a      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800711a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800711e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007122:	2b04      	cmp	r3, #4
 8007124:	d827      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007141 	.word	0x08007141
 8007130:	0800714f 	.word	0x0800714f
 8007134:	08007163 	.word	0x08007163
 8007138:	0800717f 	.word	0x0800717f
 800713c:	0800717f 	.word	0x0800717f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007140:	4b18      	ldr	r3, [pc, #96]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800714a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800714c:	e018      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800714e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007152:	3308      	adds	r3, #8
 8007154:	4618      	mov	r0, r3
 8007156:	f003 fae1 	bl	800a71c <RCCEx_PLL2_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007160:	e00e      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007162:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007166:	3330      	adds	r3, #48	; 0x30
 8007168:	4618      	mov	r0, r3
 800716a:	f003 fb6f 	bl	800a84c <RCCEx_PLL3_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007174:	e004      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800717c:	e000      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800717e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007180:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10f      	bne.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007188:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800718a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800718e:	f023 0107 	bic.w	r1, r3, #7
 8007192:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800719a:	4a02      	ldr	r2, [pc, #8]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800719c:	430b      	orrs	r3, r1
 800719e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80071a2:	e005      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80071a4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80071ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80071b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80071bc:	643b      	str	r3, [r7, #64]	; 0x40
 80071be:	2300      	movs	r3, #0
 80071c0:	647b      	str	r3, [r7, #68]	; 0x44
 80071c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80071c6:	460b      	mov	r3, r1
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f000 8081 	beq.w	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80071ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80071d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d85f      	bhi.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007265 	.word	0x08007265
 80071e4:	0800729b 	.word	0x0800729b
 80071e8:	0800729b 	.word	0x0800729b
 80071ec:	0800729b 	.word	0x0800729b
 80071f0:	0800729b 	.word	0x0800729b
 80071f4:	0800729b 	.word	0x0800729b
 80071f8:	0800729b 	.word	0x0800729b
 80071fc:	0800729b 	.word	0x0800729b
 8007200:	08007273 	.word	0x08007273
 8007204:	0800729b 	.word	0x0800729b
 8007208:	0800729b 	.word	0x0800729b
 800720c:	0800729b 	.word	0x0800729b
 8007210:	0800729b 	.word	0x0800729b
 8007214:	0800729b 	.word	0x0800729b
 8007218:	0800729b 	.word	0x0800729b
 800721c:	0800729b 	.word	0x0800729b
 8007220:	08007287 	.word	0x08007287
 8007224:	0800729b 	.word	0x0800729b
 8007228:	0800729b 	.word	0x0800729b
 800722c:	0800729b 	.word	0x0800729b
 8007230:	0800729b 	.word	0x0800729b
 8007234:	0800729b 	.word	0x0800729b
 8007238:	0800729b 	.word	0x0800729b
 800723c:	0800729b 	.word	0x0800729b
 8007240:	080072a3 	.word	0x080072a3
 8007244:	0800729b 	.word	0x0800729b
 8007248:	0800729b 	.word	0x0800729b
 800724c:	0800729b 	.word	0x0800729b
 8007250:	0800729b 	.word	0x0800729b
 8007254:	0800729b 	.word	0x0800729b
 8007258:	0800729b 	.word	0x0800729b
 800725c:	0800729b 	.word	0x0800729b
 8007260:	080072a3 	.word	0x080072a3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007264:	4bab      	ldr	r3, [pc, #684]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	4aaa      	ldr	r2, [pc, #680]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800726a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800726e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007270:	e018      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007272:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007276:	3308      	adds	r3, #8
 8007278:	4618      	mov	r0, r3
 800727a:	f003 fa4f 	bl	800a71c <RCCEx_PLL2_Config>
 800727e:	4603      	mov	r3, r0
 8007280:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007284:	e00e      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007286:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800728a:	3330      	adds	r3, #48	; 0x30
 800728c:	4618      	mov	r0, r3
 800728e:	f003 fadd 	bl	800a84c <RCCEx_PLL3_Config>
 8007292:	4603      	mov	r3, r0
 8007294:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007298:	e004      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80072a0:	e000      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80072a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10d      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80072ac:	4b99      	ldr	r3, [pc, #612]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072b2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80072b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80072ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80072be:	4a95      	ldr	r2, [pc, #596]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072c0:	430b      	orrs	r3, r1
 80072c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80072c6:	e003      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80072cc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80072d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80072dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80072de:	2300      	movs	r3, #0
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80072e6:	460b      	mov	r3, r1
 80072e8:	4313      	orrs	r3, r2
 80072ea:	d04e      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80072ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80072f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f8:	d02e      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80072fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fe:	d827      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007300:	2bc0      	cmp	r3, #192	; 0xc0
 8007302:	d02b      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8007304:	2bc0      	cmp	r3, #192	; 0xc0
 8007306:	d823      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007308:	2b80      	cmp	r3, #128	; 0x80
 800730a:	d017      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800730c:	2b80      	cmp	r3, #128	; 0x80
 800730e:	d81f      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d007      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8007318:	e01a      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800731a:	4b7e      	ldr	r3, [pc, #504]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	4a7d      	ldr	r2, [pc, #500]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007324:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007326:	e01a      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800732c:	3308      	adds	r3, #8
 800732e:	4618      	mov	r0, r3
 8007330:	f003 f9f4 	bl	800a71c <RCCEx_PLL2_Config>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800733a:	e010      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800733c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007340:	3330      	adds	r3, #48	; 0x30
 8007342:	4618      	mov	r0, r3
 8007344:	f003 fa82 	bl	800a84c <RCCEx_PLL3_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800734e:	e006      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007356:	e002      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007358:	bf00      	nop
 800735a:	e000      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800735c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800735e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10d      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007366:	4b6b      	ldr	r3, [pc, #428]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800736c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007370:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007378:	4a66      	ldr	r2, [pc, #408]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800737a:	430b      	orrs	r3, r1
 800737c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007380:	e003      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007382:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007386:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800738a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007396:	633b      	str	r3, [r7, #48]	; 0x30
 8007398:	2300      	movs	r3, #0
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
 800739c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80073a0:	460b      	mov	r3, r1
 80073a2:	4313      	orrs	r3, r2
 80073a4:	d055      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80073a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80073aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80073ae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80073b2:	d031      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80073b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80073b8:	d82a      	bhi.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80073ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073be:	d02d      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80073c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c4:	d824      	bhi.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80073c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80073ca:	d029      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80073cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80073d0:	d81e      	bhi.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80073d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d6:	d011      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073dc:	d818      	bhi.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d020      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80073e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e6:	d113      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80073ec:	3308      	adds	r3, #8
 80073ee:	4618      	mov	r0, r3
 80073f0:	f003 f994 	bl	800a71c <RCCEx_PLL2_Config>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80073fa:	e014      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007400:	3330      	adds	r3, #48	; 0x30
 8007402:	4618      	mov	r0, r3
 8007404:	f003 fa22 	bl	800a84c <RCCEx_PLL3_Config>
 8007408:	4603      	mov	r3, r0
 800740a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800740e:	e00a      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007416:	e006      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007418:	bf00      	nop
 800741a:	e004      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800741c:	bf00      	nop
 800741e:	e002      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007420:	bf00      	nop
 8007422:	e000      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007426:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10d      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800742e:	4b39      	ldr	r3, [pc, #228]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007434:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8007438:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800743c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007440:	4a34      	ldr	r2, [pc, #208]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007442:	430b      	orrs	r3, r1
 8007444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007448:	e003      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800744e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007452:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007460:	2300      	movs	r3, #0
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007464:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007468:	460b      	mov	r3, r1
 800746a:	4313      	orrs	r3, r2
 800746c:	d058      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800746e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007476:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800747a:	d031      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800747c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007480:	d82a      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007486:	d02d      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8007488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800748c:	d824      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800748e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007492:	d029      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007498:	d81e      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800749a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749e:	d011      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80074a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a4:	d818      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d020      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	d113      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80074b4:	3308      	adds	r3, #8
 80074b6:	4618      	mov	r0, r3
 80074b8:	f003 f930 	bl	800a71c <RCCEx_PLL2_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80074c2:	e014      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80074c8:	3330      	adds	r3, #48	; 0x30
 80074ca:	4618      	mov	r0, r3
 80074cc:	f003 f9be 	bl	800a84c <RCCEx_PLL3_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80074d6:	e00a      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80074de:	e006      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074e0:	bf00      	nop
 80074e2:	e004      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074e4:	bf00      	nop
 80074e6:	e002      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074e8:	bf00      	nop
 80074ea:	e000      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d110      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80074f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007500:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007508:	4902      	ldr	r1, [pc, #8]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8007510:	e006      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8007512:	bf00      	nop
 8007514:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007518:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800751c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007520:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	2100      	movs	r1, #0
 800752a:	6239      	str	r1, [r7, #32]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
 8007532:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007536:	460b      	mov	r3, r1
 8007538:	4313      	orrs	r3, r2
 800753a:	d055      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800753c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007544:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007548:	d031      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800754a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800754e:	d82a      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007554:	d02d      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8007556:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800755a:	d824      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800755c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007560:	d029      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8007562:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007566:	d81e      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756c:	d011      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800756e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007572:	d818      	bhi.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d020      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800757c:	d113      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800757e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007582:	3308      	adds	r3, #8
 8007584:	4618      	mov	r0, r3
 8007586:	f003 f8c9 	bl	800a71c <RCCEx_PLL2_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007590:	e014      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007592:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007596:	3330      	adds	r3, #48	; 0x30
 8007598:	4618      	mov	r0, r3
 800759a:	f003 f957 	bl	800a84c <RCCEx_PLL3_Config>
 800759e:	4603      	mov	r3, r0
 80075a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075a4:	e00a      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80075ac:	e006      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80075ae:	bf00      	nop
 80075b0:	e004      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80075b2:	bf00      	nop
 80075b4:	e002      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80075b6:	bf00      	nop
 80075b8:	e000      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80075ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10d      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80075c4:	4b88      	ldr	r3, [pc, #544]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075ca:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80075ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80075d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075d6:	4984      	ldr	r1, [pc, #528]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80075de:	e003      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80075e4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	2100      	movs	r1, #0
 80075f2:	61b9      	str	r1, [r7, #24]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	61fb      	str	r3, [r7, #28]
 80075fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80075fe:	460b      	mov	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	d03d      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007604:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007608:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800760c:	2b03      	cmp	r3, #3
 800760e:	d81c      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8007610:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	08007653 	.word	0x08007653
 800761c:	08007629 	.word	0x08007629
 8007620:	08007637 	.word	0x08007637
 8007624:	08007653 	.word	0x08007653
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007628:	4b6f      	ldr	r3, [pc, #444]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	4a6e      	ldr	r2, [pc, #440]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800762e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007632:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007634:	e00e      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007636:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800763a:	3308      	adds	r3, #8
 800763c:	4618      	mov	r0, r3
 800763e:	f003 f86d 	bl	800a71c <RCCEx_PLL2_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007648:	e004      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007650:	e000      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8007652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007654:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10d      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800765c:	4b62      	ldr	r3, [pc, #392]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800765e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007662:	f023 0203 	bic.w	r2, r3, #3
 8007666:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800766a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800766e:	495e      	ldr	r1, [pc, #376]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007670:	4313      	orrs	r3, r2
 8007672:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8007676:	e003      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007678:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800767c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007680:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	2100      	movs	r1, #0
 800768a:	6139      	str	r1, [r7, #16]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	617b      	str	r3, [r7, #20]
 8007692:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007696:	460b      	mov	r3, r1
 8007698:	4313      	orrs	r3, r2
 800769a:	d03a      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800769c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80076a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80076a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a8:	d00e      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80076aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ae:	d815      	bhi.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d017      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80076b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b8:	d110      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ba:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	4a4a      	ldr	r2, [pc, #296]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c4:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80076c6:	e00e      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80076cc:	3308      	adds	r3, #8
 80076ce:	4618      	mov	r0, r3
 80076d0:	f003 f824 	bl	800a71c <RCCEx_PLL2_Config>
 80076d4:	4603      	mov	r3, r0
 80076d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80076da:	e004      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80076e2:	e000      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80076e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10d      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80076ee:	4b3e      	ldr	r3, [pc, #248]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80076fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007700:	4939      	ldr	r1, [pc, #228]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8007708:	e003      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800770e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007712:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	2100      	movs	r1, #0
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	f003 0310 	and.w	r3, r3, #16
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007728:	460b      	mov	r3, r1
 800772a:	4313      	orrs	r3, r2
 800772c:	d038      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800772e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007732:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007736:	2b30      	cmp	r3, #48	; 0x30
 8007738:	d01b      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800773a:	2b30      	cmp	r3, #48	; 0x30
 800773c:	d815      	bhi.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800773e:	2b10      	cmp	r3, #16
 8007740:	d002      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8007742:	2b20      	cmp	r3, #32
 8007744:	d007      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8007746:	e010      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007748:	4b27      	ldr	r3, [pc, #156]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	4a26      	ldr	r2, [pc, #152]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800774e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007752:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007754:	e00e      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007756:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800775a:	3330      	adds	r3, #48	; 0x30
 800775c:	4618      	mov	r0, r3
 800775e:	f003 f875 	bl	800a84c <RCCEx_PLL3_Config>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007768:	e004      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007770:	e000      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8007772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007774:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10d      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800777e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007782:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007786:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800778a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800778e:	4916      	ldr	r1, [pc, #88]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8007796:	e003      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007798:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800779c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	2100      	movs	r1, #0
 80077aa:	6039      	str	r1, [r7, #0]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	607b      	str	r3, [r7, #4]
 80077b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80077b6:	460b      	mov	r3, r1
 80077b8:	4313      	orrs	r3, r2
 80077ba:	d00c      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80077be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80077ca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80077ce:	4906      	ldr	r1, [pc, #24]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80077d6:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80077da:	4618      	mov	r0, r3
 80077dc:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80077e0:	46bd      	mov	sp, r7
 80077e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077e6:	bf00      	nop
 80077e8:	44020c00 	.word	0x44020c00

080077ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b08b      	sub	sp, #44	; 0x2c
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80077f4:	4bad      	ldr	r3, [pc, #692]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80077f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077fc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80077fe:	4bab      	ldr	r3, [pc, #684]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007808:	4ba8      	ldr	r3, [pc, #672]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	0a1b      	lsrs	r3, r3, #8
 800780e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007812:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8007814:	4ba5      	ldr	r3, [pc, #660]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800781e:	4ba3      	ldr	r3, [pc, #652]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	08db      	lsrs	r3, r3, #3
 8007824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	fb02 f303 	mul.w	r3, r2, r3
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 8126 	beq.w	8007a8e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d053      	beq.n	80078f0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	2b03      	cmp	r3, #3
 800784c:	d86f      	bhi.n	800792e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d003      	beq.n	800785c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d02b      	beq.n	80078b2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800785a:	e068      	b.n	800792e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800785c:	4b93      	ldr	r3, [pc, #588]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	08db      	lsrs	r3, r3, #3
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	4a92      	ldr	r2, [pc, #584]	; (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
 800786c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	ee07 3a90 	vmov	s15, r3
 8007874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007890:	ed97 6a04 	vldr	s12, [r7, #16]
 8007894:	eddf 5a87 	vldr	s11, [pc, #540]	; 8007ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80078b0:	e068      	b.n	8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	ee07 3a90 	vmov	s15, r3
 80078b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078bc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8007ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80078c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ce:	ed97 6a04 	vldr	s12, [r7, #16]
 80078d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80078d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80078ee:	e049      	b.n	8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	eddf 6a70 	vldr	s13, [pc, #448]	; 8007abc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80078fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007910:	eddf 5a68 	vldr	s11, [pc, #416]	; 8007ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007928:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800792c:	e02a      	b.n	8007984 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800792e:	4b5f      	ldr	r3, [pc, #380]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	08db      	lsrs	r3, r3, #3
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	4a5d      	ldr	r2, [pc, #372]	; (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800793a:	fa22 f303 	lsr.w	r3, r2, r3
 800793e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007962:	ed97 6a04 	vldr	s12, [r7, #16]
 8007966:	eddf 5a53 	vldr	s11, [pc, #332]	; 8007ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800796a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007982:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007984:	4b49      	ldr	r3, [pc, #292]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007990:	d121      	bne.n	80079d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007992:	4b46      	ldr	r3, [pc, #280]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d017      	beq.n	80079ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800799e:	4b43      	ldr	r3, [pc, #268]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a2:	0a5b      	lsrs	r3, r3, #9
 80079a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079a8:	ee07 3a90 	vmov	s15, r3
 80079ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80079b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079b4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80079b8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80079bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079c4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	e006      	b.n	80079dc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	e002      	b.n	80079dc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079dc:	4b33      	ldr	r3, [pc, #204]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e8:	d121      	bne.n	8007a2e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80079ea:	4b30      	ldr	r3, [pc, #192]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d017      	beq.n	8007a26 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079f6:	4b2d      	ldr	r3, [pc, #180]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a00:	ee07 3a90 	vmov	s15, r3
 8007a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007a10:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a1c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	605a      	str	r2, [r3, #4]
 8007a24:	e006      	b.n	8007a34 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	605a      	str	r2, [r3, #4]
 8007a2c:	e002      	b.n	8007a34 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a34:	4b1d      	ldr	r3, [pc, #116]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a40:	d121      	bne.n	8007a86 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007a42:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d017      	beq.n	8007a7e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007a4e:	4b17      	ldr	r3, [pc, #92]	; (8007aac <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	0e1b      	lsrs	r3, r3, #24
 8007a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a58:	ee07 3a90 	vmov	s15, r3
 8007a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a64:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007a68:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a74:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a7c:	e010      	b.n	8007aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	609a      	str	r2, [r3, #8]
}
 8007a84:	e00c      	b.n	8007aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	609a      	str	r2, [r3, #8]
}
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	609a      	str	r2, [r3, #8]
}
 8007aa0:	bf00      	nop
 8007aa2:	372c      	adds	r7, #44	; 0x2c
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	44020c00 	.word	0x44020c00
 8007ab0:	03d09000 	.word	0x03d09000
 8007ab4:	46000000 	.word	0x46000000
 8007ab8:	4a742400 	.word	0x4a742400
 8007abc:	4af42400 	.word	0x4af42400

08007ac0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b08b      	sub	sp, #44	; 0x2c
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007ac8:	4bad      	ldr	r3, [pc, #692]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007ad2:	4bab      	ldr	r3, [pc, #684]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007adc:	4ba8      	ldr	r3, [pc, #672]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	0a1b      	lsrs	r3, r3, #8
 8007ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae6:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8007ae8:	4ba5      	ldr	r3, [pc, #660]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007af2:	4ba3      	ldr	r3, [pc, #652]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	08db      	lsrs	r3, r3, #3
 8007af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8126 	beq.w	8007d62 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d053      	beq.n	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d86f      	bhi.n	8007c02 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d003      	beq.n	8007b30 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d02b      	beq.n	8007b86 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8007b2e:	e068      	b.n	8007c02 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b30:	4b93      	ldr	r3, [pc, #588]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	08db      	lsrs	r3, r3, #3
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	4a92      	ldr	r2, [pc, #584]	; (8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b40:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	ee07 3a90 	vmov	s15, r3
 8007b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	ee07 3a90 	vmov	s15, r3
 8007b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b64:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b68:	eddf 5a87 	vldr	s11, [pc, #540]	; 8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007b84:	e068      	b.n	8007c58 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	ee07 3a90 	vmov	s15, r3
 8007b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b90:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8007d8c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ba6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007bc2:	e049      	b.n	8007c58 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eddf 6a70 	vldr	s13, [pc, #448]	; 8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	ee07 3a90 	vmov	s15, r3
 8007bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be0:	ed97 6a04 	vldr	s12, [r7, #16]
 8007be4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007c00:	e02a      	b.n	8007c58 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c02:	4b5f      	ldr	r3, [pc, #380]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	08db      	lsrs	r3, r3, #3
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	4a5d      	ldr	r2, [pc, #372]	; (8007d84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c12:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	ee07 3a90 	vmov	s15, r3
 8007c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c36:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c3a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8007d88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007c56:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c58:	4b49      	ldr	r3, [pc, #292]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c64:	d121      	bne.n	8007caa <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007c66:	4b46      	ldr	r3, [pc, #280]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c72:	4b43      	ldr	r3, [pc, #268]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c76:	0a5b      	lsrs	r3, r3, #9
 8007c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c88:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007c8c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c98:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	e006      	b.n	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	e002      	b.n	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cb0:	4b33      	ldr	r3, [pc, #204]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cbc:	d121      	bne.n	8007d02 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007cbe:	4b30      	ldr	r3, [pc, #192]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d017      	beq.n	8007cfa <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007cca:	4b2d      	ldr	r3, [pc, #180]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cce:	0c1b      	lsrs	r3, r3, #16
 8007cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cd4:	ee07 3a90 	vmov	s15, r3
 8007cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007ce4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cf0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	605a      	str	r2, [r3, #4]
 8007cf8:	e006      	b.n	8007d08 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	605a      	str	r2, [r3, #4]
 8007d00:	e002      	b.n	8007d08 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d08:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d14:	d121      	bne.n	8007d5a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007d16:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d017      	beq.n	8007d52 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007d22:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d26:	0e1b      	lsrs	r3, r3, #24
 8007d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d38:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007d3c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d48:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d50:	e010      	b.n	8007d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	609a      	str	r2, [r3, #8]
}
 8007d58:	e00c      	b.n	8007d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	609a      	str	r2, [r3, #8]
}
 8007d60:	e008      	b.n	8007d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	609a      	str	r2, [r3, #8]
}
 8007d74:	bf00      	nop
 8007d76:	372c      	adds	r7, #44	; 0x2c
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	44020c00 	.word	0x44020c00
 8007d84:	03d09000 	.word	0x03d09000
 8007d88:	46000000 	.word	0x46000000
 8007d8c:	4a742400 	.word	0x4a742400
 8007d90:	4af42400 	.word	0x4af42400

08007d94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b08b      	sub	sp, #44	; 0x2c
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007d9c:	4bad      	ldr	r3, [pc, #692]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007da6:	4bab      	ldr	r3, [pc, #684]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007db0:	4ba8      	ldr	r3, [pc, #672]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dba:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8007dbc:	4ba5      	ldr	r3, [pc, #660]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007dc6:	4ba3      	ldr	r3, [pc, #652]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dca:	08db      	lsrs	r3, r3, #3
 8007dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	fb02 f303 	mul.w	r3, r2, r3
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dde:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8126 	beq.w	8008036 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d053      	beq.n	8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d86f      	bhi.n	8007ed6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d003      	beq.n	8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d02b      	beq.n	8007e5a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8007e02:	e068      	b.n	8007ed6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e04:	4b93      	ldr	r3, [pc, #588]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	08db      	lsrs	r3, r3, #3
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	4a92      	ldr	r2, [pc, #584]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007e10:	fa22 f303 	lsr.w	r3, r2, r3
 8007e14:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	ee07 3a90 	vmov	s15, r3
 8007e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	ee07 3a90 	vmov	s15, r3
 8007e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e38:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e3c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800805c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e54:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007e58:	e068      	b.n	8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	ee07 3a90 	vmov	s15, r3
 8007e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e64:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8008060 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e76:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800805c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007e96:	e049      	b.n	8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	eddf 6a70 	vldr	s13, [pc, #448]	; 8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	ee07 3a90 	vmov	s15, r3
 8007eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb4:	ed97 6a04 	vldr	s12, [r7, #16]
 8007eb8:	eddf 5a68 	vldr	s11, [pc, #416]	; 800805c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007ed4:	e02a      	b.n	8007f2c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ed6:	4b5f      	ldr	r3, [pc, #380]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	08db      	lsrs	r3, r3, #3
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	4a5d      	ldr	r2, [pc, #372]	; (8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f0e:	eddf 5a53 	vldr	s11, [pc, #332]	; 800805c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007f2a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f2c:	4b49      	ldr	r3, [pc, #292]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f38:	d121      	bne.n	8007f7e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007f3a:	4b46      	ldr	r3, [pc, #280]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d017      	beq.n	8007f76 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f46:	4b43      	ldr	r3, [pc, #268]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4a:	0a5b      	lsrs	r3, r3, #9
 8007f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f60:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f6c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e006      	b.n	8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	e002      	b.n	8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f84:	4b33      	ldr	r3, [pc, #204]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f90:	d121      	bne.n	8007fd6 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007f92:	4b30      	ldr	r3, [pc, #192]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d017      	beq.n	8007fce <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f9e:	4b2d      	ldr	r3, [pc, #180]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa2:	0c1b      	lsrs	r3, r3, #16
 8007fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa8:	ee07 3a90 	vmov	s15, r3
 8007fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007fb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	605a      	str	r2, [r3, #4]
 8007fcc:	e006      	b.n	8007fdc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	605a      	str	r2, [r3, #4]
 8007fd4:	e002      	b.n	8007fdc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fdc:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe8:	d121      	bne.n	800802e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007fea:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d017      	beq.n	8008026 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007ff6:	4b17      	ldr	r3, [pc, #92]	; (8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffa:	0e1b      	lsrs	r3, r3, #24
 8007ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008000:	ee07 3a90 	vmov	s15, r3
 8008004:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800800c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008010:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008024:	e010      	b.n	8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	609a      	str	r2, [r3, #8]
}
 800802c:	e00c      	b.n	8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	609a      	str	r2, [r3, #8]
}
 8008034:	e008      	b.n	8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	609a      	str	r2, [r3, #8]
}
 8008048:	bf00      	nop
 800804a:	372c      	adds	r7, #44	; 0x2c
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	44020c00 	.word	0x44020c00
 8008058:	03d09000 	.word	0x03d09000
 800805c:	46000000 	.word	0x46000000
 8008060:	4a742400 	.word	0x4a742400
 8008064:	4af42400 	.word	0x4af42400

08008068 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008068:	b590      	push	{r4, r7, lr}
 800806a:	b08f      	sub	sp, #60	; 0x3c
 800806c:	af00      	add	r7, sp, #0
 800806e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008072:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008076:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800807a:	4321      	orrs	r1, r4
 800807c:	d150      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800807e:	4b26      	ldr	r3, [pc, #152]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008080:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008088:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800808a:	4b23      	ldr	r3, [pc, #140]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800808c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b02      	cmp	r3, #2
 8008096:	d108      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800809e:	d104      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80080a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a4:	637b      	str	r3, [r7, #52]	; 0x34
 80080a6:	f002 bb2a 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80080aa:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080b8:	d108      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080c0:	d104      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80080c2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80080c6:	637b      	str	r3, [r7, #52]	; 0x34
 80080c8:	f002 bb19 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80080cc:	4b12      	ldr	r3, [pc, #72]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080d8:	d119      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080e0:	d115      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80080e2:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80080ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ee:	d30a      	bcc.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80080f0:	4b09      	ldr	r3, [pc, #36]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	0a1b      	lsrs	r3, r3, #8
 80080f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080fa:	4a08      	ldr	r2, [pc, #32]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80080fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008100:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008102:	f002 bafc 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800810a:	f002 baf8 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	; 0x34
 8008112:	f002 baf4 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008116:	bf00      	nop
 8008118:	44020c00 	.word	0x44020c00
 800811c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008120:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008124:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8008128:	ea50 0104 	orrs.w	r1, r0, r4
 800812c:	f001 8275 	beq.w	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8008130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008134:	2801      	cmp	r0, #1
 8008136:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800813a:	f082 82dd 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800813e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008142:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8008146:	ea50 0104 	orrs.w	r1, r0, r4
 800814a:	f001 816c 	beq.w	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800814e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008152:	2801      	cmp	r0, #1
 8008154:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8008158:	f082 82ce 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800815c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008160:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8008164:	ea50 0104 	orrs.w	r1, r0, r4
 8008168:	f001 8602 	beq.w	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800816c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008170:	2801      	cmp	r0, #1
 8008172:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8008176:	f082 82bf 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800817a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800817e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8008182:	ea50 0104 	orrs.w	r1, r0, r4
 8008186:	f001 854c 	beq.w	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800818a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800818e:	2801      	cmp	r0, #1
 8008190:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8008194:	f082 82b0 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800819c:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 80081a0:	ea50 0104 	orrs.w	r1, r0, r4
 80081a4:	f001 849e 	beq.w	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80081a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ac:	2801      	cmp	r0, #1
 80081ae:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80081b2:	f082 82a1 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ba:	f1a1 0420 	sub.w	r4, r1, #32
 80081be:	ea50 0104 	orrs.w	r1, r0, r4
 80081c2:	f001 83e8 	beq.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80081c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ca:	2801      	cmp	r0, #1
 80081cc:	f171 0120 	sbcs.w	r1, r1, #32
 80081d0:	f082 8292 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081d8:	f1a1 0410 	sub.w	r4, r1, #16
 80081dc:	ea50 0104 	orrs.w	r1, r0, r4
 80081e0:	f002 8256 	beq.w	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80081e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081e8:	2801      	cmp	r0, #1
 80081ea:	f171 0110 	sbcs.w	r1, r1, #16
 80081ee:	f082 8283 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081f6:	f1a1 0408 	sub.w	r4, r1, #8
 80081fa:	ea50 0104 	orrs.w	r1, r0, r4
 80081fe:	f002 81cc 	beq.w	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8008202:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008206:	2801      	cmp	r0, #1
 8008208:	f171 0108 	sbcs.w	r1, r1, #8
 800820c:	f082 8274 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008210:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008214:	1f0c      	subs	r4, r1, #4
 8008216:	ea50 0104 	orrs.w	r1, r0, r4
 800821a:	f001 8648 	beq.w	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800821e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008222:	2801      	cmp	r0, #1
 8008224:	f171 0104 	sbcs.w	r1, r1, #4
 8008228:	f082 8266 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800822c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008230:	1e8c      	subs	r4, r1, #2
 8008232:	ea50 0104 	orrs.w	r1, r0, r4
 8008236:	f002 8143 	beq.w	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800823a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800823e:	2801      	cmp	r0, #1
 8008240:	f171 0102 	sbcs.w	r1, r1, #2
 8008244:	f082 8258 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800824c:	1e4c      	subs	r4, r1, #1
 800824e:	ea50 0104 	orrs.w	r1, r0, r4
 8008252:	f002 80ce 	beq.w	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8008256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800825a:	2801      	cmp	r0, #1
 800825c:	f171 0101 	sbcs.w	r1, r1, #1
 8008260:	f082 824a 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008264:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008268:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800826c:	4321      	orrs	r1, r4
 800826e:	f002 8059 	beq.w	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8008272:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008276:	4cd9      	ldr	r4, [pc, #868]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008278:	42a0      	cmp	r0, r4
 800827a:	f171 0100 	sbcs.w	r1, r1, #0
 800827e:	f082 823b 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008282:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008286:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800828a:	4321      	orrs	r1, r4
 800828c:	f001 87d9 	beq.w	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8008290:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008294:	4cd2      	ldr	r4, [pc, #840]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008296:	42a0      	cmp	r0, r4
 8008298:	f171 0100 	sbcs.w	r1, r1, #0
 800829c:	f082 822c 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082a4:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80082a8:	4321      	orrs	r1, r4
 80082aa:	f001 8751 	beq.w	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80082ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082b2:	4ccc      	ldr	r4, [pc, #816]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80082b4:	42a0      	cmp	r0, r4
 80082b6:	f171 0100 	sbcs.w	r1, r1, #0
 80082ba:	f082 821d 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082c2:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 80082c6:	4321      	orrs	r1, r4
 80082c8:	f001 869a 	beq.w	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80082cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082d0:	4cc5      	ldr	r4, [pc, #788]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80082d2:	42a0      	cmp	r0, r4
 80082d4:	f171 0100 	sbcs.w	r1, r1, #0
 80082d8:	f082 820e 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082e0:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80082e4:	4321      	orrs	r1, r4
 80082e6:	f001 8612 	beq.w	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80082ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ee:	4cbf      	ldr	r4, [pc, #764]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80082f0:	42a0      	cmp	r0, r4
 80082f2:	f171 0100 	sbcs.w	r1, r1, #0
 80082f6:	f082 81ff 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082fe:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8008302:	4321      	orrs	r1, r4
 8008304:	f002 817e 	beq.w	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8008308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800830c:	4cb8      	ldr	r4, [pc, #736]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800830e:	42a0      	cmp	r0, r4
 8008310:	f171 0100 	sbcs.w	r1, r1, #0
 8008314:	f082 81f0 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800831c:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8008320:	4321      	orrs	r1, r4
 8008322:	f000 829e 	beq.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8008326:	e9d7 0100 	ldrd	r0, r1, [r7]
 800832a:	4cb2      	ldr	r4, [pc, #712]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800832c:	42a0      	cmp	r0, r4
 800832e:	f171 0100 	sbcs.w	r1, r1, #0
 8008332:	f082 81e1 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008336:	e9d7 0100 	ldrd	r0, r1, [r7]
 800833a:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800833e:	4321      	orrs	r1, r4
 8008340:	f000 826d 	beq.w	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008348:	4cab      	ldr	r4, [pc, #684]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800834a:	42a0      	cmp	r0, r4
 800834c:	f171 0100 	sbcs.w	r1, r1, #0
 8008350:	f082 81d2 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008358:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800835c:	4321      	orrs	r1, r4
 800835e:	f001 800d 	beq.w	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8008362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008366:	4ca5      	ldr	r4, [pc, #660]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008368:	42a0      	cmp	r0, r4
 800836a:	f171 0100 	sbcs.w	r1, r1, #0
 800836e:	f082 81c3 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008376:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800837a:	4321      	orrs	r1, r4
 800837c:	f000 81d0 	beq.w	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8008380:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008384:	4c9e      	ldr	r4, [pc, #632]	; (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008386:	42a0      	cmp	r0, r4
 8008388:	f171 0100 	sbcs.w	r1, r1, #0
 800838c:	f082 81b4 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008390:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008394:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8008398:	4321      	orrs	r1, r4
 800839a:	f000 8142 	beq.w	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800839e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083a2:	4c98      	ldr	r4, [pc, #608]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80083a4:	42a0      	cmp	r0, r4
 80083a6:	f171 0100 	sbcs.w	r1, r1, #0
 80083aa:	f082 81a5 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083b2:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 80083b6:	4321      	orrs	r1, r4
 80083b8:	f001 824e 	beq.w	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80083bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083c0:	4c91      	ldr	r4, [pc, #580]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80083c2:	42a0      	cmp	r0, r4
 80083c4:	f171 0100 	sbcs.w	r1, r1, #0
 80083c8:	f082 8196 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083d0:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 80083d4:	4321      	orrs	r1, r4
 80083d6:	f001 8197 	beq.w	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80083da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083de:	4c8b      	ldr	r4, [pc, #556]	; (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	f171 0100 	sbcs.w	r1, r1, #0
 80083e6:	f082 8187 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ee:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 80083f2:	4321      	orrs	r1, r4
 80083f4:	f001 8154 	beq.w	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80083f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083fc:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8008400:	f171 0100 	sbcs.w	r1, r1, #0
 8008404:	f082 8178 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800840c:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8008410:	4321      	orrs	r1, r4
 8008412:	f001 80b7 	beq.w	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800841a:	f248 0401 	movw	r4, #32769	; 0x8001
 800841e:	42a0      	cmp	r0, r4
 8008420:	f171 0100 	sbcs.w	r1, r1, #0
 8008424:	f082 8168 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800842c:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8008430:	4321      	orrs	r1, r4
 8008432:	f001 8064 	beq.w	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8008436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800843a:	f244 0401 	movw	r4, #16385	; 0x4001
 800843e:	42a0      	cmp	r0, r4
 8008440:	f171 0100 	sbcs.w	r1, r1, #0
 8008444:	f082 8158 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008448:	e9d7 0100 	ldrd	r0, r1, [r7]
 800844c:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8008450:	4321      	orrs	r1, r4
 8008452:	f001 8011 	beq.w	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8008456:	e9d7 0100 	ldrd	r0, r1, [r7]
 800845a:	f242 0401 	movw	r4, #8193	; 0x2001
 800845e:	42a0      	cmp	r0, r4
 8008460:	f171 0100 	sbcs.w	r1, r1, #0
 8008464:	f082 8148 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800846c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8008470:	4321      	orrs	r1, r4
 8008472:	f000 871e 	beq.w	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8008476:	e9d7 0100 	ldrd	r0, r1, [r7]
 800847a:	f241 0401 	movw	r4, #4097	; 0x1001
 800847e:	42a0      	cmp	r0, r4
 8008480:	f171 0100 	sbcs.w	r1, r1, #0
 8008484:	f082 8138 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800848c:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8008490:	4321      	orrs	r1, r4
 8008492:	f000 86a8 	beq.w	80091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8008496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800849a:	f640 0401 	movw	r4, #2049	; 0x801
 800849e:	42a0      	cmp	r0, r4
 80084a0:	f171 0100 	sbcs.w	r1, r1, #0
 80084a4:	f082 8128 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ac:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 80084b0:	4321      	orrs	r1, r4
 80084b2:	f000 8632 	beq.w	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80084b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ba:	f240 4401 	movw	r4, #1025	; 0x401
 80084be:	42a0      	cmp	r0, r4
 80084c0:	f171 0100 	sbcs.w	r1, r1, #0
 80084c4:	f082 8118 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084cc:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 80084d0:	4321      	orrs	r1, r4
 80084d2:	f000 85b0 	beq.w	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80084d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084da:	f240 2401 	movw	r4, #513	; 0x201
 80084de:	42a0      	cmp	r0, r4
 80084e0:	f171 0100 	sbcs.w	r1, r1, #0
 80084e4:	f082 8108 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ec:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 80084f0:	4321      	orrs	r1, r4
 80084f2:	f000 8535 	beq.w	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80084f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084fa:	f240 1401 	movw	r4, #257	; 0x101
 80084fe:	42a0      	cmp	r0, r4
 8008500:	f171 0100 	sbcs.w	r1, r1, #0
 8008504:	f082 80f8 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800850c:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8008510:	4321      	orrs	r1, r4
 8008512:	f000 84ba 	beq.w	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8008516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800851a:	2881      	cmp	r0, #129	; 0x81
 800851c:	f171 0100 	sbcs.w	r1, r1, #0
 8008520:	f082 80ea 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008528:	2821      	cmp	r0, #33	; 0x21
 800852a:	f171 0100 	sbcs.w	r1, r1, #0
 800852e:	d26f      	bcs.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008534:	4301      	orrs	r1, r0
 8008536:	f002 80df 	beq.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800853a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800853e:	1e42      	subs	r2, r0, #1
 8008540:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008544:	2a20      	cmp	r2, #32
 8008546:	f173 0100 	sbcs.w	r1, r3, #0
 800854a:	f082 80d5 	bcs.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800854e:	2a1f      	cmp	r2, #31
 8008550:	f202 80d2 	bhi.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008554:	a101      	add	r1, pc, #4	; (adr r1, 800855c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008556:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800855a:	bf00      	nop
 800855c:	080088bd 	.word	0x080088bd
 8008560:	08008989 	.word	0x08008989
 8008564:	0800a6f9 	.word	0x0800a6f9
 8008568:	08008a49 	.word	0x08008a49
 800856c:	0800a6f9 	.word	0x0800a6f9
 8008570:	0800a6f9 	.word	0x0800a6f9
 8008574:	0800a6f9 	.word	0x0800a6f9
 8008578:	08008b19 	.word	0x08008b19
 800857c:	0800a6f9 	.word	0x0800a6f9
 8008580:	0800a6f9 	.word	0x0800a6f9
 8008584:	0800a6f9 	.word	0x0800a6f9
 8008588:	0800a6f9 	.word	0x0800a6f9
 800858c:	0800a6f9 	.word	0x0800a6f9
 8008590:	0800a6f9 	.word	0x0800a6f9
 8008594:	0800a6f9 	.word	0x0800a6f9
 8008598:	08008bfb 	.word	0x08008bfb
 800859c:	0800a6f9 	.word	0x0800a6f9
 80085a0:	0800a6f9 	.word	0x0800a6f9
 80085a4:	0800a6f9 	.word	0x0800a6f9
 80085a8:	0800a6f9 	.word	0x0800a6f9
 80085ac:	0800a6f9 	.word	0x0800a6f9
 80085b0:	0800a6f9 	.word	0x0800a6f9
 80085b4:	0800a6f9 	.word	0x0800a6f9
 80085b8:	0800a6f9 	.word	0x0800a6f9
 80085bc:	0800a6f9 	.word	0x0800a6f9
 80085c0:	0800a6f9 	.word	0x0800a6f9
 80085c4:	0800a6f9 	.word	0x0800a6f9
 80085c8:	0800a6f9 	.word	0x0800a6f9
 80085cc:	0800a6f9 	.word	0x0800a6f9
 80085d0:	0800a6f9 	.word	0x0800a6f9
 80085d4:	0800a6f9 	.word	0x0800a6f9
 80085d8:	08008cd1 	.word	0x08008cd1
 80085dc:	80000001 	.word	0x80000001
 80085e0:	40000001 	.word	0x40000001
 80085e4:	20000001 	.word	0x20000001
 80085e8:	10000001 	.word	0x10000001
 80085ec:	08000001 	.word	0x08000001
 80085f0:	04000001 	.word	0x04000001
 80085f4:	00800001 	.word	0x00800001
 80085f8:	00400001 	.word	0x00400001
 80085fc:	00200001 	.word	0x00200001
 8008600:	00100001 	.word	0x00100001
 8008604:	00080001 	.word	0x00080001
 8008608:	00040001 	.word	0x00040001
 800860c:	00020001 	.word	0x00020001
 8008610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008614:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8008618:	430b      	orrs	r3, r1
 800861a:	f000 83c4 	beq.w	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800861e:	f002 b86b 	b.w	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008622:	4ba1      	ldr	r3, [pc, #644]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008628:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800862c:	633b      	str	r3, [r7, #48]	; 0x30
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008634:	d036      	beq.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800863c:	d86b      	bhi.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008644:	d02b      	beq.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800864c:	d863      	bhi.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008654:	d01b      	beq.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800865c:	d85b      	bhi.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866a:	d008      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800866c:	e053      	b.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800866e:	f107 0320 	add.w	r3, r7, #32
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff f8ba 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800867c:	e04e      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867e:	f107 0314 	add.w	r3, r7, #20
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fa1c 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800868c:	e046      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868e:	f107 0308 	add.w	r3, r7, #8
 8008692:	4618      	mov	r0, r3
 8008694:	f7ff fb7e 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800869c:	e03e      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800869e:	4b83      	ldr	r3, [pc, #524]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80086a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086a2:	e03b      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086a4:	4b80      	ldr	r3, [pc, #512]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086aa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086b0:	4b7d      	ldr	r3, [pc, #500]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0302 	and.w	r3, r3, #2
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d10c      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086c2:	4b79      	ldr	r3, [pc, #484]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	08db      	lsrs	r3, r3, #3
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	4a78      	ldr	r2, [pc, #480]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80086ce:	fa22 f303 	lsr.w	r3, r2, r3
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
 80086d4:	e01e      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086d6:	4b74      	ldr	r3, [pc, #464]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086e2:	d106      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ea:	d102      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80086ec:	4b71      	ldr	r3, [pc, #452]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80086ee:	637b      	str	r3, [r7, #52]	; 0x34
 80086f0:	e010      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086f2:	4b6d      	ldr	r3, [pc, #436]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086fe:	d106      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008706:	d102      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008708:	4b6b      	ldr	r3, [pc, #428]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
 800870c:	e002      	b.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008712:	e003      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008714:	e002      	b.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800871a:	bf00      	nop
          }
        }
        break;
 800871c:	f001 bfef 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008720:	4b61      	ldr	r3, [pc, #388]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008726:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800872a:	633b      	str	r3, [r7, #48]	; 0x30
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008732:	d036      	beq.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800873a:	d86b      	bhi.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008742:	d02b      	beq.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008746:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800874a:	d863      	bhi.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008752:	d01b      	beq.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875a:	d85b      	bhi.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008768:	d008      	beq.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800876a:	e053      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800876c:	f107 0320 	add.w	r3, r7, #32
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff f83b 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800877a:	e04e      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800877c:	f107 0314 	add.w	r3, r7, #20
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff f99d 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800878a:	e046      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800878c:	f107 0308 	add.w	r3, r7, #8
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff faff 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800879a:	e03e      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800879c:	4b43      	ldr	r3, [pc, #268]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800879e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087a0:	e03b      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087a2:	4b41      	ldr	r3, [pc, #260]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087a8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087ae:	4b3e      	ldr	r3, [pc, #248]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d10c      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d109      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087c0:	4b39      	ldr	r3, [pc, #228]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	08db      	lsrs	r3, r3, #3
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	4a39      	ldr	r2, [pc, #228]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80087cc:	fa22 f303 	lsr.w	r3, r2, r3
 80087d0:	637b      	str	r3, [r7, #52]	; 0x34
 80087d2:	e01e      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087d4:	4b34      	ldr	r3, [pc, #208]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e0:	d106      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e8:	d102      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087ea:	4b32      	ldr	r3, [pc, #200]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80087ec:	637b      	str	r3, [r7, #52]	; 0x34
 80087ee:	e010      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087f0:	4b2d      	ldr	r3, [pc, #180]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087fc:	d106      	bne.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80087fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008804:	d102      	bne.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008806:	4b2c      	ldr	r3, [pc, #176]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
 800880a:	e002      	b.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008810:	e003      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008812:	e002      	b.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008814:	2300      	movs	r3, #0
 8008816:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008818:	bf00      	nop
          }
        }
        break;
 800881a:	f001 bf70 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800881e:	4b22      	ldr	r3, [pc, #136]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008820:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008828:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	2b00      	cmp	r3, #0
 800882e:	d108      	bne.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008830:	f107 0320 	add.w	r3, r7, #32
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe ffd9 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800883e:	f001 bf5e 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	2b40      	cmp	r3, #64	; 0x40
 8008846:	d108      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008848:	f107 0314 	add.w	r3, r7, #20
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff f937 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008856:	f001 bf52 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800885e:	f001 bf4e 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008862:	4b11      	ldr	r3, [pc, #68]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008864:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008870:	2b00      	cmp	r3, #0
 8008872:	d108      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008874:	f107 0320 	add.w	r3, r7, #32
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe ffb7 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008882:	f001 bf3c 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	2b80      	cmp	r3, #128	; 0x80
 800888a:	d108      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800888c:	f107 0314 	add.w	r3, r7, #20
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff f915 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800889a:	f001 bf30 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088a2:	f001 bf2c 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088a6:	bf00      	nop
 80088a8:	44020c00 	.word	0x44020c00
 80088ac:	00bb8000 	.word	0x00bb8000
 80088b0:	03d09000 	.word	0x03d09000
 80088b4:	003d0900 	.word	0x003d0900
 80088b8:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80088bc:	4b9d      	ldr	r3, [pc, #628]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d104      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80088ce:	f7fc ff9f 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 80088d2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80088d4:	f001 bf13 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80088d8:	4b96      	ldr	r3, [pc, #600]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088e4:	d10a      	bne.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d107      	bne.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ec:	f107 0314 	add.w	r3, r7, #20
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7ff f8e5 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
 80088fa:	e043      	b.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80088fc:	4b8d      	ldr	r3, [pc, #564]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008908:	d10a      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	2b02      	cmp	r3, #2
 800890e:	d107      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008910:	f107 0308 	add.w	r3, r7, #8
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff fa3d 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
 800891e:	e031      	b.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008920:	4b84      	ldr	r3, [pc, #528]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b02      	cmp	r3, #2
 800892a:	d10c      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	2b03      	cmp	r3, #3
 8008930:	d109      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008932:	4b80      	ldr	r3, [pc, #512]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	08db      	lsrs	r3, r3, #3
 8008938:	f003 0303 	and.w	r3, r3, #3
 800893c:	4a7e      	ldr	r2, [pc, #504]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800893e:	fa22 f303 	lsr.w	r3, r2, r3
 8008942:	637b      	str	r3, [r7, #52]	; 0x34
 8008944:	e01e      	b.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008946:	4b7b      	ldr	r3, [pc, #492]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800894e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008952:	d105      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	2b04      	cmp	r3, #4
 8008958:	d102      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800895a:	4b78      	ldr	r3, [pc, #480]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800895c:	637b      	str	r3, [r7, #52]	; 0x34
 800895e:	e011      	b.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008960:	4b74      	ldr	r3, [pc, #464]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b02      	cmp	r3, #2
 800896c:	d106      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	2b05      	cmp	r3, #5
 8008972:	d103      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008978:	637b      	str	r3, [r7, #52]	; 0x34
 800897a:	e003      	b.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008980:	f001 bebd 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008984:	f001 bebb 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008988:	4b6a      	ldr	r3, [pc, #424]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800898a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800898e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008992:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	2b00      	cmp	r3, #0
 8008998:	d104      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800899a:	f7fc ff23 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 800899e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80089a0:	f001 bead 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80089a4:	4b63      	ldr	r3, [pc, #396]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089b0:	d10a      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d107      	bne.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b8:	f107 0314 	add.w	r3, r7, #20
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff f87f 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	637b      	str	r3, [r7, #52]	; 0x34
 80089c6:	e03d      	b.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	2b10      	cmp	r3, #16
 80089cc:	d108      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ce:	f107 0308 	add.w	r3, r7, #8
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff f9de 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089dc:	f001 be8f 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80089e0:	4b54      	ldr	r3, [pc, #336]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d10c      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	2b18      	cmp	r3, #24
 80089f0:	d109      	bne.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089f2:	4b50      	ldr	r3, [pc, #320]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	08db      	lsrs	r3, r3, #3
 80089f8:	f003 0303 	and.w	r3, r3, #3
 80089fc:	4a4e      	ldr	r2, [pc, #312]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
 8008a04:	e01e      	b.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008a06:	4b4b      	ldr	r3, [pc, #300]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a12:	d105      	bne.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	d102      	bne.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8008a1a:	4b48      	ldr	r3, [pc, #288]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a1e:	e011      	b.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008a20:	4b44      	ldr	r3, [pc, #272]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d106      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2b28      	cmp	r3, #40	; 0x28
 8008a32:	d103      	bne.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3a:	e003      	b.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a40:	f001 be5d 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a44:	f001 be5b 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008a48:	4b3a      	ldr	r3, [pc, #232]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008a4e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008a52:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d104      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a5a:	f7fc fec3 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8008a5e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a60:	f001 be4d 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008a64:	4b33      	ldr	r3, [pc, #204]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a70:	d10a      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d107      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a78:	f107 0314 	add.w	r3, r7, #20
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff f81f 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	637b      	str	r3, [r7, #52]	; 0x34
 8008a86:	e045      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008a88:	4b2a      	ldr	r3, [pc, #168]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a94:	d10a      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	2b80      	cmp	r3, #128	; 0x80
 8008a9a:	d107      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a9c:	f107 0308 	add.w	r3, r7, #8
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff f977 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aaa:	e033      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008aac:	4b21      	ldr	r3, [pc, #132]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0302 	and.w	r3, r3, #2
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d10c      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	2bc0      	cmp	r3, #192	; 0xc0
 8008abc:	d109      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008abe:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	08db      	lsrs	r3, r3, #3
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008aca:	fa22 f303 	lsr.w	r3, r2, r3
 8008ace:	637b      	str	r3, [r7, #52]	; 0x34
 8008ad0:	e020      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008ad2:	4b18      	ldr	r3, [pc, #96]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ade:	d106      	bne.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ae6:	d102      	bne.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008ae8:	4b14      	ldr	r3, [pc, #80]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008aea:	637b      	str	r3, [r7, #52]	; 0x34
 8008aec:	e012      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008aee:	4b11      	ldr	r3, [pc, #68]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d107      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008b02:	d103      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b08:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0a:	e003      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b10:	f001 bdf5 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b14:	f001 bdf3 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008b18:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008b1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b1e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008b22:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b2a:	f7fc fe5b 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8008b2e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b30:	f001 bde5 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b34:	44020c00 	.word	0x44020c00
 8008b38:	03d09000 	.word	0x03d09000
 8008b3c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008b40:	4ba0      	ldr	r3, [pc, #640]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b4c:	d10b      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b54:	d107      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b56:	f107 0314 	add.w	r3, r7, #20
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe ffb0 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	637b      	str	r3, [r7, #52]	; 0x34
 8008b64:	e047      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008b66:	4b97      	ldr	r3, [pc, #604]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b72:	d10b      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b7a:	d107      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b7c:	f107 0308 	add.w	r3, r7, #8
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff f907 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	637b      	str	r3, [r7, #52]	; 0x34
 8008b8a:	e034      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008b8c:	4b8d      	ldr	r3, [pc, #564]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d10d      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b9e:	d109      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ba0:	4b88      	ldr	r3, [pc, #544]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	08db      	lsrs	r3, r3, #3
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	4a87      	ldr	r2, [pc, #540]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb2:	e020      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008bb4:	4b83      	ldr	r3, [pc, #524]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bc0:	d106      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc8:	d102      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008bca:	4b80      	ldr	r3, [pc, #512]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8008bce:	e012      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008bd0:	4b7c      	ldr	r3, [pc, #496]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008bd6:	f003 0302 	and.w	r3, r3, #2
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d107      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008be4:	d103      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bea:	637b      	str	r3, [r7, #52]	; 0x34
 8008bec:	e003      	b.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bf2:	f001 bd84 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bf6:	f001 bd82 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008bfa:	4b72      	ldr	r3, [pc, #456]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008c00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008c04:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c0c:	f7fc fdea 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8008c10:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c12:	f001 bd74 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008c16:	4b6b      	ldr	r3, [pc, #428]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c22:	d10b      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c2a:	d107      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c2c:	f107 0314 	add.w	r3, r7, #20
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe ff45 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	637b      	str	r3, [r7, #52]	; 0x34
 8008c3a:	e047      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008c3c:	4b61      	ldr	r3, [pc, #388]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c48:	d10b      	bne.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c50:	d107      	bne.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c52:	f107 0308 	add.w	r3, r7, #8
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff f89c 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c60:	e034      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008c62:	4b58      	ldr	r3, [pc, #352]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0302 	and.w	r3, r3, #2
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d10d      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c74:	d109      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c76:	4b53      	ldr	r3, [pc, #332]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	08db      	lsrs	r3, r3, #3
 8008c7c:	f003 0303 	and.w	r3, r3, #3
 8008c80:	4a51      	ldr	r2, [pc, #324]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008c82:	fa22 f303 	lsr.w	r3, r2, r3
 8008c86:	637b      	str	r3, [r7, #52]	; 0x34
 8008c88:	e020      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008c8a:	4b4e      	ldr	r3, [pc, #312]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c96:	d106      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c9e:	d102      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008ca0:	4b4a      	ldr	r3, [pc, #296]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca4:	e012      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008ca6:	4b47      	ldr	r3, [pc, #284]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d107      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008cba:	d103      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc2:	e003      	b.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008cc8:	f001 bd19 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ccc:	f001 bd17 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008cd0:	4b3c      	ldr	r3, [pc, #240]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008cd6:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008cda:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d104      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ce2:	f7fc fd7f 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8008ce6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ce8:	f001 bd09 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008cec:	4b35      	ldr	r3, [pc, #212]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cf8:	d10b      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d00:	d107      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d02:	f107 0314 	add.w	r3, r7, #20
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe feda 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d10:	e047      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008d12:	4b2c      	ldr	r3, [pc, #176]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d1e:	d10b      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d26:	d107      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d28:	f107 0308 	add.w	r3, r7, #8
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff f831 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
 8008d36:	e034      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008d38:	4b22      	ldr	r3, [pc, #136]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d10d      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008d4a:	d109      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d4c:	4b1d      	ldr	r3, [pc, #116]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	08db      	lsrs	r3, r3, #3
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	4a1c      	ldr	r2, [pc, #112]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008d58:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d5e:	e020      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008d60:	4b18      	ldr	r3, [pc, #96]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6c:	d106      	bne.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d74:	d102      	bne.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008d76:	4b15      	ldr	r3, [pc, #84]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008d78:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7a:	e012      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008d7c:	4b11      	ldr	r3, [pc, #68]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d107      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008d90:	d103      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8008d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d96:	637b      	str	r3, [r7, #52]	; 0x34
 8008d98:	e003      	b.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d9e:	f001 bcae 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008da2:	f001 bcac 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008da6:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008dac:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8008db0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10b      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008db8:	f7fc fd14 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8008dbc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008dbe:	f001 bc9e 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008dc2:	bf00      	nop
 8008dc4:	44020c00 	.word	0x44020c00
 8008dc8:	03d09000 	.word	0x03d09000
 8008dcc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008dd0:	4ba0      	ldr	r3, [pc, #640]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ddc:	d10b      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008de4:	d107      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de6:	f107 0314 	add.w	r3, r7, #20
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fe68 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	637b      	str	r3, [r7, #52]	; 0x34
 8008df4:	e047      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008df6:	4b97      	ldr	r3, [pc, #604]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e02:	d10b      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e0a:	d107      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e0c:	f107 0308 	add.w	r3, r7, #8
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe ffbf 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	637b      	str	r3, [r7, #52]	; 0x34
 8008e1a:	e034      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008e1c:	4b8d      	ldr	r3, [pc, #564]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d10d      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008e2e:	d109      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e30:	4b88      	ldr	r3, [pc, #544]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	08db      	lsrs	r3, r3, #3
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	4a87      	ldr	r2, [pc, #540]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e40:	637b      	str	r3, [r7, #52]	; 0x34
 8008e42:	e020      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008e44:	4b83      	ldr	r3, [pc, #524]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e50:	d106      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e58:	d102      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008e5a:	4b80      	ldr	r3, [pc, #512]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e5e:	e012      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008e60:	4b7c      	ldr	r3, [pc, #496]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d107      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008e74:	d103      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e7c:	e003      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e82:	f001 bc3c 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e86:	f001 bc3a 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008e8a:	4b72      	ldr	r3, [pc, #456]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008e90:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008e94:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e9c:	f7fc fca2 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8008ea0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ea2:	f001 bc2c 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008ea6:	4b6b      	ldr	r3, [pc, #428]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eb2:	d10b      	bne.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eba:	d107      	bne.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ebc:	f107 0314 	add.w	r3, r7, #20
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe fdfd 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eca:	e047      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008ecc:	4b61      	ldr	r3, [pc, #388]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed8:	d10b      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ee0:	d107      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe ff54 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef0:	e034      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008ef2:	4b58      	ldr	r3, [pc, #352]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d10d      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f04:	d109      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f06:	4b53      	ldr	r3, [pc, #332]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	08db      	lsrs	r3, r3, #3
 8008f0c:	f003 0303 	and.w	r3, r3, #3
 8008f10:	4a51      	ldr	r2, [pc, #324]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008f12:	fa22 f303 	lsr.w	r3, r2, r3
 8008f16:	637b      	str	r3, [r7, #52]	; 0x34
 8008f18:	e020      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008f1a:	4b4e      	ldr	r3, [pc, #312]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f26:	d106      	bne.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f2e:	d102      	bne.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008f30:	4b4a      	ldr	r3, [pc, #296]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008f32:	637b      	str	r3, [r7, #52]	; 0x34
 8008f34:	e012      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008f36:	4b47      	ldr	r3, [pc, #284]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d107      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008f4a:	d103      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
 8008f52:	e003      	b.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f58:	f001 bbd1 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f5c:	f001 bbcf 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008f60:	4b3c      	ldr	r3, [pc, #240]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f66:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f6a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f72:	f7fc fc37 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8008f76:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f78:	f001 bbc1 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008f7c:	4b35      	ldr	r3, [pc, #212]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f88:	d10b      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f90:	d107      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f92:	f107 0314 	add.w	r3, r7, #20
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe fd92 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8008fa0:	e047      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008fa2:	4b2c      	ldr	r3, [pc, #176]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fae:	d10b      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fb6:	d107      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fb8:	f107 0308 	add.w	r3, r7, #8
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe fee9 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc6:	e034      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008fc8:	4b22      	ldr	r3, [pc, #136]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0302 	and.w	r3, r3, #2
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d10d      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fda:	d109      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fdc:	4b1d      	ldr	r3, [pc, #116]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	08db      	lsrs	r3, r3, #3
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	4a1c      	ldr	r2, [pc, #112]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
 8008fee:	e020      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008ff0:	4b18      	ldr	r3, [pc, #96]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ffc:	d106      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009004:	d102      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8009006:	4b15      	ldr	r3, [pc, #84]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009008:	637b      	str	r3, [r7, #52]	; 0x34
 800900a:	e012      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800900c:	4b11      	ldr	r3, [pc, #68]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800900e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b02      	cmp	r3, #2
 8009018:	d107      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009020:	d103      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8009022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009026:	637b      	str	r3, [r7, #52]	; 0x34
 8009028:	e003      	b.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800902e:	f001 bb66 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009032:	f001 bb64 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8009036:	4b07      	ldr	r3, [pc, #28]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800903c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8009040:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009048:	f7fc fbcc 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 800904c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800904e:	f001 bb56 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009052:	bf00      	nop
 8009054:	44020c00 	.word	0x44020c00
 8009058:	03d09000 	.word	0x03d09000
 800905c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8009060:	4ba1      	ldr	r3, [pc, #644]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800906c:	d10b      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009074:	d107      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009076:	f107 0314 	add.w	r3, r7, #20
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe fd20 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	637b      	str	r3, [r7, #52]	; 0x34
 8009084:	e047      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8009086:	4b98      	ldr	r3, [pc, #608]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800908e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009092:	d10b      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800909a:	d107      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800909c:	f107 0308 	add.w	r3, r7, #8
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe fe77 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34
 80090aa:	e034      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80090ac:	4b8e      	ldr	r3, [pc, #568]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d10d      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80090be:	d109      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090c0:	4b89      	ldr	r3, [pc, #548]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	08db      	lsrs	r3, r3, #3
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	4a88      	ldr	r2, [pc, #544]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80090cc:	fa22 f303 	lsr.w	r3, r2, r3
 80090d0:	637b      	str	r3, [r7, #52]	; 0x34
 80090d2:	e020      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80090d4:	4b84      	ldr	r3, [pc, #528]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090e0:	d106      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090e8:	d102      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80090ea:	4b81      	ldr	r3, [pc, #516]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80090ec:	637b      	str	r3, [r7, #52]	; 0x34
 80090ee:	e012      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80090f0:	4b7d      	ldr	r3, [pc, #500]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d107      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8009104:	d103      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8009106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800910a:	637b      	str	r3, [r7, #52]	; 0x34
 800910c:	e003      	b.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009112:	f001 baf4 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009116:	f001 baf2 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800911a:	4b73      	ldr	r3, [pc, #460]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800911c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	2b00      	cmp	r3, #0
 800912a:	d104      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800912c:	f7fc fb5a 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8009130:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8009132:	f001 bae4 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8009136:	4b6c      	ldr	r3, [pc, #432]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800913e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009142:	d10a      	bne.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	2b01      	cmp	r3, #1
 8009148:	d107      	bne.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800914a:	f107 0314 	add.w	r3, r7, #20
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fcb6 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
 8009158:	e043      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800915a:	4b63      	ldr	r3, [pc, #396]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009166:	d10a      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	2b02      	cmp	r3, #2
 800916c:	d107      	bne.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916e:	f107 0308 	add.w	r3, r7, #8
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fe0e 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	637b      	str	r3, [r7, #52]	; 0x34
 800917c:	e031      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800917e:	4b5a      	ldr	r3, [pc, #360]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b02      	cmp	r3, #2
 8009188:	d10c      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	2b03      	cmp	r3, #3
 800918e:	d109      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009190:	4b55      	ldr	r3, [pc, #340]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	08db      	lsrs	r3, r3, #3
 8009196:	f003 0303 	and.w	r3, r3, #3
 800919a:	4a54      	ldr	r2, [pc, #336]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800919c:	fa22 f303 	lsr.w	r3, r2, r3
 80091a0:	637b      	str	r3, [r7, #52]	; 0x34
 80091a2:	e01e      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80091a4:	4b50      	ldr	r3, [pc, #320]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091b0:	d105      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	d102      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80091b8:	4b4d      	ldr	r3, [pc, #308]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80091ba:	637b      	str	r3, [r7, #52]	; 0x34
 80091bc:	e011      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80091be:	4b4a      	ldr	r3, [pc, #296]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d106      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	2b05      	cmp	r3, #5
 80091d0:	d103      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80091d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091d6:	637b      	str	r3, [r7, #52]	; 0x34
 80091d8:	e003      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091de:	f001 ba8e 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091e2:	f001 ba8c 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80091e6:	4b40      	ldr	r3, [pc, #256]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80091ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091f0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d104      	bne.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80091f8:	f7fc faf4 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 80091fc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80091fe:	f001 ba7e 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8009202:	4b39      	ldr	r3, [pc, #228]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800920a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800920e:	d10a      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	2b10      	cmp	r3, #16
 8009214:	d107      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009216:	f107 0314 	add.w	r3, r7, #20
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fc50 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	637b      	str	r3, [r7, #52]	; 0x34
 8009224:	e043      	b.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8009226:	4b30      	ldr	r3, [pc, #192]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800922e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009232:	d10a      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009236:	2b20      	cmp	r3, #32
 8009238:	d107      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800923a:	f107 0308 	add.w	r3, r7, #8
 800923e:	4618      	mov	r0, r3
 8009240:	f7fe fda8 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	637b      	str	r3, [r7, #52]	; 0x34
 8009248:	e031      	b.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800924a:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b02      	cmp	r3, #2
 8009254:	d10c      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	2b30      	cmp	r3, #48	; 0x30
 800925a:	d109      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800925c:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	08db      	lsrs	r3, r3, #3
 8009262:	f003 0303 	and.w	r3, r3, #3
 8009266:	4a21      	ldr	r2, [pc, #132]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009268:	fa22 f303 	lsr.w	r3, r2, r3
 800926c:	637b      	str	r3, [r7, #52]	; 0x34
 800926e:	e01e      	b.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8009270:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800927c:	d105      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	2b40      	cmp	r3, #64	; 0x40
 8009282:	d102      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8009284:	4b1a      	ldr	r3, [pc, #104]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009286:	637b      	str	r3, [r7, #52]	; 0x34
 8009288:	e011      	b.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800928a:	4b17      	ldr	r3, [pc, #92]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800928c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b02      	cmp	r3, #2
 8009296:	d106      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	2b50      	cmp	r3, #80	; 0x50
 800929c:	d103      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800929e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092a2:	637b      	str	r3, [r7, #52]	; 0x34
 80092a4:	e003      	b.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092aa:	f001 ba28 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092ae:	f001 ba26 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80092b2:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80092b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80092b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80092bc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d104      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80092c4:	f7fc faba 	bl	800583c <HAL_RCC_GetPCLK3Freq>
 80092c8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80092ca:	f001 ba18 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092d4:	d10e      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092d6:	f107 0314 	add.w	r3, r7, #20
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fe fbf0 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092e4:	f001 ba0b 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092e8:	44020c00 	.word	0x44020c00
 80092ec:	03d09000 	.word	0x03d09000
 80092f0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80092f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092fa:	d108      	bne.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092fc:	f107 0308 	add.w	r3, r7, #8
 8009300:	4618      	mov	r0, r3
 8009302:	f7fe fd47 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800930a:	f001 b9f8 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800930e:	4ba4      	ldr	r3, [pc, #656]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b02      	cmp	r3, #2
 8009318:	d10d      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009320:	d109      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009322:	4b9f      	ldr	r3, [pc, #636]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	08db      	lsrs	r3, r3, #3
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	4a9d      	ldr	r2, [pc, #628]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800932e:	fa22 f303 	lsr.w	r3, r2, r3
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
 8009334:	e020      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009336:	4b9a      	ldr	r3, [pc, #616]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800933e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009342:	d106      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800934a:	d102      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800934c:	4b96      	ldr	r3, [pc, #600]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800934e:	637b      	str	r3, [r7, #52]	; 0x34
 8009350:	e012      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009352:	4b93      	ldr	r3, [pc, #588]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b02      	cmp	r3, #2
 800935e:	d107      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009366:	d103      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8009368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
 800936e:	e003      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009374:	f001 b9c3 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009378:	f001 b9c1 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800937c:	4b88      	ldr	r3, [pc, #544]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800937e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938a:	2b00      	cmp	r3, #0
 800938c:	d104      	bne.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800938e:	f7fc fa0d 	bl	80057ac <HAL_RCC_GetHCLKFreq>
 8009392:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009394:	f001 b9b3 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	2b01      	cmp	r3, #1
 800939c:	d104      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800939e:	f7fc f8d9 	bl	8005554 <HAL_RCC_GetSysClockFreq>
 80093a2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80093a4:	f001 b9ab 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d108      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ae:	f107 0314 	add.w	r3, r7, #20
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe fb84 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093bc:	f001 b99f 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80093c0:	4b77      	ldr	r3, [pc, #476]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093cc:	d105      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d102      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80093d4:	4b75      	ldr	r3, [pc, #468]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80093d6:	637b      	str	r3, [r7, #52]	; 0x34
 80093d8:	e023      	b.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80093da:	4b71      	ldr	r3, [pc, #452]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d10c      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d109      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093ec:	4b6c      	ldr	r3, [pc, #432]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	08db      	lsrs	r3, r3, #3
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	4a6b      	ldr	r2, [pc, #428]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80093f8:	fa22 f303 	lsr.w	r3, r2, r3
 80093fc:	637b      	str	r3, [r7, #52]	; 0x34
 80093fe:	e010      	b.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009400:	4b67      	ldr	r3, [pc, #412]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800940c:	d105      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	2b05      	cmp	r3, #5
 8009412:	d102      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8009414:	4b64      	ldr	r3, [pc, #400]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009416:	637b      	str	r3, [r7, #52]	; 0x34
 8009418:	e003      	b.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800941a:	2300      	movs	r3, #0
 800941c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800941e:	f001 b96e 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009422:	f001 b96c 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009426:	4b5e      	ldr	r3, [pc, #376]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800942c:	f003 0308 	and.w	r3, r3, #8
 8009430:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009432:	4b5b      	ldr	r3, [pc, #364]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b02      	cmp	r3, #2
 800943e:	d106      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	2b00      	cmp	r3, #0
 8009444:	d103      	bne.n	800944e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8009446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800944a:	637b      	str	r3, [r7, #52]	; 0x34
 800944c:	e012      	b.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800944e:	4b54      	ldr	r3, [pc, #336]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800945c:	d106      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	2b08      	cmp	r3, #8
 8009462:	d103      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8009464:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009468:	637b      	str	r3, [r7, #52]	; 0x34
 800946a:	e003      	b.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009470:	f001 b945 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009474:	f001 b943 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009478:	4b49      	ldr	r3, [pc, #292]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800947a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800947e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009482:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009486:	2b00      	cmp	r3, #0
 8009488:	d104      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800948a:	f7fc f9ab 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 800948e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009490:	f001 b935 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800949a:	d108      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800949c:	f107 0308 	add.w	r3, r7, #8
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fc77 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094aa:	f001 b928 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80094ae:	4b3c      	ldr	r3, [pc, #240]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d10d      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094c0:	d109      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094c2:	4b37      	ldr	r3, [pc, #220]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	08db      	lsrs	r3, r3, #3
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	4a35      	ldr	r2, [pc, #212]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80094ce:	fa22 f303 	lsr.w	r3, r2, r3
 80094d2:	637b      	str	r3, [r7, #52]	; 0x34
 80094d4:	e011      	b.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80094d6:	4b32      	ldr	r3, [pc, #200]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094e2:	d106      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094ea:	d102      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80094ec:	4b2e      	ldr	r3, [pc, #184]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80094ee:	637b      	str	r3, [r7, #52]	; 0x34
 80094f0:	e003      	b.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80094f2:	2300      	movs	r3, #0
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094f6:	f001 b902 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094fa:	f001 b900 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80094fe:	4b28      	ldr	r3, [pc, #160]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009500:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009504:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009508:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009510:	f7fc f968 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 8009514:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009516:	f001 b8f2 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009520:	d108      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009522:	f107 0308 	add.w	r3, r7, #8
 8009526:	4618      	mov	r0, r3
 8009528:	f7fe fc34 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009530:	f001 b8e5 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009534:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b02      	cmp	r3, #2
 800953e:	d10d      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009546:	d109      	bne.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009548:	4b15      	ldr	r3, [pc, #84]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	08db      	lsrs	r3, r3, #3
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	4a14      	ldr	r2, [pc, #80]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009554:	fa22 f303 	lsr.w	r3, r2, r3
 8009558:	637b      	str	r3, [r7, #52]	; 0x34
 800955a:	e011      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800955c:	4b10      	ldr	r3, [pc, #64]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009568:	d106      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009570:	d102      	bne.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8009572:	4b0d      	ldr	r3, [pc, #52]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009574:	637b      	str	r3, [r7, #52]	; 0x34
 8009576:	e003      	b.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800957c:	f001 b8bf 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009580:	f001 b8bd 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009584:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009586:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800958a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800958e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10c      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009596:	f7fc f951 	bl	800583c <HAL_RCC_GetPCLK3Freq>
 800959a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800959c:	f001 b8af 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095a0:	44020c00 	.word	0x44020c00
 80095a4:	03d09000 	.word	0x03d09000
 80095a8:	003d0900 	.word	0x003d0900
 80095ac:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095b6:	d108      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095b8:	f107 0308 	add.w	r3, r7, #8
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fbe9 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095c6:	f001 b89a 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80095ca:	4b9f      	ldr	r3, [pc, #636]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d10d      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095dc:	d109      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095de:	4b9a      	ldr	r3, [pc, #616]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	08db      	lsrs	r3, r3, #3
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	4a98      	ldr	r2, [pc, #608]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80095ea:	fa22 f303 	lsr.w	r3, r2, r3
 80095ee:	637b      	str	r3, [r7, #52]	; 0x34
 80095f0:	e011      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80095f2:	4b95      	ldr	r3, [pc, #596]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095fe:	d106      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009606:	d102      	bne.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8009608:	4b91      	ldr	r3, [pc, #580]	; (8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800960a:	637b      	str	r3, [r7, #52]	; 0x34
 800960c:	e003      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009612:	f001 b874 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009616:	f001 b872 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800961a:	4b8b      	ldr	r3, [pc, #556]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800961c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009620:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009624:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	2b00      	cmp	r3, #0
 800962a:	d104      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800962c:	f7fc f906 	bl	800583c <HAL_RCC_GetPCLK3Freq>
 8009630:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009632:	f001 b864 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800963c:	d108      	bne.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800963e:	f107 0308 	add.w	r3, r7, #8
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fba6 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800964c:	f001 b857 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009650:	4b7d      	ldr	r3, [pc, #500]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0302 	and.w	r3, r3, #2
 8009658:	2b02      	cmp	r3, #2
 800965a:	d10d      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009662:	d109      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009664:	4b78      	ldr	r3, [pc, #480]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	08db      	lsrs	r3, r3, #3
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	4a77      	ldr	r2, [pc, #476]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009670:	fa22 f303 	lsr.w	r3, r2, r3
 8009674:	637b      	str	r3, [r7, #52]	; 0x34
 8009676:	e011      	b.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8009678:	4b73      	ldr	r3, [pc, #460]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009684:	d106      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800968c:	d102      	bne.n	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800968e:	4b70      	ldr	r3, [pc, #448]	; (8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009690:	637b      	str	r3, [r7, #52]	; 0x34
 8009692:	e003      	b.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009698:	f001 b831 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800969c:	f001 b82f 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80096a0:	4b69      	ldr	r3, [pc, #420]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096a6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80096aa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d104      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80096b2:	f7fc f897 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 80096b6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80096b8:	f001 b821 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096c2:	d108      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096c4:	f107 0308 	add.w	r3, r7, #8
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe fb63 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096d2:	f001 b814 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80096d6:	4b5c      	ldr	r3, [pc, #368]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d10e      	bne.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096e8:	d10a      	bne.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096ea:	4b57      	ldr	r3, [pc, #348]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	08db      	lsrs	r3, r3, #3
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	4a55      	ldr	r2, [pc, #340]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80096f6:	fa22 f303 	lsr.w	r3, r2, r3
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096fc:	f000 bfff 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009704:	f000 bffb 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009708:	4b4f      	ldr	r3, [pc, #316]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800970a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800970e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009712:	633b      	str	r3, [r7, #48]	; 0x30
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800971a:	d056      	beq.n	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009722:	f200 808b 	bhi.w	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800972c:	d03e      	beq.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009734:	f200 8082 	bhi.w	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800973e:	d027      	beq.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009746:	d879      	bhi.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800974e:	d017      	beq.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009756:	d871      	bhi.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	2b00      	cmp	r3, #0
 800975c:	d004      	beq.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009764:	d004      	beq.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8009766:	e069      	b.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009768:	f7fc f868 	bl	800583c <HAL_RCC_GetPCLK3Freq>
 800976c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800976e:	e068      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009770:	f107 0314 	add.w	r3, r7, #20
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe f9a3 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800977e:	e060      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009780:	f107 0308 	add.w	r3, r7, #8
 8009784:	4618      	mov	r0, r3
 8009786:	f7fe fb05 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800978e:	e058      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009790:	4b2d      	ldr	r3, [pc, #180]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009796:	f003 0302 	and.w	r3, r3, #2
 800979a:	2b02      	cmp	r3, #2
 800979c:	d103      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800979e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097a2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80097a4:	e04d      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80097aa:	e04a      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80097ac:	4b26      	ldr	r3, [pc, #152]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097ba:	d103      	bne.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80097bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80097c2:	e03e      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80097c8:	e03b      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097ca:	4b1f      	ldr	r3, [pc, #124]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80097d0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80097d4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097d6:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d10c      	bne.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80097e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097e8:	4b17      	ldr	r3, [pc, #92]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	08db      	lsrs	r3, r3, #3
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	4a16      	ldr	r2, [pc, #88]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
 80097f8:	637b      	str	r3, [r7, #52]	; 0x34
 80097fa:	e01e      	b.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097fc:	4b12      	ldr	r3, [pc, #72]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009808:	d106      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009810:	d102      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009812:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009814:	637b      	str	r3, [r7, #52]	; 0x34
 8009816:	e010      	b.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009824:	d106      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800982c:	d102      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800982e:	4b09      	ldr	r3, [pc, #36]	; (8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009830:	637b      	str	r3, [r7, #52]	; 0x34
 8009832:	e002      	b.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009838:	e003      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800983a:	e002      	b.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009840:	bf00      	nop
          }
        }
        break;
 8009842:	f000 bf5c 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009846:	bf00      	nop
 8009848:	44020c00 	.word	0x44020c00
 800984c:	03d09000 	.word	0x03d09000
 8009850:	003d0900 	.word	0x003d0900
 8009854:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009858:	4b9e      	ldr	r3, [pc, #632]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800985a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800985e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009862:	633b      	str	r3, [r7, #48]	; 0x30
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800986a:	d056      	beq.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009872:	f200 808b 	bhi.w	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800987c:	d03e      	beq.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009884:	f200 8082 	bhi.w	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800988e:	d027      	beq.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009896:	d879      	bhi.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800989e:	d017      	beq.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a6:	d871      	bhi.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d004      	beq.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b4:	d004      	beq.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80098b6:	e069      	b.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80098b8:	f7fb ff94 	bl	80057e4 <HAL_RCC_GetPCLK1Freq>
 80098bc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80098be:	e068      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098c0:	f107 0314 	add.w	r3, r7, #20
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fe f8fb 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80098ce:	e060      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098d0:	f107 0308 	add.w	r3, r7, #8
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fe fa5d 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80098de:	e058      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80098e0:	4b7c      	ldr	r3, [pc, #496]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098e6:	f003 0302 	and.w	r3, r3, #2
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d103      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80098ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098f2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80098f4:	e04d      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80098fa:	e04a      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80098fc:	4b75      	ldr	r3, [pc, #468]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800990a:	d103      	bne.n	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800990c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009912:	e03e      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009914:	2300      	movs	r3, #0
 8009916:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009918:	e03b      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800991a:	4b6e      	ldr	r3, [pc, #440]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800991c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009920:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009924:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009926:	4b6b      	ldr	r3, [pc, #428]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0302 	and.w	r3, r3, #2
 800992e:	2b02      	cmp	r3, #2
 8009930:	d10c      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d109      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009938:	4b66      	ldr	r3, [pc, #408]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	08db      	lsrs	r3, r3, #3
 800993e:	f003 0303 	and.w	r3, r3, #3
 8009942:	4a65      	ldr	r2, [pc, #404]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009944:	fa22 f303 	lsr.w	r3, r2, r3
 8009948:	637b      	str	r3, [r7, #52]	; 0x34
 800994a:	e01e      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800994c:	4b61      	ldr	r3, [pc, #388]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009958:	d106      	bne.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009960:	d102      	bne.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009962:	4b5e      	ldr	r3, [pc, #376]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009964:	637b      	str	r3, [r7, #52]	; 0x34
 8009966:	e010      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009968:	4b5a      	ldr	r3, [pc, #360]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009974:	d106      	bne.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800997c:	d102      	bne.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800997e:	4b58      	ldr	r3, [pc, #352]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009980:	637b      	str	r3, [r7, #52]	; 0x34
 8009982:	e002      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009988:	e003      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800998a:	e002      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009990:	bf00      	nop
          }
        }
        break;
 8009992:	f000 beb4 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009996:	4b4f      	ldr	r3, [pc, #316]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009998:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800999c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80099a0:	633b      	str	r3, [r7, #48]	; 0x30
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099a8:	d056      	beq.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099b0:	f200 808b 	bhi.w	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099ba:	d03e      	beq.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80099c2:	f200 8082 	bhi.w	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099cc:	d027      	beq.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099d4:	d879      	bhi.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099dc:	d017      	beq.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099e4:	d871      	bhi.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f2:	d004      	beq.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80099f4:	e069      	b.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80099f6:	f7fb ff21 	bl	800583c <HAL_RCC_GetPCLK3Freq>
 80099fa:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80099fc:	e068      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099fe:	f107 0314 	add.w	r3, r7, #20
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe f85c 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a0c:	e060      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a0e:	f107 0308 	add.w	r3, r7, #8
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe f9be 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a1c:	e058      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009a1e:	4b2d      	ldr	r3, [pc, #180]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d103      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8009a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a30:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009a32:	e04d      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a38:	e04a      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009a3a:	4b26      	ldr	r3, [pc, #152]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a48:	d103      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8009a4a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009a4e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009a50:	e03e      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a56:	e03b      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a58:	4b1e      	ldr	r3, [pc, #120]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a5e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a64:	4b1b      	ldr	r3, [pc, #108]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d10c      	bne.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d109      	bne.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a76:	4b17      	ldr	r3, [pc, #92]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	08db      	lsrs	r3, r3, #3
 8009a7c:	f003 0303 	and.w	r3, r3, #3
 8009a80:	4a15      	ldr	r2, [pc, #84]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009a82:	fa22 f303 	lsr.w	r3, r2, r3
 8009a86:	637b      	str	r3, [r7, #52]	; 0x34
 8009a88:	e01e      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a8a:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a96:	d106      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a9e:	d102      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8009aa4:	e010      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ab2:	d106      	bne.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aba:	d102      	bne.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009abc:	4b08      	ldr	r3, [pc, #32]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
 8009ac0:	e002      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009ac6:	e003      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009ac8:	e002      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009aca:	2300      	movs	r3, #0
 8009acc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ace:	bf00      	nop
          }
        }
        break;
 8009ad0:	f000 be15 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ad4:	44020c00 	.word	0x44020c00
 8009ad8:	03d09000 	.word	0x03d09000
 8009adc:	003d0900 	.word	0x003d0900
 8009ae0:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009ae4:	4b9e      	ldr	r3, [pc, #632]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ae6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009aea:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8009aee:	633b      	str	r3, [r7, #48]	; 0x30
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009af6:	d056      	beq.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009afe:	f200 808b 	bhi.w	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b08:	d03e      	beq.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b10:	f200 8082 	bhi.w	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b1a:	d027      	beq.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b22:	d879      	bhi.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b2a:	d017      	beq.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b32:	d871      	bhi.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b40:	d004      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009b42:	e069      	b.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009b44:	f7fb fe7a 	bl	800583c <HAL_RCC_GetPCLK3Freq>
 8009b48:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009b4a:	e068      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b4c:	f107 0314 	add.w	r3, r7, #20
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fd ffb5 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b5a:	e060      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b5c:	f107 0308 	add.w	r3, r7, #8
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fe f917 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b6a:	e058      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009b6c:	4b7c      	ldr	r3, [pc, #496]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b72:	f003 0302 	and.w	r3, r3, #2
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d103      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b7e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b80:	e04d      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b86:	e04a      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009b88:	4b75      	ldr	r3, [pc, #468]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b96:	d103      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009b98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009b9c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b9e:	e03e      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ba4:	e03b      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ba6:	4b6e      	ldr	r3, [pc, #440]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009bac:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bb2:	4b6b      	ldr	r3, [pc, #428]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d10c      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d109      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bc4:	4b66      	ldr	r3, [pc, #408]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	08db      	lsrs	r3, r3, #3
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	4a65      	ldr	r2, [pc, #404]	; (8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8009bd6:	e01e      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bd8:	4b61      	ldr	r3, [pc, #388]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009be4:	d106      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bec:	d102      	bne.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009bee:	4b5e      	ldr	r3, [pc, #376]	; (8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bf2:	e010      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bf4:	4b5a      	ldr	r3, [pc, #360]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c00:	d106      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c08:	d102      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c0a:	4b58      	ldr	r3, [pc, #352]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c0e:	e002      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009c14:	e003      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009c16:	e002      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c1c:	bf00      	nop
          }
        }
        break;
 8009c1e:	f000 bd6e 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009c22:	4b4f      	ldr	r3, [pc, #316]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009c28:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009c34:	d056      	beq.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009c3c:	f200 808b 	bhi.w	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c46:	d03e      	beq.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c4e:	f200 8082 	bhi.w	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c58:	d027      	beq.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c60:	d879      	bhi.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c68:	d017      	beq.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c70:	d871      	bhi.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d004      	beq.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c7e:	d004      	beq.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009c80:	e069      	b.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009c82:	f7fb fddb 	bl	800583c <HAL_RCC_GetPCLK3Freq>
 8009c86:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009c88:	e068      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c8a:	f107 0314 	add.w	r3, r7, #20
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fd ff16 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c98:	e060      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c9a:	f107 0308 	add.w	r3, r7, #8
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe f878 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ca8:	e058      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009caa:	4b2d      	ldr	r3, [pc, #180]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009cb0:	f003 0302 	and.w	r3, r3, #2
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d103      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cbc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009cbe:	e04d      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009cc4:	e04a      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009cc6:	4b26      	ldr	r3, [pc, #152]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cd4:	d103      	bne.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009cd6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009cda:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009cdc:	e03e      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ce2:	e03b      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ce4:	4b1e      	ldr	r3, [pc, #120]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009cea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009cee:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cf0:	4b1b      	ldr	r3, [pc, #108]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0302 	and.w	r3, r3, #2
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d10c      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d109      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d02:	4b17      	ldr	r3, [pc, #92]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	08db      	lsrs	r3, r3, #3
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	4a15      	ldr	r2, [pc, #84]	; (8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d12:	637b      	str	r3, [r7, #52]	; 0x34
 8009d14:	e01e      	b.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d16:	4b12      	ldr	r3, [pc, #72]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d22:	d106      	bne.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d2a:	d102      	bne.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009d2c:	4b0e      	ldr	r3, [pc, #56]	; (8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8009d30:	e010      	b.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d32:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d3e:	d106      	bne.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d46:	d102      	bne.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d48:	4b08      	ldr	r3, [pc, #32]	; (8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d4c:	e002      	b.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009d52:	e003      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009d54:	e002      	b.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009d5a:	bf00      	nop
          }
        }
        break;
 8009d5c:	f000 bccf 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d60:	44020c00 	.word	0x44020c00
 8009d64:	03d09000 	.word	0x03d09000
 8009d68:	003d0900 	.word	0x003d0900
 8009d6c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009d70:	4b9e      	ldr	r3, [pc, #632]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009d76:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d82:	d056      	beq.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d8a:	f200 808b 	bhi.w	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d94:	d03e      	beq.n	8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d9c:	f200 8082 	bhi.w	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009da6:	d027      	beq.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dae:	d879      	bhi.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009db6:	d017      	beq.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dbe:	d871      	bhi.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d004      	beq.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dcc:	d004      	beq.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009dce:	e069      	b.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009dd0:	f7fb fd34 	bl	800583c <HAL_RCC_GetPCLK3Freq>
 8009dd4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009dd6:	e068      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dd8:	f107 0314 	add.w	r3, r7, #20
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fd fe6f 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009de6:	e060      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009de8:	f107 0308 	add.w	r3, r7, #8
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fd ffd1 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009df6:	e058      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009df8:	4b7c      	ldr	r3, [pc, #496]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d103      	bne.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e0a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009e0c:	e04d      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009e12:	e04a      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009e14:	4b75      	ldr	r3, [pc, #468]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e22:	d103      	bne.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009e24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009e28:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009e2a:	e03e      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009e30:	e03b      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e32:	4b6e      	ldr	r3, [pc, #440]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e3e:	4b6b      	ldr	r3, [pc, #428]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d10c      	bne.n	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d109      	bne.n	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e50:	4b66      	ldr	r3, [pc, #408]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	08db      	lsrs	r3, r3, #3
 8009e56:	f003 0303 	and.w	r3, r3, #3
 8009e5a:	4a65      	ldr	r2, [pc, #404]	; (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
 8009e62:	e01e      	b.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e64:	4b61      	ldr	r3, [pc, #388]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e70:	d106      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e78:	d102      	bne.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e7a:	4b5e      	ldr	r3, [pc, #376]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e7e:	e010      	b.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e80:	4b5a      	ldr	r3, [pc, #360]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e8c:	d106      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e94:	d102      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e96:	4b58      	ldr	r3, [pc, #352]	; (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009e98:	637b      	str	r3, [r7, #52]	; 0x34
 8009e9a:	e002      	b.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009ea0:	e003      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009ea2:	e002      	b.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ea8:	bf00      	nop
          }
        }
        break;
 8009eaa:	f000 bc28 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009eae:	4b4f      	ldr	r3, [pc, #316]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eb8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009eba:	4b4c      	ldr	r3, [pc, #304]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ec6:	d106      	bne.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d103      	bne.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009ece:	4b4a      	ldr	r3, [pc, #296]	; (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009ed0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009ed2:	f000 bc14 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009edc:	d108      	bne.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ede:	f107 0320 	add.w	r3, r7, #32
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fd fc82 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009eec:	f000 bc07 	b.w	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ef6:	d107      	bne.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ef8:	f107 0314 	add.w	r3, r7, #20
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fd fddf 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f06:	e3fa      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f0c:	e3f7      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009f0e:	4b37      	ldr	r3, [pc, #220]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f14:	f003 0307 	and.w	r3, r3, #7
 8009f18:	633b      	str	r3, [r7, #48]	; 0x30
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d861      	bhi.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009f20:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f26:	bf00      	nop
 8009f28:	08009f3d 	.word	0x08009f3d
 8009f2c:	08009f4d 	.word	0x08009f4d
 8009f30:	08009f5d 	.word	0x08009f5d
 8009f34:	08009f6d 	.word	0x08009f6d
 8009f38:	08009f73 	.word	0x08009f73
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f3c:	f107 0320 	add.w	r3, r7, #32
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fd fc53 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f4a:	e04e      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f4c:	f107 0314 	add.w	r3, r7, #20
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fd fdb5 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f5a:	e046      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f5c:	f107 0308 	add.w	r3, r7, #8
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fd ff17 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f6a:	e03e      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009f6c:	4b23      	ldr	r3, [pc, #140]	; (8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009f6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f70:	e03b      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f72:	4b1e      	ldr	r3, [pc, #120]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f78:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009f7c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f7e:	4b1b      	ldr	r3, [pc, #108]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0302 	and.w	r3, r3, #2
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d10c      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f90:	4b16      	ldr	r3, [pc, #88]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	08db      	lsrs	r3, r3, #3
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	4a15      	ldr	r2, [pc, #84]	; (8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8009fa2:	e01e      	b.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fa4:	4b11      	ldr	r3, [pc, #68]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fb0:	d106      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb8:	d102      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009fba:	4b0e      	ldr	r3, [pc, #56]	; (8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8009fbe:	e010      	b.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fcc:	d106      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fd4:	d102      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009fd6:	4b08      	ldr	r3, [pc, #32]	; (8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8009fda:	e002      	b.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009fe0:	e003      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009fe2:	e002      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009fe8:	bf00      	nop
          }
        }
        break;
 8009fea:	e388      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009fec:	44020c00 	.word	0x44020c00
 8009ff0:	03d09000 	.word	0x03d09000
 8009ff4:	003d0900 	.word	0x003d0900
 8009ff8:	007a1200 	.word	0x007a1200
 8009ffc:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a000:	4ba9      	ldr	r3, [pc, #676]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a00a:	633b      	str	r3, [r7, #48]	; 0x30
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	2b20      	cmp	r3, #32
 800a010:	f200 809a 	bhi.w	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800a014:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800a016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01a:	bf00      	nop
 800a01c:	0800a0a1 	.word	0x0800a0a1
 800a020:	0800a149 	.word	0x0800a149
 800a024:	0800a149 	.word	0x0800a149
 800a028:	0800a149 	.word	0x0800a149
 800a02c:	0800a149 	.word	0x0800a149
 800a030:	0800a149 	.word	0x0800a149
 800a034:	0800a149 	.word	0x0800a149
 800a038:	0800a149 	.word	0x0800a149
 800a03c:	0800a0b1 	.word	0x0800a0b1
 800a040:	0800a149 	.word	0x0800a149
 800a044:	0800a149 	.word	0x0800a149
 800a048:	0800a149 	.word	0x0800a149
 800a04c:	0800a149 	.word	0x0800a149
 800a050:	0800a149 	.word	0x0800a149
 800a054:	0800a149 	.word	0x0800a149
 800a058:	0800a149 	.word	0x0800a149
 800a05c:	0800a0c1 	.word	0x0800a0c1
 800a060:	0800a149 	.word	0x0800a149
 800a064:	0800a149 	.word	0x0800a149
 800a068:	0800a149 	.word	0x0800a149
 800a06c:	0800a149 	.word	0x0800a149
 800a070:	0800a149 	.word	0x0800a149
 800a074:	0800a149 	.word	0x0800a149
 800a078:	0800a149 	.word	0x0800a149
 800a07c:	0800a0d1 	.word	0x0800a0d1
 800a080:	0800a149 	.word	0x0800a149
 800a084:	0800a149 	.word	0x0800a149
 800a088:	0800a149 	.word	0x0800a149
 800a08c:	0800a149 	.word	0x0800a149
 800a090:	0800a149 	.word	0x0800a149
 800a094:	0800a149 	.word	0x0800a149
 800a098:	0800a149 	.word	0x0800a149
 800a09c:	0800a0d7 	.word	0x0800a0d7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0a0:	f107 0320 	add.w	r3, r7, #32
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fd fba1 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a0ae:	e04e      	b.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0b0:	f107 0314 	add.w	r3, r7, #20
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fd fd03 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a0be:	e046      	b.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c0:	f107 0308 	add.w	r3, r7, #8
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fd fe65 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a0ce:	e03e      	b.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a0d0:	4b76      	ldr	r3, [pc, #472]	; (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a0d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a0d4:	e03b      	b.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0d6:	4b74      	ldr	r3, [pc, #464]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a0dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0e2:	4b71      	ldr	r3, [pc, #452]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d10c      	bne.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0f4:	4b6c      	ldr	r3, [pc, #432]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	08db      	lsrs	r3, r3, #3
 800a0fa:	f003 0303 	and.w	r3, r3, #3
 800a0fe:	4a6c      	ldr	r2, [pc, #432]	; (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a100:	fa22 f303 	lsr.w	r3, r2, r3
 800a104:	637b      	str	r3, [r7, #52]	; 0x34
 800a106:	e01e      	b.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a108:	4b67      	ldr	r3, [pc, #412]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a114:	d106      	bne.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11c:	d102      	bne.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a11e:	4b65      	ldr	r3, [pc, #404]	; (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a120:	637b      	str	r3, [r7, #52]	; 0x34
 800a122:	e010      	b.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a124:	4b60      	ldr	r3, [pc, #384]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a12c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a130:	d106      	bne.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a138:	d102      	bne.n	800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a13a:	4b5f      	ldr	r3, [pc, #380]	; (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
 800a13e:	e002      	b.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a144:	e003      	b.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800a146:	e002      	b.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a14c:	bf00      	nop
          }
        }
        break;
 800a14e:	e2d6      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a150:	4b55      	ldr	r3, [pc, #340]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a156:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a15a:	633b      	str	r3, [r7, #48]	; 0x30
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a162:	d031      	beq.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800a164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a16a:	d866      	bhi.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	2bc0      	cmp	r3, #192	; 0xc0
 800a170:	d027      	beq.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	2bc0      	cmp	r3, #192	; 0xc0
 800a176:	d860      	bhi.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	2b80      	cmp	r3, #128	; 0x80
 800a17c:	d019      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	2b80      	cmp	r3, #128	; 0x80
 800a182:	d85a      	bhi.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	2b40      	cmp	r3, #64	; 0x40
 800a18e:	d008      	beq.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800a190:	e053      	b.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a192:	f107 0320 	add.w	r3, r7, #32
 800a196:	4618      	mov	r0, r3
 800a198:	f7fd fb28 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a1a0:	e04e      	b.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1a2:	f107 0314 	add.w	r3, r7, #20
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fd fc8a 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a1b0:	e046      	b.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1b2:	f107 0308 	add.w	r3, r7, #8
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fd fdec 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a1c0:	e03e      	b.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a1c2:	4b3a      	ldr	r3, [pc, #232]	; (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a1c6:	e03b      	b.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1c8:	4b37      	ldr	r3, [pc, #220]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a1ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a1d2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1d4:	4b34      	ldr	r3, [pc, #208]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d10c      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d109      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1e6:	4b30      	ldr	r3, [pc, #192]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	08db      	lsrs	r3, r3, #3
 800a1ec:	f003 0303 	and.w	r3, r3, #3
 800a1f0:	4a2f      	ldr	r2, [pc, #188]	; (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a1f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f8:	e01e      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1fa:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a206:	d106      	bne.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a20e:	d102      	bne.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a210:	4b28      	ldr	r3, [pc, #160]	; (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a212:	637b      	str	r3, [r7, #52]	; 0x34
 800a214:	e010      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a216:	4b24      	ldr	r3, [pc, #144]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a21e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a222:	d106      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a22a:	d102      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a22c:	4b22      	ldr	r3, [pc, #136]	; (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a22e:	637b      	str	r3, [r7, #52]	; 0x34
 800a230:	e002      	b.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a236:	e003      	b.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800a238:	e002      	b.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a23e:	bf00      	nop
          }
        }
        break;
 800a240:	e25d      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a242:	4b19      	ldr	r3, [pc, #100]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a248:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800a24c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a250:	2b00      	cmp	r3, #0
 800a252:	d103      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a254:	f7fb fadc 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 800a258:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a25a:	e250      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a25c:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a268:	d10b      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a270:	d107      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a272:	f107 0314 	add.w	r3, r7, #20
 800a276:	4618      	mov	r0, r3
 800a278:	f7fd fc22 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	637b      	str	r3, [r7, #52]	; 0x34
 800a280:	e04f      	b.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a282:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a28a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a28e:	d115      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a296:	d111      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a298:	f107 0308 	add.w	r3, r7, #8
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fd fd79 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a2a6:	e03c      	b.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800a2a8:	44020c00 	.word	0x44020c00
 800a2ac:	00bb8000 	.word	0x00bb8000
 800a2b0:	03d09000 	.word	0x03d09000
 800a2b4:	003d0900 	.word	0x003d0900
 800a2b8:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800a2bc:	4b94      	ldr	r3, [pc, #592]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 0302 	and.w	r3, r3, #2
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d10d      	bne.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a2ce:	d109      	bne.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a2d0:	4b8f      	ldr	r3, [pc, #572]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	08db      	lsrs	r3, r3, #3
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	4a8e      	ldr	r2, [pc, #568]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2e2:	e01e      	b.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800a2e4:	4b8a      	ldr	r3, [pc, #552]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f0:	d106      	bne.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2f8:	d102      	bne.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800a2fa:	4b87      	ldr	r3, [pc, #540]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a2fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a2fe:	e010      	b.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800a300:	4b83      	ldr	r3, [pc, #524]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a30c:	d106      	bne.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a314:	d102      	bne.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800a316:	4b81      	ldr	r3, [pc, #516]	; (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a318:	637b      	str	r3, [r7, #52]	; 0x34
 800a31a:	e002      	b.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800a31c:	2300      	movs	r3, #0
 800a31e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a320:	e1ed      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a322:	e1ec      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800a324:	4b7a      	ldr	r3, [pc, #488]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a32a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a32e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	2b00      	cmp	r3, #0
 800a334:	d103      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a336:	f7fb fa81 	bl	800583c <HAL_RCC_GetPCLK3Freq>
 800a33a:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a33c:	e1df      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800a33e:	4b74      	ldr	r3, [pc, #464]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a34a:	d10b      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a352:	d107      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a354:	f107 0314 	add.w	r3, r7, #20
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fd fbb1 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	637b      	str	r3, [r7, #52]	; 0x34
 800a362:	e045      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800a364:	4b6a      	ldr	r3, [pc, #424]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a36c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a370:	d10b      	bne.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a378:	d107      	bne.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a37a:	f107 0308 	add.w	r3, r7, #8
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fd fd08 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	637b      	str	r3, [r7, #52]	; 0x34
 800a388:	e032      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800a38a:	4b61      	ldr	r3, [pc, #388]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0302 	and.w	r3, r3, #2
 800a392:	2b02      	cmp	r3, #2
 800a394:	d10d      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a39c:	d109      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a39e:	4b5c      	ldr	r3, [pc, #368]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	08db      	lsrs	r3, r3, #3
 800a3a4:	f003 0303 	and.w	r3, r3, #3
 800a3a8:	4a5a      	ldr	r2, [pc, #360]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a3b0:	e01e      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800a3b2:	4b57      	ldr	r3, [pc, #348]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3be:	d106      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3c6:	d102      	bne.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800a3c8:	4b53      	ldr	r3, [pc, #332]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a3ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a3cc:	e010      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a3ce:	4b50      	ldr	r3, [pc, #320]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3da:	d106      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3de:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a3e2:	d102      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800a3e4:	4b4d      	ldr	r3, [pc, #308]	; (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a3e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3e8:	e002      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3ee:	e186      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3f0:	e185      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a3f2:	4b47      	ldr	r3, [pc, #284]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3f8:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800a3fc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	2b00      	cmp	r3, #0
 800a402:	d103      	bne.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a404:	f7fb fa04 	bl	8005810 <HAL_RCC_GetPCLK2Freq>
 800a408:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a40a:	e178      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800a40c:	4b40      	ldr	r3, [pc, #256]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a418:	d10b      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a420:	d107      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a422:	f107 0314 	add.w	r3, r7, #20
 800a426:	4618      	mov	r0, r3
 800a428:	f7fd fb4a 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	637b      	str	r3, [r7, #52]	; 0x34
 800a430:	e045      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800a432:	4b37      	ldr	r3, [pc, #220]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a43a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a43e:	d10b      	bne.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a446:	d107      	bne.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7fd fca1 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
 800a456:	e032      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a458:	4b2d      	ldr	r3, [pc, #180]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b02      	cmp	r3, #2
 800a462:	d10d      	bne.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800a46a:	d109      	bne.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a46c:	4b28      	ldr	r3, [pc, #160]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	08db      	lsrs	r3, r3, #3
 800a472:	f003 0303 	and.w	r3, r3, #3
 800a476:	4a27      	ldr	r2, [pc, #156]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a478:	fa22 f303 	lsr.w	r3, r2, r3
 800a47c:	637b      	str	r3, [r7, #52]	; 0x34
 800a47e:	e01e      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a480:	4b23      	ldr	r3, [pc, #140]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a48c:	d106      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a494:	d102      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a496:	4b20      	ldr	r3, [pc, #128]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a498:	637b      	str	r3, [r7, #52]	; 0x34
 800a49a:	e010      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a49c:	4b1c      	ldr	r3, [pc, #112]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4a8:	d106      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800a4b0:	d102      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a4b2:	4b1a      	ldr	r3, [pc, #104]	; (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a4b4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b6:	e002      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a4bc:	e11f      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4be:	e11e      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a4c0:	4b13      	ldr	r3, [pc, #76]	; (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a4c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	633b      	str	r3, [r7, #48]	; 0x30
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d85f      	bhi.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a4d2:	a201      	add	r2, pc, #4	; (adr r2, 800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a4e9 	.word	0x0800a4e9
 800a4dc:	0800a4f1 	.word	0x0800a4f1
 800a4e0:	0800a501 	.word	0x0800a501
 800a4e4:	0800a521 	.word	0x0800a521

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a4e8:	f7fb f960 	bl	80057ac <HAL_RCC_GetHCLKFreq>
 800a4ec:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800a4ee:	e053      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4f0:	f107 0320 	add.w	r3, r7, #32
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fd f979 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4fe:	e04b      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a500:	f107 0314 	add.w	r3, r7, #20
 800a504:	4618      	mov	r0, r3
 800a506:	f7fd fadb 	bl	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a50e:	e043      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a510:	44020c00 	.word	0x44020c00
 800a514:	03d09000 	.word	0x03d09000
 800a518:	003d0900 	.word	0x003d0900
 800a51c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a520:	4b79      	ldr	r3, [pc, #484]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a526:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a52c:	4b76      	ldr	r3, [pc, #472]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0302 	and.w	r3, r3, #2
 800a534:	2b02      	cmp	r3, #2
 800a536:	d10c      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d109      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a53e:	4b72      	ldr	r3, [pc, #456]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	08db      	lsrs	r3, r3, #3
 800a544:	f003 0303 	and.w	r3, r3, #3
 800a548:	4a70      	ldr	r2, [pc, #448]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a54a:	fa22 f303 	lsr.w	r3, r2, r3
 800a54e:	637b      	str	r3, [r7, #52]	; 0x34
 800a550:	e01e      	b.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a552:	4b6d      	ldr	r3, [pc, #436]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a55a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a55e:	d106      	bne.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a566:	d102      	bne.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a568:	4b69      	ldr	r3, [pc, #420]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a56a:	637b      	str	r3, [r7, #52]	; 0x34
 800a56c:	e010      	b.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a56e:	4b66      	ldr	r3, [pc, #408]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a57a:	d106      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a582:	d102      	bne.n	800a58a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a584:	4b63      	ldr	r3, [pc, #396]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a586:	637b      	str	r3, [r7, #52]	; 0x34
 800a588:	e002      	b.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a58e:	e003      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a590:	e002      	b.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a592:	2300      	movs	r3, #0
 800a594:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a596:	bf00      	nop
          }
        }
        break;
 800a598:	e0b1      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a59a:	4b5b      	ldr	r3, [pc, #364]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a59c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5a4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a5a6:	4b58      	ldr	r3, [pc, #352]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5ac:	f003 0302 	and.w	r3, r3, #2
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d106      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d103      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a5ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5be:	637b      	str	r3, [r7, #52]	; 0x34
 800a5c0:	e01f      	b.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a5c2:	4b51      	ldr	r3, [pc, #324]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5d0:	d106      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d4:	2b40      	cmp	r3, #64	; 0x40
 800a5d6:	d103      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a5d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800a5de:	e010      	b.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a5e0:	4b49      	ldr	r3, [pc, #292]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ec:	d106      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	2b80      	cmp	r3, #128	; 0x80
 800a5f2:	d103      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a5f4:	f248 0312 	movw	r3, #32786	; 0x8012
 800a5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5fa:	e002      	b.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800a600:	e07d      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a602:	e07c      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a604:	4b40      	ldr	r3, [pc, #256]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a60a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a60e:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a610:	4b3d      	ldr	r3, [pc, #244]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a61c:	d105      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	2b00      	cmp	r3, #0
 800a622:	d102      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a624:	4b3c      	ldr	r3, [pc, #240]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a626:	637b      	str	r3, [r7, #52]	; 0x34
 800a628:	e031      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a62a:	4b37      	ldr	r3, [pc, #220]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a636:	d10a      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	2b10      	cmp	r3, #16
 800a63c:	d107      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a63e:	f107 0320 	add.w	r3, r7, #32
 800a642:	4618      	mov	r0, r3
 800a644:	f7fd f8d2 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	637b      	str	r3, [r7, #52]	; 0x34
 800a64c:	e01f      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a64e:	4b2e      	ldr	r3, [pc, #184]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a654:	f003 0302 	and.w	r3, r3, #2
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d106      	bne.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	2b20      	cmp	r3, #32
 800a660:	d103      	bne.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a666:	637b      	str	r3, [r7, #52]	; 0x34
 800a668:	e011      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a66a:	4b27      	ldr	r3, [pc, #156]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a66c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a678:	d106      	bne.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	2b30      	cmp	r3, #48	; 0x30
 800a67e:	d103      	bne.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a680:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a684:	637b      	str	r3, [r7, #52]	; 0x34
 800a686:	e002      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a688:	2300      	movs	r3, #0
 800a68a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800a68c:	e037      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a68e:	e036      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a690:	4b1d      	ldr	r3, [pc, #116]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a692:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a696:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a69a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	2b10      	cmp	r3, #16
 800a6a0:	d107      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6a2:	f107 0320 	add.w	r3, r7, #32
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fd f8a0 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a6b0:	e025      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a6b2:	4b15      	ldr	r3, [pc, #84]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6be:	d10a      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c2:	2b20      	cmp	r3, #32
 800a6c4:	d107      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6c6:	f107 0308 	add.w	r3, r7, #8
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fd fb62 	bl	8007d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6d4:	e00f      	b.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a6d6:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e2:	d105      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	2b30      	cmp	r3, #48	; 0x30
 800a6e8:	d102      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a6ea:	4b0b      	ldr	r3, [pc, #44]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a6ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ee:	e002      	b.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800a6f4:	e003      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6f6:	e002      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6fc:	bf00      	nop
    }
  }

  return (frequency);
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a700:	4618      	mov	r0, r3
 800a702:	373c      	adds	r7, #60	; 0x3c
 800a704:	46bd      	mov	sp, r7
 800a706:	bd90      	pop	{r4, r7, pc}
 800a708:	44020c00 	.word	0x44020c00
 800a70c:	03d09000 	.word	0x03d09000
 800a710:	003d0900 	.word	0x003d0900
 800a714:	007a1200 	.word	0x007a1200
 800a718:	02dc6c00 	.word	0x02dc6c00

0800a71c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a724:	4b48      	ldr	r3, [pc, #288]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a47      	ldr	r2, [pc, #284]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a72a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a72e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a730:	f7f8 fb26 	bl	8002d80 <HAL_GetTick>
 800a734:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a736:	e008      	b.n	800a74a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a738:	f7f8 fb22 	bl	8002d80 <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	2b02      	cmp	r3, #2
 800a744:	d901      	bls.n	800a74a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e07a      	b.n	800a840 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a74a:	4b3f      	ldr	r3, [pc, #252]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1f0      	bne.n	800a738 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a756:	4b3c      	ldr	r3, [pc, #240]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a75e:	f023 0303 	bic.w	r3, r3, #3
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6811      	ldr	r1, [r2, #0]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6852      	ldr	r2, [r2, #4]
 800a76a:	0212      	lsls	r2, r2, #8
 800a76c:	430a      	orrs	r2, r1
 800a76e:	4936      	ldr	r1, [pc, #216]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a770:	4313      	orrs	r3, r2
 800a772:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	3b01      	subs	r3, #1
 800a77a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	3b01      	subs	r3, #1
 800a784:	025b      	lsls	r3, r3, #9
 800a786:	b29b      	uxth	r3, r3
 800a788:	431a      	orrs	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	3b01      	subs	r3, #1
 800a790:	041b      	lsls	r3, r3, #16
 800a792:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a796:	431a      	orrs	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	695b      	ldr	r3, [r3, #20]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	061b      	lsls	r3, r3, #24
 800a7a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a7a4:	4928      	ldr	r1, [pc, #160]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a7aa:	4b27      	ldr	r3, [pc, #156]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	f023 020c 	bic.w	r2, r3, #12
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	4924      	ldr	r1, [pc, #144]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a7bc:	4b22      	ldr	r3, [pc, #136]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c0:	f023 0220 	bic.w	r2, r3, #32
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	491f      	ldr	r1, [pc, #124]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	491c      	ldr	r1, [pc, #112]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a7dc:	4b1a      	ldr	r3, [pc, #104]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e0:	4a19      	ldr	r2, [pc, #100]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7e2:	f023 0310 	bic.w	r3, r3, #16
 800a7e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a7e8:	4b17      	ldr	r3, [pc, #92]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6a12      	ldr	r2, [r2, #32]
 800a7f8:	00d2      	lsls	r2, r2, #3
 800a7fa:	4913      	ldr	r1, [pc, #76]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a800:	4b11      	ldr	r3, [pc, #68]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	4a10      	ldr	r2, [pc, #64]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a806:	f043 0310 	orr.w	r3, r3, #16
 800a80a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a80c:	4b0e      	ldr	r3, [pc, #56]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a0d      	ldr	r2, [pc, #52]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a816:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a818:	f7f8 fab2 	bl	8002d80 <HAL_GetTick>
 800a81c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a81e:	e008      	b.n	800a832 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a820:	f7f8 faae 	bl	8002d80 <HAL_GetTick>
 800a824:	4602      	mov	r2, r0
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d901      	bls.n	800a832 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e006      	b.n	800a840 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a832:	4b05      	ldr	r3, [pc, #20]	; (800a848 <RCCEx_PLL2_Config+0x12c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0f0      	beq.n	800a820 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a83e:	2300      	movs	r3, #0

}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	44020c00 	.word	0x44020c00

0800a84c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a854:	4b48      	ldr	r3, [pc, #288]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a47      	ldr	r2, [pc, #284]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a85a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a85e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a860:	f7f8 fa8e 	bl	8002d80 <HAL_GetTick>
 800a864:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a866:	e008      	b.n	800a87a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a868:	f7f8 fa8a 	bl	8002d80 <HAL_GetTick>
 800a86c:	4602      	mov	r2, r0
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	2b02      	cmp	r3, #2
 800a874:	d901      	bls.n	800a87a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e07a      	b.n	800a970 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a87a:	4b3f      	ldr	r3, [pc, #252]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1f0      	bne.n	800a868 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a886:	4b3c      	ldr	r3, [pc, #240]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a88e:	f023 0303 	bic.w	r3, r3, #3
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6811      	ldr	r1, [r2, #0]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	6852      	ldr	r2, [r2, #4]
 800a89a:	0212      	lsls	r2, r2, #8
 800a89c:	430a      	orrs	r2, r1
 800a89e:	4936      	ldr	r1, [pc, #216]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	630b      	str	r3, [r1, #48]	; 0x30
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	025b      	lsls	r3, r3, #9
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	041b      	lsls	r3, r3, #16
 800a8c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	061b      	lsls	r3, r3, #24
 800a8d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8d4:	4928      	ldr	r1, [pc, #160]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8da:	4b27      	ldr	r3, [pc, #156]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8de:	f023 020c 	bic.w	r2, r3, #12
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	4924      	ldr	r1, [pc, #144]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a8ec:	4b22      	ldr	r3, [pc, #136]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f0:	f023 0220 	bic.w	r2, r3, #32
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	491f      	ldr	r1, [pc, #124]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a8fe:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a906:	491c      	ldr	r1, [pc, #112]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a908:	4313      	orrs	r3, r2
 800a90a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a90c:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a910:	4a19      	ldr	r2, [pc, #100]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a912:	f023 0310 	bic.w	r3, r3, #16
 800a916:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a918:	4b17      	ldr	r3, [pc, #92]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a91a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a91c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a920:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	6a12      	ldr	r2, [r2, #32]
 800a928:	00d2      	lsls	r2, r2, #3
 800a92a:	4913      	ldr	r1, [pc, #76]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a930:	4b11      	ldr	r3, [pc, #68]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a934:	4a10      	ldr	r2, [pc, #64]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a936:	f043 0310 	orr.w	r3, r3, #16
 800a93a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a93c:	4b0e      	ldr	r3, [pc, #56]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a0d      	ldr	r2, [pc, #52]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a946:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a948:	f7f8 fa1a 	bl	8002d80 <HAL_GetTick>
 800a94c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a94e:	e008      	b.n	800a962 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a950:	f7f8 fa16 	bl	8002d80 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d901      	bls.n	800a962 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e006      	b.n	800a970 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a962:	4b05      	ldr	r3, [pc, #20]	; (800a978 <RCCEx_PLL3_Config+0x12c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0f0      	beq.n	800a950 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	44020c00 	.word	0x44020c00

0800a97c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800a988:	4b07      	ldr	r3, [pc, #28]	; (800a9a8 <HAL_RTCEx_BKUPWrite+0x2c>)
 800a98a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	4413      	add	r3, r2
 800a994:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	601a      	str	r2, [r3, #0]
}
 800a99c:	bf00      	nop
 800a99e:	371c      	adds	r7, #28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	44007d00 	.word	0x44007d00

0800a9ac <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800a9b6:	4b07      	ldr	r3, [pc, #28]	; (800a9d4 <HAL_RTCEx_BKUPRead+0x28>)
 800a9b8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	44007d00 	.word	0x44007d00

0800a9d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e049      	b.n	800aa7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f841 	bl	800aa86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3304      	adds	r3, #4
 800aa14:	4619      	mov	r1, r3
 800aa16:	4610      	mov	r0, r2
 800aa18:	f000 fa60 	bl	800aedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b083      	sub	sp, #12
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
	...

0800aa9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d001      	beq.n	800aab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e07c      	b.n	800abae <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2202      	movs	r2, #2
 800aab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68da      	ldr	r2, [r3, #12]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f042 0201 	orr.w	r2, r2, #1
 800aaca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a3a      	ldr	r2, [pc, #232]	; (800abbc <HAL_TIM_Base_Start_IT+0x120>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d04a      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a39      	ldr	r2, [pc, #228]	; (800abc0 <HAL_TIM_Base_Start_IT+0x124>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d045      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae8:	d040      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aaf2:	d03b      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a32      	ldr	r2, [pc, #200]	; (800abc4 <HAL_TIM_Base_Start_IT+0x128>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d036      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a31      	ldr	r2, [pc, #196]	; (800abc8 <HAL_TIM_Base_Start_IT+0x12c>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d031      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a2f      	ldr	r2, [pc, #188]	; (800abcc <HAL_TIM_Base_Start_IT+0x130>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d02c      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a2e      	ldr	r2, [pc, #184]	; (800abd0 <HAL_TIM_Base_Start_IT+0x134>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d027      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a2c      	ldr	r2, [pc, #176]	; (800abd4 <HAL_TIM_Base_Start_IT+0x138>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d022      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a2b      	ldr	r2, [pc, #172]	; (800abd8 <HAL_TIM_Base_Start_IT+0x13c>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d01d      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a29      	ldr	r2, [pc, #164]	; (800abdc <HAL_TIM_Base_Start_IT+0x140>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d018      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a28      	ldr	r2, [pc, #160]	; (800abe0 <HAL_TIM_Base_Start_IT+0x144>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d013      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a26      	ldr	r2, [pc, #152]	; (800abe4 <HAL_TIM_Base_Start_IT+0x148>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d00e      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a25      	ldr	r2, [pc, #148]	; (800abe8 <HAL_TIM_Base_Start_IT+0x14c>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d009      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a23      	ldr	r2, [pc, #140]	; (800abec <HAL_TIM_Base_Start_IT+0x150>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d004      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0xd0>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a22      	ldr	r2, [pc, #136]	; (800abf0 <HAL_TIM_Base_Start_IT+0x154>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d115      	bne.n	800ab98 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689a      	ldr	r2, [r3, #8]
 800ab72:	4b20      	ldr	r3, [pc, #128]	; (800abf4 <HAL_TIM_Base_Start_IT+0x158>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b06      	cmp	r3, #6
 800ab7c:	d015      	beq.n	800abaa <HAL_TIM_Base_Start_IT+0x10e>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab84:	d011      	beq.n	800abaa <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f042 0201 	orr.w	r2, r2, #1
 800ab94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab96:	e008      	b.n	800abaa <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f042 0201 	orr.w	r2, r2, #1
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	e000      	b.n	800abac <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	40012c00 	.word	0x40012c00
 800abc0:	50012c00 	.word	0x50012c00
 800abc4:	40000400 	.word	0x40000400
 800abc8:	50000400 	.word	0x50000400
 800abcc:	40000800 	.word	0x40000800
 800abd0:	50000800 	.word	0x50000800
 800abd4:	40000c00 	.word	0x40000c00
 800abd8:	50000c00 	.word	0x50000c00
 800abdc:	40013400 	.word	0x40013400
 800abe0:	50013400 	.word	0x50013400
 800abe4:	40001800 	.word	0x40001800
 800abe8:	50001800 	.word	0x50001800
 800abec:	40014000 	.word	0x40014000
 800abf0:	50014000 	.word	0x50014000
 800abf4:	00010007 	.word	0x00010007

0800abf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d020      	beq.n	800ac5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01b      	beq.n	800ac5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f06f 0202 	mvn.w	r2, #2
 800ac2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	f003 0303 	and.w	r3, r3, #3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f92c 	bl	800aea0 <HAL_TIM_IC_CaptureCallback>
 800ac48:	e005      	b.n	800ac56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f91e 	bl	800ae8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f92f 	bl	800aeb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f003 0304 	and.w	r3, r3, #4
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d020      	beq.n	800aca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01b      	beq.n	800aca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f06f 0204 	mvn.w	r2, #4
 800ac78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d003      	beq.n	800ac96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f906 	bl	800aea0 <HAL_TIM_IC_CaptureCallback>
 800ac94:	e005      	b.n	800aca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f8f8 	bl	800ae8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f909 	bl	800aeb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f003 0308 	and.w	r3, r3, #8
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d020      	beq.n	800acf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f003 0308 	and.w	r3, r3, #8
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d01b      	beq.n	800acf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f06f 0208 	mvn.w	r2, #8
 800acc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2204      	movs	r2, #4
 800acca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	f003 0303 	and.w	r3, r3, #3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f8e0 	bl	800aea0 <HAL_TIM_IC_CaptureCallback>
 800ace0:	e005      	b.n	800acee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f8d2 	bl	800ae8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f8e3 	bl	800aeb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	f003 0310 	and.w	r3, r3, #16
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d020      	beq.n	800ad40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f003 0310 	and.w	r3, r3, #16
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01b      	beq.n	800ad40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f06f 0210 	mvn.w	r2, #16
 800ad10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2208      	movs	r2, #8
 800ad16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f8ba 	bl	800aea0 <HAL_TIM_IC_CaptureCallback>
 800ad2c:	e005      	b.n	800ad3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f8ac 	bl	800ae8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f8bd 	bl	800aeb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00c      	beq.n	800ad64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f06f 0201 	mvn.w	r2, #1
 800ad5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7f5 fee2 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00c      	beq.n	800ad88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d007      	beq.n	800ad88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f9d2 	bl	800b12c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00c      	beq.n	800adac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d007      	beq.n	800adac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ada4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f9ca 	bl	800b140 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00c      	beq.n	800add0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d007      	beq.n	800add0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800adc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f87c 	bl	800aec8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f003 0320 	and.w	r3, r3, #32
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00c      	beq.n	800adf4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d007      	beq.n	800adf4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f06f 0220 	mvn.w	r2, #32
 800adec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 f992 	bl	800b118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00c      	beq.n	800ae18 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d007      	beq.n	800ae18 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ae10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f99e 	bl	800b154 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00c      	beq.n	800ae3c <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d007      	beq.n	800ae3c <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ae34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f996 	bl	800b168 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00c      	beq.n	800ae60 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d007      	beq.n	800ae60 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ae58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f98e 	bl	800b17c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00c      	beq.n	800ae84 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d007      	beq.n	800ae84 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ae7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f986 	bl	800b190 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae84:	bf00      	nop
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aea8:	bf00      	nop
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a74      	ldr	r2, [pc, #464]	; (800b0c0 <TIM_Base_SetConfig+0x1e4>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d02b      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a73      	ldr	r2, [pc, #460]	; (800b0c4 <TIM_Base_SetConfig+0x1e8>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d027      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af02:	d023      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af0a:	d01f      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a6e      	ldr	r2, [pc, #440]	; (800b0c8 <TIM_Base_SetConfig+0x1ec>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d01b      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a6d      	ldr	r2, [pc, #436]	; (800b0cc <TIM_Base_SetConfig+0x1f0>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d017      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a6c      	ldr	r2, [pc, #432]	; (800b0d0 <TIM_Base_SetConfig+0x1f4>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d013      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a6b      	ldr	r2, [pc, #428]	; (800b0d4 <TIM_Base_SetConfig+0x1f8>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d00f      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a6a      	ldr	r2, [pc, #424]	; (800b0d8 <TIM_Base_SetConfig+0x1fc>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d00b      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a69      	ldr	r2, [pc, #420]	; (800b0dc <TIM_Base_SetConfig+0x200>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d007      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a68      	ldr	r2, [pc, #416]	; (800b0e0 <TIM_Base_SetConfig+0x204>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d003      	beq.n	800af4c <TIM_Base_SetConfig+0x70>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a67      	ldr	r2, [pc, #412]	; (800b0e4 <TIM_Base_SetConfig+0x208>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d108      	bne.n	800af5e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a57      	ldr	r2, [pc, #348]	; (800b0c0 <TIM_Base_SetConfig+0x1e4>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d05b      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a56      	ldr	r2, [pc, #344]	; (800b0c4 <TIM_Base_SetConfig+0x1e8>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d057      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af74:	d053      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af7c:	d04f      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a51      	ldr	r2, [pc, #324]	; (800b0c8 <TIM_Base_SetConfig+0x1ec>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d04b      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a50      	ldr	r2, [pc, #320]	; (800b0cc <TIM_Base_SetConfig+0x1f0>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d047      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a4f      	ldr	r2, [pc, #316]	; (800b0d0 <TIM_Base_SetConfig+0x1f4>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d043      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a4e      	ldr	r2, [pc, #312]	; (800b0d4 <TIM_Base_SetConfig+0x1f8>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d03f      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a4d      	ldr	r2, [pc, #308]	; (800b0d8 <TIM_Base_SetConfig+0x1fc>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d03b      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a4c      	ldr	r2, [pc, #304]	; (800b0dc <TIM_Base_SetConfig+0x200>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d037      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a4b      	ldr	r2, [pc, #300]	; (800b0e0 <TIM_Base_SetConfig+0x204>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d033      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a4a      	ldr	r2, [pc, #296]	; (800b0e4 <TIM_Base_SetConfig+0x208>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d02f      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a49      	ldr	r2, [pc, #292]	; (800b0e8 <TIM_Base_SetConfig+0x20c>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d02b      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a48      	ldr	r2, [pc, #288]	; (800b0ec <TIM_Base_SetConfig+0x210>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d027      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a47      	ldr	r2, [pc, #284]	; (800b0f0 <TIM_Base_SetConfig+0x214>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d023      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a46      	ldr	r2, [pc, #280]	; (800b0f4 <TIM_Base_SetConfig+0x218>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d01f      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a45      	ldr	r2, [pc, #276]	; (800b0f8 <TIM_Base_SetConfig+0x21c>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d01b      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a44      	ldr	r2, [pc, #272]	; (800b0fc <TIM_Base_SetConfig+0x220>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d017      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a43      	ldr	r2, [pc, #268]	; (800b100 <TIM_Base_SetConfig+0x224>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d013      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a42      	ldr	r2, [pc, #264]	; (800b104 <TIM_Base_SetConfig+0x228>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d00f      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a41      	ldr	r2, [pc, #260]	; (800b108 <TIM_Base_SetConfig+0x22c>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d00b      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a40      	ldr	r2, [pc, #256]	; (800b10c <TIM_Base_SetConfig+0x230>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d007      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a3f      	ldr	r2, [pc, #252]	; (800b110 <TIM_Base_SetConfig+0x234>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d003      	beq.n	800b01e <TIM_Base_SetConfig+0x142>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a3e      	ldr	r2, [pc, #248]	; (800b114 <TIM_Base_SetConfig+0x238>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d108      	bne.n	800b030 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	689a      	ldr	r2, [r3, #8]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a1a      	ldr	r2, [pc, #104]	; (800b0c0 <TIM_Base_SetConfig+0x1e4>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d023      	beq.n	800b0a4 <TIM_Base_SetConfig+0x1c8>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a19      	ldr	r2, [pc, #100]	; (800b0c4 <TIM_Base_SetConfig+0x1e8>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d01f      	beq.n	800b0a4 <TIM_Base_SetConfig+0x1c8>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a1e      	ldr	r2, [pc, #120]	; (800b0e0 <TIM_Base_SetConfig+0x204>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d01b      	beq.n	800b0a4 <TIM_Base_SetConfig+0x1c8>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <TIM_Base_SetConfig+0x208>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d017      	beq.n	800b0a4 <TIM_Base_SetConfig+0x1c8>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a22      	ldr	r2, [pc, #136]	; (800b100 <TIM_Base_SetConfig+0x224>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d013      	beq.n	800b0a4 <TIM_Base_SetConfig+0x1c8>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a21      	ldr	r2, [pc, #132]	; (800b104 <TIM_Base_SetConfig+0x228>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d00f      	beq.n	800b0a4 <TIM_Base_SetConfig+0x1c8>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a20      	ldr	r2, [pc, #128]	; (800b108 <TIM_Base_SetConfig+0x22c>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d00b      	beq.n	800b0a4 <TIM_Base_SetConfig+0x1c8>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a1f      	ldr	r2, [pc, #124]	; (800b10c <TIM_Base_SetConfig+0x230>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d007      	beq.n	800b0a4 <TIM_Base_SetConfig+0x1c8>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a1e      	ldr	r2, [pc, #120]	; (800b110 <TIM_Base_SetConfig+0x234>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d003      	beq.n	800b0a4 <TIM_Base_SetConfig+0x1c8>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <TIM_Base_SetConfig+0x238>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d103      	bne.n	800b0ac <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	691a      	ldr	r2, [r3, #16]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	615a      	str	r2, [r3, #20]
}
 800b0b2:	bf00      	nop
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	40012c00 	.word	0x40012c00
 800b0c4:	50012c00 	.word	0x50012c00
 800b0c8:	40000400 	.word	0x40000400
 800b0cc:	50000400 	.word	0x50000400
 800b0d0:	40000800 	.word	0x40000800
 800b0d4:	50000800 	.word	0x50000800
 800b0d8:	40000c00 	.word	0x40000c00
 800b0dc:	50000c00 	.word	0x50000c00
 800b0e0:	40013400 	.word	0x40013400
 800b0e4:	50013400 	.word	0x50013400
 800b0e8:	40001800 	.word	0x40001800
 800b0ec:	50001800 	.word	0x50001800
 800b0f0:	40001c00 	.word	0x40001c00
 800b0f4:	50001c00 	.word	0x50001c00
 800b0f8:	40002000 	.word	0x40002000
 800b0fc:	50002000 	.word	0x50002000
 800b100:	40014000 	.word	0x40014000
 800b104:	50014000 	.word	0x50014000
 800b108:	40014400 	.word	0x40014400
 800b10c:	50014400 	.word	0x50014400
 800b110:	40014800 	.word	0x40014800
 800b114:	50014800 	.word	0x50014800

0800b118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b120:	bf00      	nop
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b15c:	bf00      	nop
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b170:	bf00      	nop
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e042      	b.n	800b23c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d106      	bne.n	800b1ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f7f5 fccf 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2224      	movs	r2, #36	; 0x24
 800b1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f022 0201 	bic.w	r2, r2, #1
 800b1e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d002      	beq.n	800b1f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fe0a 	bl	800be08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fc19 	bl	800ba2c <UART_SetConfig>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d101      	bne.n	800b204 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e01b      	b.n	800b23c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685a      	ldr	r2, [r3, #4]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	689a      	ldr	r2, [r3, #8]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f042 0201 	orr.w	r2, r2, #1
 800b232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fe89 	bl	800bf4c <UART_CheckIdleState>
 800b23a:	4603      	mov	r3, r0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b08a      	sub	sp, #40	; 0x28
 800b248:	af02      	add	r7, sp, #8
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	4613      	mov	r3, r2
 800b252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	f040 808b 	bne.w	800b376 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <HAL_UART_Transmit+0x28>
 800b266:	88fb      	ldrh	r3, [r7, #6]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e083      	b.n	800b378 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b27a:	2b80      	cmp	r3, #128	; 0x80
 800b27c:	d107      	bne.n	800b28e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689a      	ldr	r2, [r3, #8]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b28c:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2221      	movs	r2, #33	; 0x21
 800b29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b29e:	f7f7 fd6f 	bl	8002d80 <HAL_GetTick>
 800b2a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	88fa      	ldrh	r2, [r7, #6]
 800b2a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	88fa      	ldrh	r2, [r7, #6]
 800b2b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2bc:	d108      	bne.n	800b2d0 <HAL_UART_Transmit+0x8c>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d104      	bne.n	800b2d0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	61bb      	str	r3, [r7, #24]
 800b2ce:	e003      	b.n	800b2d8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b2d8:	e030      	b.n	800b33c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2180      	movs	r1, #128	; 0x80
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f000 fedb 	bl	800c0a0 <UART_WaitOnFlagUntilTimeout>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d005      	beq.n	800b2fc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2220      	movs	r2, #32
 800b2f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e03d      	b.n	800b378 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10b      	bne.n	800b31a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	881b      	ldrh	r3, [r3, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b310:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	3302      	adds	r3, #2
 800b316:	61bb      	str	r3, [r7, #24]
 800b318:	e007      	b.n	800b32a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	781a      	ldrb	r2, [r3, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	3301      	adds	r3, #1
 800b328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b330:	b29b      	uxth	r3, r3
 800b332:	3b01      	subs	r3, #1
 800b334:	b29a      	uxth	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b342:	b29b      	uxth	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1c8      	bne.n	800b2da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2200      	movs	r2, #0
 800b350:	2140      	movs	r1, #64	; 0x40
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 fea4 	bl	800c0a0 <UART_WaitOnFlagUntilTimeout>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d005      	beq.n	800b36a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2220      	movs	r2, #32
 800b362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b366:	2303      	movs	r3, #3
 800b368:	e006      	b.n	800b378 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2220      	movs	r2, #32
 800b36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	e000      	b.n	800b378 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b376:	2302      	movs	r3, #2
  }
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3720      	adds	r7, #32
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b08a      	sub	sp, #40	; 0x28
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	4613      	mov	r3, r2
 800b38c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b394:	2b20      	cmp	r3, #32
 800b396:	d14b      	bne.n	800b430 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d002      	beq.n	800b3a4 <HAL_UART_Receive_IT+0x24>
 800b39e:	88fb      	ldrh	r3, [r7, #6]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e044      	b.n	800b432 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b8:	2b40      	cmp	r3, #64	; 0x40
 800b3ba:	d107      	bne.n	800b3cc <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689a      	ldr	r2, [r3, #8]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3ca:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a1a      	ldr	r2, [pc, #104]	; (800b43c <HAL_UART_Receive_IT+0xbc>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d024      	beq.n	800b420 <HAL_UART_Receive_IT+0xa0>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a19      	ldr	r2, [pc, #100]	; (800b440 <HAL_UART_Receive_IT+0xc0>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d01f      	beq.n	800b420 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d018      	beq.n	800b420 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	e853 3f00 	ldrex	r3, [r3]
 800b3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b402:	627b      	str	r3, [r7, #36]	; 0x24
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	461a      	mov	r2, r3
 800b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40c:	623b      	str	r3, [r7, #32]
 800b40e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	69f9      	ldr	r1, [r7, #28]
 800b412:	6a3a      	ldr	r2, [r7, #32]
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	61bb      	str	r3, [r7, #24]
   return(result);
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e6      	bne.n	800b3ee <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b420:	88fb      	ldrh	r3, [r7, #6]
 800b422:	461a      	mov	r2, r3
 800b424:	68b9      	ldr	r1, [r7, #8]
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f000 fea2 	bl	800c170 <UART_Start_Receive_IT>
 800b42c:	4603      	mov	r3, r0
 800b42e:	e000      	b.n	800b432 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b430:	2302      	movs	r3, #2
  }
}
 800b432:	4618      	mov	r0, r3
 800b434:	3728      	adds	r7, #40	; 0x28
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	44002400 	.word	0x44002400
 800b440:	54002400 	.word	0x54002400

0800b444 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b0ae      	sub	sp, #184	; 0xb8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b46a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b46e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b472:	4013      	ands	r3, r2
 800b474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800b478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d11b      	bne.n	800b4b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b480:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b484:	f003 0320 	and.w	r3, r3, #32
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d015      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b48c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b490:	f003 0320 	and.w	r3, r3, #32
 800b494:	2b00      	cmp	r3, #0
 800b496:	d105      	bne.n	800b4a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b49c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d009      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 8293 	beq.w	800b9d4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	4798      	blx	r3
      }
      return;
 800b4b6:	e28d      	b.n	800b9d4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b4b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f000 80fd 	beq.w	800b6bc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b4c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b4c6:	4b7a      	ldr	r3, [pc, #488]	; (800b6b0 <HAL_UART_IRQHandler+0x26c>)
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d106      	bne.n	800b4dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b4ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b4d2:	4b78      	ldr	r3, [pc, #480]	; (800b6b4 <HAL_UART_IRQHandler+0x270>)
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 80f0 	beq.w	800b6bc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4e0:	f003 0301 	and.w	r3, r3, #1
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d011      	beq.n	800b50c <HAL_UART_IRQHandler+0xc8>
 800b4e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00b      	beq.n	800b50c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b502:	f043 0201 	orr.w	r2, r3, #1
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b50c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b510:	f003 0302 	and.w	r3, r3, #2
 800b514:	2b00      	cmp	r3, #0
 800b516:	d011      	beq.n	800b53c <HAL_UART_IRQHandler+0xf8>
 800b518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00b      	beq.n	800b53c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2202      	movs	r2, #2
 800b52a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b532:	f043 0204 	orr.w	r2, r3, #4
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b53c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d011      	beq.n	800b56c <HAL_UART_IRQHandler+0x128>
 800b548:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00b      	beq.n	800b56c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2204      	movs	r2, #4
 800b55a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b562:	f043 0202 	orr.w	r2, r3, #2
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b56c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b570:	f003 0308 	and.w	r3, r3, #8
 800b574:	2b00      	cmp	r3, #0
 800b576:	d017      	beq.n	800b5a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b57c:	f003 0320 	and.w	r3, r3, #32
 800b580:	2b00      	cmp	r3, #0
 800b582:	d105      	bne.n	800b590 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b584:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b588:	4b49      	ldr	r3, [pc, #292]	; (800b6b0 <HAL_UART_IRQHandler+0x26c>)
 800b58a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00b      	beq.n	800b5a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2208      	movs	r2, #8
 800b596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59e:	f043 0208 	orr.w	r2, r3, #8
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b5a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b5ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d012      	beq.n	800b5da <HAL_UART_IRQHandler+0x196>
 800b5b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b5b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00c      	beq.n	800b5da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5d0:	f043 0220 	orr.w	r2, r3, #32
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f000 81f9 	beq.w	800b9d8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b5ea:	f003 0320 	and.w	r3, r3, #32
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d013      	beq.n	800b61a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b5f6:	f003 0320 	and.w	r3, r3, #32
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d105      	bne.n	800b60a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d007      	beq.n	800b61a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b620:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b62e:	2b40      	cmp	r3, #64	; 0x40
 800b630:	d005      	beq.n	800b63e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b636:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d02e      	beq.n	800b69c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 feb8 	bl	800c3b4 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b64e:	2b40      	cmp	r3, #64	; 0x40
 800b650:	d120      	bne.n	800b694 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d017      	beq.n	800b68c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b662:	4a15      	ldr	r2, [pc, #84]	; (800b6b8 <HAL_UART_IRQHandler+0x274>)
 800b664:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7f7 fd13 	bl	8003098 <HAL_DMA_Abort_IT>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d019      	beq.n	800b6ac <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b67e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b686:	4610      	mov	r0, r2
 800b688:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b68a:	e00f      	b.n	800b6ac <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f9b7 	bl	800ba00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b692:	e00b      	b.n	800b6ac <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f9b3 	bl	800ba00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b69a:	e007      	b.n	800b6ac <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f9af 	bl	800ba00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b6aa:	e195      	b.n	800b9d8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ac:	bf00      	nop
    return;
 800b6ae:	e193      	b.n	800b9d8 <HAL_UART_IRQHandler+0x594>
 800b6b0:	10000001 	.word	0x10000001
 800b6b4:	04000120 	.word	0x04000120
 800b6b8:	0800c481 	.word	0x0800c481

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	f040 8129 	bne.w	800b918 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b6c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6ca:	f003 0310 	and.w	r3, r3, #16
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f000 8122 	beq.w	800b918 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b6d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b6d8:	f003 0310 	and.w	r3, r3, #16
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 811b 	beq.w	800b918 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2210      	movs	r2, #16
 800b6e8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f4:	2b40      	cmp	r3, #64	; 0x40
 800b6f6:	f040 8091 	bne.w	800b81c <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b704:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800b708:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 8165 	beq.w	800b9dc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b718:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800b71c:	429a      	cmp	r2, r3
 800b71e:	f080 815d 	bcs.w	800b9dc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800b728:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b734:	2b81      	cmp	r3, #129	; 0x81
 800b736:	d060      	beq.n	800b7fa <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b740:	e853 3f00 	ldrex	r3, [r3]
 800b744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b74c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	461a      	mov	r2, r3
 800b756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b75a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b75e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b766:	e841 2300 	strex	r3, r2, [r1]
 800b76a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b76c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1e2      	bne.n	800b738 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3308      	adds	r3, #8
 800b778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b784:	f023 0301 	bic.w	r3, r3, #1
 800b788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3308      	adds	r3, #8
 800b792:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b796:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b79c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b79e:	e841 2300 	strex	r3, r2, [r1]
 800b7a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1e3      	bne.n	800b772 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2220      	movs	r2, #32
 800b7ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c0:	e853 3f00 	ldrex	r3, [r3]
 800b7c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b7c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7c8:	f023 0310 	bic.w	r3, r3, #16
 800b7cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7da:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b7e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7e2:	e841 2300 	strex	r3, r2, [r1]
 800b7e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b7e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e4      	bne.n	800b7b8 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7f7 fbd3 	bl	8002fa0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	b29b      	uxth	r3, r3
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 f8fd 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b81a:	e0df      	b.n	800b9dc <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b828:	b29b      	uxth	r3, r3
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b836:	b29b      	uxth	r3, r3
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 80d1 	beq.w	800b9e0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800b83e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 80cc 	beq.w	800b9e0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b85c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	461a      	mov	r2, r3
 800b866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b86a:	647b      	str	r3, [r7, #68]	; 0x44
 800b86c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b872:	e841 2300 	strex	r3, r2, [r1]
 800b876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1e4      	bne.n	800b848 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3308      	adds	r3, #8
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	e853 3f00 	ldrex	r3, [r3]
 800b88c:	623b      	str	r3, [r7, #32]
   return(result);
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b894:	f023 0301 	bic.w	r3, r3, #1
 800b898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b8a6:	633a      	str	r2, [r7, #48]	; 0x30
 800b8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e1      	bne.n	800b87e <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2220      	movs	r2, #32
 800b8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	e853 3f00 	ldrex	r3, [r3]
 800b8da:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f023 0310 	bic.w	r3, r3, #16
 800b8e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b8f0:	61fb      	str	r3, [r7, #28]
 800b8f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f4:	69b9      	ldr	r1, [r7, #24]
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	e841 2300 	strex	r3, r2, [r1]
 800b8fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1e4      	bne.n	800b8ce <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2202      	movs	r2, #2
 800b908:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b90a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f87f 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b916:	e063      	b.n	800b9e0 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b918:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b91c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00e      	beq.n	800b942 <HAL_UART_IRQHandler+0x4fe>
 800b924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d008      	beq.n	800b942 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f001 fb1a 	bl	800cf74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b940:	e051      	b.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d014      	beq.n	800b978 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b94e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b956:	2b00      	cmp	r3, #0
 800b958:	d105      	bne.n	800b966 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b95a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b95e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b962:	2b00      	cmp	r3, #0
 800b964:	d008      	beq.n	800b978 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d03a      	beq.n	800b9e4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	4798      	blx	r3
    }
    return;
 800b976:	e035      	b.n	800b9e4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b978:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b980:	2b00      	cmp	r3, #0
 800b982:	d009      	beq.n	800b998 <HAL_UART_IRQHandler+0x554>
 800b984:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fd8b 	bl	800c4ac <UART_EndTransmit_IT>
    return;
 800b996:	e026      	b.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b998:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b99c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d009      	beq.n	800b9b8 <HAL_UART_IRQHandler+0x574>
 800b9a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f001 faf3 	bl	800cf9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9b6:	e016      	b.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b9b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b9bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d010      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
 800b9c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	da0c      	bge.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f001 fadb 	bl	800cf88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9d2:	e008      	b.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800b9d4:	bf00      	nop
 800b9d6:	e006      	b.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
    return;
 800b9d8:	bf00      	nop
 800b9da:	e004      	b.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800b9dc:	bf00      	nop
 800b9de:	e002      	b.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800b9e0:	bf00      	nop
 800b9e2:	e000      	b.n	800b9e6 <HAL_UART_IRQHandler+0x5a2>
    return;
 800b9e4:	bf00      	nop
  }
}
 800b9e6:	37b8      	adds	r7, #184	; 0xb8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba30:	b094      	sub	sp, #80	; 0x50
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	4b78      	ldr	r3, [pc, #480]	; (800bc24 <UART_SetConfig+0x1f8>)
 800ba42:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba46:	689a      	ldr	r2, [r3, #8]
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	431a      	orrs	r2, r3
 800ba4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	431a      	orrs	r2, r3
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4971      	ldr	r1, [pc, #452]	; (800bc28 <UART_SetConfig+0x1fc>)
 800ba64:	4019      	ands	r1, r3
 800ba66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6c:	430b      	orrs	r3, r1
 800ba6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ba7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7c:	68d9      	ldr	r1, [r3, #12]
 800ba7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	ea40 0301 	orr.w	r3, r0, r1
 800ba86:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	4b64      	ldr	r3, [pc, #400]	; (800bc24 <UART_SetConfig+0x1f8>)
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d009      	beq.n	800baac <UART_SetConfig+0x80>
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	4b63      	ldr	r3, [pc, #396]	; (800bc2c <UART_SetConfig+0x200>)
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d004      	beq.n	800baac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	6a1a      	ldr	r2, [r3, #32]
 800baa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa8:	4313      	orrs	r3, r2
 800baaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800bab6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac0:	430b      	orrs	r3, r1
 800bac2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baca:	f023 000f 	bic.w	r0, r3, #15
 800bace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	ea40 0301 	orr.w	r3, r0, r1
 800bada:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	4b53      	ldr	r3, [pc, #332]	; (800bc30 <UART_SetConfig+0x204>)
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d102      	bne.n	800baec <UART_SetConfig+0xc0>
 800bae6:	2301      	movs	r3, #1
 800bae8:	64bb      	str	r3, [r7, #72]	; 0x48
 800baea:	e066      	b.n	800bbba <UART_SetConfig+0x18e>
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	4b50      	ldr	r3, [pc, #320]	; (800bc34 <UART_SetConfig+0x208>)
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d102      	bne.n	800bafc <UART_SetConfig+0xd0>
 800baf6:	2302      	movs	r3, #2
 800baf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bafa:	e05e      	b.n	800bbba <UART_SetConfig+0x18e>
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	4b4d      	ldr	r3, [pc, #308]	; (800bc38 <UART_SetConfig+0x20c>)
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d102      	bne.n	800bb0c <UART_SetConfig+0xe0>
 800bb06:	2304      	movs	r3, #4
 800bb08:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb0a:	e056      	b.n	800bbba <UART_SetConfig+0x18e>
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	4b4a      	ldr	r3, [pc, #296]	; (800bc3c <UART_SetConfig+0x210>)
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d102      	bne.n	800bb1c <UART_SetConfig+0xf0>
 800bb16:	2308      	movs	r3, #8
 800bb18:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb1a:	e04e      	b.n	800bbba <UART_SetConfig+0x18e>
 800bb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	4b47      	ldr	r3, [pc, #284]	; (800bc40 <UART_SetConfig+0x214>)
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d102      	bne.n	800bb2c <UART_SetConfig+0x100>
 800bb26:	2310      	movs	r3, #16
 800bb28:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb2a:	e046      	b.n	800bbba <UART_SetConfig+0x18e>
 800bb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	4b44      	ldr	r3, [pc, #272]	; (800bc44 <UART_SetConfig+0x218>)
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d102      	bne.n	800bb3c <UART_SetConfig+0x110>
 800bb36:	2320      	movs	r3, #32
 800bb38:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb3a:	e03e      	b.n	800bbba <UART_SetConfig+0x18e>
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	4b41      	ldr	r3, [pc, #260]	; (800bc48 <UART_SetConfig+0x21c>)
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d102      	bne.n	800bb4c <UART_SetConfig+0x120>
 800bb46:	2340      	movs	r3, #64	; 0x40
 800bb48:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb4a:	e036      	b.n	800bbba <UART_SetConfig+0x18e>
 800bb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	4b3e      	ldr	r3, [pc, #248]	; (800bc4c <UART_SetConfig+0x220>)
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d102      	bne.n	800bb5c <UART_SetConfig+0x130>
 800bb56:	2380      	movs	r3, #128	; 0x80
 800bb58:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb5a:	e02e      	b.n	800bbba <UART_SetConfig+0x18e>
 800bb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	4b3b      	ldr	r3, [pc, #236]	; (800bc50 <UART_SetConfig+0x224>)
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d103      	bne.n	800bb6e <UART_SetConfig+0x142>
 800bb66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb6c:	e025      	b.n	800bbba <UART_SetConfig+0x18e>
 800bb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	4b38      	ldr	r3, [pc, #224]	; (800bc54 <UART_SetConfig+0x228>)
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d103      	bne.n	800bb80 <UART_SetConfig+0x154>
 800bb78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb7e:	e01c      	b.n	800bbba <UART_SetConfig+0x18e>
 800bb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	4b34      	ldr	r3, [pc, #208]	; (800bc58 <UART_SetConfig+0x22c>)
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d103      	bne.n	800bb92 <UART_SetConfig+0x166>
 800bb8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb90:	e013      	b.n	800bbba <UART_SetConfig+0x18e>
 800bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	4b31      	ldr	r3, [pc, #196]	; (800bc5c <UART_SetConfig+0x230>)
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d103      	bne.n	800bba4 <UART_SetConfig+0x178>
 800bb9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bba0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bba2:	e00a      	b.n	800bbba <UART_SetConfig+0x18e>
 800bba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	4b1e      	ldr	r3, [pc, #120]	; (800bc24 <UART_SetConfig+0x1f8>)
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d103      	bne.n	800bbb6 <UART_SetConfig+0x18a>
 800bbae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbb2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbb4:	e001      	b.n	800bbba <UART_SetConfig+0x18e>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	4b19      	ldr	r3, [pc, #100]	; (800bc24 <UART_SetConfig+0x1f8>)
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d005      	beq.n	800bbd0 <UART_SetConfig+0x1a4>
 800bbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	4b18      	ldr	r3, [pc, #96]	; (800bc2c <UART_SetConfig+0x200>)
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	f040 8094 	bne.w	800bcf8 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bbd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	623b      	str	r3, [r7, #32]
 800bbd6:	627a      	str	r2, [r7, #36]	; 0x24
 800bbd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bbdc:	f7fc fa44 	bl	8008068 <HAL_RCCEx_GetPeriphCLKFreq>
 800bbe0:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f000 80f7 	beq.w	800bdd8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	4a1c      	ldr	r2, [pc, #112]	; (800bc60 <UART_SetConfig+0x234>)
 800bbf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbfc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	4613      	mov	r3, r2
 800bc04:	005b      	lsls	r3, r3, #1
 800bc06:	4413      	add	r3, r2
 800bc08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d305      	bcc.n	800bc1a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d924      	bls.n	800bc64 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bc20:	e069      	b.n	800bcf6 <UART_SetConfig+0x2ca>
 800bc22:	bf00      	nop
 800bc24:	44002400 	.word	0x44002400
 800bc28:	cfff69f3 	.word	0xcfff69f3
 800bc2c:	54002400 	.word	0x54002400
 800bc30:	40013800 	.word	0x40013800
 800bc34:	40004400 	.word	0x40004400
 800bc38:	40004800 	.word	0x40004800
 800bc3c:	40004c00 	.word	0x40004c00
 800bc40:	40005000 	.word	0x40005000
 800bc44:	40006400 	.word	0x40006400
 800bc48:	40007800 	.word	0x40007800
 800bc4c:	40007c00 	.word	0x40007c00
 800bc50:	40008000 	.word	0x40008000
 800bc54:	40006800 	.word	0x40006800
 800bc58:	40006c00 	.word	0x40006c00
 800bc5c:	40008400 	.word	0x40008400
 800bc60:	0800f820 	.word	0x0800f820
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc66:	2200      	movs	r2, #0
 800bc68:	61bb      	str	r3, [r7, #24]
 800bc6a:	61fa      	str	r2, [r7, #28]
 800bc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	4a64      	ldr	r2, [pc, #400]	; (800be04 <UART_SetConfig+0x3d8>)
 800bc72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	2200      	movs	r2, #0
 800bc7a:	613b      	str	r3, [r7, #16]
 800bc7c:	617a      	str	r2, [r7, #20]
 800bc7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bc86:	f7f4 fb15 	bl	80002b4 <__aeabi_uldivmod>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	4610      	mov	r0, r2
 800bc90:	4619      	mov	r1, r3
 800bc92:	f04f 0200 	mov.w	r2, #0
 800bc96:	f04f 0300 	mov.w	r3, #0
 800bc9a:	020b      	lsls	r3, r1, #8
 800bc9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bca0:	0202      	lsls	r2, r0, #8
 800bca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bca4:	6849      	ldr	r1, [r1, #4]
 800bca6:	0849      	lsrs	r1, r1, #1
 800bca8:	2000      	movs	r0, #0
 800bcaa:	460c      	mov	r4, r1
 800bcac:	4605      	mov	r5, r0
 800bcae:	eb12 0804 	adds.w	r8, r2, r4
 800bcb2:	eb43 0905 	adc.w	r9, r3, r5
 800bcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	60fa      	str	r2, [r7, #12]
 800bcc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bcc4:	4640      	mov	r0, r8
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	f7f4 faf4 	bl	80002b4 <__aeabi_uldivmod>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcda:	d308      	bcc.n	800bcee <UART_SetConfig+0x2c2>
 800bcdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bce2:	d204      	bcs.n	800bcee <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800bce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcea:	60da      	str	r2, [r3, #12]
 800bcec:	e003      	b.n	800bcf6 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800bcf4:	e070      	b.n	800bdd8 <UART_SetConfig+0x3ac>
 800bcf6:	e06f      	b.n	800bdd8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfa:	69db      	ldr	r3, [r3, #28]
 800bcfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd00:	d13c      	bne.n	800bd7c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd04:	2200      	movs	r2, #0
 800bd06:	603b      	str	r3, [r7, #0]
 800bd08:	607a      	str	r2, [r7, #4]
 800bd0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd0e:	f7fc f9ab 	bl	8008068 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd12:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d05e      	beq.n	800bdd8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1e:	4a39      	ldr	r2, [pc, #228]	; (800be04 <UART_SetConfig+0x3d8>)
 800bd20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd24:	461a      	mov	r2, r3
 800bd26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd28:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd2c:	005a      	lsls	r2, r3, #1
 800bd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	085b      	lsrs	r3, r3, #1
 800bd34:	441a      	add	r2, r3
 800bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd42:	2b0f      	cmp	r3, #15
 800bd44:	d916      	bls.n	800bd74 <UART_SetConfig+0x348>
 800bd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd4c:	d212      	bcs.n	800bd74 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	f023 030f 	bic.w	r3, r3, #15
 800bd56:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd5a:	085b      	lsrs	r3, r3, #1
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	f003 0307 	and.w	r3, r3, #7
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bd66:	4313      	orrs	r3, r2
 800bd68:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800bd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd70:	60da      	str	r2, [r3, #12]
 800bd72:	e031      	b.n	800bdd8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bd7a:	e02d      	b.n	800bdd8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd7e:	2200      	movs	r2, #0
 800bd80:	469a      	mov	sl, r3
 800bd82:	4693      	mov	fp, r2
 800bd84:	4650      	mov	r0, sl
 800bd86:	4659      	mov	r1, fp
 800bd88:	f7fc f96e 	bl	8008068 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd8c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800bd8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d021      	beq.n	800bdd8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd98:	4a1a      	ldr	r2, [pc, #104]	; (800be04 <UART_SetConfig+0x3d8>)
 800bd9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bda2:	fbb3 f2f2 	udiv	r2, r3, r2
 800bda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	085b      	lsrs	r3, r3, #1
 800bdac:	441a      	add	r2, r3
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdba:	2b0f      	cmp	r3, #15
 800bdbc:	d909      	bls.n	800bdd2 <UART_SetConfig+0x3a6>
 800bdbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc4:	d205      	bcs.n	800bdd2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	60da      	str	r2, [r3, #12]
 800bdd0:	e002      	b.n	800bdd8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdda:	2201      	movs	r2, #1
 800bddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde2:	2201      	movs	r2, #1
 800bde4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdea:	2200      	movs	r2, #0
 800bdec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bdf4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3750      	adds	r7, #80	; 0x50
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be02:	bf00      	nop
 800be04:	0800f820 	.word	0x0800f820

0800be08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be14:	f003 0308 	and.w	r3, r3, #8
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00a      	beq.n	800be32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00a      	beq.n	800be54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	430a      	orrs	r2, r1
 800be52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be58:	f003 0302 	and.w	r3, r3, #2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00a      	beq.n	800be76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	430a      	orrs	r2, r1
 800be74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7a:	f003 0304 	and.w	r3, r3, #4
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00a      	beq.n	800be98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	430a      	orrs	r2, r1
 800be96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9c:	f003 0310 	and.w	r3, r3, #16
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00a      	beq.n	800beba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	430a      	orrs	r2, r1
 800beb8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bebe:	f003 0320 	and.w	r3, r3, #32
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00a      	beq.n	800bedc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	430a      	orrs	r2, r1
 800beda:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01a      	beq.n	800bf1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf06:	d10a      	bne.n	800bf1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00a      	beq.n	800bf40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	430a      	orrs	r2, r1
 800bf3e:	605a      	str	r2, [r3, #4]
  }
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b098      	sub	sp, #96	; 0x60
 800bf50:	af02      	add	r7, sp, #8
 800bf52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf5c:	f7f6 ff10 	bl	8002d80 <HAL_GetTick>
 800bf60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 0308 	and.w	r3, r3, #8
 800bf6c:	2b08      	cmp	r3, #8
 800bf6e:	d12f      	bne.n	800bfd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f88e 	bl	800c0a0 <UART_WaitOnFlagUntilTimeout>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d022      	beq.n	800bfd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf92:	e853 3f00 	ldrex	r3, [r3]
 800bf96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf9e:	653b      	str	r3, [r7, #80]	; 0x50
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfa8:	647b      	str	r3, [r7, #68]	; 0x44
 800bfaa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfb0:	e841 2300 	strex	r3, r2, [r1]
 800bfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e6      	bne.n	800bf8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e063      	b.n	800c098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 0304 	and.w	r3, r3, #4
 800bfda:	2b04      	cmp	r3, #4
 800bfdc:	d149      	bne.n	800c072 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f857 	bl	800c0a0 <UART_WaitOnFlagUntilTimeout>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d03c      	beq.n	800c072 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c000:	e853 3f00 	ldrex	r3, [r3]
 800c004:	623b      	str	r3, [r7, #32]
   return(result);
 800c006:	6a3b      	ldr	r3, [r7, #32]
 800c008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c00c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	461a      	mov	r2, r3
 800c014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c016:	633b      	str	r3, [r7, #48]	; 0x30
 800c018:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c01e:	e841 2300 	strex	r3, r2, [r1]
 800c022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1e6      	bne.n	800bff8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3308      	adds	r3, #8
 800c030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	e853 3f00 	ldrex	r3, [r3]
 800c038:	60fb      	str	r3, [r7, #12]
   return(result);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f023 0301 	bic.w	r3, r3, #1
 800c040:	64bb      	str	r3, [r7, #72]	; 0x48
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3308      	adds	r3, #8
 800c048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c04a:	61fa      	str	r2, [r7, #28]
 800c04c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04e:	69b9      	ldr	r1, [r7, #24]
 800c050:	69fa      	ldr	r2, [r7, #28]
 800c052:	e841 2300 	strex	r3, r2, [r1]
 800c056:	617b      	str	r3, [r7, #20]
   return(result);
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1e5      	bne.n	800c02a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2220      	movs	r2, #32
 800c062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	e012      	b.n	800c098 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2220      	movs	r2, #32
 800c076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2220      	movs	r2, #32
 800c07e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3758      	adds	r7, #88	; 0x58
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	603b      	str	r3, [r7, #0]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0b0:	e049      	b.n	800c146 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b8:	d045      	beq.n	800c146 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0ba:	f7f6 fe61 	bl	8002d80 <HAL_GetTick>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	69ba      	ldr	r2, [r7, #24]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d302      	bcc.n	800c0d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e048      	b.n	800c166 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f003 0304 	and.w	r3, r3, #4
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d031      	beq.n	800c146 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	69db      	ldr	r3, [r3, #28]
 800c0e8:	f003 0308 	and.w	r3, r3, #8
 800c0ec:	2b08      	cmp	r3, #8
 800c0ee:	d110      	bne.n	800c112 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2208      	movs	r2, #8
 800c0f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f000 f95b 	bl	800c3b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2208      	movs	r2, #8
 800c102:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e029      	b.n	800c166 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	69db      	ldr	r3, [r3, #28]
 800c118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c11c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c120:	d111      	bne.n	800c146 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c12a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f000 f941 	bl	800c3b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2220      	movs	r2, #32
 800c136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c142:	2303      	movs	r3, #3
 800c144:	e00f      	b.n	800c166 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	69da      	ldr	r2, [r3, #28]
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	4013      	ands	r3, r2
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	429a      	cmp	r2, r3
 800c154:	bf0c      	ite	eq
 800c156:	2301      	moveq	r3, #1
 800c158:	2300      	movne	r3, #0
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	461a      	mov	r2, r3
 800c15e:	79fb      	ldrb	r3, [r7, #7]
 800c160:	429a      	cmp	r2, r3
 800c162:	d0a6      	beq.n	800c0b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c164:	2300      	movs	r3, #0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
	...

0800c170 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c170:	b480      	push	{r7}
 800c172:	b0a3      	sub	sp, #140	; 0x8c
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	88fa      	ldrh	r2, [r7, #6]
 800c188:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	88fa      	ldrh	r2, [r7, #6]
 800c190:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a2:	d10e      	bne.n	800c1c2 <UART_Start_Receive_IT+0x52>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d105      	bne.n	800c1b8 <UART_Start_Receive_IT+0x48>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c1b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1b6:	e02d      	b.n	800c214 <UART_Start_Receive_IT+0xa4>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	22ff      	movs	r2, #255	; 0xff
 800c1bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1c0:	e028      	b.n	800c214 <UART_Start_Receive_IT+0xa4>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10d      	bne.n	800c1e6 <UART_Start_Receive_IT+0x76>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d104      	bne.n	800c1dc <UART_Start_Receive_IT+0x6c>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	22ff      	movs	r2, #255	; 0xff
 800c1d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1da:	e01b      	b.n	800c214 <UART_Start_Receive_IT+0xa4>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	227f      	movs	r2, #127	; 0x7f
 800c1e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1e4:	e016      	b.n	800c214 <UART_Start_Receive_IT+0xa4>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1ee:	d10d      	bne.n	800c20c <UART_Start_Receive_IT+0x9c>
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d104      	bne.n	800c202 <UART_Start_Receive_IT+0x92>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	227f      	movs	r2, #127	; 0x7f
 800c1fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c200:	e008      	b.n	800c214 <UART_Start_Receive_IT+0xa4>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	223f      	movs	r2, #63	; 0x3f
 800c206:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c20a:	e003      	b.n	800c214 <UART_Start_Receive_IT+0xa4>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2222      	movs	r2, #34	; 0x22
 800c220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3308      	adds	r3, #8
 800c22a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c22e:	e853 3f00 	ldrex	r3, [r3]
 800c232:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c236:	f043 0301 	orr.w	r3, r3, #1
 800c23a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3308      	adds	r3, #8
 800c244:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c248:	673a      	str	r2, [r7, #112]	; 0x70
 800c24a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c24e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c250:	e841 2300 	strex	r3, r2, [r1]
 800c254:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1e3      	bne.n	800c224 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c264:	d14f      	bne.n	800c306 <UART_Start_Receive_IT+0x196>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c26c:	88fa      	ldrh	r2, [r7, #6]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d349      	bcc.n	800c306 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c27a:	d107      	bne.n	800c28c <UART_Start_Receive_IT+0x11c>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d103      	bne.n	800c28c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	4a47      	ldr	r2, [pc, #284]	; (800c3a4 <UART_Start_Receive_IT+0x234>)
 800c288:	675a      	str	r2, [r3, #116]	; 0x74
 800c28a:	e002      	b.n	800c292 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4a46      	ldr	r2, [pc, #280]	; (800c3a8 <UART_Start_Receive_IT+0x238>)
 800c290:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d01a      	beq.n	800c2d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2a2:	e853 3f00 	ldrex	r3, [r3]
 800c2a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c2bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2be:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2c4:	e841 2300 	strex	r3, r2, [r1]
 800c2c8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c2ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1e4      	bne.n	800c29a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2da:	e853 3f00 	ldrex	r3, [r3]
 800c2de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c2f0:	64ba      	str	r2, [r7, #72]	; 0x48
 800c2f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2f8:	e841 2300 	strex	r3, r2, [r1]
 800c2fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e5      	bne.n	800c2d0 <UART_Start_Receive_IT+0x160>
 800c304:	e046      	b.n	800c394 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c30e:	d107      	bne.n	800c320 <UART_Start_Receive_IT+0x1b0>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d103      	bne.n	800c320 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4a24      	ldr	r2, [pc, #144]	; (800c3ac <UART_Start_Receive_IT+0x23c>)
 800c31c:	675a      	str	r2, [r3, #116]	; 0x74
 800c31e:	e002      	b.n	800c326 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4a23      	ldr	r2, [pc, #140]	; (800c3b0 <UART_Start_Receive_IT+0x240>)
 800c324:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d019      	beq.n	800c362 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	e853 3f00 	ldrex	r3, [r3]
 800c33a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c342:	677b      	str	r3, [r7, #116]	; 0x74
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	461a      	mov	r2, r3
 800c34a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c34c:	637b      	str	r3, [r7, #52]	; 0x34
 800c34e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c354:	e841 2300 	strex	r3, r2, [r1]
 800c358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e6      	bne.n	800c32e <UART_Start_Receive_IT+0x1be>
 800c360:	e018      	b.n	800c394 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	e853 3f00 	ldrex	r3, [r3]
 800c36e:	613b      	str	r3, [r7, #16]
   return(result);
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	f043 0320 	orr.w	r3, r3, #32
 800c376:	67bb      	str	r3, [r7, #120]	; 0x78
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	461a      	mov	r2, r3
 800c37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c380:	623b      	str	r3, [r7, #32]
 800c382:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	69f9      	ldr	r1, [r7, #28]
 800c386:	6a3a      	ldr	r2, [r7, #32]
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e6      	bne.n	800c362 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	378c      	adds	r7, #140	; 0x8c
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	0800cbfd 	.word	0x0800cbfd
 800c3a8:	0800c88d 	.word	0x0800c88d
 800c3ac:	0800c6c9 	.word	0x0800c6c9
 800c3b0:	0800c505 	.word	0x0800c505

0800c3b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b095      	sub	sp, #84	; 0x54
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c4:	e853 3f00 	ldrex	r3, [r3]
 800c3c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3da:	643b      	str	r3, [r7, #64]	; 0x40
 800c3dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3e2:	e841 2300 	strex	r3, r2, [r1]
 800c3e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1e6      	bne.n	800c3bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3308      	adds	r3, #8
 800c3f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f6:	6a3b      	ldr	r3, [r7, #32]
 800c3f8:	e853 3f00 	ldrex	r3, [r3]
 800c3fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c404:	f023 0301 	bic.w	r3, r3, #1
 800c408:	64bb      	str	r3, [r7, #72]	; 0x48
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3308      	adds	r3, #8
 800c410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c412:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c41a:	e841 2300 	strex	r3, r2, [r1]
 800c41e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e3      	bne.n	800c3ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d118      	bne.n	800c460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	e853 3f00 	ldrex	r3, [r3]
 800c43a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f023 0310 	bic.w	r3, r3, #16
 800c442:	647b      	str	r3, [r7, #68]	; 0x44
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	461a      	mov	r2, r3
 800c44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c44c:	61bb      	str	r3, [r7, #24]
 800c44e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c450:	6979      	ldr	r1, [r7, #20]
 800c452:	69ba      	ldr	r2, [r7, #24]
 800c454:	e841 2300 	strex	r3, r2, [r1]
 800c458:	613b      	str	r3, [r7, #16]
   return(result);
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1e6      	bne.n	800c42e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2220      	movs	r2, #32
 800c464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c474:	bf00      	nop
 800c476:	3754      	adds	r7, #84	; 0x54
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c48c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2200      	movs	r2, #0
 800c492:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f7ff faae 	bl	800ba00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4a4:	bf00      	nop
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b088      	sub	sp, #32
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	e853 3f00 	ldrex	r3, [r3]
 800c4c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4c8:	61fb      	str	r3, [r7, #28]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	61bb      	str	r3, [r7, #24]
 800c4d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d6:	6979      	ldr	r1, [r7, #20]
 800c4d8:	69ba      	ldr	r2, [r7, #24]
 800c4da:	e841 2300 	strex	r3, r2, [r1]
 800c4de:	613b      	str	r3, [r7, #16]
   return(result);
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1e6      	bne.n	800c4b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7ff fa79 	bl	800b9ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4fa:	bf00      	nop
 800c4fc:	3720      	adds	r7, #32
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
	...

0800c504 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b09c      	sub	sp, #112	; 0x70
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c512:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c51c:	2b22      	cmp	r3, #34	; 0x22
 800c51e:	f040 80c3 	bne.w	800c6a8 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c528:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c52c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c530:	b2d9      	uxtb	r1, r3
 800c532:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c536:	b2da      	uxtb	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53c:	400a      	ands	r2, r1
 800c53e:	b2d2      	uxtb	r2, r2
 800c540:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c552:	b29b      	uxth	r3, r3
 800c554:	3b01      	subs	r3, #1
 800c556:	b29a      	uxth	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c564:	b29b      	uxth	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	f040 80a6 	bne.w	800c6b8 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c57c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c580:	66bb      	str	r3, [r7, #104]	; 0x68
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c58a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c58c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c592:	e841 2300 	strex	r3, r2, [r1]
 800c596:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1e6      	bne.n	800c56c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a8:	e853 3f00 	ldrex	r3, [r3]
 800c5ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b0:	f023 0301 	bic.w	r3, r3, #1
 800c5b4:	667b      	str	r3, [r7, #100]	; 0x64
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c5be:	647a      	str	r2, [r7, #68]	; 0x44
 800c5c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5c6:	e841 2300 	strex	r3, r2, [r1]
 800c5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1e5      	bne.n	800c59e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a35      	ldr	r2, [pc, #212]	; (800c6c0 <UART_RxISR_8BIT+0x1bc>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d024      	beq.n	800c63a <UART_RxISR_8BIT+0x136>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a33      	ldr	r2, [pc, #204]	; (800c6c4 <UART_RxISR_8BIT+0x1c0>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d01f      	beq.n	800c63a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d018      	beq.n	800c63a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c610:	e853 3f00 	ldrex	r3, [r3]
 800c614:	623b      	str	r3, [r7, #32]
   return(result);
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c61c:	663b      	str	r3, [r7, #96]	; 0x60
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c626:	633b      	str	r3, [r7, #48]	; 0x30
 800c628:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62e:	e841 2300 	strex	r3, r2, [r1]
 800c632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1e6      	bne.n	800c608 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d12e      	bne.n	800c6a0 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	e853 3f00 	ldrex	r3, [r3]
 800c654:	60fb      	str	r3, [r7, #12]
   return(result);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f023 0310 	bic.w	r3, r3, #16
 800c65c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	461a      	mov	r2, r3
 800c664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c666:	61fb      	str	r3, [r7, #28]
 800c668:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66a:	69b9      	ldr	r1, [r7, #24]
 800c66c:	69fa      	ldr	r2, [r7, #28]
 800c66e:	e841 2300 	strex	r3, r2, [r1]
 800c672:	617b      	str	r3, [r7, #20]
   return(result);
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1e6      	bne.n	800c648 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	69db      	ldr	r3, [r3, #28]
 800c680:	f003 0310 	and.w	r3, r3, #16
 800c684:	2b10      	cmp	r3, #16
 800c686:	d103      	bne.n	800c690 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2210      	movs	r2, #16
 800c68e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff f9bb 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c69e:	e00b      	b.n	800c6b8 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7f6 fa37 	bl	8002b14 <HAL_UART_RxCpltCallback>
}
 800c6a6:	e007      	b.n	800c6b8 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	699a      	ldr	r2, [r3, #24]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f042 0208 	orr.w	r2, r2, #8
 800c6b6:	619a      	str	r2, [r3, #24]
}
 800c6b8:	bf00      	nop
 800c6ba:	3770      	adds	r7, #112	; 0x70
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	44002400 	.word	0x44002400
 800c6c4:	54002400 	.word	0x54002400

0800c6c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b09c      	sub	sp, #112	; 0x70
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6e0:	2b22      	cmp	r3, #34	; 0x22
 800c6e2:	f040 80c3 	bne.w	800c86c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6f4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c6f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c6fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c6fe:	4013      	ands	r3, r2
 800c700:	b29a      	uxth	r2, r3
 800c702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c704:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c70a:	1c9a      	adds	r2, r3, #2
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c716:	b29b      	uxth	r3, r3
 800c718:	3b01      	subs	r3, #1
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c728:	b29b      	uxth	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f040 80a6 	bne.w	800c87c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c738:	e853 3f00 	ldrex	r3, [r3]
 800c73c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c73e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c744:	667b      	str	r3, [r7, #100]	; 0x64
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	461a      	mov	r2, r3
 800c74c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c74e:	657b      	str	r3, [r7, #84]	; 0x54
 800c750:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c756:	e841 2300 	strex	r3, r2, [r1]
 800c75a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1e6      	bne.n	800c730 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	3308      	adds	r3, #8
 800c768:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76c:	e853 3f00 	ldrex	r3, [r3]
 800c770:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c774:	f023 0301 	bic.w	r3, r3, #1
 800c778:	663b      	str	r3, [r7, #96]	; 0x60
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3308      	adds	r3, #8
 800c780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c782:	643a      	str	r2, [r7, #64]	; 0x40
 800c784:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c786:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c78a:	e841 2300 	strex	r3, r2, [r1]
 800c78e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1e5      	bne.n	800c762 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2220      	movs	r2, #32
 800c79a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a35      	ldr	r2, [pc, #212]	; (800c884 <UART_RxISR_16BIT+0x1bc>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d024      	beq.n	800c7fe <UART_RxISR_16BIT+0x136>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a33      	ldr	r2, [pc, #204]	; (800c888 <UART_RxISR_16BIT+0x1c0>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d01f      	beq.n	800c7fe <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d018      	beq.n	800c7fe <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d2:	6a3b      	ldr	r3, [r7, #32]
 800c7d4:	e853 3f00 	ldrex	r3, [r3]
 800c7d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c7e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7ec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7f2:	e841 2300 	strex	r3, r2, [r1]
 800c7f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1e6      	bne.n	800c7cc <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c802:	2b01      	cmp	r3, #1
 800c804:	d12e      	bne.n	800c864 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	e853 3f00 	ldrex	r3, [r3]
 800c818:	60bb      	str	r3, [r7, #8]
   return(result);
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f023 0310 	bic.w	r3, r3, #16
 800c820:	65bb      	str	r3, [r7, #88]	; 0x58
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c82a:	61bb      	str	r3, [r7, #24]
 800c82c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82e:	6979      	ldr	r1, [r7, #20]
 800c830:	69ba      	ldr	r2, [r7, #24]
 800c832:	e841 2300 	strex	r3, r2, [r1]
 800c836:	613b      	str	r3, [r7, #16]
   return(result);
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1e6      	bne.n	800c80c <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	69db      	ldr	r3, [r3, #28]
 800c844:	f003 0310 	and.w	r3, r3, #16
 800c848:	2b10      	cmp	r3, #16
 800c84a:	d103      	bne.n	800c854 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2210      	movs	r2, #16
 800c852:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c85a:	4619      	mov	r1, r3
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7ff f8d9 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c862:	e00b      	b.n	800c87c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f7f6 f955 	bl	8002b14 <HAL_UART_RxCpltCallback>
}
 800c86a:	e007      	b.n	800c87c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	699a      	ldr	r2, [r3, #24]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f042 0208 	orr.w	r2, r2, #8
 800c87a:	619a      	str	r2, [r3, #24]
}
 800c87c:	bf00      	nop
 800c87e:	3770      	adds	r7, #112	; 0x70
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	44002400 	.word	0x44002400
 800c888:	54002400 	.word	0x54002400

0800c88c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b0ac      	sub	sp, #176	; 0xb0
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c89a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8c2:	2b22      	cmp	r3, #34	; 0x22
 800c8c4:	f040 8187 	bne.w	800cbd6 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8ce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8d2:	e12a      	b.n	800cb2a <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8da:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c8de:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c8e2:	b2d9      	uxtb	r1, r3
 800c8e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ee:	400a      	ands	r2, r1
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8f8:	1c5a      	adds	r2, r3, #1
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c904:	b29b      	uxth	r3, r3
 800c906:	3b01      	subs	r3, #1
 800c908:	b29a      	uxth	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c91a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c91e:	f003 0307 	and.w	r3, r3, #7
 800c922:	2b00      	cmp	r3, #0
 800c924:	d053      	beq.n	800c9ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c92a:	f003 0301 	and.w	r3, r3, #1
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d011      	beq.n	800c956 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00b      	beq.n	800c956 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2201      	movs	r2, #1
 800c944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c94c:	f043 0201 	orr.w	r2, r3, #1
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c95a:	f003 0302 	and.w	r3, r3, #2
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d011      	beq.n	800c986 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c966:	f003 0301 	and.w	r3, r3, #1
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00b      	beq.n	800c986 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2202      	movs	r2, #2
 800c974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c97c:	f043 0204 	orr.w	r2, r3, #4
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c98a:	f003 0304 	and.w	r3, r3, #4
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d011      	beq.n	800c9b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c996:	f003 0301 	and.w	r3, r3, #1
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00b      	beq.n	800c9b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2204      	movs	r2, #4
 800c9a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9ac:	f043 0202 	orr.w	r2, r3, #2
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d006      	beq.n	800c9ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff f81d 	bl	800ba00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f040 80a7 	bne.w	800cb2a <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9e4:	e853 3f00 	ldrex	r3, [r3]
 800c9e8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c9ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c9fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca00:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ca04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ca06:	e841 2300 	strex	r3, r2, [r1]
 800ca0a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800ca0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1e4      	bne.n	800c9dc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	3308      	adds	r3, #8
 800ca18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca1c:	e853 3f00 	ldrex	r3, [r3]
 800ca20:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ca22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca28:	f023 0301 	bic.w	r3, r3, #1
 800ca2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	3308      	adds	r3, #8
 800ca36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca3a:	66ba      	str	r2, [r7, #104]	; 0x68
 800ca3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ca40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca42:	e841 2300 	strex	r3, r2, [r1]
 800ca46:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ca48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1e1      	bne.n	800ca12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2220      	movs	r2, #32
 800ca52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a62      	ldr	r2, [pc, #392]	; (800cbf0 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d026      	beq.n	800caba <UART_RxISR_8BIT_FIFOEN+0x22e>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a60      	ldr	r2, [pc, #384]	; (800cbf4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d021      	beq.n	800caba <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d01a      	beq.n	800caba <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca8c:	e853 3f00 	ldrex	r3, [r3]
 800ca90:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ca92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	461a      	mov	r2, r3
 800caa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800caa6:	657b      	str	r3, [r7, #84]	; 0x54
 800caa8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800caac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800caae:	e841 2300 	strex	r3, r2, [r1]
 800cab2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1e4      	bne.n	800ca84 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d130      	bne.n	800cb24 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad0:	e853 3f00 	ldrex	r3, [r3]
 800cad4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad8:	f023 0310 	bic.w	r3, r3, #16
 800cadc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	461a      	mov	r2, r3
 800cae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800caea:	643b      	str	r3, [r7, #64]	; 0x40
 800caec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800caf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800caf2:	e841 2300 	strex	r3, r2, [r1]
 800caf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1e4      	bne.n	800cac8 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	f003 0310 	and.w	r3, r3, #16
 800cb08:	2b10      	cmp	r3, #16
 800cb0a:	d103      	bne.n	800cb14 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2210      	movs	r2, #16
 800cb12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7fe ff79 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
 800cb22:	e002      	b.n	800cb2a <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7f5 fff5 	bl	8002b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cb2a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d006      	beq.n	800cb40 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800cb32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb36:	f003 0320 	and.w	r3, r3, #32
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f47f aeca 	bne.w	800c8d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d049      	beq.n	800cbe6 <UART_RxISR_8BIT_FIFOEN+0x35a>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb58:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d242      	bcs.n	800cbe6 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	3308      	adds	r3, #8
 800cb66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb68:	6a3b      	ldr	r3, [r7, #32]
 800cb6a:	e853 3f00 	ldrex	r3, [r3]
 800cb6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	3308      	adds	r3, #8
 800cb80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cb84:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb8c:	e841 2300 	strex	r3, r2, [r1]
 800cb90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e3      	bne.n	800cb60 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a17      	ldr	r2, [pc, #92]	; (800cbf8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800cb9c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	e853 3f00 	ldrex	r3, [r3]
 800cbaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	f043 0320 	orr.w	r3, r3, #32
 800cbb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	461a      	mov	r2, r3
 800cbbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cbc0:	61bb      	str	r3, [r7, #24]
 800cbc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc4:	6979      	ldr	r1, [r7, #20]
 800cbc6:	69ba      	ldr	r2, [r7, #24]
 800cbc8:	e841 2300 	strex	r3, r2, [r1]
 800cbcc:	613b      	str	r3, [r7, #16]
   return(result);
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1e4      	bne.n	800cb9e <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbd4:	e007      	b.n	800cbe6 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	699a      	ldr	r2, [r3, #24]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f042 0208 	orr.w	r2, r2, #8
 800cbe4:	619a      	str	r2, [r3, #24]
}
 800cbe6:	bf00      	nop
 800cbe8:	37b0      	adds	r7, #176	; 0xb0
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	44002400 	.word	0x44002400
 800cbf4:	54002400 	.word	0x54002400
 800cbf8:	0800c505 	.word	0x0800c505

0800cbfc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b0ae      	sub	sp, #184	; 0xb8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc0a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	69db      	ldr	r3, [r3, #28]
 800cc14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc32:	2b22      	cmp	r3, #34	; 0x22
 800cc34:	f040 818b 	bne.w	800cf4e <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc3e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cc42:	e12e      	b.n	800cea2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cc56:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800cc5a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800cc5e:	4013      	ands	r3, r2
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc6c:	1c9a      	adds	r2, r3, #2
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	69db      	ldr	r3, [r3, #28]
 800cc8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cc8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc92:	f003 0307 	and.w	r3, r3, #7
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d053      	beq.n	800cd42 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d011      	beq.n	800ccca <UART_RxISR_16BIT_FIFOEN+0xce>
 800cca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ccaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00b      	beq.n	800ccca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc0:	f043 0201 	orr.w	r2, r3, #1
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccce:	f003 0302 	and.w	r3, r3, #2
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d011      	beq.n	800ccfa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ccd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ccda:	f003 0301 	and.w	r3, r3, #1
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00b      	beq.n	800ccfa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2202      	movs	r2, #2
 800cce8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccf0:	f043 0204 	orr.w	r2, r3, #4
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccfe:	f003 0304 	and.w	r3, r3, #4
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d011      	beq.n	800cd2a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cd06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00b      	beq.n	800cd2a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2204      	movs	r2, #4
 800cd18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd20:	f043 0202 	orr.w	r2, r3, #2
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d006      	beq.n	800cd42 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f7fe fe63 	bl	800ba00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f040 80a9 	bne.w	800cea2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd58:	e853 3f00 	ldrex	r3, [r3]
 800cd5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cd5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd76:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd7e:	e841 2300 	strex	r3, r2, [r1]
 800cd82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1e2      	bne.n	800cd50 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3308      	adds	r3, #8
 800cd90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd94:	e853 3f00 	ldrex	r3, [r3]
 800cd98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cd9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cda0:	f023 0301 	bic.w	r3, r3, #1
 800cda4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	3308      	adds	r3, #8
 800cdae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cdb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cdb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cdb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cdba:	e841 2300 	strex	r3, r2, [r1]
 800cdbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cdc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1e1      	bne.n	800cd8a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2220      	movs	r2, #32
 800cdca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a62      	ldr	r2, [pc, #392]	; (800cf68 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d026      	beq.n	800ce32 <UART_RxISR_16BIT_FIFOEN+0x236>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a60      	ldr	r2, [pc, #384]	; (800cf6c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d021      	beq.n	800ce32 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d01a      	beq.n	800ce32 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce04:	e853 3f00 	ldrex	r3, [r3]
 800ce08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce1e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce26:	e841 2300 	strex	r3, r2, [r1]
 800ce2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1e4      	bne.n	800cdfc <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d130      	bne.n	800ce9c <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce48:	e853 3f00 	ldrex	r3, [r3]
 800ce4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce50:	f023 0310 	bic.w	r3, r3, #16
 800ce54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce62:	647b      	str	r3, [r7, #68]	; 0x44
 800ce64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce6a:	e841 2300 	strex	r3, r2, [r1]
 800ce6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1e4      	bne.n	800ce40 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	69db      	ldr	r3, [r3, #28]
 800ce7c:	f003 0310 	and.w	r3, r3, #16
 800ce80:	2b10      	cmp	r3, #16
 800ce82:	d103      	bne.n	800ce8c <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2210      	movs	r2, #16
 800ce8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce92:	4619      	mov	r1, r3
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7fe fdbd 	bl	800ba14 <HAL_UARTEx_RxEventCallback>
 800ce9a:	e002      	b.n	800cea2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7f5 fe39 	bl	8002b14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cea2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d006      	beq.n	800ceb8 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800ceaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ceae:	f003 0320 	and.w	r3, r3, #32
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f47f aec6 	bne.w	800cc44 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cebe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cec2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d049      	beq.n	800cf5e <UART_RxISR_16BIT_FIFOEN+0x362>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ced0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d242      	bcs.n	800cf5e <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	3308      	adds	r3, #8
 800cede:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	e853 3f00 	ldrex	r3, [r3]
 800cee6:	623b      	str	r3, [r7, #32]
   return(result);
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ceee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3308      	adds	r3, #8
 800cef8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cefc:	633a      	str	r2, [r7, #48]	; 0x30
 800cefe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf04:	e841 2300 	strex	r3, r2, [r1]
 800cf08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1e3      	bne.n	800ced8 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a17      	ldr	r2, [pc, #92]	; (800cf70 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800cf14:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	e853 3f00 	ldrex	r3, [r3]
 800cf22:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f043 0320 	orr.w	r3, r3, #32
 800cf2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	461a      	mov	r2, r3
 800cf34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf38:	61fb      	str	r3, [r7, #28]
 800cf3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf3c:	69b9      	ldr	r1, [r7, #24]
 800cf3e:	69fa      	ldr	r2, [r7, #28]
 800cf40:	e841 2300 	strex	r3, r2, [r1]
 800cf44:	617b      	str	r3, [r7, #20]
   return(result);
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1e4      	bne.n	800cf16 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf4c:	e007      	b.n	800cf5e <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	699a      	ldr	r2, [r3, #24]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f042 0208 	orr.w	r2, r2, #8
 800cf5c:	619a      	str	r2, [r3, #24]
}
 800cf5e:	bf00      	nop
 800cf60:	37b8      	adds	r7, #184	; 0xb8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	44002400 	.word	0x44002400
 800cf6c:	54002400 	.word	0x54002400
 800cf70:	0800c6c9 	.word	0x0800c6c9

0800cf74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b085      	sub	sp, #20
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d101      	bne.n	800cfc6 <HAL_UARTEx_DisableFifoMode+0x16>
 800cfc2:	2302      	movs	r3, #2
 800cfc4:	e027      	b.n	800d016 <HAL_UARTEx_DisableFifoMode+0x66>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2224      	movs	r2, #36	; 0x24
 800cfd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f022 0201 	bic.w	r2, r2, #1
 800cfec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cff4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2220      	movs	r2, #32
 800d008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3714      	adds	r7, #20
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b084      	sub	sp, #16
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d032:	2b01      	cmp	r3, #1
 800d034:	d101      	bne.n	800d03a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d036:	2302      	movs	r3, #2
 800d038:	e02d      	b.n	800d096 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2224      	movs	r2, #36	; 0x24
 800d046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f022 0201 	bic.w	r2, r2, #1
 800d060:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	683a      	ldr	r2, [r7, #0]
 800d072:	430a      	orrs	r2, r1
 800d074:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f850 	bl	800d11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2220      	movs	r2, #32
 800d088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d101      	bne.n	800d0b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	e02d      	b.n	800d112 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2224      	movs	r2, #36	; 0x24
 800d0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f022 0201 	bic.w	r2, r2, #1
 800d0dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f812 	bl	800d11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2220      	movs	r2, #32
 800d104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
	...

0800d11c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d108      	bne.n	800d13e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d13c:	e031      	b.n	800d1a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d13e:	2308      	movs	r3, #8
 800d140:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d142:	2308      	movs	r3, #8
 800d144:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	0e5b      	lsrs	r3, r3, #25
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	f003 0307 	and.w	r3, r3, #7
 800d154:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	0f5b      	lsrs	r3, r3, #29
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	f003 0307 	and.w	r3, r3, #7
 800d164:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	7b3a      	ldrb	r2, [r7, #12]
 800d16a:	4911      	ldr	r1, [pc, #68]	; (800d1b0 <UARTEx_SetNbDataToProcess+0x94>)
 800d16c:	5c8a      	ldrb	r2, [r1, r2]
 800d16e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d172:	7b3a      	ldrb	r2, [r7, #12]
 800d174:	490f      	ldr	r1, [pc, #60]	; (800d1b4 <UARTEx_SetNbDataToProcess+0x98>)
 800d176:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d178:	fb93 f3f2 	sdiv	r3, r3, r2
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	7b7a      	ldrb	r2, [r7, #13]
 800d188:	4909      	ldr	r1, [pc, #36]	; (800d1b0 <UARTEx_SetNbDataToProcess+0x94>)
 800d18a:	5c8a      	ldrb	r2, [r1, r2]
 800d18c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d190:	7b7a      	ldrb	r2, [r7, #13]
 800d192:	4908      	ldr	r1, [pc, #32]	; (800d1b4 <UARTEx_SetNbDataToProcess+0x98>)
 800d194:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d196:	fb93 f3f2 	sdiv	r3, r3, r2
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d1a2:	bf00      	nop
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	0800f838 	.word	0x0800f838
 800d1b4:	0800f840 	.word	0x0800f840

0800d1b8 <qbufferCreateBySize>:

  return ret;
}

BOOL qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
 800d1c4:	603b      	str	r3, [r7, #0]
  BOOL ret = TRUE;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	617b      	str	r3, [r7, #20]

  p_node->in    = 0;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	611a      	str	r2, [r3, #16]

  return ret;
 800d1e8:	697b      	ldr	r3, [r7, #20]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	371c      	adds	r7, #28
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <qbufferWrite>:

BOOL qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800d1f6:	b480      	push	{r7}
 800d1f8:	b08b      	sub	sp, #44	; 0x2c
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	60b9      	str	r1, [r7, #8]
 800d200:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800d202:	2301      	movs	r3, #1
 800d204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800d206:	2300      	movs	r3, #0
 800d208:	623b      	str	r3, [r7, #32]
 800d20a:	e042      	b.n	800d292 <qbufferWrite+0x9c>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3301      	adds	r3, #1
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	6892      	ldr	r2, [r2, #8]
 800d216:	fbb3 f1f2 	udiv	r1, r3, r2
 800d21a:	fb01 f202 	mul.w	r2, r1, r2
 800d21e:	1a9b      	subs	r3, r3, r2
 800d220:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	69ba      	ldr	r2, [r7, #24]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d02c      	beq.n	800d286 <qbufferWrite+0x90>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d024      	beq.n	800d27e <qbufferWrite+0x88>
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d021      	beq.n	800d27e <qbufferWrite+0x88>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	691a      	ldr	r2, [r3, #16]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	68f9      	ldr	r1, [r7, #12]
 800d244:	68c9      	ldr	r1, [r1, #12]
 800d246:	fb01 f303 	mul.w	r3, r1, r3
 800d24a:	4413      	add	r3, r2
 800d24c:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 800d24e:	2300      	movs	r3, #0
 800d250:	61fb      	str	r3, [r7, #28]
 800d252:	e00a      	b.n	800d26a <qbufferWrite+0x74>
        {
          p_buf[i] = p_data[i];
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	68ba      	ldr	r2, [r7, #8]
 800d258:	441a      	add	r2, r3
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	6979      	ldr	r1, [r7, #20]
 800d25e:	440b      	add	r3, r1
 800d260:	7812      	ldrb	r2, [r2, #0]
 800d262:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	3301      	adds	r3, #1
 800d268:	61fb      	str	r3, [r7, #28]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	68da      	ldr	r2, [r3, #12]
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	429a      	cmp	r2, r3
 800d272:	d8ef      	bhi.n	800d254 <qbufferWrite+0x5e>
        }
        p_data += p_node->size;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	4413      	add	r3, r2
 800d27c:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	69ba      	ldr	r2, [r7, #24]
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	e002      	b.n	800d28c <qbufferWrite+0x96>
    }
    else
    {
      ret = FALSE;
 800d286:	2300      	movs	r3, #0
 800d288:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d28a:	e006      	b.n	800d29a <qbufferWrite+0xa4>
  for (int i=0; i<length; i++)
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	3301      	adds	r3, #1
 800d290:	623b      	str	r3, [r7, #32]
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	429a      	cmp	r2, r3
 800d298:	d8b8      	bhi.n	800d20c <qbufferWrite+0x16>
    }
  }

  return ret;
 800d29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	372c      	adds	r7, #44	; 0x2c
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <qbufferRead>:

BOOL qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b089      	sub	sp, #36	; 0x24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	61fb      	str	r3, [r7, #28]


  for (int i=0; i<length; i++)
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61bb      	str	r3, [r7, #24]
 800d2bc:	e041      	b.n	800d342 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d024      	beq.n	800d310 <qbufferRead+0x68>
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d021      	beq.n	800d310 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	691a      	ldr	r2, [r3, #16]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	68f9      	ldr	r1, [r7, #12]
 800d2d6:	68c9      	ldr	r1, [r1, #12]
 800d2d8:	fb01 f303 	mul.w	r3, r1, r3
 800d2dc:	4413      	add	r3, r2
 800d2de:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	617b      	str	r3, [r7, #20]
 800d2e4:	e00a      	b.n	800d2fc <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	693a      	ldr	r2, [r7, #16]
 800d2ea:	441a      	add	r2, r3
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	68b9      	ldr	r1, [r7, #8]
 800d2f0:	440b      	add	r3, r1
 800d2f2:	7812      	ldrb	r2, [r2, #0]
 800d2f4:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	617b      	str	r3, [r7, #20]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	68da      	ldr	r2, [r3, #12]
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	429a      	cmp	r2, r3
 800d304:	d8ef      	bhi.n	800d2e6 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	4413      	add	r3, r2
 800d30e:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	685a      	ldr	r2, [r3, #4]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d00c      	beq.n	800d336 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	3301      	adds	r3, #1
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	6892      	ldr	r2, [r2, #8]
 800d326:	fbb3 f1f2 	udiv	r1, r3, r2
 800d32a:	fb01 f202 	mul.w	r2, r1, r2
 800d32e:	1a9a      	subs	r2, r3, r2
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	605a      	str	r2, [r3, #4]
 800d334:	e002      	b.n	800d33c <qbufferRead+0x94>
    }
    else
    {
      ret = FALSE;
 800d336:	2300      	movs	r3, #0
 800d338:	61fb      	str	r3, [r7, #28]
      break;
 800d33a:	e006      	b.n	800d34a <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	3301      	adds	r3, #1
 800d340:	61bb      	str	r3, [r7, #24]
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	429a      	cmp	r2, r3
 800d348:	d8b9      	bhi.n	800d2be <qbufferRead+0x16>
    }
  }

  return ret;
 800d34a:	69fb      	ldr	r3, [r7, #28]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3724      	adds	r7, #36	; 0x24
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	691a      	ldr	r2, [r3, #16]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	6879      	ldr	r1, [r7, #4]
 800d36a:	68c9      	ldr	r1, [r1, #12]
 800d36c:	fb01 f303 	mul.w	r3, r1, r3
 800d370:	4413      	add	r3, r2
}
 800d372:	4618      	mov	r0, r3
 800d374:	370c      	adds	r7, #12
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr

0800d37e <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800d37e:	b480      	push	{r7}
 800d380:	b085      	sub	sp, #20
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	1ad3      	subs	r3, r2, r3
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	6892      	ldr	r2, [r2, #8]
 800d394:	fbb3 f1f2 	udiv	r1, r3, r2
 800d398:	fb01 f202 	mul.w	r2, r1, r2
 800d39c:	1a9b      	subs	r3, r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]

  return ret;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
	...

0800d3b0 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
	svGetChar = funcGetChar;
 800d3bc:	4a18      	ldr	r2, [pc, #96]	; (800d420 <svCLI_Init+0x70>)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6013      	str	r3, [r2, #0]
	svPutChar = funcPutChar;
 800d3c2:	4a18      	ldr	r2, [pc, #96]	; (800d424 <svCLI_Init+0x74>)
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	6013      	str	r3, [r2, #0]
	svCommit = funcCommit;
 800d3c8:	4a17      	ldr	r2, [pc, #92]	; (800d428 <svCLI_Init+0x78>)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6013      	str	r3, [r2, #0]
	szCLIString[0] = 0;
 800d3ce:	4b17      	ldr	r3, [pc, #92]	; (800d42c <svCLI_Init+0x7c>)
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800d3d4:	4b16      	ldr	r3, [pc, #88]	; (800d430 <svCLI_Init+0x80>)
 800d3d6:	4a17      	ldr	r2, [pc, #92]	; (800d434 <svCLI_Init+0x84>)
 800d3d8:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800d3da:	4b17      	ldr	r3, [pc, #92]	; (800d438 <svCLI_Init+0x88>)
 800d3dc:	4a17      	ldr	r2, [pc, #92]	; (800d43c <svCLI_Init+0x8c>)
 800d3de:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800d3e0:	4b17      	ldr	r3, [pc, #92]	; (800d440 <svCLI_Init+0x90>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00d      	beq.n	800d404 <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800d3e8:	4b16      	ldr	r3, [pc, #88]	; (800d444 <svCLI_Init+0x94>)
 800d3ea:	4a17      	ldr	r2, [pc, #92]	; (800d448 <svCLI_Init+0x98>)
 800d3ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d3f0:	6018      	str	r0, [r3, #0]
 800d3f2:	3304      	adds	r3, #4
 800d3f4:	8019      	strh	r1, [r3, #0]
 800d3f6:	3302      	adds	r3, #2
 800d3f8:	0c0a      	lsrs	r2, r1, #16
 800d3fa:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800d3fc:	4b13      	ldr	r3, [pc, #76]	; (800d44c <svCLI_Init+0x9c>)
 800d3fe:	2206      	movs	r2, #6
 800d400:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800d402:	e007      	b.n	800d414 <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800d404:	4b0f      	ldr	r3, [pc, #60]	; (800d444 <svCLI_Init+0x94>)
 800d406:	4a12      	ldr	r2, [pc, #72]	; (800d450 <svCLI_Init+0xa0>)
 800d408:	ca07      	ldmia	r2, {r0, r1, r2}
 800d40a:	c303      	stmia	r3!, {r0, r1}
 800d40c:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800d40e:	4b0f      	ldr	r3, [pc, #60]	; (800d44c <svCLI_Init+0x9c>)
 800d410:	2209      	movs	r2, #9
 800d412:	601a      	str	r2, [r3, #0]
}
 800d414:	bf00      	nop
 800d416:	3714      	adds	r7, #20
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr
 800d420:	20000e28 	.word	0x20000e28
 800d424:	20000e2c 	.word	0x20000e2c
 800d428:	20000e30 	.word	0x20000e30
 800d42c:	20000c14 	.word	0x20000c14
 800d430:	20000e20 	.word	0x20000e20
 800d434:	0800f2b0 	.word	0x0800f2b0
 800d438:	20000e24 	.word	0x20000e24
 800d43c:	0800f2e0 	.word	0x0800f2e0
 800d440:	20000050 	.word	0x20000050
 800d444:	20000054 	.word	0x20000054
 800d448:	0800f57c 	.word	0x0800f57c
 800d44c:	20000060 	.word	0x20000060
 800d450:	0800f584 	.word	0x0800f584

0800d454 <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800d454:	b40f      	push	{r0, r1, r2, r3}
 800d456:	b580      	push	{r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
static char msg[256];
	va_list ap;
	int len;

	va_start(ap, fmt);
 800d45c:	f107 031c 	add.w	r3, r7, #28
 800d460:	607b      	str	r3, [r7, #4]
	len = vsprintf(msg, fmt, ap);
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	69b9      	ldr	r1, [r7, #24]
 800d466:	480f      	ldr	r0, [pc, #60]	; (800d4a4 <svCLI_Printf+0x50>)
 800d468:	f001 fb10 	bl	800ea8c <vsiprintf>
 800d46c:	60b8      	str	r0, [r7, #8]
	va_end(ap);
	for (int i=0;i<len;i++) {
 800d46e:	2300      	movs	r3, #0
 800d470:	60fb      	str	r3, [r7, #12]
 800d472:	e00a      	b.n	800d48a <svCLI_Printf+0x36>
		svPutChar(msg[i]);
 800d474:	4b0c      	ldr	r3, [pc, #48]	; (800d4a8 <svCLI_Printf+0x54>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	490a      	ldr	r1, [pc, #40]	; (800d4a4 <svCLI_Printf+0x50>)
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	440a      	add	r2, r1
 800d47e:	7812      	ldrb	r2, [r2, #0]
 800d480:	4610      	mov	r0, r2
 800d482:	4798      	blx	r3
	for (int i=0;i<len;i++) {
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3301      	adds	r3, #1
 800d488:	60fb      	str	r3, [r7, #12]
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	429a      	cmp	r2, r3
 800d490:	dbf0      	blt.n	800d474 <svCLI_Printf+0x20>
	}
	return len;
 800d492:	68bb      	ldr	r3, [r7, #8]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d49e:	b004      	add	sp, #16
 800d4a0:	4770      	bx	lr
 800d4a2:	bf00      	nop
 800d4a4:	20000e40 	.word	0x20000e40
 800d4a8:	20000e2c 	.word	0x20000e2c

0800d4ac <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
	if (svPutChar) {
 800d4b2:	4b2d      	ldr	r3, [pc, #180]	; (800d568 <svCLI_ShowHelp+0xbc>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d04a      	beq.n	800d550 <svCLI_ShowHelp+0xa4>
		if (sCLITableBegin != sCLITablEnd) {
 800d4ba:	4b2c      	ldr	r3, [pc, #176]	; (800d56c <svCLI_ShowHelp+0xc0>)
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	4b2c      	ldr	r3, [pc, #176]	; (800d570 <svCLI_ShowHelp+0xc4>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d03e      	beq.n	800d544 <svCLI_ShowHelp+0x98>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	60fb      	str	r3, [r7, #12]
 800d4ca:	e006      	b.n	800d4da <svCLI_ShowHelp+0x2e>
 800d4cc:	4b26      	ldr	r3, [pc, #152]	; (800d568 <svCLI_ShowHelp+0xbc>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	203d      	movs	r0, #61	; 0x3d
 800d4d2:	4798      	blx	r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	60fb      	str	r3, [r7, #12]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2b4f      	cmp	r3, #79	; 0x4f
 800d4de:	d9f5      	bls.n	800d4cc <svCLI_ShowHelp+0x20>
			svCLI_Printf("\r\n");
 800d4e0:	4824      	ldr	r0, [pc, #144]	; (800d574 <svCLI_ShowHelp+0xc8>)
 800d4e2:	f7ff ffb7 	bl	800d454 <svCLI_Printf>
			SVCLI_t* pCLIEntry;
			int nCount = 1;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	607b      	str	r3, [r7, #4]
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800d4ea:	4b20      	ldr	r3, [pc, #128]	; (800d56c <svCLI_ShowHelp+0xc0>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	60bb      	str	r3, [r7, #8]
 800d4f0:	e012      	b.n	800d518 <svCLI_ShowHelp+0x6c>
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800d4f2:	6879      	ldr	r1, [r7, #4]
 800d4f4:	1c4b      	adds	r3, r1, #1
 800d4f6:	607b      	str	r3, [r7, #4]
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <svCLI_ShowHelp+0x5e>
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	e000      	b.n	800d50c <svCLI_ShowHelp+0x60>
 800d50a:	4b1b      	ldr	r3, [pc, #108]	; (800d578 <svCLI_ShowHelp+0xcc>)
 800d50c:	481b      	ldr	r0, [pc, #108]	; (800d57c <svCLI_ShowHelp+0xd0>)
 800d50e:	f7ff ffa1 	bl	800d454 <svCLI_Printf>
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	330c      	adds	r3, #12
 800d516:	60bb      	str	r3, [r7, #8]
 800d518:	4b15      	ldr	r3, [pc, #84]	; (800d570 <svCLI_ShowHelp+0xc4>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d3e7      	bcc.n	800d4f2 <svCLI_ShowHelp+0x46>
			}
			svCLI_Printf(AES_RESET);
 800d522:	4817      	ldr	r0, [pc, #92]	; (800d580 <svCLI_ShowHelp+0xd4>)
 800d524:	f7ff ff96 	bl	800d454 <svCLI_Printf>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800d528:	2300      	movs	r3, #0
 800d52a:	603b      	str	r3, [r7, #0]
 800d52c:	e006      	b.n	800d53c <svCLI_ShowHelp+0x90>
 800d52e:	4b0e      	ldr	r3, [pc, #56]	; (800d568 <svCLI_ShowHelp+0xbc>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	203d      	movs	r0, #61	; 0x3d
 800d534:	4798      	blx	r3
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	3301      	adds	r3, #1
 800d53a:	603b      	str	r3, [r7, #0]
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	2b4f      	cmp	r3, #79	; 0x4f
 800d540:	d9f5      	bls.n	800d52e <svCLI_ShowHelp+0x82>
 800d542:	e002      	b.n	800d54a <svCLI_ShowHelp+0x9e>
		}
		else {	// No CLI Entry
			svCLI_Printf("No CLI Entries !!!");
 800d544:	480f      	ldr	r0, [pc, #60]	; (800d584 <svCLI_ShowHelp+0xd8>)
 800d546:	f7ff ff85 	bl	800d454 <svCLI_Printf>
		}
		svCLI_Printf("\r\n");
 800d54a:	480a      	ldr	r0, [pc, #40]	; (800d574 <svCLI_ShowHelp+0xc8>)
 800d54c:	f7ff ff82 	bl	800d454 <svCLI_Printf>
	}
	if (svCommit) {
 800d550:	4b0d      	ldr	r3, [pc, #52]	; (800d588 <svCLI_ShowHelp+0xdc>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <svCLI_ShowHelp+0xb2>
		svCommit();
 800d558:	4b0b      	ldr	r3, [pc, #44]	; (800d588 <svCLI_ShowHelp+0xdc>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4798      	blx	r3
	}
}
 800d55e:	bf00      	nop
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	20000e2c 	.word	0x20000e2c
 800d56c:	20000e20 	.word	0x20000e20
 800d570:	20000e24 	.word	0x20000e24
 800d574:	0800f590 	.word	0x0800f590
 800d578:	0800f594 	.word	0x0800f594
 800d57c:	0800f598 	.word	0x0800f598
 800d580:	0800f5b8 	.word	0x0800f5b8
 800d584:	0800f5c0 	.word	0x0800f5c0
 800d588:	20000e30 	.word	0x20000e30

0800d58c <svCLI_KeepLoop>:

// FOR CAN SVCLI
BOOL svCLI_KeepLoop(void)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	af00      	add	r7, sp, #0
  if (Uart_Available(_DEF_UART1) == 0)
 800d590:	2000      	movs	r0, #0
 800d592:	f7f5 faa9 	bl	8002ae8 <Uart_Available>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d101      	bne.n	800d5a0 <svCLI_KeepLoop+0x14>
  {
    return TRUE;
 800d59c:	2301      	movs	r3, #1
 800d59e:	e000      	b.n	800d5a2 <svCLI_KeepLoop+0x16>
  }
  else
  {
    return FALSE;
 800d5a0:	2300      	movs	r3, #0
  }
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800d5a6:	b480      	push	{r7}
 800d5a8:	b085      	sub	sp, #20
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
	int nCount = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60fb      	str	r3, [r7, #12]
	if ((szString == NULL) || (*szString == 0))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d003      	beq.n	800d5c0 <_strlenOffspace+0x1a>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d104      	bne.n	800d5ca <_strlenOffspace+0x24>
		return 0;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	e017      	b.n	800d5f4 <_strlenOffspace+0x4e>
	// Strip off first spaces
	while (*szString == ' ') szString++;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	607b      	str	r3, [r7, #4]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	2b20      	cmp	r3, #32
 800d5d0:	d0f8      	beq.n	800d5c4 <_strlenOffspace+0x1e>
	// Count
	while (*szString) {
 800d5d2:	e008      	b.n	800d5e6 <_strlenOffspace+0x40>
		if (*szString++ != ' ') {
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	1c5a      	adds	r2, r3, #1
 800d5d8:	607a      	str	r2, [r7, #4]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	2b20      	cmp	r3, #32
 800d5de:	d007      	beq.n	800d5f0 <_strlenOffspace+0x4a>
			nCount++;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	60fb      	str	r3, [r7, #12]
	while (*szString) {
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1f2      	bne.n	800d5d4 <_strlenOffspace+0x2e>
 800d5ee:	e000      	b.n	800d5f2 <_strlenOffspace+0x4c>
		}
		else
			break;
 800d5f0:	bf00      	nop
	}
	return nCount;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <_toLower>:

static char _toLower(char c)
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	4603      	mov	r3, r0
 800d608:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800d60a:	79fb      	ldrb	r3, [r7, #7]
 800d60c:	2b40      	cmp	r3, #64	; 0x40
 800d60e:	d905      	bls.n	800d61c <_toLower+0x1c>
 800d610:	79fb      	ldrb	r3, [r7, #7]
 800d612:	2b5a      	cmp	r3, #90	; 0x5a
 800d614:	d802      	bhi.n	800d61c <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800d616:	79fb      	ldrb	r3, [r7, #7]
 800d618:	3320      	adds	r3, #32
 800d61a:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800d61c:	79fb      	ldrb	r3, [r7, #7]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	370c      	adds	r7, #12
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr

0800d62a <_isPrintable>:

static int _isPrintable(char c)
{
 800d62a:	b480      	push	{r7}
 800d62c:	b083      	sub	sp, #12
 800d62e:	af00      	add	r7, sp, #0
 800d630:	4603      	mov	r3, r0
 800d632:	71fb      	strb	r3, [r7, #7]
	if ((' ' <= c) && (c <= '~'))
 800d634:	79fb      	ldrb	r3, [r7, #7]
 800d636:	2b1f      	cmp	r3, #31
 800d638:	d904      	bls.n	800d644 <_isPrintable+0x1a>
 800d63a:	79fb      	ldrb	r3, [r7, #7]
 800d63c:	2b7e      	cmp	r3, #126	; 0x7e
 800d63e:	d801      	bhi.n	800d644 <_isPrintable+0x1a>
		return 1;
 800d640:	2301      	movs	r3, #1
 800d642:	e000      	b.n	800d646 <_isPrintable+0x1c>
	return 0;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <_isHex>:

static int _isHex(char c)
{
 800d652:	b480      	push	{r7}
 800d654:	b083      	sub	sp, #12
 800d656:	af00      	add	r7, sp, #0
 800d658:	4603      	mov	r3, r0
 800d65a:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||				\
 800d65c:	79fb      	ldrb	r3, [r7, #7]
 800d65e:	2b2f      	cmp	r3, #47	; 0x2f
 800d660:	d902      	bls.n	800d668 <_isHex+0x16>
 800d662:	79fb      	ldrb	r3, [r7, #7]
 800d664:	2b39      	cmp	r3, #57	; 0x39
 800d666:	d90b      	bls.n	800d680 <_isHex+0x2e>
 800d668:	79fb      	ldrb	r3, [r7, #7]
 800d66a:	2b40      	cmp	r3, #64	; 0x40
 800d66c:	d902      	bls.n	800d674 <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||  	\
 800d66e:	79fb      	ldrb	r3, [r7, #7]
 800d670:	2b46      	cmp	r3, #70	; 0x46
 800d672:	d905      	bls.n	800d680 <_isHex+0x2e>
 800d674:	79fb      	ldrb	r3, [r7, #7]
 800d676:	2b60      	cmp	r3, #96	; 0x60
 800d678:	d904      	bls.n	800d684 <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800d67a:	79fb      	ldrb	r3, [r7, #7]
 800d67c:	2b66      	cmp	r3, #102	; 0x66
 800d67e:	d801      	bhi.n	800d684 <_isHex+0x32>
    return 1;
 800d680:	2301      	movs	r3, #1
 800d682:	e000      	b.n	800d686 <_isHex+0x34>
	return 0;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <_fromHex>:

static int _fromHex(char c) 
{
 800d692:	b480      	push	{r7}
 800d694:	b085      	sub	sp, #20
 800d696:	af00      	add	r7, sp, #0
 800d698:	4603      	mov	r3, r0
 800d69a:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800d6a0:	79fb      	ldrb	r3, [r7, #7]
 800d6a2:	2b2f      	cmp	r3, #47	; 0x2f
 800d6a4:	d906      	bls.n	800d6b4 <_fromHex+0x22>
 800d6a6:	79fb      	ldrb	r3, [r7, #7]
 800d6a8:	2b39      	cmp	r3, #57	; 0x39
 800d6aa:	d803      	bhi.n	800d6b4 <_fromHex+0x22>
    ret = (c - '0');
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	3b30      	subs	r3, #48	; 0x30
 800d6b0:	60fb      	str	r3, [r7, #12]
 800d6b2:	e012      	b.n	800d6da <_fromHex+0x48>
  } 
	else if ((c >= 'a') && (c <= 'f')) {
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	2b60      	cmp	r3, #96	; 0x60
 800d6b8:	d906      	bls.n	800d6c8 <_fromHex+0x36>
 800d6ba:	79fb      	ldrb	r3, [r7, #7]
 800d6bc:	2b66      	cmp	r3, #102	; 0x66
 800d6be:	d803      	bhi.n	800d6c8 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800d6c0:	79fb      	ldrb	r3, [r7, #7]
 800d6c2:	3b57      	subs	r3, #87	; 0x57
 800d6c4:	60fb      	str	r3, [r7, #12]
 800d6c6:	e008      	b.n	800d6da <_fromHex+0x48>
  } 
	else if ((c >= 'A') && (c <= 'F')) {
 800d6c8:	79fb      	ldrb	r3, [r7, #7]
 800d6ca:	2b40      	cmp	r3, #64	; 0x40
 800d6cc:	d905      	bls.n	800d6da <_fromHex+0x48>
 800d6ce:	79fb      	ldrb	r3, [r7, #7]
 800d6d0:	2b46      	cmp	r3, #70	; 0x46
 800d6d2:	d802      	bhi.n	800d6da <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	3b37      	subs	r3, #55	; 0x37
 800d6d8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800d6da:	68fb      	ldr	r3, [r7, #12]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3714      	adds	r7, #20
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d101      	bne.n	800d6fe <_strNoCaseCmp+0x16>
    return 0;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	e026      	b.n	800d74c <_strNoCaseCmp+0x64>
  do {
		if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	60fa      	str	r2, [r7, #12]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	4618      	mov	r0, r3
 800d708:	f7ff ff7a 	bl	800d600 <_toLower>
 800d70c:	4603      	mov	r3, r0
 800d70e:	75fb      	strb	r3, [r7, #23]
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	60ba      	str	r2, [r7, #8]
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	4618      	mov	r0, r3
 800d71a:	f7ff ff71 	bl	800d600 <_toLower>
 800d71e:	4603      	mov	r3, r0
 800d720:	75bb      	strb	r3, [r7, #22]
 800d722:	7dfa      	ldrb	r2, [r7, #23]
 800d724:	7dbb      	ldrb	r3, [r7, #22]
 800d726:	429a      	cmp	r2, r3
 800d728:	d009      	beq.n	800d73e <_strNoCaseCmp+0x56>
			if ((c1 == 0) || (c2 == 0))
 800d72a:	7dfb      	ldrb	r3, [r7, #23]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00c      	beq.n	800d74a <_strNoCaseCmp+0x62>
 800d730:	7dbb      	ldrb	r3, [r7, #22]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d009      	beq.n	800d74a <_strNoCaseCmp+0x62>
					break;
			return ((unsigned char)c1 - (unsigned char)c2);
 800d736:	7dfa      	ldrb	r2, [r7, #23]
 800d738:	7dbb      	ldrb	r3, [r7, #22]
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	e006      	b.n	800d74c <_strNoCaseCmp+0x64>
		}
  } while (--nLenghth != 0);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3b01      	subs	r3, #1
 800d742:	607b      	str	r3, [r7, #4]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1d9      	bne.n	800d6fe <_strNoCaseCmp+0x16>
  return 0;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
	while (nLength--) {
 800d760:	e007      	b.n	800d772 <_svMemCpy+0x1e>
		*dst++=*src++;
 800d762:	68ba      	ldr	r2, [r7, #8]
 800d764:	1c53      	adds	r3, r2, #1
 800d766:	60bb      	str	r3, [r7, #8]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	1c59      	adds	r1, r3, #1
 800d76c:	60f9      	str	r1, [r7, #12]
 800d76e:	7812      	ldrb	r2, [r2, #0]
 800d770:	701a      	strb	r2, [r3, #0]
	while (nLength--) {
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	1e5a      	subs	r2, r3, #1
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1f2      	bne.n	800d762 <_svMemCpy+0xe>
	}
}
 800d77c:	bf00      	nop
 800d77e:	bf00      	nop
 800d780:	3714      	adds	r7, #20
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr
	...

0800d78c <_svClearLine>:

static void _svClearLine(void)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
	svPutChar('\r');
 800d792:	4b16      	ldr	r3, [pc, #88]	; (800d7ec <_svClearLine+0x60>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	200d      	movs	r0, #13
 800d798:	4798      	blx	r3
	// Remove Strings
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800d79a:	2300      	movs	r3, #0
 800d79c:	607b      	str	r3, [r7, #4]
 800d79e:	e006      	b.n	800d7ae <_svClearLine+0x22>
		svPutChar(' ');
 800d7a0:	4b12      	ldr	r3, [pc, #72]	; (800d7ec <_svClearLine+0x60>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2020      	movs	r0, #32
 800d7a6:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	607b      	str	r3, [r7, #4]
 800d7ae:	4b10      	ldr	r3, [pc, #64]	; (800d7f0 <_svClearLine+0x64>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a10      	ldr	r2, [pc, #64]	; (800d7f4 <_svClearLine+0x68>)
 800d7b4:	6812      	ldr	r2, [r2, #0]
 800d7b6:	441a      	add	r2, r3
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d8f0      	bhi.n	800d7a0 <_svClearLine+0x14>
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800d7be:	2300      	movs	r3, #0
 800d7c0:	603b      	str	r3, [r7, #0]
 800d7c2:	e006      	b.n	800d7d2 <_svClearLine+0x46>
		svPutChar('\b');
 800d7c4:	4b09      	ldr	r3, [pc, #36]	; (800d7ec <_svClearLine+0x60>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2008      	movs	r0, #8
 800d7ca:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	603b      	str	r3, [r7, #0]
 800d7d2:	4b07      	ldr	r3, [pc, #28]	; (800d7f0 <_svClearLine+0x64>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a07      	ldr	r2, [pc, #28]	; (800d7f4 <_svClearLine+0x68>)
 800d7d8:	6812      	ldr	r2, [r2, #0]
 800d7da:	441a      	add	r2, r3
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d8f0      	bhi.n	800d7c4 <_svClearLine+0x38>
}
 800d7e2:	bf00      	nop
 800d7e4:	bf00      	nop
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	20000e2c 	.word	0x20000e2c
 800d7f0:	20000e1c 	.word	0x20000e1c
 800d7f4:	20000060 	.word	0x20000060

0800d7f8 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	4603      	mov	r3, r0
 800d800:	71fb      	strb	r3, [r7, #7]
	switch (eHistoryCmd) {
 800d802:	79fb      	ldrb	r3, [r7, #7]
 800d804:	2b02      	cmp	r3, #2
 800d806:	d03f      	beq.n	800d888 <svCLIHandleHistory+0x90>
 800d808:	2b02      	cmp	r3, #2
 800d80a:	dc6f      	bgt.n	800d8ec <svCLIHandleHistory+0xf4>
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d002      	beq.n	800d816 <svCLIHandleHistory+0x1e>
 800d810:	2b01      	cmp	r3, #1
 800d812:	d052      	beq.n	800d8ba <svCLIHandleHistory+0xc2>
			if (snCLIHistoryPos >= snCLIHistoryCount)
				snCLIHistoryPos = 0;
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
			break;
		default:
			break;
 800d814:	e06a      	b.n	800d8ec <svCLIHandleHistory+0xf4>
			if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {	// Full
 800d816:	4b38      	ldr	r3, [pc, #224]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d11c      	bne.n	800d858 <svCLIHandleHistory+0x60>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800d81e:	2301      	movs	r3, #1
 800d820:	60fb      	str	r3, [r7, #12]
 800d822:	e00f      	b.n	800d844 <svCLIHandleHistory+0x4c>
	        _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	3b01      	subs	r3, #1
 800d828:	01db      	lsls	r3, r3, #7
 800d82a:	4a34      	ldr	r2, [pc, #208]	; (800d8fc <svCLIHandleHistory+0x104>)
 800d82c:	1898      	adds	r0, r3, r2
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	01db      	lsls	r3, r3, #7
 800d832:	4a32      	ldr	r2, [pc, #200]	; (800d8fc <svCLIHandleHistory+0x104>)
 800d834:	4413      	add	r3, r2
 800d836:	2280      	movs	r2, #128	; 0x80
 800d838:	4619      	mov	r1, r3
 800d83a:	f7ff ff8b 	bl	800d754 <_svMemCpy>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	3301      	adds	r3, #1
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	4b2c      	ldr	r3, [pc, #176]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	dbea      	blt.n	800d824 <svCLIHandleHistory+0x2c>
				snCLIHistoryCount--;
 800d84e:	4b2a      	ldr	r3, [pc, #168]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	3b01      	subs	r3, #1
 800d854:	4a28      	ldr	r2, [pc, #160]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d856:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 800d858:	4b27      	ldr	r3, [pc, #156]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	01db      	lsls	r3, r3, #7
 800d85e:	4a27      	ldr	r2, [pc, #156]	; (800d8fc <svCLIHandleHistory+0x104>)
 800d860:	4413      	add	r3, r2
 800d862:	2280      	movs	r2, #128	; 0x80
 800d864:	4926      	ldr	r1, [pc, #152]	; (800d900 <svCLIHandleHistory+0x108>)
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff ff74 	bl	800d754 <_svMemCpy>
			if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 800d86c:	4b22      	ldr	r3, [pc, #136]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b02      	cmp	r3, #2
 800d872:	dc04      	bgt.n	800d87e <svCLIHandleHistory+0x86>
				snCLIHistoryCount++;
 800d874:	4b20      	ldr	r3, [pc, #128]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	3301      	adds	r3, #1
 800d87a:	4a1f      	ldr	r2, [pc, #124]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d87c:	6013      	str	r3, [r2, #0]
			snCLIHistoryPos = snCLIHistoryCount;
 800d87e:	4b1e      	ldr	r3, [pc, #120]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a20      	ldr	r2, [pc, #128]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d884:	6013      	str	r3, [r2, #0]
			break;
 800d886:	e032      	b.n	800d8ee <svCLIHandleHistory+0xf6>
			snCLIHistoryPos--;
 800d888:	4b1e      	ldr	r3, [pc, #120]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	3b01      	subs	r3, #1
 800d88e:	4a1d      	ldr	r2, [pc, #116]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d890:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos < 0)
 800d892:	4b1c      	ldr	r3, [pc, #112]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	da04      	bge.n	800d8a4 <svCLIHandleHistory+0xac>
				snCLIHistoryPos = snCLIHistoryCount - 1;
 800d89a:	4b17      	ldr	r3, [pc, #92]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	4a18      	ldr	r2, [pc, #96]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d8a2:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800d8a4:	4b17      	ldr	r3, [pc, #92]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	01db      	lsls	r3, r3, #7
 800d8aa:	4a14      	ldr	r2, [pc, #80]	; (800d8fc <svCLIHandleHistory+0x104>)
 800d8ac:	4413      	add	r3, r2
 800d8ae:	2280      	movs	r2, #128	; 0x80
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	4813      	ldr	r0, [pc, #76]	; (800d900 <svCLIHandleHistory+0x108>)
 800d8b4:	f7ff ff4e 	bl	800d754 <_svMemCpy>
			break;
 800d8b8:	e019      	b.n	800d8ee <svCLIHandleHistory+0xf6>
			snCLIHistoryPos++;
 800d8ba:	4b12      	ldr	r3, [pc, #72]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	4a10      	ldr	r2, [pc, #64]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d8c2:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos >= snCLIHistoryCount)
 800d8c4:	4b0f      	ldr	r3, [pc, #60]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	4b0b      	ldr	r3, [pc, #44]	; (800d8f8 <svCLIHandleHistory+0x100>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	db02      	blt.n	800d8d6 <svCLIHandleHistory+0xde>
				snCLIHistoryPos = 0;
 800d8d0:	4b0c      	ldr	r3, [pc, #48]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	601a      	str	r2, [r3, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800d8d6:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <svCLIHandleHistory+0x10c>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	01db      	lsls	r3, r3, #7
 800d8dc:	4a07      	ldr	r2, [pc, #28]	; (800d8fc <svCLIHandleHistory+0x104>)
 800d8de:	4413      	add	r3, r2
 800d8e0:	2280      	movs	r2, #128	; 0x80
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	4806      	ldr	r0, [pc, #24]	; (800d900 <svCLIHandleHistory+0x108>)
 800d8e6:	f7ff ff35 	bl	800d754 <_svMemCpy>
			break;
 800d8ea:	e000      	b.n	800d8ee <svCLIHandleHistory+0xf6>
			break;
 800d8ec:	bf00      	nop
	}
}
 800d8ee:	bf00      	nop
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20000e14 	.word	0x20000e14
 800d8fc:	20000c94 	.word	0x20000c94
 800d900:	20000c14 	.word	0x20000c14
 800d904:	20000e18 	.word	0x20000e18

0800d908 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
	SVCLI_t* pCLIEntry;
	char* pCurrent = *line;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800d916:	e002      	b.n	800d91e <svCLI_Search+0x16>
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	3301      	adds	r3, #1
 800d91c:	613b      	str	r3, [r7, #16]
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <svCLI_Search+0x26>
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	2b20      	cmp	r3, #32
 800d92c:	d0f4      	beq.n	800d918 <svCLI_Search+0x10>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800d92e:	4b22      	ldr	r3, [pc, #136]	; (800d9b8 <svCLI_Search+0xb0>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	617b      	str	r3, [r7, #20]
 800d934:	e035      	b.n	800d9a2 <svCLI_Search+0x9a>
		int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7ff fe33 	bl	800d5a6 <_strlenOffspace>
 800d940:	60f8      	str	r0, [r7, #12]
		int nArgLength = _strlenOffspace(pCurrent);
 800d942:	6938      	ldr	r0, [r7, #16]
 800d944:	f7ff fe2f 	bl	800d5a6 <_strlenOffspace>
 800d948:	60b8      	str	r0, [r7, #8]
		pCurrent[nArgLength] = 0;	// NULL termination just after command for comparing
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	4413      	add	r3, r2
 800d950:	2200      	movs	r2, #0
 800d952:	701a      	strb	r2, [r3, #0]
		if (nCmdLength >= nArgLength) {
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	429a      	cmp	r2, r3
 800d95a:	db1f      	blt.n	800d99c <svCLI_Search+0x94>
			if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) {	// Partial Command OK !!
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	4619      	mov	r1, r3
 800d964:	6938      	ldr	r0, [r7, #16]
 800d966:	f7ff febf 	bl	800d6e8 <_strNoCaseCmp>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d115      	bne.n	800d99c <svCLI_Search+0x94>
				pCurrent += (nArgLength + 1);
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	3301      	adds	r3, #1
 800d974:	693a      	ldr	r2, [r7, #16]
 800d976:	4413      	add	r3, r2
 800d978:	613b      	str	r3, [r7, #16]
			  // strip off trailing spaces
			  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800d97a:	e002      	b.n	800d982 <svCLI_Search+0x7a>
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	3301      	adds	r3, #1
 800d980:	613b      	str	r3, [r7, #16]
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d003      	beq.n	800d992 <svCLI_Search+0x8a>
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	2b20      	cmp	r3, #32
 800d990:	d0f4      	beq.n	800d97c <svCLI_Search+0x74>
				*line = pCurrent;		// remove command & return
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	601a      	str	r2, [r3, #0]
				
				return pCLIEntry;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	e008      	b.n	800d9ae <svCLI_Search+0xa6>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	330c      	adds	r3, #12
 800d9a0:	617b      	str	r3, [r7, #20]
 800d9a2:	4b06      	ldr	r3, [pc, #24]	; (800d9bc <svCLI_Search+0xb4>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d3c4      	bcc.n	800d936 <svCLI_Search+0x2e>
			}
		}
	}
	return NULL;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3718      	adds	r7, #24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	20000e20 	.word	0x20000e20
 800d9bc:	20000e24 	.word	0x20000e24

0800d9c0 <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b08a      	sub	sp, #40	; 0x28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
 800d9cc:	603b      	str	r3, [r7, #0]
  int first = 1;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 800d9d2:	230a      	movs	r3, #10
 800d9d4:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	61fb      	str	r3, [r7, #28]
  int digit;
		// strip off leading spaces
    while (*s == ' ') s++;
 800d9da:	e002      	b.n	800d9e2 <svCLI_ParseNumber+0x22>
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	60fb      	str	r3, [r7, #12]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	2b20      	cmp	r3, #32
 800d9e8:	d0f8      	beq.n	800d9dc <svCLI_ParseNumber+0x1c>
		if (*s == 0)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d14d      	bne.n	800da8e <svCLI_ParseNumber+0xce>
			return 0;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	e05b      	b.n	800daae <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d011      	beq.n	800da20 <svCLI_ParseNumber+0x60>
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	2b30      	cmp	r3, #48	; 0x30
 800da02:	d10d      	bne.n	800da20 <svCLI_ParseNumber+0x60>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3301      	adds	r3, #1
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7ff fdf8 	bl	800d600 <_toLower>
 800da10:	4603      	mov	r3, r0
 800da12:	2b78      	cmp	r3, #120	; 0x78
 800da14:	d104      	bne.n	800da20 <svCLI_ParseNumber+0x60>
        radix = 16;
 800da16:	2310      	movs	r3, #16
 800da18:	623b      	str	r3, [r7, #32]
        s += 2;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	3302      	adds	r3, #2
 800da1e:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 800da20:	2300      	movs	r3, #0
 800da22:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	1c5a      	adds	r2, r3, #1
 800da28:	60fa      	str	r2, [r7, #12]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 800da2e:	7dfb      	ldrb	r3, [r7, #23]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fe0e 	bl	800d652 <_isHex>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d010      	beq.n	800da5e <svCLI_ParseNumber+0x9e>
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
 800da3e:	4618      	mov	r0, r3
 800da40:	f7ff fe27 	bl	800d692 <_fromHex>
 800da44:	6138      	str	r0, [r7, #16]
 800da46:	693a      	ldr	r2, [r7, #16]
 800da48:	6a3b      	ldr	r3, [r7, #32]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	da07      	bge.n	800da5e <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	69fa      	ldr	r2, [r7, #28]
 800da52:	fb03 f202 	mul.w	r2, r3, r2
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	4413      	add	r3, r2
 800da5a:	61fb      	str	r3, [r7, #28]
 800da5c:	e017      	b.n	800da8e <svCLI_ParseNumber+0xce>
      } 
			else {
        if (delimiter != (char *)0) {
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d012      	beq.n	800da8a <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 800da68:	e002      	b.n	800da70 <svCLI_ParseNumber+0xb0>
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	3301      	adds	r3, #1
 800da6e:	61bb      	str	r3, [r7, #24]
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d004      	beq.n	800da82 <svCLI_ParseNumber+0xc2>
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	7dfa      	ldrb	r2, [r7, #23]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d1f3      	bne.n	800da6a <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d106      	bne.n	800da98 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 800da8a:	2300      	movs	r3, #0
 800da8c:	e00f      	b.n	800daae <svCLI_ParseNumber+0xee>
    while (*s) {
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1af      	bne.n	800d9f6 <svCLI_ParseNumber+0x36>
 800da96:	e000      	b.n	800da9a <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 800da98:	bf00      	nop
      }
    }
    *val = result;
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	69fa      	ldr	r2, [r7, #28]
 800da9e:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <svCLI_ParseNumber+0xec>
      *res = s;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800daac:	2301      	movs	r3, #1
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3728      	adds	r7, #40	; 0x28
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
	...

0800dab8 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 800dab8:	b590      	push	{r4, r7, lr}
 800daba:	b089      	sub	sp, #36	; 0x24
 800dabc:	af00      	add	r7, sp, #0
	if (s_bPwdOK == FALSE) {	// Input Password
 800dabe:	4b3a      	ldr	r3, [pc, #232]	; (800dba8 <svCLI_ParsenExecute+0xf0>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d120      	bne.n	800db08 <svCLI_ParsenExecute+0x50>
		if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 800dac6:	4939      	ldr	r1, [pc, #228]	; (800dbac <svCLI_ParsenExecute+0xf4>)
 800dac8:	4839      	ldr	r0, [pc, #228]	; (800dbb0 <svCLI_ParsenExecute+0xf8>)
 800daca:	f7f2 fbe1 	bl	8000290 <strcmp>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d115      	bne.n	800db00 <svCLI_ParsenExecute+0x48>
			s_bPwdOK = TRUE;
 800dad4:	4b34      	ldr	r3, [pc, #208]	; (800dba8 <svCLI_ParsenExecute+0xf0>)
 800dad6:	2201      	movs	r2, #1
 800dad8:	601a      	str	r2, [r3, #0]
			svCLI_Printf("Welcome !!\r\n");
 800dada:	4836      	ldr	r0, [pc, #216]	; (800dbb4 <svCLI_ParsenExecute+0xfc>)
 800dadc:	f7ff fcba 	bl	800d454 <svCLI_Printf>
			strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800dae0:	4b35      	ldr	r3, [pc, #212]	; (800dbb8 <svCLI_ParsenExecute+0x100>)
 800dae2:	4a36      	ldr	r2, [pc, #216]	; (800dbbc <svCLI_ParsenExecute+0x104>)
 800dae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dae8:	6018      	str	r0, [r3, #0]
 800daea:	3304      	adds	r3, #4
 800daec:	8019      	strh	r1, [r3, #0]
 800daee:	3302      	adds	r3, #2
 800daf0:	0c0a      	lsrs	r2, r1, #16
 800daf2:	701a      	strb	r2, [r3, #0]
			snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800daf4:	4b32      	ldr	r3, [pc, #200]	; (800dbc0 <svCLI_ParsenExecute+0x108>)
 800daf6:	2206      	movs	r2, #6
 800daf8:	601a      	str	r2, [r3, #0]
			svCLI_ShowHelp();
 800dafa:	f7ff fcd7 	bl	800d4ac <svCLI_ShowHelp>
		}
		else {
			svCLI_Printf("Invalid Password !!\r\n");
		}
		return;
 800dafe:	e04f      	b.n	800dba0 <svCLI_ParsenExecute+0xe8>
			svCLI_Printf("Invalid Password !!\r\n");
 800db00:	4830      	ldr	r0, [pc, #192]	; (800dbc4 <svCLI_ParsenExecute+0x10c>)
 800db02:	f7ff fca7 	bl	800d454 <svCLI_Printf>
		return;
 800db06:	e04b      	b.n	800dba0 <svCLI_ParsenExecute+0xe8>
	}
	SVCLI_t* pCLIEntry;
	if (sCLITableBegin == sCLITablEnd) {
 800db08:	4b2f      	ldr	r3, [pc, #188]	; (800dbc8 <svCLI_ParsenExecute+0x110>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	4b2f      	ldr	r3, [pc, #188]	; (800dbcc <svCLI_ParsenExecute+0x114>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d103      	bne.n	800db1c <svCLI_ParsenExecute+0x64>
		svCLI_Printf("No CLI Entries !!!\r\n");
 800db14:	482e      	ldr	r0, [pc, #184]	; (800dbd0 <svCLI_ParsenExecute+0x118>)
 800db16:	f7ff fc9d 	bl	800d454 <svCLI_Printf>
		return;
 800db1a:	e041      	b.n	800dba0 <svCLI_ParsenExecute+0xe8>
	}
	char* pLine = szCLIString;
 800db1c:	4b24      	ldr	r3, [pc, #144]	; (800dbb0 <svCLI_ParsenExecute+0xf8>)
 800db1e:	613b      	str	r3, [r7, #16]
	pCLIEntry = svCLI_Search(&pLine);
 800db20:	f107 0310 	add.w	r3, r7, #16
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff feef 	bl	800d908 <svCLI_Search>
 800db2a:	61b8      	str	r0, [r7, #24]
	if (pCLIEntry) {
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d033      	beq.n	800db9a <svCLI_ParsenExecute+0xe2>
		// Parse more for CLI function
		unsigned int nFirst, nSecond, nCount;
		nCount = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	61fb      	str	r3, [r7, #28]
		nFirst = 0;
 800db36:	2300      	movs	r3, #0
 800db38:	60fb      	str	r3, [r7, #12]
		nSecond = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	60bb      	str	r3, [r7, #8]
		char* pParseLine = pLine;
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	617b      	str	r3, [r7, #20]
		char delim[3] = ", ";
 800db42:	4a24      	ldr	r2, [pc, #144]	; (800dbd4 <svCLI_ParsenExecute+0x11c>)
 800db44:	1d3b      	adds	r3, r7, #4
 800db46:	6812      	ldr	r2, [r2, #0]
 800db48:	4611      	mov	r1, r2
 800db4a:	8019      	strh	r1, [r3, #0]
 800db4c:	3302      	adds	r3, #2
 800db4e:	0c12      	lsrs	r2, r2, #16
 800db50:	701a      	strb	r2, [r3, #0]
		if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 800db52:	6938      	ldr	r0, [r7, #16]
 800db54:	1d3b      	adds	r3, r7, #4
 800db56:	f107 0210 	add.w	r2, r7, #16
 800db5a:	f107 010c 	add.w	r1, r7, #12
 800db5e:	f7ff ff2f 	bl	800d9c0 <svCLI_ParseNumber>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d010      	beq.n	800db8a <svCLI_ParsenExecute+0xd2>
			nCount++;
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	3301      	adds	r3, #1
 800db6c:	61fb      	str	r3, [r7, #28]
			if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 800db6e:	6938      	ldr	r0, [r7, #16]
 800db70:	1d3b      	adds	r3, r7, #4
 800db72:	f107 0210 	add.w	r2, r7, #16
 800db76:	f107 0108 	add.w	r1, r7, #8
 800db7a:	f7ff ff21 	bl	800d9c0 <svCLI_ParseNumber>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <svCLI_ParsenExecute+0xd2>
				nCount++;
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	3301      	adds	r3, #1
 800db88:	61fb      	str	r3, [r7, #28]
			}
		}
		pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	689c      	ldr	r4, [r3, #8]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	69f9      	ldr	r1, [r7, #28]
 800db94:	6978      	ldr	r0, [r7, #20]
 800db96:	47a0      	blx	r4
 800db98:	e002      	b.n	800dba0 <svCLI_ParsenExecute+0xe8>
	}
	else {
		svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 800db9a:	480f      	ldr	r0, [pc, #60]	; (800dbd8 <svCLI_ParsenExecute+0x120>)
 800db9c:	f7ff fc5a 	bl	800d454 <svCLI_Printf>
	}
}
 800dba0:	3724      	adds	r7, #36	; 0x24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd90      	pop	{r4, r7, pc}
 800dba6:	bf00      	nop
 800dba8:	20000050 	.word	0x20000050
 800dbac:	0800f5d4 	.word	0x0800f5d4
 800dbb0:	20000c14 	.word	0x20000c14
 800dbb4:	0800f5e0 	.word	0x0800f5e0
 800dbb8:	20000054 	.word	0x20000054
 800dbbc:	0800f57c 	.word	0x0800f57c
 800dbc0:	20000060 	.word	0x20000060
 800dbc4:	0800f5f0 	.word	0x0800f5f0
 800dbc8:	20000e20 	.word	0x20000e20
 800dbcc:	20000e24 	.word	0x20000e24
 800dbd0:	0800f608 	.word	0x0800f608
 800dbd4:	0800f648 	.word	0x0800f648
 800dbd8:	0800f620 	.word	0x0800f620

0800dbdc <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	603b      	str	r3, [r7, #0]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	71fb      	strb	r3, [r7, #7]
	if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d005      	beq.n	800dbfe <svCLI_SetBypassFtn+0x22>
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <svCLI_SetBypassFtn+0x22>
 800dbf8:	79fb      	ldrb	r3, [r7, #7]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d136      	bne.n	800dc6c <svCLI_SetBypassFtn+0x90>
		if (svBypass == NULL) {
 800dbfe:	4b28      	ldr	r3, [pc, #160]	; (800dca0 <svCLI_SetBypassFtn+0xc4>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d048      	beq.n	800dc98 <svCLI_SetBypassFtn+0xbc>
			// Nothing to do..
			return;
		}
		strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800dc06:	4b27      	ldr	r3, [pc, #156]	; (800dca4 <svCLI_SetBypassFtn+0xc8>)
 800dc08:	4a27      	ldr	r2, [pc, #156]	; (800dca8 <svCLI_SetBypassFtn+0xcc>)
 800dc0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc0e:	6018      	str	r0, [r3, #0]
 800dc10:	3304      	adds	r3, #4
 800dc12:	8019      	strh	r1, [r3, #0]
 800dc14:	3302      	adds	r3, #2
 800dc16:	0c0a      	lsrs	r2, r1, #16
 800dc18:	701a      	strb	r2, [r3, #0]
		snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800dc1a:	4b24      	ldr	r3, [pc, #144]	; (800dcac <svCLI_SetBypassFtn+0xd0>)
 800dc1c:	2206      	movs	r2, #6
 800dc1e:	601a      	str	r2, [r3, #0]
		svBypass = NULL;
 800dc20:	4b1f      	ldr	r3, [pc, #124]	; (800dca0 <svCLI_SetBypassFtn+0xc4>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	601a      	str	r2, [r3, #0]

		svExit = NULL;
 800dc26:	4b22      	ldr	r3, [pc, #136]	; (800dcb0 <svCLI_SetBypassFtn+0xd4>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	701a      	strb	r2, [r3, #0]
		sbEnter = FALSE;
 800dc2c:	4b21      	ldr	r3, [pc, #132]	; (800dcb4 <svCLI_SetBypassFtn+0xd8>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	601a      	str	r2, [r3, #0]
		
		scntCLIString = 0;	// Clean Up Char
 800dc32:	4b21      	ldr	r3, [pc, #132]	; (800dcb8 <svCLI_SetBypassFtn+0xdc>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	601a      	str	r2, [r3, #0]
		// clean up line string
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800dc38:	2300      	movs	r3, #0
 800dc3a:	617b      	str	r3, [r7, #20]
 800dc3c:	e007      	b.n	800dc4e <svCLI_SetBypassFtn+0x72>
			szCLIString[i] = '\0';
 800dc3e:	4a1f      	ldr	r2, [pc, #124]	; (800dcbc <svCLI_SetBypassFtn+0xe0>)
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	4413      	add	r3, r2
 800dc44:	2200      	movs	r2, #0
 800dc46:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	617b      	str	r3, [r7, #20]
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2b7f      	cmp	r3, #127	; 0x7f
 800dc52:	ddf4      	ble.n	800dc3e <svCLI_SetBypassFtn+0x62>
		}
		svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 800dc54:	4913      	ldr	r1, [pc, #76]	; (800dca4 <svCLI_SetBypassFtn+0xc8>)
 800dc56:	481a      	ldr	r0, [pc, #104]	; (800dcc0 <svCLI_SetBypassFtn+0xe4>)
 800dc58:	f7ff fbfc 	bl	800d454 <svCLI_Printf>

		if (svCommit) {
 800dc5c:	4b19      	ldr	r3, [pc, #100]	; (800dcc4 <svCLI_SetBypassFtn+0xe8>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d01a      	beq.n	800dc9a <svCLI_SetBypassFtn+0xbe>
			svCommit();
 800dc64:	4b17      	ldr	r3, [pc, #92]	; (800dcc4 <svCLI_SetBypassFtn+0xe8>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4798      	blx	r3
		if (svCommit) {
 800dc6a:	e016      	b.n	800dc9a <svCLI_SetBypassFtn+0xbe>
		}
	}
	else {
		strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 800dc6c:	2209      	movs	r2, #9
 800dc6e:	68b9      	ldr	r1, [r7, #8]
 800dc70:	480c      	ldr	r0, [pc, #48]	; (800dca4 <svCLI_SetBypassFtn+0xc8>)
 800dc72:	f000 ff1d 	bl	800eab0 <strncpy>
		snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 800dc76:	480b      	ldr	r0, [pc, #44]	; (800dca4 <svCLI_SetBypassFtn+0xc8>)
 800dc78:	f7f2 fb14 	bl	80002a4 <strlen>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	461a      	mov	r2, r3
 800dc80:	4b0a      	ldr	r3, [pc, #40]	; (800dcac <svCLI_SetBypassFtn+0xd0>)
 800dc82:	601a      	str	r2, [r3, #0]
		svBypass = pfnBypass;
 800dc84:	4a06      	ldr	r2, [pc, #24]	; (800dca0 <svCLI_SetBypassFtn+0xc4>)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6013      	str	r3, [r2, #0]
		svExit = szExit;
 800dc8a:	4a09      	ldr	r2, [pc, #36]	; (800dcb0 <svCLI_SetBypassFtn+0xd4>)
 800dc8c:	79fb      	ldrb	r3, [r7, #7]
 800dc8e:	7013      	strb	r3, [r2, #0]
		sbEnter = bEnter;
 800dc90:	4a08      	ldr	r2, [pc, #32]	; (800dcb4 <svCLI_SetBypassFtn+0xd8>)
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	6013      	str	r3, [r2, #0]
 800dc96:	e000      	b.n	800dc9a <svCLI_SetBypassFtn+0xbe>
			return;
 800dc98:	bf00      	nop
	}
}
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	20000e34 	.word	0x20000e34
 800dca4:	20000054 	.word	0x20000054
 800dca8:	0800f57c 	.word	0x0800f57c
 800dcac:	20000060 	.word	0x20000060
 800dcb0:	20000e38 	.word	0x20000e38
 800dcb4:	20000e3c 	.word	0x20000e3c
 800dcb8:	20000e1c 	.word	0x20000e1c
 800dcbc:	20000c14 	.word	0x20000c14
 800dcc0:	0800f64c 	.word	0x0800f64c
 800dcc4:	20000e30 	.word	0x20000e30

0800dcc8 <svCLI_Handler>:

void svCLI_Handler(void)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
	if (sbFirst) {
		svCLI_Printf("\r\n%s", szCLI_PROMPT);
		sbFirst = 0;
	}
#endif	
	if (svGetChar) {
 800dcce:	4b92      	ldr	r3, [pc, #584]	; (800df18 <svCLI_Handler+0x250>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f000 8114 	beq.w	800df00 <svCLI_Handler+0x238>
		char bSkipPrompt = 0;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	73fb      	strb	r3, [r7, #15]
		char szChar = svGetChar();
 800dcdc:	4b8e      	ldr	r3, [pc, #568]	; (800df18 <svCLI_Handler+0x250>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4798      	blx	r3
 800dce2:	4603      	mov	r3, r0
 800dce4:	71fb      	strb	r3, [r7, #7]
		if ((szChar != 0) && (szChar != '\n')) {
 800dce6:	79fb      	ldrb	r3, [r7, #7]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f000 8109 	beq.w	800df00 <svCLI_Handler+0x238>
 800dcee:	79fb      	ldrb	r3, [r7, #7]
 800dcf0:	2b0a      	cmp	r3, #10
 800dcf2:	f000 8105 	beq.w	800df00 <svCLI_Handler+0x238>
			if (szChar == '\r') {
 800dcf6:	79fb      	ldrb	r3, [r7, #7]
 800dcf8:	2b0d      	cmp	r3, #13
 800dcfa:	d154      	bne.n	800dda6 <svCLI_Handler+0xde>
				sbInEsc = 0;
 800dcfc:	4b87      	ldr	r3, [pc, #540]	; (800df1c <svCLI_Handler+0x254>)
 800dcfe:	2200      	movs	r2, #0
 800dd00:	701a      	strb	r2, [r3, #0]
				svCLI_Printf("\r\n");
 800dd02:	4887      	ldr	r0, [pc, #540]	; (800df20 <svCLI_Handler+0x258>)
 800dd04:	f7ff fba6 	bl	800d454 <svCLI_Printf>
				if (scntCLIString > 0) {
 800dd08:	4b86      	ldr	r3, [pc, #536]	; (800df24 <svCLI_Handler+0x25c>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d031      	beq.n	800dd74 <svCLI_Handler+0xac>
					// Parse and Execute
					szCLIString[scntCLIString] = '\0';	// NULL Termination
 800dd10:	4b84      	ldr	r3, [pc, #528]	; (800df24 <svCLI_Handler+0x25c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a84      	ldr	r2, [pc, #528]	; (800df28 <svCLI_Handler+0x260>)
 800dd16:	2100      	movs	r1, #0
 800dd18:	54d1      	strb	r1, [r2, r3]
					// Save to history Buffer
					svCLIHandleHistory(CLI_HISTORY_ADD);					
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	f7ff fd6c 	bl	800d7f8 <svCLIHandleHistory>
					// Call Parser
					if (svBypass) {	// hellosmk 210225 added
 800dd20:	4b82      	ldr	r3, [pc, #520]	; (800df2c <svCLI_Handler+0x264>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d011      	beq.n	800dd4c <svCLI_Handler+0x84>
						bSkipPrompt = 1;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	73fb      	strb	r3, [r7, #15]
						szCLIString[scntCLIString] = '\r';
 800dd2c:	4b7d      	ldr	r3, [pc, #500]	; (800df24 <svCLI_Handler+0x25c>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a7d      	ldr	r2, [pc, #500]	; (800df28 <svCLI_Handler+0x260>)
 800dd32:	210d      	movs	r1, #13
 800dd34:	54d1      	strb	r1, [r2, r3]
						szCLIString[scntCLIString+1] = '\0';
 800dd36:	4b7b      	ldr	r3, [pc, #492]	; (800df24 <svCLI_Handler+0x25c>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	4a7a      	ldr	r2, [pc, #488]	; (800df28 <svCLI_Handler+0x260>)
 800dd3e:	2100      	movs	r1, #0
 800dd40:	54d1      	strb	r1, [r2, r3]
						svBypass(szCLIString);
 800dd42:	4b7a      	ldr	r3, [pc, #488]	; (800df2c <svCLI_Handler+0x264>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4878      	ldr	r0, [pc, #480]	; (800df28 <svCLI_Handler+0x260>)
 800dd48:	4798      	blx	r3
 800dd4a:	e001      	b.n	800dd50 <svCLI_Handler+0x88>
					}
					else {
						svCLI_ParsenExecute();
 800dd4c:	f7ff feb4 	bl	800dab8 <svCLI_ParsenExecute>
					}
					scntCLIString = 0;	// Clean Up Char
 800dd50:	4b74      	ldr	r3, [pc, #464]	; (800df24 <svCLI_Handler+0x25c>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]
					// clean up line string
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800dd56:	2300      	movs	r3, #0
 800dd58:	60bb      	str	r3, [r7, #8]
 800dd5a:	e007      	b.n	800dd6c <svCLI_Handler+0xa4>
						szCLIString[i] = '\0';
 800dd5c:	4a72      	ldr	r2, [pc, #456]	; (800df28 <svCLI_Handler+0x260>)
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	4413      	add	r3, r2
 800dd62:	2200      	movs	r2, #0
 800dd64:	701a      	strb	r2, [r3, #0]
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	60bb      	str	r3, [r7, #8]
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	2b7f      	cmp	r3, #127	; 0x7f
 800dd70:	ddf4      	ble.n	800dd5c <svCLI_Handler+0x94>
 800dd72:	e010      	b.n	800dd96 <svCLI_Handler+0xce>
					}
				}
				else if (sbEnter && svBypass) {
 800dd74:	4b6e      	ldr	r3, [pc, #440]	; (800df30 <svCLI_Handler+0x268>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00c      	beq.n	800dd96 <svCLI_Handler+0xce>
 800dd7c:	4b6b      	ldr	r3, [pc, #428]	; (800df2c <svCLI_Handler+0x264>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d008      	beq.n	800dd96 <svCLI_Handler+0xce>
					const char cszRet[2] = {'\n',0};
 800dd84:	230a      	movs	r3, #10
 800dd86:	80bb      	strh	r3, [r7, #4]
					svBypass((char*)cszRet);
 800dd88:	4b68      	ldr	r3, [pc, #416]	; (800df2c <svCLI_Handler+0x264>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	1d3a      	adds	r2, r7, #4
 800dd8e:	4610      	mov	r0, r2
 800dd90:	4798      	blx	r3
					bSkipPrompt = 1;
 800dd92:	2301      	movs	r3, #1
 800dd94:	73fb      	strb	r3, [r7, #15]
				}
				
				if (bSkipPrompt == 0) {
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f040 80b1 	bne.w	800df00 <svCLI_Handler+0x238>
					svCLI_Printf(szCLI_PROMPT);
 800dd9e:	4865      	ldr	r0, [pc, #404]	; (800df34 <svCLI_Handler+0x26c>)
 800dda0:	f7ff fb58 	bl	800d454 <svCLI_Printf>
 800dda4:	e0ac      	b.n	800df00 <svCLI_Handler+0x238>
				}
			}
			else if (svBypass && (szChar == svExit)) {
 800dda6:	4b61      	ldr	r3, [pc, #388]	; (800df2c <svCLI_Handler+0x264>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d019      	beq.n	800dde2 <svCLI_Handler+0x11a>
 800ddae:	4b62      	ldr	r3, [pc, #392]	; (800df38 <svCLI_Handler+0x270>)
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	79fa      	ldrb	r2, [r7, #7]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d114      	bne.n	800dde2 <svCLI_Handler+0x11a>
				// Exit Bypass mode
				if (0x11 == svExit) {
 800ddb8:	4b5f      	ldr	r3, [pc, #380]	; (800df38 <svCLI_Handler+0x270>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2b11      	cmp	r3, #17
 800ddbe:	d102      	bne.n	800ddc6 <svCLI_Handler+0xfe>
					svCLI_Printf("^Q");
 800ddc0:	485e      	ldr	r0, [pc, #376]	; (800df3c <svCLI_Handler+0x274>)
 800ddc2:	f7ff fb47 	bl	800d454 <svCLI_Printf>
				}
				svBypass(NULL);	// Notify Exit !!
 800ddc6:	4b59      	ldr	r3, [pc, #356]	; (800df2c <svCLI_Handler+0x264>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2000      	movs	r0, #0
 800ddcc:	4798      	blx	r3
				svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 800ddce:	2300      	movs	r3, #0
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	f7ff ff01 	bl	800dbdc <svCLI_SetBypassFtn>
				sbInEsc = 0;
 800ddda:	4b50      	ldr	r3, [pc, #320]	; (800df1c <svCLI_Handler+0x254>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	701a      	strb	r2, [r3, #0]
 800dde0:	e08e      	b.n	800df00 <svCLI_Handler+0x238>
			}
			else if (svBypass && (szChar == 0X1A)) {		// Ctrl+Z
 800dde2:	4b52      	ldr	r3, [pc, #328]	; (800df2c <svCLI_Handler+0x264>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d014      	beq.n	800de14 <svCLI_Handler+0x14c>
 800ddea:	79fb      	ldrb	r3, [r7, #7]
 800ddec:	2b1a      	cmp	r3, #26
 800ddee:	d111      	bne.n	800de14 <svCLI_Handler+0x14c>
				bSkipPrompt = 1;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	73fb      	strb	r3, [r7, #15]
				szCLIString[scntCLIString] = 0X1A;	//Ctrl+z
 800ddf4:	4b4b      	ldr	r3, [pc, #300]	; (800df24 <svCLI_Handler+0x25c>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a4b      	ldr	r2, [pc, #300]	; (800df28 <svCLI_Handler+0x260>)
 800ddfa:	211a      	movs	r1, #26
 800ddfc:	54d1      	strb	r1, [r2, r3]
				szCLIString[scntCLIString+1] = '\0';	// NULL Termination
 800ddfe:	4b49      	ldr	r3, [pc, #292]	; (800df24 <svCLI_Handler+0x25c>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	3301      	adds	r3, #1
 800de04:	4a48      	ldr	r2, [pc, #288]	; (800df28 <svCLI_Handler+0x260>)
 800de06:	2100      	movs	r1, #0
 800de08:	54d1      	strb	r1, [r2, r3]
				svBypass(szCLIString);
 800de0a:	4b48      	ldr	r3, [pc, #288]	; (800df2c <svCLI_Handler+0x264>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4846      	ldr	r0, [pc, #280]	; (800df28 <svCLI_Handler+0x260>)
 800de10:	4798      	blx	r3
 800de12:	e075      	b.n	800df00 <svCLI_Handler+0x238>
			}
			else {
				if (szChar == '\b')	{ // Back space
 800de14:	79fb      	ldrb	r3, [r7, #7]
 800de16:	2b08      	cmp	r3, #8
 800de18:	d118      	bne.n	800de4c <svCLI_Handler+0x184>
					sbInEsc = 0;
 800de1a:	4b40      	ldr	r3, [pc, #256]	; (800df1c <svCLI_Handler+0x254>)
 800de1c:	2200      	movs	r2, #0
 800de1e:	701a      	strb	r2, [r3, #0]
					if (scntCLIString > 0) {
 800de20:	4b40      	ldr	r3, [pc, #256]	; (800df24 <svCLI_Handler+0x25c>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d06b      	beq.n	800df00 <svCLI_Handler+0x238>
						_svClearLine();
 800de28:	f7ff fcb0 	bl	800d78c <_svClearLine>
						scntCLIString--;
 800de2c:	4b3d      	ldr	r3, [pc, #244]	; (800df24 <svCLI_Handler+0x25c>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3b01      	subs	r3, #1
 800de32:	4a3c      	ldr	r2, [pc, #240]	; (800df24 <svCLI_Handler+0x25c>)
 800de34:	6013      	str	r3, [r2, #0]
						szCLIString[scntCLIString] = '\0';	// NULL Termination
 800de36:	4b3b      	ldr	r3, [pc, #236]	; (800df24 <svCLI_Handler+0x25c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a3b      	ldr	r2, [pc, #236]	; (800df28 <svCLI_Handler+0x260>)
 800de3c:	2100      	movs	r1, #0
 800de3e:	54d1      	strb	r1, [r2, r3]
						svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 800de40:	4a39      	ldr	r2, [pc, #228]	; (800df28 <svCLI_Handler+0x260>)
 800de42:	493c      	ldr	r1, [pc, #240]	; (800df34 <svCLI_Handler+0x26c>)
 800de44:	483e      	ldr	r0, [pc, #248]	; (800df40 <svCLI_Handler+0x278>)
 800de46:	f7ff fb05 	bl	800d454 <svCLI_Printf>
 800de4a:	e059      	b.n	800df00 <svCLI_Handler+0x238>
					}
				}
				else if (szChar == '[') {	// ESC sequence started
 800de4c:	79fb      	ldrb	r3, [r7, #7]
 800de4e:	2b5b      	cmp	r3, #91	; 0x5b
 800de50:	d103      	bne.n	800de5a <svCLI_Handler+0x192>
					sbInEsc = 1;
 800de52:	4b32      	ldr	r3, [pc, #200]	; (800df1c <svCLI_Handler+0x254>)
 800de54:	2201      	movs	r2, #1
 800de56:	701a      	strb	r2, [r3, #0]
 800de58:	e052      	b.n	800df00 <svCLI_Handler+0x238>
				}
				else if (_isPrintable(szChar)) {
 800de5a:	79fb      	ldrb	r3, [r7, #7]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7ff fbe4 	bl	800d62a <_isPrintable>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d04b      	beq.n	800df00 <svCLI_Handler+0x238>
					if (sbInEsc) {
 800de68:	4b2c      	ldr	r3, [pc, #176]	; (800df1c <svCLI_Handler+0x254>)
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d036      	beq.n	800dede <svCLI_Handler+0x216>
						sbInEsc = 0;
 800de70:	4b2a      	ldr	r3, [pc, #168]	; (800df1c <svCLI_Handler+0x254>)
 800de72:	2200      	movs	r2, #0
 800de74:	701a      	strb	r2, [r3, #0]
						if (snCLIHistoryCount > 0) {
 800de76:	4b33      	ldr	r3, [pc, #204]	; (800df44 <svCLI_Handler+0x27c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	dd27      	ble.n	800dece <svCLI_Handler+0x206>
							switch (szChar) {
 800de7e:	79fb      	ldrb	r3, [r7, #7]
 800de80:	2b41      	cmp	r3, #65	; 0x41
 800de82:	d002      	beq.n	800de8a <svCLI_Handler+0x1c2>
 800de84:	2b42      	cmp	r3, #66	; 0x42
 800de86:	d011      	beq.n	800deac <svCLI_Handler+0x1e4>
									// echo back
									scntCLIString = svCLI_Printf("%s", szCLIString);
									// echo back
									break;
								default:	// Do Nothing
									break;
 800de88:	e021      	b.n	800dece <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_PREV);
 800de8a:	2002      	movs	r0, #2
 800de8c:	f7ff fcb4 	bl	800d7f8 <svCLIHandleHistory>
									_svClearLine();
 800de90:	f7ff fc7c 	bl	800d78c <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800de94:	4827      	ldr	r0, [pc, #156]	; (800df34 <svCLI_Handler+0x26c>)
 800de96:	f7ff fadd 	bl	800d454 <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800de9a:	4923      	ldr	r1, [pc, #140]	; (800df28 <svCLI_Handler+0x260>)
 800de9c:	482a      	ldr	r0, [pc, #168]	; (800df48 <svCLI_Handler+0x280>)
 800de9e:	f7ff fad9 	bl	800d454 <svCLI_Printf>
 800dea2:	4603      	mov	r3, r0
 800dea4:	461a      	mov	r2, r3
 800dea6:	4b1f      	ldr	r3, [pc, #124]	; (800df24 <svCLI_Handler+0x25c>)
 800dea8:	601a      	str	r2, [r3, #0]
									break;
 800deaa:	e010      	b.n	800dece <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_NEXT);
 800deac:	2001      	movs	r0, #1
 800deae:	f7ff fca3 	bl	800d7f8 <svCLIHandleHistory>
									_svClearLine();
 800deb2:	f7ff fc6b 	bl	800d78c <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800deb6:	481f      	ldr	r0, [pc, #124]	; (800df34 <svCLI_Handler+0x26c>)
 800deb8:	f7ff facc 	bl	800d454 <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800debc:	491a      	ldr	r1, [pc, #104]	; (800df28 <svCLI_Handler+0x260>)
 800debe:	4822      	ldr	r0, [pc, #136]	; (800df48 <svCLI_Handler+0x280>)
 800dec0:	f7ff fac8 	bl	800d454 <svCLI_Printf>
 800dec4:	4603      	mov	r3, r0
 800dec6:	461a      	mov	r2, r3
 800dec8:	4b16      	ldr	r3, [pc, #88]	; (800df24 <svCLI_Handler+0x25c>)
 800deca:	601a      	str	r2, [r3, #0]
									break;
 800decc:	bf00      	nop
							}
						}
						if (svCommit) {
 800dece:	4b1f      	ldr	r3, [pc, #124]	; (800df4c <svCLI_Handler+0x284>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d01c      	beq.n	800df10 <svCLI_Handler+0x248>
							svCommit();
 800ded6:	4b1d      	ldr	r3, [pc, #116]	; (800df4c <svCLI_Handler+0x284>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4798      	blx	r3
						}
						return;
 800dedc:	e018      	b.n	800df10 <svCLI_Handler+0x248>
					}
					if (scntCLIString < (MAX_CLI_CHARS-1)) {
 800dede:	4b11      	ldr	r3, [pc, #68]	; (800df24 <svCLI_Handler+0x25c>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2b7e      	cmp	r3, #126	; 0x7e
 800dee4:	d80c      	bhi.n	800df00 <svCLI_Handler+0x238>
						// echo back
						svPutChar(szChar);
 800dee6:	4b1a      	ldr	r3, [pc, #104]	; (800df50 <svCLI_Handler+0x288>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	79fa      	ldrb	r2, [r7, #7]
 800deec:	4610      	mov	r0, r2
 800deee:	4798      	blx	r3
						szCLIString[scntCLIString++] = szChar;
 800def0:	4b0c      	ldr	r3, [pc, #48]	; (800df24 <svCLI_Handler+0x25c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	490b      	ldr	r1, [pc, #44]	; (800df24 <svCLI_Handler+0x25c>)
 800def8:	600a      	str	r2, [r1, #0]
 800defa:	490b      	ldr	r1, [pc, #44]	; (800df28 <svCLI_Handler+0x260>)
 800defc:	79fa      	ldrb	r2, [r7, #7]
 800defe:	54ca      	strb	r2, [r1, r3]
					}
				}
			}
		}
	}
	if (svCommit) {
 800df00:	4b12      	ldr	r3, [pc, #72]	; (800df4c <svCLI_Handler+0x284>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <svCLI_Handler+0x24a>
		svCommit();
 800df08:	4b10      	ldr	r3, [pc, #64]	; (800df4c <svCLI_Handler+0x284>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4798      	blx	r3
 800df0e:	e000      	b.n	800df12 <svCLI_Handler+0x24a>
						return;
 800df10:	bf00      	nop
	}
}
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	20000e28 	.word	0x20000e28
 800df1c:	20000f40 	.word	0x20000f40
 800df20:	0800f590 	.word	0x0800f590
 800df24:	20000e1c 	.word	0x20000e1c
 800df28:	20000c14 	.word	0x20000c14
 800df2c:	20000e34 	.word	0x20000e34
 800df30:	20000e3c 	.word	0x20000e3c
 800df34:	20000054 	.word	0x20000054
 800df38:	20000e38 	.word	0x20000e38
 800df3c:	0800f664 	.word	0x0800f664
 800df40:	0800f668 	.word	0x0800f668
 800df44:	20000e14 	.word	0x20000e14
 800df48:	0800f670 	.word	0x0800f670
 800df4c:	20000e30 	.word	0x20000e30
 800df50:	20000e2c 	.word	0x20000e2c

0800df54 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
 800df60:	603b      	str	r3, [r7, #0]
	svCLI_ShowHelp();
 800df62:	f7ff faa3 	bl	800d4ac <svCLI_ShowHelp>
}
 800df66:	bf00      	nop
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 800df6e:	b480      	push	{r7}
 800df70:	b085      	sub	sp, #20
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 800df82:	68fa      	ldr	r2, [r7, #12]
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	429a      	cmp	r2, r3
 800df88:	d303      	bcc.n	800df92 <svRingBuffer_GetCount+0x24>
	  return (h - t);
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	e009      	b.n	800dfa6 <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	68da      	ldr	r2, [r3, #12]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	461a      	mov	r2, r3
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	441a      	add	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	1ad3      	subs	r3, r2, r3
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3714      	adds	r7, #20
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr

0800dfb2 <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 800dfb2:	b480      	push	{r7}
 800dfb4:	b083      	sub	sp, #12
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	609a      	str	r2, [r3, #8]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	689a      	ldr	r2, [r3, #8]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	619a      	str	r2, [r3, #24]
}
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b085      	sub	sp, #20
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	460b      	mov	r3, r1
 800dfec:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 800dfee:	2300      	movs	r3, #0
 800dff0:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	78fa      	ldrb	r2, [r7, #3]
 800dff8:	701a      	strb	r2, [r3, #0]
	rb->head++;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	685a      	ldr	r2, [r3, #4]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d109      	bne.n	800e024 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	619a      	str	r2, [r3, #24]
		nRet = -1;
 800e01e:	f04f 33ff 	mov.w	r3, #4294967295
 800e022:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d105      	bne.n	800e03c <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	615a      	str	r2, [r3, #20]
		nRet = -2;
 800e036:	f06f 0301 	mvn.w	r3, #1
 800e03a:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 800e03c:	68fb      	ldr	r3, [r7, #12]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3714      	adds	r7, #20
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr

0800e04a <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 800e04a:	b480      	push	{r7}
 800e04c:	b085      	sub	sp, #20
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	689a      	ldr	r2, [r3, #8]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d103      	bne.n	800e078 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	609a      	str	r2, [r3, #8]
	return byData;
 800e078:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3714      	adds	r7, #20
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr
	...

0800e088 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e088:	b580      	push	{r7, lr}
 800e08a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800e08c:	4b05      	ldr	r3, [pc, #20]	; (800e0a4 <SysTick_Handler+0x1c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e090:	f000 f98a 	bl	800e3a8 <xTaskGetSchedulerState>
 800e094:	4603      	mov	r3, r0
 800e096:	2b01      	cmp	r3, #1
 800e098:	d001      	beq.n	800e09e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e09a:	f000 f9a3 	bl	800e3e4 <xPortSysTickHandler>
  }
}
 800e09e:	bf00      	nop
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	e000e010 	.word	0xe000e010

0800e0a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b088      	sub	sp, #32
 800e0ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0b2:	4b7a      	ldr	r3, [pc, #488]	; (800e29c <xTaskIncrementTick+0x1f4>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f040 80e5 	bne.w	800e286 <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e0bc:	4b78      	ldr	r3, [pc, #480]	; (800e2a0 <xTaskIncrementTick+0x1f8>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800e0c4:	4a76      	ldr	r2, [pc, #472]	; (800e2a0 <xTaskIncrementTick+0x1f8>)
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d118      	bne.n	800e102 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800e0d0:	4b74      	ldr	r3, [pc, #464]	; (800e2a4 <xTaskIncrementTick+0x1fc>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d002      	beq.n	800e0e0 <xTaskIncrementTick+0x38>
 800e0da:	f000 f9d5 	bl	800e488 <ulSetInterruptMask>
 800e0de:	e7fe      	b.n	800e0de <xTaskIncrementTick+0x36>
 800e0e0:	4b70      	ldr	r3, [pc, #448]	; (800e2a4 <xTaskIncrementTick+0x1fc>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	617b      	str	r3, [r7, #20]
 800e0e6:	4b70      	ldr	r3, [pc, #448]	; (800e2a8 <xTaskIncrementTick+0x200>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a6e      	ldr	r2, [pc, #440]	; (800e2a4 <xTaskIncrementTick+0x1fc>)
 800e0ec:	6013      	str	r3, [r2, #0]
 800e0ee:	4a6e      	ldr	r2, [pc, #440]	; (800e2a8 <xTaskIncrementTick+0x200>)
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	6013      	str	r3, [r2, #0]
 800e0f4:	4b6d      	ldr	r3, [pc, #436]	; (800e2ac <xTaskIncrementTick+0x204>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	4a6c      	ldr	r2, [pc, #432]	; (800e2ac <xTaskIncrementTick+0x204>)
 800e0fc:	6013      	str	r3, [r2, #0]
 800e0fe:	f000 f937 	bl	800e370 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800e102:	4b6b      	ldr	r3, [pc, #428]	; (800e2b0 <xTaskIncrementTick+0x208>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	69ba      	ldr	r2, [r7, #24]
 800e108:	429a      	cmp	r2, r3
 800e10a:	f0c0 80a7 	bcc.w	800e25c <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e10e:	4b65      	ldr	r3, [pc, #404]	; (800e2a4 <xTaskIncrementTick+0x1fc>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d104      	bne.n	800e122 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e118:	4b65      	ldr	r3, [pc, #404]	; (800e2b0 <xTaskIncrementTick+0x208>)
 800e11a:	f04f 32ff 	mov.w	r2, #4294967295
 800e11e:	601a      	str	r2, [r3, #0]
                    break;
 800e120:	e09c      	b.n	800e25c <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e122:	4b60      	ldr	r3, [pc, #384]	; (800e2a4 <xTaskIncrementTick+0x1fc>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800e132:	69ba      	ldr	r2, [r7, #24]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	429a      	cmp	r2, r3
 800e138:	d203      	bcs.n	800e142 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800e13a:	4a5d      	ldr	r2, [pc, #372]	; (800e2b0 <xTaskIncrementTick+0x208>)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800e140:	e08c      	b.n	800e25c <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	695b      	ldr	r3, [r3, #20]
 800e146:	60bb      	str	r3, [r7, #8]
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	693a      	ldr	r2, [r7, #16]
 800e14e:	68d2      	ldr	r2, [r2, #12]
 800e150:	609a      	str	r2, [r3, #8]
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	6892      	ldr	r2, [r2, #8]
 800e15a:	605a      	str	r2, [r3, #4]
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	685a      	ldr	r2, [r3, #4]
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	3304      	adds	r3, #4
 800e164:	429a      	cmp	r2, r3
 800e166:	d103      	bne.n	800e170 <xTaskIncrementTick+0xc8>
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	68da      	ldr	r2, [r3, #12]
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	605a      	str	r2, [r3, #4]
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	2200      	movs	r2, #0
 800e174:	615a      	str	r2, [r3, #20]
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	1e5a      	subs	r2, r3, #1
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e184:	2b00      	cmp	r3, #0
 800e186:	d01e      	beq.n	800e1c6 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e18c:	607b      	str	r3, [r7, #4]
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	69db      	ldr	r3, [r3, #28]
 800e192:	693a      	ldr	r2, [r7, #16]
 800e194:	6a12      	ldr	r2, [r2, #32]
 800e196:	609a      	str	r2, [r3, #8]
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	6a1b      	ldr	r3, [r3, #32]
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	69d2      	ldr	r2, [r2, #28]
 800e1a0:	605a      	str	r2, [r3, #4]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	685a      	ldr	r2, [r3, #4]
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	3318      	adds	r3, #24
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d103      	bne.n	800e1b6 <xTaskIncrementTick+0x10e>
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	6a1a      	ldr	r2, [r3, #32]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	605a      	str	r2, [r3, #4]
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	629a      	str	r2, [r3, #40]	; 0x28
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	1e5a      	subs	r2, r3, #1
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ca:	4b3a      	ldr	r3, [pc, #232]	; (800e2b4 <xTaskIncrementTick+0x20c>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d903      	bls.n	800e1da <xTaskIncrementTick+0x132>
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d6:	4a37      	ldr	r2, [pc, #220]	; (800e2b4 <xTaskIncrementTick+0x20c>)
 800e1d8:	6013      	str	r3, [r2, #0]
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1de:	4936      	ldr	r1, [pc, #216]	; (800e2b8 <xTaskIncrementTick+0x210>)
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	440b      	add	r3, r1
 800e1ea:	3304      	adds	r3, #4
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	609a      	str	r2, [r3, #8]
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	689a      	ldr	r2, [r3, #8]
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	60da      	str	r2, [r3, #12]
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	693a      	ldr	r2, [r7, #16]
 800e204:	3204      	adds	r2, #4
 800e206:	605a      	str	r2, [r3, #4]
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	1d1a      	adds	r2, r3, #4
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	609a      	str	r2, [r3, #8]
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e214:	4613      	mov	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4413      	add	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4a26      	ldr	r2, [pc, #152]	; (800e2b8 <xTaskIncrementTick+0x210>)
 800e21e:	441a      	add	r2, r3
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	615a      	str	r2, [r3, #20]
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e228:	4923      	ldr	r1, [pc, #140]	; (800e2b8 <xTaskIncrementTick+0x210>)
 800e22a:	4613      	mov	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4413      	add	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	440b      	add	r3, r1
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	1c59      	adds	r1, r3, #1
 800e238:	481f      	ldr	r0, [pc, #124]	; (800e2b8 <xTaskIncrementTick+0x210>)
 800e23a:	4613      	mov	r3, r2
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	4413      	add	r3, r2
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	4403      	add	r3, r0
 800e244:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24a:	4b1c      	ldr	r3, [pc, #112]	; (800e2bc <xTaskIncrementTick+0x214>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e250:	429a      	cmp	r2, r3
 800e252:	f67f af5c 	bls.w	800e10e <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800e256:	2301      	movs	r3, #1
 800e258:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e25a:	e758      	b.n	800e10e <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e25c:	4b17      	ldr	r3, [pc, #92]	; (800e2bc <xTaskIncrementTick+0x214>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e262:	4915      	ldr	r1, [pc, #84]	; (800e2b8 <xTaskIncrementTick+0x210>)
 800e264:	4613      	mov	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	440b      	add	r3, r1
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d901      	bls.n	800e278 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800e274:	2301      	movs	r3, #1
 800e276:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800e278:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <xTaskIncrementTick+0x218>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d007      	beq.n	800e290 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800e280:	2301      	movs	r3, #1
 800e282:	61fb      	str	r3, [r7, #28]
 800e284:	e004      	b.n	800e290 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800e286:	4b0f      	ldr	r3, [pc, #60]	; (800e2c4 <xTaskIncrementTick+0x21c>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	3301      	adds	r3, #1
 800e28c:	4a0d      	ldr	r2, [pc, #52]	; (800e2c4 <xTaskIncrementTick+0x21c>)
 800e28e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800e290:	69fb      	ldr	r3, [r7, #28]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3720      	adds	r7, #32
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	200013cc 	.word	0x200013cc
 800e2a0:	200013b0 	.word	0x200013b0
 800e2a4:	200013a8 	.word	0x200013a8
 800e2a8:	200013ac 	.word	0x200013ac
 800e2ac:	200013c4 	.word	0x200013c4
 800e2b0:	200013c8 	.word	0x200013c8
 800e2b4:	200013b4 	.word	0x200013b4
 800e2b8:	20000f48 	.word	0x20000f48
 800e2bc:	20000f44 	.word	0x20000f44
 800e2c0:	200013c0 	.word	0x200013c0
 800e2c4:	200013bc 	.word	0x200013bc

0800e2c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e2ce:	4b23      	ldr	r3, [pc, #140]	; (800e35c <vTaskSwitchContext+0x94>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d003      	beq.n	800e2de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800e2d6:	4b22      	ldr	r3, [pc, #136]	; (800e360 <vTaskSwitchContext+0x98>)
 800e2d8:	2201      	movs	r2, #1
 800e2da:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800e2dc:	e039      	b.n	800e352 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800e2de:	4b20      	ldr	r3, [pc, #128]	; (800e360 <vTaskSwitchContext+0x98>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2e4:	4b1f      	ldr	r3, [pc, #124]	; (800e364 <vTaskSwitchContext+0x9c>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	607b      	str	r3, [r7, #4]
 800e2ea:	e008      	b.n	800e2fe <vTaskSwitchContext+0x36>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d102      	bne.n	800e2f8 <vTaskSwitchContext+0x30>
 800e2f2:	f000 f8c9 	bl	800e488 <ulSetInterruptMask>
 800e2f6:	e7fe      	b.n	800e2f6 <vTaskSwitchContext+0x2e>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	607b      	str	r3, [r7, #4]
 800e2fe:	491a      	ldr	r1, [pc, #104]	; (800e368 <vTaskSwitchContext+0xa0>)
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	4613      	mov	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	440b      	add	r3, r1
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d0ec      	beq.n	800e2ec <vTaskSwitchContext+0x24>
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	4613      	mov	r3, r2
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4413      	add	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4a12      	ldr	r2, [pc, #72]	; (800e368 <vTaskSwitchContext+0xa0>)
 800e31e:	4413      	add	r3, r2
 800e320:	603b      	str	r3, [r7, #0]
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	685a      	ldr	r2, [r3, #4]
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	605a      	str	r2, [r3, #4]
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	3308      	adds	r3, #8
 800e334:	429a      	cmp	r2, r3
 800e336:	d104      	bne.n	800e342 <vTaskSwitchContext+0x7a>
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	685a      	ldr	r2, [r3, #4]
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	605a      	str	r2, [r3, #4]
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	4a08      	ldr	r2, [pc, #32]	; (800e36c <vTaskSwitchContext+0xa4>)
 800e34a:	6013      	str	r3, [r2, #0]
 800e34c:	4a05      	ldr	r2, [pc, #20]	; (800e364 <vTaskSwitchContext+0x9c>)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6013      	str	r3, [r2, #0]
}
 800e352:	bf00      	nop
 800e354:	3708      	adds	r7, #8
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	200013cc 	.word	0x200013cc
 800e360:	200013c0 	.word	0x200013c0
 800e364:	200013b4 	.word	0x200013b4
 800e368:	20000f48 	.word	0x20000f48
 800e36c:	20000f44 	.word	0x20000f44

0800e370 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e370:	b480      	push	{r7}
 800e372:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e374:	4b0a      	ldr	r3, [pc, #40]	; (800e3a0 <prvResetNextTaskUnblockTime+0x30>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d104      	bne.n	800e388 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800e37e:	4b09      	ldr	r3, [pc, #36]	; (800e3a4 <prvResetNextTaskUnblockTime+0x34>)
 800e380:	f04f 32ff 	mov.w	r2, #4294967295
 800e384:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800e386:	e005      	b.n	800e394 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e388:	4b05      	ldr	r3, [pc, #20]	; (800e3a0 <prvResetNextTaskUnblockTime+0x30>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a04      	ldr	r2, [pc, #16]	; (800e3a4 <prvResetNextTaskUnblockTime+0x34>)
 800e392:	6013      	str	r3, [r2, #0]
}
 800e394:	bf00      	nop
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	200013a8 	.word	0x200013a8
 800e3a4:	200013c8 	.word	0x200013c8

0800e3a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800e3ae:	4b0b      	ldr	r3, [pc, #44]	; (800e3dc <xTaskGetSchedulerState+0x34>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d102      	bne.n	800e3bc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	607b      	str	r3, [r7, #4]
 800e3ba:	e008      	b.n	800e3ce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3bc:	4b08      	ldr	r3, [pc, #32]	; (800e3e0 <xTaskGetSchedulerState+0x38>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800e3c4:	2302      	movs	r3, #2
 800e3c6:	607b      	str	r3, [r7, #4]
 800e3c8:	e001      	b.n	800e3ce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800e3ce:	687b      	ldr	r3, [r7, #4]
    }
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr
 800e3dc:	200013b8 	.word	0x200013b8
 800e3e0:	200013cc 	.word	0x200013cc

0800e3e4 <xPortSysTickHandler>:
    }
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e3ea:	f000 f84d 	bl	800e488 <ulSetInterruptMask>
 800e3ee:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800e3f0:	f7ff fe5a 	bl	800e0a8 <xTaskIncrementTick>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d003      	beq.n	800e402 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3fa:	4b05      	ldr	r3, [pc, #20]	; (800e410 <xPortSysTickHandler+0x2c>)
 800e3fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e400:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f84d 	bl	800e4a2 <vClearInterruptMask>
}
 800e408:	bf00      	nop
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	e000ed04 	.word	0xe000ed04

0800e414 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	699b      	ldr	r3, [r3, #24]
 800e420:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	3b02      	subs	r3, #2
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800e42a:	7afb      	ldrb	r3, [r7, #11]
 800e42c:	2b02      	cmp	r3, #2
 800e42e:	d102      	bne.n	800e436 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800e430:	f000 f80e 	bl	800e450 <vRestoreContextOfFirstTask>
            break;
 800e434:	e002      	b.n	800e43c <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800e436:	f000 f827 	bl	800e488 <ulSetInterruptMask>
 800e43a:	e7fe      	b.n	800e43a <vPortSVCHandler_C+0x26>
    }
}
 800e43c:	bf00      	nop
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
	...

0800e450 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e450:	4a0b      	ldr	r2, [pc, #44]	; (800e480 <pxCurrentTCBConst2>)
 800e452:	6811      	ldr	r1, [r2, #0]
 800e454:	6808      	ldr	r0, [r1, #0]
 800e456:	c806      	ldmia	r0!, {r1, r2}
 800e458:	f381 880b 	msr	PSPLIM, r1
 800e45c:	2102      	movs	r1, #2
 800e45e:	f381 8814 	msr	CONTROL, r1
 800e462:	3020      	adds	r0, #32
 800e464:	f380 8809 	msr	PSP, r0
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f04f 0000 	mov.w	r0, #0
 800e470:	f380 8811 	msr	BASEPRI, r0
 800e474:	4710      	bx	r2
 800e476:	bf00      	nop
 800e478:	f3af 8000 	nop.w
 800e47c:	f3af 8000 	nop.w

0800e480 <pxCurrentTCBConst2>:
 800e480:	20000f44 	.word	0x20000f44
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800e484:	bf00      	nop
 800e486:	bf00      	nop

0800e488 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e488:	f3ef 8011 	mrs	r0, BASEPRI
 800e48c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800e490:	f381 8811 	msr	BASEPRI, r1
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800e49e:	bf00      	nop
 800e4a0:	4618      	mov	r0, r3

0800e4a2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e4a2:	f380 8811 	msr	BASEPRI, r0
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800e4b0:	bf00      	nop
	...

0800e4c0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e4c0:	f3ef 8009 	mrs	r0, PSP
 800e4c4:	f3ef 820b 	mrs	r2, PSPLIM
 800e4c8:	4673      	mov	r3, lr
 800e4ca:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800e4ce:	4a10      	ldr	r2, [pc, #64]	; (800e510 <pxCurrentTCBConst>)
 800e4d0:	6811      	ldr	r1, [r2, #0]
 800e4d2:	6008      	str	r0, [r1, #0]
 800e4d4:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e4d8:	f380 8811 	msr	BASEPRI, r0
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f7ff fef0 	bl	800e2c8 <vTaskSwitchContext>
 800e4e8:	f04f 0000 	mov.w	r0, #0
 800e4ec:	f380 8811 	msr	BASEPRI, r0
 800e4f0:	4a07      	ldr	r2, [pc, #28]	; (800e510 <pxCurrentTCBConst>)
 800e4f2:	6811      	ldr	r1, [r2, #0]
 800e4f4:	6808      	ldr	r0, [r1, #0]
 800e4f6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800e4fa:	f382 880b 	msr	PSPLIM, r2
 800e4fe:	f380 8809 	msr	PSP, r0
 800e502:	4718      	bx	r3
 800e504:	f3af 8000 	nop.w
 800e508:	f3af 8000 	nop.w
 800e50c:	f3af 8000 	nop.w

0800e510 <pxCurrentTCBConst>:
 800e510:	20000f44 	.word	0x20000f44
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800e514:	bf00      	nop
 800e516:	bf00      	nop
	...

0800e520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e520:	f01e 0f04 	tst.w	lr, #4
 800e524:	bf0c      	ite	eq
 800e526:	f3ef 8008 	mrseq	r0, MSP
 800e52a:	f3ef 8009 	mrsne	r0, PSP
 800e52e:	4904      	ldr	r1, [pc, #16]	; (800e540 <svchandler_address_const>)
 800e530:	4708      	bx	r1
 800e532:	bf00      	nop
 800e534:	f3af 8000 	nop.w
 800e538:	f3af 8000 	nop.w
 800e53c:	f3af 8000 	nop.w

0800e540 <svchandler_address_const>:
 800e540:	0800e415 	.word	0x0800e415
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800e544:	bf00      	nop
 800e546:	bf00      	nop

0800e548 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d005      	beq.n	800e566 <lwrb_init+0x1e>
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <lwrb_init+0x1e>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <lwrb_init+0x22>
        return 0;
 800e566:	2300      	movs	r3, #0
 800e568:	e00b      	b.n	800e582 <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 800e56a:	2214      	movs	r2, #20
 800e56c:	2100      	movs	r1, #0
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f000 fa96 	bl	800eaa0 <memset>

    buff->size = size;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	68ba      	ldr	r2, [r7, #8]
 800e57e:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 800e580:	2301      	movs	r3, #1
}
 800e582:	4618      	mov	r0, r3
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800e58a:	b480      	push	{r7}
 800e58c:	b083      	sub	sp, #12
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00a      	beq.n	800e5b0 <lwrb_set_evt_fn+0x26>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d006      	beq.n	800e5b0 <lwrb_set_evt_fn+0x26>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d002      	beq.n	800e5b0 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	683a      	ldr	r2, [r7, #0]
 800e5ae:	611a      	str	r2, [r3, #16]
    }
}
 800e5b0:	bf00      	nop
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b088      	sub	sp, #32
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00d      	beq.n	800e5ee <lwrb_write+0x32>
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d009      	beq.n	800e5ee <lwrb_write+0x32>
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d005      	beq.n	800e5ee <lwrb_write+0x32>
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d002      	beq.n	800e5ee <lwrb_write+0x32>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d101      	bne.n	800e5f2 <lwrb_write+0x36>
        return 0;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	e059      	b.n	800e6a6 <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	f000 f85b 	bl	800e6ae <lwrb_get_free>
 800e5f8:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 800e5fa:	69fa      	ldr	r2, [r7, #28]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d20d      	bcs.n	800e61e <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	691b      	ldr	r3, [r3, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d005      	beq.n	800e616 <lwrb_write+0x5a>
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	691b      	ldr	r3, [r3, #16]
 800e60e:	69fa      	ldr	r2, [r7, #28]
 800e610:	2102      	movs	r1, #2
 800e612:	68f8      	ldr	r0, [r7, #12]
 800e614:	4798      	blx	r3
			free = lwrb_get_free(buff);
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f000 f849 	bl	800e6ae <lwrb_get_free>
 800e61c:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	4293      	cmp	r3, r2
 800e624:	bf28      	it	cs
 800e626:	4613      	movcs	r3, r2
 800e628:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d101      	bne.n	800e634 <lwrb_write+0x78>
        return 0;
 800e630:	2300      	movs	r3, #0
 800e632:	e038      	b.n	800e6a6 <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	685a      	ldr	r2, [r3, #4]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	1ad3      	subs	r3, r2, r3
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	4293      	cmp	r3, r2
 800e642:	bf28      	it	cs
 800e644:	4613      	movcs	r3, r2
 800e646:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	4413      	add	r3, r2
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	69b9      	ldr	r1, [r7, #24]
 800e656:	4618      	mov	r0, r3
 800e658:	f000 fa7a 	bl	800eb50 <memcpy>
    buff->w += tocopy;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	68da      	ldr	r2, [r3, #12]
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	441a      	add	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d00b      	beq.n	800e68e <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	6818      	ldr	r0, [r3, #0]
 800e67a:	69ba      	ldr	r2, [r7, #24]
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	4413      	add	r3, r2
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	4619      	mov	r1, r3
 800e684:	f000 fa64 	bl	800eb50 <memcpy>
        buff->w = btw;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	68da      	ldr	r2, [r3, #12]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	429a      	cmp	r2, r3
 800e698:	d302      	bcc.n	800e6a0 <lwrb_write+0xe4>
        buff->w = 0;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 800e6a0:	697a      	ldr	r2, [r7, #20]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4413      	add	r3, r2
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3720      	adds	r7, #32
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 800e6ae:	b480      	push	{r7}
 800e6b0:	b087      	sub	sp, #28
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d007      	beq.n	800e6cc <lwrb_get_free+0x1e>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d003      	beq.n	800e6cc <lwrb_get_free+0x1e>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d101      	bne.n	800e6d0 <lwrb_get_free+0x22>
        return 0;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	e01f      	b.n	800e710 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800e6dc:	693a      	ldr	r2, [r7, #16]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d103      	bne.n	800e6ec <lwrb_get_free+0x3e>
        size = buff->size;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	e00f      	b.n	800e70c <lwrb_get_free+0x5e>
    } else if (r > w) {
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d904      	bls.n	800e6fe <lwrb_get_free+0x50>
        size = r - w;
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	617b      	str	r3, [r7, #20]
 800e6fc:	e006      	b.n	800e70c <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	685a      	ldr	r2, [r3, #4]
 800e702:	68f9      	ldr	r1, [r7, #12]
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	1acb      	subs	r3, r1, r3
 800e708:	4413      	add	r3, r2
 800e70a:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	3b01      	subs	r3, #1
}
 800e710:	4618      	mov	r0, r3
 800e712:	371c      	adds	r7, #28
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 800e71c:	b480      	push	{r7}
 800e71e:	b087      	sub	sp, #28
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d007      	beq.n	800e73a <lwrb_get_full+0x1e>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d003      	beq.n	800e73a <lwrb_get_full+0x1e>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d101      	bne.n	800e73e <lwrb_get_full+0x22>
        return 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	e01d      	b.n	800e77a <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800e74a:	693a      	ldr	r2, [r7, #16]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d102      	bne.n	800e758 <lwrb_get_full+0x3c>
        size = 0;
 800e752:	2300      	movs	r3, #0
 800e754:	617b      	str	r3, [r7, #20]
 800e756:	e00f      	b.n	800e778 <lwrb_get_full+0x5c>
    } else if (w > r) {
 800e758:	693a      	ldr	r2, [r7, #16]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d904      	bls.n	800e76a <lwrb_get_full+0x4e>
        size = w - r;
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	617b      	str	r3, [r7, #20]
 800e768:	e006      	b.n	800e778 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	6939      	ldr	r1, [r7, #16]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	1acb      	subs	r3, r1, r3
 800e774:	4413      	add	r3, r2
 800e776:	617b      	str	r3, [r7, #20]
    }
    return size;
 800e778:	697b      	ldr	r3, [r7, #20]
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr

0800e786 <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 800e786:	b480      	push	{r7}
 800e788:	b083      	sub	sp, #12
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d007      	beq.n	800e7a4 <lwrb_get_linear_block_read_address+0x1e>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d003      	beq.n	800e7a4 <lwrb_get_linear_block_read_address+0x1e>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d101      	bne.n	800e7a8 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	e004      	b.n	800e7b2 <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	4413      	add	r3, r2
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr

0800e7be <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 800e7be:	b480      	push	{r7}
 800e7c0:	b087      	sub	sp, #28
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d007      	beq.n	800e7dc <lwrb_get_linear_block_read_length+0x1e>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d003      	beq.n	800e7dc <lwrb_get_linear_block_read_length+0x1e>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d101      	bne.n	800e7e0 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	e01b      	b.n	800e818 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 800e7ec:	693a      	ldr	r2, [r7, #16]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d904      	bls.n	800e7fe <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	617b      	str	r3, [r7, #20]
 800e7fc:	e00b      	b.n	800e816 <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	429a      	cmp	r2, r3
 800e804:	d905      	bls.n	800e812 <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	685a      	ldr	r2, [r3, #4]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	617b      	str	r3, [r7, #20]
 800e810:	e001      	b.n	800e816 <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 800e812:	2300      	movs	r3, #0
 800e814:	617b      	str	r3, [r7, #20]
    }
    return len;
 800e816:	697b      	ldr	r3, [r7, #20]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	371c      	adds	r7, #28
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00a      	beq.n	800e84a <lwrb_skip+0x26>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d006      	beq.n	800e84a <lwrb_skip+0x26>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d002      	beq.n	800e84a <lwrb_skip+0x26>
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d101      	bne.n	800e84e <lwrb_skip+0x2a>
        return 0;
 800e84a:	2300      	movs	r3, #0
 800e84c:	e01d      	b.n	800e88a <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f7ff ff64 	bl	800e71c <lwrb_get_full>
 800e854:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	4293      	cmp	r3, r2
 800e85c:	bf28      	it	cs
 800e85e:	4613      	movcs	r3, r2
 800e860:	603b      	str	r3, [r7, #0]
    buff->r += len;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	689a      	ldr	r2, [r3, #8]
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	441a      	add	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	689a      	ldr	r2, [r3, #8]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	429a      	cmp	r2, r3
 800e878:	d306      	bcc.n	800e888 <lwrb_skip+0x64>
        buff->r -= buff->size;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	689a      	ldr	r2, [r3, #8]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	1ad2      	subs	r2, r2, r3
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 800e888:	683b      	ldr	r3, [r7, #0]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
	...

0800e894 <sbrk_aligned>:
 800e894:	b570      	push	{r4, r5, r6, lr}
 800e896:	4e0e      	ldr	r6, [pc, #56]	; (800e8d0 <sbrk_aligned+0x3c>)
 800e898:	460c      	mov	r4, r1
 800e89a:	4605      	mov	r5, r0
 800e89c:	6831      	ldr	r1, [r6, #0]
 800e89e:	b911      	cbnz	r1, 800e8a6 <sbrk_aligned+0x12>
 800e8a0:	f000 f91a 	bl	800ead8 <_sbrk_r>
 800e8a4:	6030      	str	r0, [r6, #0]
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	f000 f915 	bl	800ead8 <_sbrk_r>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	d00a      	beq.n	800e8c8 <sbrk_aligned+0x34>
 800e8b2:	1cc4      	adds	r4, r0, #3
 800e8b4:	f024 0403 	bic.w	r4, r4, #3
 800e8b8:	42a0      	cmp	r0, r4
 800e8ba:	d007      	beq.n	800e8cc <sbrk_aligned+0x38>
 800e8bc:	1a21      	subs	r1, r4, r0
 800e8be:	4628      	mov	r0, r5
 800e8c0:	f000 f90a 	bl	800ead8 <_sbrk_r>
 800e8c4:	3001      	adds	r0, #1
 800e8c6:	d101      	bne.n	800e8cc <sbrk_aligned+0x38>
 800e8c8:	f04f 34ff 	mov.w	r4, #4294967295
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}
 800e8d0:	200013d4 	.word	0x200013d4

0800e8d4 <_malloc_r>:
 800e8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8d8:	1ccd      	adds	r5, r1, #3
 800e8da:	4607      	mov	r7, r0
 800e8dc:	f025 0503 	bic.w	r5, r5, #3
 800e8e0:	3508      	adds	r5, #8
 800e8e2:	2d0c      	cmp	r5, #12
 800e8e4:	bf38      	it	cc
 800e8e6:	250c      	movcc	r5, #12
 800e8e8:	2d00      	cmp	r5, #0
 800e8ea:	db01      	blt.n	800e8f0 <_malloc_r+0x1c>
 800e8ec:	42a9      	cmp	r1, r5
 800e8ee:	d905      	bls.n	800e8fc <_malloc_r+0x28>
 800e8f0:	230c      	movs	r3, #12
 800e8f2:	2600      	movs	r6, #0
 800e8f4:	603b      	str	r3, [r7, #0]
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e9d0 <_malloc_r+0xfc>
 800e900:	f000 f868 	bl	800e9d4 <__malloc_lock>
 800e904:	f8d8 3000 	ldr.w	r3, [r8]
 800e908:	461c      	mov	r4, r3
 800e90a:	bb5c      	cbnz	r4, 800e964 <_malloc_r+0x90>
 800e90c:	4629      	mov	r1, r5
 800e90e:	4638      	mov	r0, r7
 800e910:	f7ff ffc0 	bl	800e894 <sbrk_aligned>
 800e914:	1c43      	adds	r3, r0, #1
 800e916:	4604      	mov	r4, r0
 800e918:	d155      	bne.n	800e9c6 <_malloc_r+0xf2>
 800e91a:	f8d8 4000 	ldr.w	r4, [r8]
 800e91e:	4626      	mov	r6, r4
 800e920:	2e00      	cmp	r6, #0
 800e922:	d145      	bne.n	800e9b0 <_malloc_r+0xdc>
 800e924:	2c00      	cmp	r4, #0
 800e926:	d048      	beq.n	800e9ba <_malloc_r+0xe6>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	4631      	mov	r1, r6
 800e92c:	4638      	mov	r0, r7
 800e92e:	eb04 0903 	add.w	r9, r4, r3
 800e932:	f000 f8d1 	bl	800ead8 <_sbrk_r>
 800e936:	4581      	cmp	r9, r0
 800e938:	d13f      	bne.n	800e9ba <_malloc_r+0xe6>
 800e93a:	6821      	ldr	r1, [r4, #0]
 800e93c:	4638      	mov	r0, r7
 800e93e:	1a6d      	subs	r5, r5, r1
 800e940:	4629      	mov	r1, r5
 800e942:	f7ff ffa7 	bl	800e894 <sbrk_aligned>
 800e946:	3001      	adds	r0, #1
 800e948:	d037      	beq.n	800e9ba <_malloc_r+0xe6>
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	442b      	add	r3, r5
 800e94e:	6023      	str	r3, [r4, #0]
 800e950:	f8d8 3000 	ldr.w	r3, [r8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d038      	beq.n	800e9ca <_malloc_r+0xf6>
 800e958:	685a      	ldr	r2, [r3, #4]
 800e95a:	42a2      	cmp	r2, r4
 800e95c:	d12b      	bne.n	800e9b6 <_malloc_r+0xe2>
 800e95e:	2200      	movs	r2, #0
 800e960:	605a      	str	r2, [r3, #4]
 800e962:	e00f      	b.n	800e984 <_malloc_r+0xb0>
 800e964:	6822      	ldr	r2, [r4, #0]
 800e966:	1b52      	subs	r2, r2, r5
 800e968:	d41f      	bmi.n	800e9aa <_malloc_r+0xd6>
 800e96a:	2a0b      	cmp	r2, #11
 800e96c:	d917      	bls.n	800e99e <_malloc_r+0xca>
 800e96e:	1961      	adds	r1, r4, r5
 800e970:	42a3      	cmp	r3, r4
 800e972:	6025      	str	r5, [r4, #0]
 800e974:	bf18      	it	ne
 800e976:	6059      	strne	r1, [r3, #4]
 800e978:	6863      	ldr	r3, [r4, #4]
 800e97a:	bf08      	it	eq
 800e97c:	f8c8 1000 	streq.w	r1, [r8]
 800e980:	5162      	str	r2, [r4, r5]
 800e982:	604b      	str	r3, [r1, #4]
 800e984:	f104 060b 	add.w	r6, r4, #11
 800e988:	4638      	mov	r0, r7
 800e98a:	f000 f829 	bl	800e9e0 <__malloc_unlock>
 800e98e:	1d23      	adds	r3, r4, #4
 800e990:	f026 0607 	bic.w	r6, r6, #7
 800e994:	1af2      	subs	r2, r6, r3
 800e996:	d0ae      	beq.n	800e8f6 <_malloc_r+0x22>
 800e998:	1b9b      	subs	r3, r3, r6
 800e99a:	50a3      	str	r3, [r4, r2]
 800e99c:	e7ab      	b.n	800e8f6 <_malloc_r+0x22>
 800e99e:	42a3      	cmp	r3, r4
 800e9a0:	6862      	ldr	r2, [r4, #4]
 800e9a2:	d1dd      	bne.n	800e960 <_malloc_r+0x8c>
 800e9a4:	f8c8 2000 	str.w	r2, [r8]
 800e9a8:	e7ec      	b.n	800e984 <_malloc_r+0xb0>
 800e9aa:	4623      	mov	r3, r4
 800e9ac:	6864      	ldr	r4, [r4, #4]
 800e9ae:	e7ac      	b.n	800e90a <_malloc_r+0x36>
 800e9b0:	4634      	mov	r4, r6
 800e9b2:	6876      	ldr	r6, [r6, #4]
 800e9b4:	e7b4      	b.n	800e920 <_malloc_r+0x4c>
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	e7cc      	b.n	800e954 <_malloc_r+0x80>
 800e9ba:	230c      	movs	r3, #12
 800e9bc:	4638      	mov	r0, r7
 800e9be:	603b      	str	r3, [r7, #0]
 800e9c0:	f000 f80e 	bl	800e9e0 <__malloc_unlock>
 800e9c4:	e797      	b.n	800e8f6 <_malloc_r+0x22>
 800e9c6:	6025      	str	r5, [r4, #0]
 800e9c8:	e7dc      	b.n	800e984 <_malloc_r+0xb0>
 800e9ca:	605b      	str	r3, [r3, #4]
 800e9cc:	deff      	udf	#255	; 0xff
 800e9ce:	bf00      	nop
 800e9d0:	200013d0 	.word	0x200013d0

0800e9d4 <__malloc_lock>:
 800e9d4:	4801      	ldr	r0, [pc, #4]	; (800e9dc <__malloc_lock+0x8>)
 800e9d6:	f000 b8b9 	b.w	800eb4c <__retarget_lock_acquire_recursive>
 800e9da:	bf00      	nop
 800e9dc:	20001514 	.word	0x20001514

0800e9e0 <__malloc_unlock>:
 800e9e0:	4801      	ldr	r0, [pc, #4]	; (800e9e8 <__malloc_unlock+0x8>)
 800e9e2:	f000 b8b4 	b.w	800eb4e <__retarget_lock_release_recursive>
 800e9e6:	bf00      	nop
 800e9e8:	20001514 	.word	0x20001514

0800e9ec <_vsniprintf_r>:
 800e9ec:	b530      	push	{r4, r5, lr}
 800e9ee:	4614      	mov	r4, r2
 800e9f0:	b09b      	sub	sp, #108	; 0x6c
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	2c00      	cmp	r4, #0
 800e9f8:	da05      	bge.n	800ea06 <_vsniprintf_r+0x1a>
 800e9fa:	238b      	movs	r3, #139	; 0x8b
 800e9fc:	6003      	str	r3, [r0, #0]
 800e9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ea02:	b01b      	add	sp, #108	; 0x6c
 800ea04:	bd30      	pop	{r4, r5, pc}
 800ea06:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ea0a:	9100      	str	r1, [sp, #0]
 800ea0c:	9104      	str	r1, [sp, #16]
 800ea0e:	4669      	mov	r1, sp
 800ea10:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ea14:	bf14      	ite	ne
 800ea16:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea1a:	4623      	moveq	r3, r4
 800ea1c:	9302      	str	r3, [sp, #8]
 800ea1e:	9305      	str	r3, [sp, #20]
 800ea20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea24:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ea28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ea2a:	f000 f945 	bl	800ecb8 <_svfiprintf_r>
 800ea2e:	1c43      	adds	r3, r0, #1
 800ea30:	bfbc      	itt	lt
 800ea32:	238b      	movlt	r3, #139	; 0x8b
 800ea34:	602b      	strlt	r3, [r5, #0]
 800ea36:	2c00      	cmp	r4, #0
 800ea38:	d0e3      	beq.n	800ea02 <_vsniprintf_r+0x16>
 800ea3a:	9b00      	ldr	r3, [sp, #0]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	701a      	strb	r2, [r3, #0]
 800ea40:	e7df      	b.n	800ea02 <_vsniprintf_r+0x16>
	...

0800ea44 <vsniprintf>:
 800ea44:	b507      	push	{r0, r1, r2, lr}
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	460a      	mov	r2, r1
 800ea4c:	4601      	mov	r1, r0
 800ea4e:	4803      	ldr	r0, [pc, #12]	; (800ea5c <vsniprintf+0x18>)
 800ea50:	6800      	ldr	r0, [r0, #0]
 800ea52:	f7ff ffcb 	bl	800e9ec <_vsniprintf_r>
 800ea56:	b003      	add	sp, #12
 800ea58:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea5c:	200000b0 	.word	0x200000b0

0800ea60 <_vsiprintf_r>:
 800ea60:	b500      	push	{lr}
 800ea62:	b09b      	sub	sp, #108	; 0x6c
 800ea64:	9100      	str	r1, [sp, #0]
 800ea66:	9104      	str	r1, [sp, #16]
 800ea68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea6c:	9105      	str	r1, [sp, #20]
 800ea6e:	9102      	str	r1, [sp, #8]
 800ea70:	4905      	ldr	r1, [pc, #20]	; (800ea88 <_vsiprintf_r+0x28>)
 800ea72:	9103      	str	r1, [sp, #12]
 800ea74:	4669      	mov	r1, sp
 800ea76:	f000 f91f 	bl	800ecb8 <_svfiprintf_r>
 800ea7a:	9b00      	ldr	r3, [sp, #0]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	701a      	strb	r2, [r3, #0]
 800ea80:	b01b      	add	sp, #108	; 0x6c
 800ea82:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea86:	bf00      	nop
 800ea88:	ffff0208 	.word	0xffff0208

0800ea8c <vsiprintf>:
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	460a      	mov	r2, r1
 800ea90:	4601      	mov	r1, r0
 800ea92:	4802      	ldr	r0, [pc, #8]	; (800ea9c <vsiprintf+0x10>)
 800ea94:	6800      	ldr	r0, [r0, #0]
 800ea96:	f7ff bfe3 	b.w	800ea60 <_vsiprintf_r>
 800ea9a:	bf00      	nop
 800ea9c:	200000b0 	.word	0x200000b0

0800eaa0 <memset>:
 800eaa0:	4402      	add	r2, r0
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d100      	bne.n	800eaaa <memset+0xa>
 800eaa8:	4770      	bx	lr
 800eaaa:	f803 1b01 	strb.w	r1, [r3], #1
 800eaae:	e7f9      	b.n	800eaa4 <memset+0x4>

0800eab0 <strncpy>:
 800eab0:	3901      	subs	r1, #1
 800eab2:	4603      	mov	r3, r0
 800eab4:	b510      	push	{r4, lr}
 800eab6:	b132      	cbz	r2, 800eac6 <strncpy+0x16>
 800eab8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eabc:	3a01      	subs	r2, #1
 800eabe:	f803 4b01 	strb.w	r4, [r3], #1
 800eac2:	2c00      	cmp	r4, #0
 800eac4:	d1f7      	bne.n	800eab6 <strncpy+0x6>
 800eac6:	441a      	add	r2, r3
 800eac8:	2100      	movs	r1, #0
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d100      	bne.n	800ead0 <strncpy+0x20>
 800eace:	bd10      	pop	{r4, pc}
 800ead0:	f803 1b01 	strb.w	r1, [r3], #1
 800ead4:	e7f9      	b.n	800eaca <strncpy+0x1a>
	...

0800ead8 <_sbrk_r>:
 800ead8:	b538      	push	{r3, r4, r5, lr}
 800eada:	2300      	movs	r3, #0
 800eadc:	4d05      	ldr	r5, [pc, #20]	; (800eaf4 <_sbrk_r+0x1c>)
 800eade:	4604      	mov	r4, r0
 800eae0:	4608      	mov	r0, r1
 800eae2:	602b      	str	r3, [r5, #0]
 800eae4:	f7f2 fa54 	bl	8000f90 <_sbrk>
 800eae8:	1c43      	adds	r3, r0, #1
 800eaea:	d102      	bne.n	800eaf2 <_sbrk_r+0x1a>
 800eaec:	682b      	ldr	r3, [r5, #0]
 800eaee:	b103      	cbz	r3, 800eaf2 <_sbrk_r+0x1a>
 800eaf0:	6023      	str	r3, [r4, #0]
 800eaf2:	bd38      	pop	{r3, r4, r5, pc}
 800eaf4:	20001510 	.word	0x20001510

0800eaf8 <__errno>:
 800eaf8:	4b01      	ldr	r3, [pc, #4]	; (800eb00 <__errno+0x8>)
 800eafa:	6818      	ldr	r0, [r3, #0]
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	200000b0 	.word	0x200000b0

0800eb04 <__libc_init_array>:
 800eb04:	b570      	push	{r4, r5, r6, lr}
 800eb06:	4d0d      	ldr	r5, [pc, #52]	; (800eb3c <__libc_init_array+0x38>)
 800eb08:	2600      	movs	r6, #0
 800eb0a:	4c0d      	ldr	r4, [pc, #52]	; (800eb40 <__libc_init_array+0x3c>)
 800eb0c:	1b64      	subs	r4, r4, r5
 800eb0e:	10a4      	asrs	r4, r4, #2
 800eb10:	42a6      	cmp	r6, r4
 800eb12:	d109      	bne.n	800eb28 <__libc_init_array+0x24>
 800eb14:	4d0b      	ldr	r5, [pc, #44]	; (800eb44 <__libc_init_array+0x40>)
 800eb16:	2600      	movs	r6, #0
 800eb18:	4c0b      	ldr	r4, [pc, #44]	; (800eb48 <__libc_init_array+0x44>)
 800eb1a:	f000 fbbd 	bl	800f298 <_init>
 800eb1e:	1b64      	subs	r4, r4, r5
 800eb20:	10a4      	asrs	r4, r4, #2
 800eb22:	42a6      	cmp	r6, r4
 800eb24:	d105      	bne.n	800eb32 <__libc_init_array+0x2e>
 800eb26:	bd70      	pop	{r4, r5, r6, pc}
 800eb28:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb2c:	3601      	adds	r6, #1
 800eb2e:	4798      	blx	r3
 800eb30:	e7ee      	b.n	800eb10 <__libc_init_array+0xc>
 800eb32:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb36:	3601      	adds	r6, #1
 800eb38:	4798      	blx	r3
 800eb3a:	e7f2      	b.n	800eb22 <__libc_init_array+0x1e>
 800eb3c:	0800f884 	.word	0x0800f884
 800eb40:	0800f884 	.word	0x0800f884
 800eb44:	0800f884 	.word	0x0800f884
 800eb48:	0800f888 	.word	0x0800f888

0800eb4c <__retarget_lock_acquire_recursive>:
 800eb4c:	4770      	bx	lr

0800eb4e <__retarget_lock_release_recursive>:
 800eb4e:	4770      	bx	lr

0800eb50 <memcpy>:
 800eb50:	440a      	add	r2, r1
 800eb52:	1e43      	subs	r3, r0, #1
 800eb54:	4291      	cmp	r1, r2
 800eb56:	d100      	bne.n	800eb5a <memcpy+0xa>
 800eb58:	4770      	bx	lr
 800eb5a:	b510      	push	{r4, lr}
 800eb5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb60:	4291      	cmp	r1, r2
 800eb62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb66:	d1f9      	bne.n	800eb5c <memcpy+0xc>
 800eb68:	bd10      	pop	{r4, pc}
	...

0800eb6c <_free_r>:
 800eb6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb6e:	2900      	cmp	r1, #0
 800eb70:	d043      	beq.n	800ebfa <_free_r+0x8e>
 800eb72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb76:	1f0c      	subs	r4, r1, #4
 800eb78:	9001      	str	r0, [sp, #4]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bfb8      	it	lt
 800eb7e:	18e4      	addlt	r4, r4, r3
 800eb80:	f7ff ff28 	bl	800e9d4 <__malloc_lock>
 800eb84:	4a1e      	ldr	r2, [pc, #120]	; (800ec00 <_free_r+0x94>)
 800eb86:	9801      	ldr	r0, [sp, #4]
 800eb88:	6813      	ldr	r3, [r2, #0]
 800eb8a:	b933      	cbnz	r3, 800eb9a <_free_r+0x2e>
 800eb8c:	6063      	str	r3, [r4, #4]
 800eb8e:	6014      	str	r4, [r2, #0]
 800eb90:	b003      	add	sp, #12
 800eb92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb96:	f7ff bf23 	b.w	800e9e0 <__malloc_unlock>
 800eb9a:	42a3      	cmp	r3, r4
 800eb9c:	d908      	bls.n	800ebb0 <_free_r+0x44>
 800eb9e:	6825      	ldr	r5, [r4, #0]
 800eba0:	1961      	adds	r1, r4, r5
 800eba2:	428b      	cmp	r3, r1
 800eba4:	bf01      	itttt	eq
 800eba6:	6819      	ldreq	r1, [r3, #0]
 800eba8:	685b      	ldreq	r3, [r3, #4]
 800ebaa:	1949      	addeq	r1, r1, r5
 800ebac:	6021      	streq	r1, [r4, #0]
 800ebae:	e7ed      	b.n	800eb8c <_free_r+0x20>
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	b10b      	cbz	r3, 800ebba <_free_r+0x4e>
 800ebb6:	42a3      	cmp	r3, r4
 800ebb8:	d9fa      	bls.n	800ebb0 <_free_r+0x44>
 800ebba:	6811      	ldr	r1, [r2, #0]
 800ebbc:	1855      	adds	r5, r2, r1
 800ebbe:	42a5      	cmp	r5, r4
 800ebc0:	d10b      	bne.n	800ebda <_free_r+0x6e>
 800ebc2:	6824      	ldr	r4, [r4, #0]
 800ebc4:	4421      	add	r1, r4
 800ebc6:	1854      	adds	r4, r2, r1
 800ebc8:	6011      	str	r1, [r2, #0]
 800ebca:	42a3      	cmp	r3, r4
 800ebcc:	d1e0      	bne.n	800eb90 <_free_r+0x24>
 800ebce:	681c      	ldr	r4, [r3, #0]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	440c      	add	r4, r1
 800ebd4:	6053      	str	r3, [r2, #4]
 800ebd6:	6014      	str	r4, [r2, #0]
 800ebd8:	e7da      	b.n	800eb90 <_free_r+0x24>
 800ebda:	d902      	bls.n	800ebe2 <_free_r+0x76>
 800ebdc:	230c      	movs	r3, #12
 800ebde:	6003      	str	r3, [r0, #0]
 800ebe0:	e7d6      	b.n	800eb90 <_free_r+0x24>
 800ebe2:	6825      	ldr	r5, [r4, #0]
 800ebe4:	1961      	adds	r1, r4, r5
 800ebe6:	428b      	cmp	r3, r1
 800ebe8:	bf02      	ittt	eq
 800ebea:	6819      	ldreq	r1, [r3, #0]
 800ebec:	685b      	ldreq	r3, [r3, #4]
 800ebee:	1949      	addeq	r1, r1, r5
 800ebf0:	6063      	str	r3, [r4, #4]
 800ebf2:	bf08      	it	eq
 800ebf4:	6021      	streq	r1, [r4, #0]
 800ebf6:	6054      	str	r4, [r2, #4]
 800ebf8:	e7ca      	b.n	800eb90 <_free_r+0x24>
 800ebfa:	b003      	add	sp, #12
 800ebfc:	bd30      	pop	{r4, r5, pc}
 800ebfe:	bf00      	nop
 800ec00:	200013d0 	.word	0x200013d0

0800ec04 <__ssputs_r>:
 800ec04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec08:	461f      	mov	r7, r3
 800ec0a:	688e      	ldr	r6, [r1, #8]
 800ec0c:	4682      	mov	sl, r0
 800ec0e:	460c      	mov	r4, r1
 800ec10:	42be      	cmp	r6, r7
 800ec12:	4690      	mov	r8, r2
 800ec14:	680b      	ldr	r3, [r1, #0]
 800ec16:	d82c      	bhi.n	800ec72 <__ssputs_r+0x6e>
 800ec18:	898a      	ldrh	r2, [r1, #12]
 800ec1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec1e:	d026      	beq.n	800ec6e <__ssputs_r+0x6a>
 800ec20:	6965      	ldr	r5, [r4, #20]
 800ec22:	6909      	ldr	r1, [r1, #16]
 800ec24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec28:	eba3 0901 	sub.w	r9, r3, r1
 800ec2c:	1c7b      	adds	r3, r7, #1
 800ec2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec32:	444b      	add	r3, r9
 800ec34:	106d      	asrs	r5, r5, #1
 800ec36:	429d      	cmp	r5, r3
 800ec38:	bf38      	it	cc
 800ec3a:	461d      	movcc	r5, r3
 800ec3c:	0553      	lsls	r3, r2, #21
 800ec3e:	d527      	bpl.n	800ec90 <__ssputs_r+0x8c>
 800ec40:	4629      	mov	r1, r5
 800ec42:	f7ff fe47 	bl	800e8d4 <_malloc_r>
 800ec46:	4606      	mov	r6, r0
 800ec48:	b360      	cbz	r0, 800eca4 <__ssputs_r+0xa0>
 800ec4a:	464a      	mov	r2, r9
 800ec4c:	6921      	ldr	r1, [r4, #16]
 800ec4e:	f7ff ff7f 	bl	800eb50 <memcpy>
 800ec52:	89a3      	ldrh	r3, [r4, #12]
 800ec54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	6126      	str	r6, [r4, #16]
 800ec60:	444e      	add	r6, r9
 800ec62:	6165      	str	r5, [r4, #20]
 800ec64:	eba5 0509 	sub.w	r5, r5, r9
 800ec68:	6026      	str	r6, [r4, #0]
 800ec6a:	463e      	mov	r6, r7
 800ec6c:	60a5      	str	r5, [r4, #8]
 800ec6e:	42be      	cmp	r6, r7
 800ec70:	d900      	bls.n	800ec74 <__ssputs_r+0x70>
 800ec72:	463e      	mov	r6, r7
 800ec74:	4632      	mov	r2, r6
 800ec76:	4641      	mov	r1, r8
 800ec78:	6820      	ldr	r0, [r4, #0]
 800ec7a:	f000 faad 	bl	800f1d8 <memmove>
 800ec7e:	68a3      	ldr	r3, [r4, #8]
 800ec80:	2000      	movs	r0, #0
 800ec82:	1b9b      	subs	r3, r3, r6
 800ec84:	60a3      	str	r3, [r4, #8]
 800ec86:	6823      	ldr	r3, [r4, #0]
 800ec88:	4433      	add	r3, r6
 800ec8a:	6023      	str	r3, [r4, #0]
 800ec8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec90:	462a      	mov	r2, r5
 800ec92:	f000 fac9 	bl	800f228 <_realloc_r>
 800ec96:	4606      	mov	r6, r0
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d1e0      	bne.n	800ec5e <__ssputs_r+0x5a>
 800ec9c:	6921      	ldr	r1, [r4, #16]
 800ec9e:	4650      	mov	r0, sl
 800eca0:	f7ff ff64 	bl	800eb6c <_free_r>
 800eca4:	230c      	movs	r3, #12
 800eca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecaa:	f8ca 3000 	str.w	r3, [sl]
 800ecae:	89a3      	ldrh	r3, [r4, #12]
 800ecb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecb4:	81a3      	strh	r3, [r4, #12]
 800ecb6:	e7e9      	b.n	800ec8c <__ssputs_r+0x88>

0800ecb8 <_svfiprintf_r>:
 800ecb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecbc:	4698      	mov	r8, r3
 800ecbe:	898b      	ldrh	r3, [r1, #12]
 800ecc0:	b09d      	sub	sp, #116	; 0x74
 800ecc2:	4607      	mov	r7, r0
 800ecc4:	061b      	lsls	r3, r3, #24
 800ecc6:	460d      	mov	r5, r1
 800ecc8:	4614      	mov	r4, r2
 800ecca:	d50e      	bpl.n	800ecea <_svfiprintf_r+0x32>
 800eccc:	690b      	ldr	r3, [r1, #16]
 800ecce:	b963      	cbnz	r3, 800ecea <_svfiprintf_r+0x32>
 800ecd0:	2140      	movs	r1, #64	; 0x40
 800ecd2:	f7ff fdff 	bl	800e8d4 <_malloc_r>
 800ecd6:	6028      	str	r0, [r5, #0]
 800ecd8:	6128      	str	r0, [r5, #16]
 800ecda:	b920      	cbnz	r0, 800ece6 <_svfiprintf_r+0x2e>
 800ecdc:	230c      	movs	r3, #12
 800ecde:	603b      	str	r3, [r7, #0]
 800ece0:	f04f 30ff 	mov.w	r0, #4294967295
 800ece4:	e0d0      	b.n	800ee88 <_svfiprintf_r+0x1d0>
 800ece6:	2340      	movs	r3, #64	; 0x40
 800ece8:	616b      	str	r3, [r5, #20]
 800ecea:	2300      	movs	r3, #0
 800ecec:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecf0:	f04f 0901 	mov.w	r9, #1
 800ecf4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eea0 <_svfiprintf_r+0x1e8>
 800ecf8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecfa:	2320      	movs	r3, #32
 800ecfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed00:	2330      	movs	r3, #48	; 0x30
 800ed02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed06:	4623      	mov	r3, r4
 800ed08:	469a      	mov	sl, r3
 800ed0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed0e:	b10a      	cbz	r2, 800ed14 <_svfiprintf_r+0x5c>
 800ed10:	2a25      	cmp	r2, #37	; 0x25
 800ed12:	d1f9      	bne.n	800ed08 <_svfiprintf_r+0x50>
 800ed14:	ebba 0b04 	subs.w	fp, sl, r4
 800ed18:	d00b      	beq.n	800ed32 <_svfiprintf_r+0x7a>
 800ed1a:	465b      	mov	r3, fp
 800ed1c:	4622      	mov	r2, r4
 800ed1e:	4629      	mov	r1, r5
 800ed20:	4638      	mov	r0, r7
 800ed22:	f7ff ff6f 	bl	800ec04 <__ssputs_r>
 800ed26:	3001      	adds	r0, #1
 800ed28:	f000 80a9 	beq.w	800ee7e <_svfiprintf_r+0x1c6>
 800ed2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed2e:	445a      	add	r2, fp
 800ed30:	9209      	str	r2, [sp, #36]	; 0x24
 800ed32:	f89a 3000 	ldrb.w	r3, [sl]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	f000 80a1 	beq.w	800ee7e <_svfiprintf_r+0x1c6>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed42:	f10a 0a01 	add.w	sl, sl, #1
 800ed46:	9304      	str	r3, [sp, #16]
 800ed48:	9307      	str	r3, [sp, #28]
 800ed4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed4e:	931a      	str	r3, [sp, #104]	; 0x68
 800ed50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed54:	4654      	mov	r4, sl
 800ed56:	2205      	movs	r2, #5
 800ed58:	4851      	ldr	r0, [pc, #324]	; (800eea0 <_svfiprintf_r+0x1e8>)
 800ed5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed5e:	f000 fa55 	bl	800f20c <memchr>
 800ed62:	9a04      	ldr	r2, [sp, #16]
 800ed64:	b9d8      	cbnz	r0, 800ed9e <_svfiprintf_r+0xe6>
 800ed66:	06d0      	lsls	r0, r2, #27
 800ed68:	bf44      	itt	mi
 800ed6a:	2320      	movmi	r3, #32
 800ed6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed70:	0711      	lsls	r1, r2, #28
 800ed72:	bf44      	itt	mi
 800ed74:	232b      	movmi	r3, #43	; 0x2b
 800ed76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ed80:	d015      	beq.n	800edae <_svfiprintf_r+0xf6>
 800ed82:	9a07      	ldr	r2, [sp, #28]
 800ed84:	4654      	mov	r4, sl
 800ed86:	2000      	movs	r0, #0
 800ed88:	f04f 0c0a 	mov.w	ip, #10
 800ed8c:	4621      	mov	r1, r4
 800ed8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed92:	3b30      	subs	r3, #48	; 0x30
 800ed94:	2b09      	cmp	r3, #9
 800ed96:	d94d      	bls.n	800ee34 <_svfiprintf_r+0x17c>
 800ed98:	b1b0      	cbz	r0, 800edc8 <_svfiprintf_r+0x110>
 800ed9a:	9207      	str	r2, [sp, #28]
 800ed9c:	e014      	b.n	800edc8 <_svfiprintf_r+0x110>
 800ed9e:	eba0 0308 	sub.w	r3, r0, r8
 800eda2:	46a2      	mov	sl, r4
 800eda4:	fa09 f303 	lsl.w	r3, r9, r3
 800eda8:	4313      	orrs	r3, r2
 800edaa:	9304      	str	r3, [sp, #16]
 800edac:	e7d2      	b.n	800ed54 <_svfiprintf_r+0x9c>
 800edae:	9b03      	ldr	r3, [sp, #12]
 800edb0:	1d19      	adds	r1, r3, #4
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	9103      	str	r1, [sp, #12]
 800edb8:	bfbb      	ittet	lt
 800edba:	425b      	neglt	r3, r3
 800edbc:	f042 0202 	orrlt.w	r2, r2, #2
 800edc0:	9307      	strge	r3, [sp, #28]
 800edc2:	9307      	strlt	r3, [sp, #28]
 800edc4:	bfb8      	it	lt
 800edc6:	9204      	strlt	r2, [sp, #16]
 800edc8:	7823      	ldrb	r3, [r4, #0]
 800edca:	2b2e      	cmp	r3, #46	; 0x2e
 800edcc:	d10c      	bne.n	800ede8 <_svfiprintf_r+0x130>
 800edce:	7863      	ldrb	r3, [r4, #1]
 800edd0:	2b2a      	cmp	r3, #42	; 0x2a
 800edd2:	d134      	bne.n	800ee3e <_svfiprintf_r+0x186>
 800edd4:	9b03      	ldr	r3, [sp, #12]
 800edd6:	3402      	adds	r4, #2
 800edd8:	1d1a      	adds	r2, r3, #4
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	9203      	str	r2, [sp, #12]
 800ede0:	bfb8      	it	lt
 800ede2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ede6:	9305      	str	r3, [sp, #20]
 800ede8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eeb0 <_svfiprintf_r+0x1f8>
 800edec:	2203      	movs	r2, #3
 800edee:	7821      	ldrb	r1, [r4, #0]
 800edf0:	4650      	mov	r0, sl
 800edf2:	f000 fa0b 	bl	800f20c <memchr>
 800edf6:	b138      	cbz	r0, 800ee08 <_svfiprintf_r+0x150>
 800edf8:	eba0 000a 	sub.w	r0, r0, sl
 800edfc:	2240      	movs	r2, #64	; 0x40
 800edfe:	9b04      	ldr	r3, [sp, #16]
 800ee00:	3401      	adds	r4, #1
 800ee02:	4082      	lsls	r2, r0
 800ee04:	4313      	orrs	r3, r2
 800ee06:	9304      	str	r3, [sp, #16]
 800ee08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee0c:	2206      	movs	r2, #6
 800ee0e:	4825      	ldr	r0, [pc, #148]	; (800eea4 <_svfiprintf_r+0x1ec>)
 800ee10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee14:	f000 f9fa 	bl	800f20c <memchr>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d038      	beq.n	800ee8e <_svfiprintf_r+0x1d6>
 800ee1c:	4b22      	ldr	r3, [pc, #136]	; (800eea8 <_svfiprintf_r+0x1f0>)
 800ee1e:	bb1b      	cbnz	r3, 800ee68 <_svfiprintf_r+0x1b0>
 800ee20:	9b03      	ldr	r3, [sp, #12]
 800ee22:	3307      	adds	r3, #7
 800ee24:	f023 0307 	bic.w	r3, r3, #7
 800ee28:	3308      	adds	r3, #8
 800ee2a:	9303      	str	r3, [sp, #12]
 800ee2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee2e:	4433      	add	r3, r6
 800ee30:	9309      	str	r3, [sp, #36]	; 0x24
 800ee32:	e768      	b.n	800ed06 <_svfiprintf_r+0x4e>
 800ee34:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee38:	460c      	mov	r4, r1
 800ee3a:	2001      	movs	r0, #1
 800ee3c:	e7a6      	b.n	800ed8c <_svfiprintf_r+0xd4>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	3401      	adds	r4, #1
 800ee42:	f04f 0c0a 	mov.w	ip, #10
 800ee46:	4619      	mov	r1, r3
 800ee48:	9305      	str	r3, [sp, #20]
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee50:	3a30      	subs	r2, #48	; 0x30
 800ee52:	2a09      	cmp	r2, #9
 800ee54:	d903      	bls.n	800ee5e <_svfiprintf_r+0x1a6>
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d0c6      	beq.n	800ede8 <_svfiprintf_r+0x130>
 800ee5a:	9105      	str	r1, [sp, #20]
 800ee5c:	e7c4      	b.n	800ede8 <_svfiprintf_r+0x130>
 800ee5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee62:	4604      	mov	r4, r0
 800ee64:	2301      	movs	r3, #1
 800ee66:	e7f0      	b.n	800ee4a <_svfiprintf_r+0x192>
 800ee68:	ab03      	add	r3, sp, #12
 800ee6a:	462a      	mov	r2, r5
 800ee6c:	a904      	add	r1, sp, #16
 800ee6e:	4638      	mov	r0, r7
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	4b0e      	ldr	r3, [pc, #56]	; (800eeac <_svfiprintf_r+0x1f4>)
 800ee74:	f3af 8000 	nop.w
 800ee78:	1c42      	adds	r2, r0, #1
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	d1d6      	bne.n	800ee2c <_svfiprintf_r+0x174>
 800ee7e:	89ab      	ldrh	r3, [r5, #12]
 800ee80:	065b      	lsls	r3, r3, #25
 800ee82:	f53f af2d 	bmi.w	800ece0 <_svfiprintf_r+0x28>
 800ee86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee88:	b01d      	add	sp, #116	; 0x74
 800ee8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8e:	ab03      	add	r3, sp, #12
 800ee90:	462a      	mov	r2, r5
 800ee92:	a904      	add	r1, sp, #16
 800ee94:	4638      	mov	r0, r7
 800ee96:	9300      	str	r3, [sp, #0]
 800ee98:	4b04      	ldr	r3, [pc, #16]	; (800eeac <_svfiprintf_r+0x1f4>)
 800ee9a:	f000 f87d 	bl	800ef98 <_printf_i>
 800ee9e:	e7eb      	b.n	800ee78 <_svfiprintf_r+0x1c0>
 800eea0:	0800f848 	.word	0x0800f848
 800eea4:	0800f852 	.word	0x0800f852
 800eea8:	00000000 	.word	0x00000000
 800eeac:	0800ec05 	.word	0x0800ec05
 800eeb0:	0800f84e 	.word	0x0800f84e

0800eeb4 <_printf_common>:
 800eeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb8:	4616      	mov	r6, r2
 800eeba:	4699      	mov	r9, r3
 800eebc:	688a      	ldr	r2, [r1, #8]
 800eebe:	4607      	mov	r7, r0
 800eec0:	690b      	ldr	r3, [r1, #16]
 800eec2:	460c      	mov	r4, r1
 800eec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eec8:	4293      	cmp	r3, r2
 800eeca:	bfb8      	it	lt
 800eecc:	4613      	movlt	r3, r2
 800eece:	6033      	str	r3, [r6, #0]
 800eed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eed4:	b10a      	cbz	r2, 800eeda <_printf_common+0x26>
 800eed6:	3301      	adds	r3, #1
 800eed8:	6033      	str	r3, [r6, #0]
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	0699      	lsls	r1, r3, #26
 800eede:	bf42      	ittt	mi
 800eee0:	6833      	ldrmi	r3, [r6, #0]
 800eee2:	3302      	addmi	r3, #2
 800eee4:	6033      	strmi	r3, [r6, #0]
 800eee6:	6825      	ldr	r5, [r4, #0]
 800eee8:	f015 0506 	ands.w	r5, r5, #6
 800eeec:	d106      	bne.n	800eefc <_printf_common+0x48>
 800eeee:	f104 0a19 	add.w	sl, r4, #25
 800eef2:	68e3      	ldr	r3, [r4, #12]
 800eef4:	6832      	ldr	r2, [r6, #0]
 800eef6:	1a9b      	subs	r3, r3, r2
 800eef8:	42ab      	cmp	r3, r5
 800eefa:	dc2b      	bgt.n	800ef54 <_printf_common+0xa0>
 800eefc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef00:	1e13      	subs	r3, r2, #0
 800ef02:	6822      	ldr	r2, [r4, #0]
 800ef04:	bf18      	it	ne
 800ef06:	2301      	movne	r3, #1
 800ef08:	0692      	lsls	r2, r2, #26
 800ef0a:	d430      	bmi.n	800ef6e <_printf_common+0xba>
 800ef0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef10:	4649      	mov	r1, r9
 800ef12:	4638      	mov	r0, r7
 800ef14:	47c0      	blx	r8
 800ef16:	3001      	adds	r0, #1
 800ef18:	d023      	beq.n	800ef62 <_printf_common+0xae>
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	341a      	adds	r4, #26
 800ef1e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ef22:	f003 0306 	and.w	r3, r3, #6
 800ef26:	2b04      	cmp	r3, #4
 800ef28:	bf0a      	itet	eq
 800ef2a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ef2e:	2500      	movne	r5, #0
 800ef30:	6833      	ldreq	r3, [r6, #0]
 800ef32:	f04f 0600 	mov.w	r6, #0
 800ef36:	bf08      	it	eq
 800ef38:	1aed      	subeq	r5, r5, r3
 800ef3a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ef3e:	bf08      	it	eq
 800ef40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef44:	4293      	cmp	r3, r2
 800ef46:	bfc4      	itt	gt
 800ef48:	1a9b      	subgt	r3, r3, r2
 800ef4a:	18ed      	addgt	r5, r5, r3
 800ef4c:	42b5      	cmp	r5, r6
 800ef4e:	d11a      	bne.n	800ef86 <_printf_common+0xd2>
 800ef50:	2000      	movs	r0, #0
 800ef52:	e008      	b.n	800ef66 <_printf_common+0xb2>
 800ef54:	2301      	movs	r3, #1
 800ef56:	4652      	mov	r2, sl
 800ef58:	4649      	mov	r1, r9
 800ef5a:	4638      	mov	r0, r7
 800ef5c:	47c0      	blx	r8
 800ef5e:	3001      	adds	r0, #1
 800ef60:	d103      	bne.n	800ef6a <_printf_common+0xb6>
 800ef62:	f04f 30ff 	mov.w	r0, #4294967295
 800ef66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef6a:	3501      	adds	r5, #1
 800ef6c:	e7c1      	b.n	800eef2 <_printf_common+0x3e>
 800ef6e:	18e1      	adds	r1, r4, r3
 800ef70:	1c5a      	adds	r2, r3, #1
 800ef72:	2030      	movs	r0, #48	; 0x30
 800ef74:	3302      	adds	r3, #2
 800ef76:	4422      	add	r2, r4
 800ef78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef84:	e7c2      	b.n	800ef0c <_printf_common+0x58>
 800ef86:	2301      	movs	r3, #1
 800ef88:	4622      	mov	r2, r4
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	4638      	mov	r0, r7
 800ef8e:	47c0      	blx	r8
 800ef90:	3001      	adds	r0, #1
 800ef92:	d0e6      	beq.n	800ef62 <_printf_common+0xae>
 800ef94:	3601      	adds	r6, #1
 800ef96:	e7d9      	b.n	800ef4c <_printf_common+0x98>

0800ef98 <_printf_i>:
 800ef98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef9c:	7e0f      	ldrb	r7, [r1, #24]
 800ef9e:	4691      	mov	r9, r2
 800efa0:	4680      	mov	r8, r0
 800efa2:	460c      	mov	r4, r1
 800efa4:	2f78      	cmp	r7, #120	; 0x78
 800efa6:	469a      	mov	sl, r3
 800efa8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800efaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800efae:	d807      	bhi.n	800efc0 <_printf_i+0x28>
 800efb0:	2f62      	cmp	r7, #98	; 0x62
 800efb2:	d80a      	bhi.n	800efca <_printf_i+0x32>
 800efb4:	2f00      	cmp	r7, #0
 800efb6:	f000 80d3 	beq.w	800f160 <_printf_i+0x1c8>
 800efba:	2f58      	cmp	r7, #88	; 0x58
 800efbc:	f000 80bf 	beq.w	800f13e <_printf_i+0x1a6>
 800efc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efc8:	e03a      	b.n	800f040 <_printf_i+0xa8>
 800efca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efce:	2b15      	cmp	r3, #21
 800efd0:	d8f6      	bhi.n	800efc0 <_printf_i+0x28>
 800efd2:	a101      	add	r1, pc, #4	; (adr r1, 800efd8 <_printf_i+0x40>)
 800efd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800efd8:	0800f031 	.word	0x0800f031
 800efdc:	0800f045 	.word	0x0800f045
 800efe0:	0800efc1 	.word	0x0800efc1
 800efe4:	0800efc1 	.word	0x0800efc1
 800efe8:	0800efc1 	.word	0x0800efc1
 800efec:	0800efc1 	.word	0x0800efc1
 800eff0:	0800f045 	.word	0x0800f045
 800eff4:	0800efc1 	.word	0x0800efc1
 800eff8:	0800efc1 	.word	0x0800efc1
 800effc:	0800efc1 	.word	0x0800efc1
 800f000:	0800efc1 	.word	0x0800efc1
 800f004:	0800f147 	.word	0x0800f147
 800f008:	0800f071 	.word	0x0800f071
 800f00c:	0800f103 	.word	0x0800f103
 800f010:	0800efc1 	.word	0x0800efc1
 800f014:	0800efc1 	.word	0x0800efc1
 800f018:	0800f169 	.word	0x0800f169
 800f01c:	0800efc1 	.word	0x0800efc1
 800f020:	0800f071 	.word	0x0800f071
 800f024:	0800efc1 	.word	0x0800efc1
 800f028:	0800efc1 	.word	0x0800efc1
 800f02c:	0800f10b 	.word	0x0800f10b
 800f030:	682b      	ldr	r3, [r5, #0]
 800f032:	1d1a      	adds	r2, r3, #4
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	602a      	str	r2, [r5, #0]
 800f038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f03c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f040:	2301      	movs	r3, #1
 800f042:	e09e      	b.n	800f182 <_printf_i+0x1ea>
 800f044:	6820      	ldr	r0, [r4, #0]
 800f046:	682b      	ldr	r3, [r5, #0]
 800f048:	0607      	lsls	r7, r0, #24
 800f04a:	f103 0104 	add.w	r1, r3, #4
 800f04e:	6029      	str	r1, [r5, #0]
 800f050:	d501      	bpl.n	800f056 <_printf_i+0xbe>
 800f052:	681e      	ldr	r6, [r3, #0]
 800f054:	e003      	b.n	800f05e <_printf_i+0xc6>
 800f056:	0646      	lsls	r6, r0, #25
 800f058:	d5fb      	bpl.n	800f052 <_printf_i+0xba>
 800f05a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f05e:	2e00      	cmp	r6, #0
 800f060:	da03      	bge.n	800f06a <_printf_i+0xd2>
 800f062:	232d      	movs	r3, #45	; 0x2d
 800f064:	4276      	negs	r6, r6
 800f066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f06a:	4859      	ldr	r0, [pc, #356]	; (800f1d0 <_printf_i+0x238>)
 800f06c:	230a      	movs	r3, #10
 800f06e:	e012      	b.n	800f096 <_printf_i+0xfe>
 800f070:	682b      	ldr	r3, [r5, #0]
 800f072:	6820      	ldr	r0, [r4, #0]
 800f074:	1d19      	adds	r1, r3, #4
 800f076:	6029      	str	r1, [r5, #0]
 800f078:	0605      	lsls	r5, r0, #24
 800f07a:	d501      	bpl.n	800f080 <_printf_i+0xe8>
 800f07c:	681e      	ldr	r6, [r3, #0]
 800f07e:	e002      	b.n	800f086 <_printf_i+0xee>
 800f080:	0641      	lsls	r1, r0, #25
 800f082:	d5fb      	bpl.n	800f07c <_printf_i+0xe4>
 800f084:	881e      	ldrh	r6, [r3, #0]
 800f086:	2f6f      	cmp	r7, #111	; 0x6f
 800f088:	4851      	ldr	r0, [pc, #324]	; (800f1d0 <_printf_i+0x238>)
 800f08a:	bf0c      	ite	eq
 800f08c:	2308      	moveq	r3, #8
 800f08e:	230a      	movne	r3, #10
 800f090:	2100      	movs	r1, #0
 800f092:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f096:	6865      	ldr	r5, [r4, #4]
 800f098:	2d00      	cmp	r5, #0
 800f09a:	60a5      	str	r5, [r4, #8]
 800f09c:	bfa2      	ittt	ge
 800f09e:	6821      	ldrge	r1, [r4, #0]
 800f0a0:	f021 0104 	bicge.w	r1, r1, #4
 800f0a4:	6021      	strge	r1, [r4, #0]
 800f0a6:	b90e      	cbnz	r6, 800f0ac <_printf_i+0x114>
 800f0a8:	2d00      	cmp	r5, #0
 800f0aa:	d04a      	beq.n	800f142 <_printf_i+0x1aa>
 800f0ac:	4615      	mov	r5, r2
 800f0ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0b2:	fb03 6711 	mls	r7, r3, r1, r6
 800f0b6:	5dc7      	ldrb	r7, [r0, r7]
 800f0b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f0bc:	4637      	mov	r7, r6
 800f0be:	460e      	mov	r6, r1
 800f0c0:	42bb      	cmp	r3, r7
 800f0c2:	d9f4      	bls.n	800f0ae <_printf_i+0x116>
 800f0c4:	2b08      	cmp	r3, #8
 800f0c6:	d10b      	bne.n	800f0e0 <_printf_i+0x148>
 800f0c8:	6823      	ldr	r3, [r4, #0]
 800f0ca:	07de      	lsls	r6, r3, #31
 800f0cc:	d508      	bpl.n	800f0e0 <_printf_i+0x148>
 800f0ce:	6923      	ldr	r3, [r4, #16]
 800f0d0:	6861      	ldr	r1, [r4, #4]
 800f0d2:	4299      	cmp	r1, r3
 800f0d4:	bfde      	ittt	le
 800f0d6:	2330      	movle	r3, #48	; 0x30
 800f0d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f0dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f0e0:	1b52      	subs	r2, r2, r5
 800f0e2:	6122      	str	r2, [r4, #16]
 800f0e4:	464b      	mov	r3, r9
 800f0e6:	aa03      	add	r2, sp, #12
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	4640      	mov	r0, r8
 800f0ec:	f8cd a000 	str.w	sl, [sp]
 800f0f0:	f7ff fee0 	bl	800eeb4 <_printf_common>
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	d149      	bne.n	800f18c <_printf_i+0x1f4>
 800f0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fc:	b004      	add	sp, #16
 800f0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f102:	6823      	ldr	r3, [r4, #0]
 800f104:	f043 0320 	orr.w	r3, r3, #32
 800f108:	6023      	str	r3, [r4, #0]
 800f10a:	2778      	movs	r7, #120	; 0x78
 800f10c:	4831      	ldr	r0, [pc, #196]	; (800f1d4 <_printf_i+0x23c>)
 800f10e:	6823      	ldr	r3, [r4, #0]
 800f110:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f114:	061f      	lsls	r7, r3, #24
 800f116:	6829      	ldr	r1, [r5, #0]
 800f118:	f851 6b04 	ldr.w	r6, [r1], #4
 800f11c:	d402      	bmi.n	800f124 <_printf_i+0x18c>
 800f11e:	065f      	lsls	r7, r3, #25
 800f120:	bf48      	it	mi
 800f122:	b2b6      	uxthmi	r6, r6
 800f124:	07df      	lsls	r7, r3, #31
 800f126:	6029      	str	r1, [r5, #0]
 800f128:	bf44      	itt	mi
 800f12a:	f043 0320 	orrmi.w	r3, r3, #32
 800f12e:	6023      	strmi	r3, [r4, #0]
 800f130:	b91e      	cbnz	r6, 800f13a <_printf_i+0x1a2>
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	f023 0320 	bic.w	r3, r3, #32
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	2310      	movs	r3, #16
 800f13c:	e7a8      	b.n	800f090 <_printf_i+0xf8>
 800f13e:	4824      	ldr	r0, [pc, #144]	; (800f1d0 <_printf_i+0x238>)
 800f140:	e7e5      	b.n	800f10e <_printf_i+0x176>
 800f142:	4615      	mov	r5, r2
 800f144:	e7be      	b.n	800f0c4 <_printf_i+0x12c>
 800f146:	682b      	ldr	r3, [r5, #0]
 800f148:	6826      	ldr	r6, [r4, #0]
 800f14a:	1d18      	adds	r0, r3, #4
 800f14c:	6961      	ldr	r1, [r4, #20]
 800f14e:	6028      	str	r0, [r5, #0]
 800f150:	0635      	lsls	r5, r6, #24
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	d501      	bpl.n	800f15a <_printf_i+0x1c2>
 800f156:	6019      	str	r1, [r3, #0]
 800f158:	e002      	b.n	800f160 <_printf_i+0x1c8>
 800f15a:	0670      	lsls	r0, r6, #25
 800f15c:	d5fb      	bpl.n	800f156 <_printf_i+0x1be>
 800f15e:	8019      	strh	r1, [r3, #0]
 800f160:	2300      	movs	r3, #0
 800f162:	4615      	mov	r5, r2
 800f164:	6123      	str	r3, [r4, #16]
 800f166:	e7bd      	b.n	800f0e4 <_printf_i+0x14c>
 800f168:	682b      	ldr	r3, [r5, #0]
 800f16a:	2100      	movs	r1, #0
 800f16c:	1d1a      	adds	r2, r3, #4
 800f16e:	602a      	str	r2, [r5, #0]
 800f170:	681d      	ldr	r5, [r3, #0]
 800f172:	6862      	ldr	r2, [r4, #4]
 800f174:	4628      	mov	r0, r5
 800f176:	f000 f849 	bl	800f20c <memchr>
 800f17a:	b108      	cbz	r0, 800f180 <_printf_i+0x1e8>
 800f17c:	1b40      	subs	r0, r0, r5
 800f17e:	6060      	str	r0, [r4, #4]
 800f180:	6863      	ldr	r3, [r4, #4]
 800f182:	6123      	str	r3, [r4, #16]
 800f184:	2300      	movs	r3, #0
 800f186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f18a:	e7ab      	b.n	800f0e4 <_printf_i+0x14c>
 800f18c:	6923      	ldr	r3, [r4, #16]
 800f18e:	462a      	mov	r2, r5
 800f190:	4649      	mov	r1, r9
 800f192:	4640      	mov	r0, r8
 800f194:	47d0      	blx	sl
 800f196:	3001      	adds	r0, #1
 800f198:	d0ae      	beq.n	800f0f8 <_printf_i+0x160>
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	079b      	lsls	r3, r3, #30
 800f19e:	d413      	bmi.n	800f1c8 <_printf_i+0x230>
 800f1a0:	68e0      	ldr	r0, [r4, #12]
 800f1a2:	9b03      	ldr	r3, [sp, #12]
 800f1a4:	4298      	cmp	r0, r3
 800f1a6:	bfb8      	it	lt
 800f1a8:	4618      	movlt	r0, r3
 800f1aa:	e7a7      	b.n	800f0fc <_printf_i+0x164>
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	4632      	mov	r2, r6
 800f1b0:	4649      	mov	r1, r9
 800f1b2:	4640      	mov	r0, r8
 800f1b4:	47d0      	blx	sl
 800f1b6:	3001      	adds	r0, #1
 800f1b8:	d09e      	beq.n	800f0f8 <_printf_i+0x160>
 800f1ba:	3501      	adds	r5, #1
 800f1bc:	68e3      	ldr	r3, [r4, #12]
 800f1be:	9903      	ldr	r1, [sp, #12]
 800f1c0:	1a5b      	subs	r3, r3, r1
 800f1c2:	42ab      	cmp	r3, r5
 800f1c4:	dcf2      	bgt.n	800f1ac <_printf_i+0x214>
 800f1c6:	e7eb      	b.n	800f1a0 <_printf_i+0x208>
 800f1c8:	2500      	movs	r5, #0
 800f1ca:	f104 0619 	add.w	r6, r4, #25
 800f1ce:	e7f5      	b.n	800f1bc <_printf_i+0x224>
 800f1d0:	0800f859 	.word	0x0800f859
 800f1d4:	0800f86a 	.word	0x0800f86a

0800f1d8 <memmove>:
 800f1d8:	4288      	cmp	r0, r1
 800f1da:	b510      	push	{r4, lr}
 800f1dc:	eb01 0402 	add.w	r4, r1, r2
 800f1e0:	d902      	bls.n	800f1e8 <memmove+0x10>
 800f1e2:	4284      	cmp	r4, r0
 800f1e4:	4623      	mov	r3, r4
 800f1e6:	d807      	bhi.n	800f1f8 <memmove+0x20>
 800f1e8:	1e43      	subs	r3, r0, #1
 800f1ea:	42a1      	cmp	r1, r4
 800f1ec:	d008      	beq.n	800f200 <memmove+0x28>
 800f1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1f6:	e7f8      	b.n	800f1ea <memmove+0x12>
 800f1f8:	4402      	add	r2, r0
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	428a      	cmp	r2, r1
 800f1fe:	d100      	bne.n	800f202 <memmove+0x2a>
 800f200:	bd10      	pop	{r4, pc}
 800f202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f20a:	e7f7      	b.n	800f1fc <memmove+0x24>

0800f20c <memchr>:
 800f20c:	b2c9      	uxtb	r1, r1
 800f20e:	4402      	add	r2, r0
 800f210:	b510      	push	{r4, lr}
 800f212:	4290      	cmp	r0, r2
 800f214:	4603      	mov	r3, r0
 800f216:	d101      	bne.n	800f21c <memchr+0x10>
 800f218:	2300      	movs	r3, #0
 800f21a:	e003      	b.n	800f224 <memchr+0x18>
 800f21c:	781c      	ldrb	r4, [r3, #0]
 800f21e:	3001      	adds	r0, #1
 800f220:	428c      	cmp	r4, r1
 800f222:	d1f6      	bne.n	800f212 <memchr+0x6>
 800f224:	4618      	mov	r0, r3
 800f226:	bd10      	pop	{r4, pc}

0800f228 <_realloc_r>:
 800f228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f22c:	4680      	mov	r8, r0
 800f22e:	4614      	mov	r4, r2
 800f230:	460e      	mov	r6, r1
 800f232:	b921      	cbnz	r1, 800f23e <_realloc_r+0x16>
 800f234:	4611      	mov	r1, r2
 800f236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f23a:	f7ff bb4b 	b.w	800e8d4 <_malloc_r>
 800f23e:	b92a      	cbnz	r2, 800f24c <_realloc_r+0x24>
 800f240:	4625      	mov	r5, r4
 800f242:	f7ff fc93 	bl	800eb6c <_free_r>
 800f246:	4628      	mov	r0, r5
 800f248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f24c:	f000 f81b 	bl	800f286 <_malloc_usable_size_r>
 800f250:	4284      	cmp	r4, r0
 800f252:	4607      	mov	r7, r0
 800f254:	d802      	bhi.n	800f25c <_realloc_r+0x34>
 800f256:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f25a:	d812      	bhi.n	800f282 <_realloc_r+0x5a>
 800f25c:	4621      	mov	r1, r4
 800f25e:	4640      	mov	r0, r8
 800f260:	f7ff fb38 	bl	800e8d4 <_malloc_r>
 800f264:	4605      	mov	r5, r0
 800f266:	2800      	cmp	r0, #0
 800f268:	d0ed      	beq.n	800f246 <_realloc_r+0x1e>
 800f26a:	42bc      	cmp	r4, r7
 800f26c:	4622      	mov	r2, r4
 800f26e:	4631      	mov	r1, r6
 800f270:	bf28      	it	cs
 800f272:	463a      	movcs	r2, r7
 800f274:	f7ff fc6c 	bl	800eb50 <memcpy>
 800f278:	4631      	mov	r1, r6
 800f27a:	4640      	mov	r0, r8
 800f27c:	f7ff fc76 	bl	800eb6c <_free_r>
 800f280:	e7e1      	b.n	800f246 <_realloc_r+0x1e>
 800f282:	4635      	mov	r5, r6
 800f284:	e7df      	b.n	800f246 <_realloc_r+0x1e>

0800f286 <_malloc_usable_size_r>:
 800f286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f28a:	1f18      	subs	r0, r3, #4
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	bfbc      	itt	lt
 800f290:	580b      	ldrlt	r3, [r1, r0]
 800f292:	18c0      	addlt	r0, r0, r3
 800f294:	4770      	bx	lr
	...

0800f298 <_init>:
 800f298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f29a:	bf00      	nop
 800f29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f29e:	bc08      	pop	{r3}
 800f2a0:	469e      	mov	lr, r3
 800f2a2:	4770      	bx	lr

0800f2a4 <_fini>:
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	bf00      	nop
 800f2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2aa:	bc08      	pop	{r3}
 800f2ac:	469e      	mov	lr, r3
 800f2ae:	4770      	bx	lr
