
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cd1c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000030  0801cf68  0801cf68  0002cf68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       000031b0  0801cf98  0801cf98  0002cf98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08020148  08020148  000400e0  2**0
                  CONTENTS
  5 .ARM          00000008  08020148  08020148  00030148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08020150  08020150  000400e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08020150  08020150  00030150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08020154  08020154  00030154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e0  20000000  08020158  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b1ac  200000e0  08020238  000400e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b28c  08020238  0004b28c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  000400e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040116  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039854  00000000  00000000  00040159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008ef1  00000000  00000000  000799ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b10  00000000  00000000  000828a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000021e5  00000000  00000000  000853b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004287f  00000000  00000000  00087595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004234c  00000000  00000000  000c9e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00167f06  00000000  00000000  0010c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000bea8  00000000  00000000  00274068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0027ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000e0 	.word	0x200000e0
 8000268:	00000000 	.word	0x00000000
 800026c:	0801cf50 	.word	0x0801cf50

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000e4 	.word	0x200000e4
 8000288:	0801cf50 	.word	0x0801cf50

0800028c <strcmp>:
 800028c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000294:	2a01      	cmp	r2, #1
 8000296:	bf28      	it	cs
 8000298:	429a      	cmpcs	r2, r3
 800029a:	d0f7      	beq.n	800028c <strcmp>
 800029c:	1ad0      	subs	r0, r2, r3
 800029e:	4770      	bx	lr

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b982 	b.w	80005cc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d146      	bne.n	800037e <__udivmoddi4+0x9e>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d95e      	bls.n	80003b4 <__udivmoddi4+0xd4>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	409c      	lsls	r4, r3
 8000308:	fa20 f202 	lsr.w	r2, r0, r2
 800030c:	4317      	orrs	r7, r2
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	0c22      	lsrs	r2, r4, #16
 8000318:	fbb7 f1fe 	udiv	r1, r7, lr
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	fb01 f005 	mul.w	r0, r1, r5
 8000324:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x5e>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x5c>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 8134 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 800033c:	4639      	mov	r1, r7
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	b2a4      	uxth	r4, r4
 8000342:	fbb2 f0fe 	udiv	r0, r2, lr
 8000346:	fb0e 2210 	mls	r2, lr, r0, r2
 800034a:	fb00 f505 	mul.w	r5, r0, r5
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	42a5      	cmp	r5, r4
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x88>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f100 32ff 	add.w	r2, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x86>
 8000360:	42a5      	cmp	r5, r4
 8000362:	f200 8119 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000366:	4610      	mov	r0, r2
 8000368:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	2100      	movs	r1, #0
 8000370:	b11e      	cbz	r6, 800037a <__udivmoddi4+0x9a>
 8000372:	40dc      	lsrs	r4, r3
 8000374:	2300      	movs	r3, #0
 8000376:	e9c6 4300 	strd	r4, r3, [r6]
 800037a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0xb4>
 8000382:	2e00      	cmp	r6, #0
 8000384:	f000 80fc 	beq.w	8000580 <__udivmoddi4+0x2a0>
 8000388:	2100      	movs	r1, #0
 800038a:	e9c6 0500 	strd	r0, r5, [r6]
 800038e:	4608      	mov	r0, r1
 8000390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d14c      	bne.n	8000436 <__udivmoddi4+0x156>
 800039c:	42ab      	cmp	r3, r5
 800039e:	f0c0 80f2 	bcc.w	8000586 <__udivmoddi4+0x2a6>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f240 80ef 	bls.w	8000586 <__udivmoddi4+0x2a6>
 80003a8:	4608      	mov	r0, r1
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e5      	beq.n	800037a <__udivmoddi4+0x9a>
 80003ae:	e9c6 4700 	strd	r4, r7, [r6]
 80003b2:	e7e2      	b.n	800037a <__udivmoddi4+0x9a>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xd8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f382 	clz	r3, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	f040 809f 	bne.w	8000500 <__udivmoddi4+0x220>
 80003c2:	1a8a      	subs	r2, r1, r2
 80003c4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c8:	fa1f f78c 	uxth.w	r7, ip
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d2:	fb0e 2015 	mls	r0, lr, r5, r2
 80003d6:	0c22      	lsrs	r2, r4, #16
 80003d8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003dc:	fb07 f005 	mul.w	r0, r7, r5
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d90f      	bls.n	8000404 <__udivmoddi4+0x124>
 80003e4:	eb1c 0202 	adds.w	r2, ip, r2
 80003e8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ec:	bf2c      	ite	cs
 80003ee:	f04f 0901 	movcs.w	r9, #1
 80003f2:	f04f 0900 	movcc.w	r9, #0
 80003f6:	4290      	cmp	r0, r2
 80003f8:	d903      	bls.n	8000402 <__udivmoddi4+0x122>
 80003fa:	f1b9 0f00 	cmp.w	r9, #0
 80003fe:	f000 80ce 	beq.w	800059e <__udivmoddi4+0x2be>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0fe 	udiv	r0, r2, lr
 800040c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000410:	fb00 f707 	mul.w	r7, r0, r7
 8000414:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000418:	42a7      	cmp	r7, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	42a7      	cmp	r7, r4
 8000428:	f200 80b3 	bhi.w	8000592 <__udivmoddi4+0x2b2>
 800042c:	4610      	mov	r0, r2
 800042e:	1be4      	subs	r4, r4, r7
 8000430:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000434:	e79c      	b.n	8000370 <__udivmoddi4+0x90>
 8000436:	f1c1 0420 	rsb	r4, r1, #32
 800043a:	408b      	lsls	r3, r1
 800043c:	fa05 fc01 	lsl.w	ip, r5, r1
 8000440:	fa22 f704 	lsr.w	r7, r2, r4
 8000444:	40e5      	lsrs	r5, r4
 8000446:	408a      	lsls	r2, r1
 8000448:	431f      	orrs	r7, r3
 800044a:	fa20 f304 	lsr.w	r3, r0, r4
 800044e:	4088      	lsls	r0, r1
 8000450:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000460:	fbb5 fef8 	udiv	lr, r5, r8
 8000464:	fb08 551e 	mls	r5, r8, lr, r5
 8000468:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800046c:	fb0e f90c 	mul.w	r9, lr, ip
 8000470:	45a9      	cmp	r9, r5
 8000472:	d90e      	bls.n	8000492 <__udivmoddi4+0x1b2>
 8000474:	197d      	adds	r5, r7, r5
 8000476:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047a:	bf2c      	ite	cs
 800047c:	f04f 0b01 	movcs.w	fp, #1
 8000480:	f04f 0b00 	movcc.w	fp, #0
 8000484:	45a9      	cmp	r9, r5
 8000486:	d903      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000488:	f1bb 0f00 	cmp.w	fp, #0
 800048c:	f000 808d 	beq.w	80005aa <__udivmoddi4+0x2ca>
 8000490:	46d6      	mov	lr, sl
 8000492:	eba5 0509 	sub.w	r5, r5, r9
 8000496:	fa1f f983 	uxth.w	r9, r3
 800049a:	fbb5 f3f8 	udiv	r3, r5, r8
 800049e:	fb08 5513 	mls	r5, r8, r3, r5
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004aa:	45ac      	cmp	ip, r5
 80004ac:	d906      	bls.n	80004bc <__udivmoddi4+0x1dc>
 80004ae:	197d      	adds	r5, r7, r5
 80004b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x1da>
 80004b6:	45ac      	cmp	ip, r5
 80004b8:	d87e      	bhi.n	80005b8 <__udivmoddi4+0x2d8>
 80004ba:	4643      	mov	r3, r8
 80004bc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c0:	eba5 050c 	sub.w	r5, r5, ip
 80004c4:	fba3 9802 	umull	r9, r8, r3, r2
 80004c8:	4545      	cmp	r5, r8
 80004ca:	46ce      	mov	lr, r9
 80004cc:	46c4      	mov	ip, r8
 80004ce:	d302      	bcc.n	80004d6 <__udivmoddi4+0x1f6>
 80004d0:	d106      	bne.n	80004e0 <__udivmoddi4+0x200>
 80004d2:	4548      	cmp	r0, r9
 80004d4:	d204      	bcs.n	80004e0 <__udivmoddi4+0x200>
 80004d6:	3b01      	subs	r3, #1
 80004d8:	ebb9 0e02 	subs.w	lr, r9, r2
 80004dc:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d06f      	beq.n	80005c4 <__udivmoddi4+0x2e4>
 80004e4:	ebb0 020e 	subs.w	r2, r0, lr
 80004e8:	eb65 050c 	sbc.w	r5, r5, ip
 80004ec:	40ca      	lsrs	r2, r1
 80004ee:	fa05 f404 	lsl.w	r4, r5, r4
 80004f2:	40cd      	lsrs	r5, r1
 80004f4:	4618      	mov	r0, r3
 80004f6:	4314      	orrs	r4, r2
 80004f8:	2100      	movs	r1, #0
 80004fa:	e9c6 4500 	strd	r4, r5, [r6]
 80004fe:	e73c      	b.n	800037a <__udivmoddi4+0x9a>
 8000500:	fa02 fc03 	lsl.w	ip, r2, r3
 8000504:	f1c3 0220 	rsb	r2, r3, #32
 8000508:	4099      	lsls	r1, r3
 800050a:	409c      	lsls	r4, r3
 800050c:	40d5      	lsrs	r5, r2
 800050e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000512:	fa20 f202 	lsr.w	r2, r0, r2
 8000516:	fa1f f78c 	uxth.w	r7, ip
 800051a:	fbb5 f0fe 	udiv	r0, r5, lr
 800051e:	430a      	orrs	r2, r1
 8000520:	fb0e 5510 	mls	r5, lr, r0, r5
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f507 	mul.w	r5, r0, r7
 800052e:	428d      	cmp	r5, r1
 8000530:	d90e      	bls.n	8000550 <__udivmoddi4+0x270>
 8000532:	eb1c 0101 	adds.w	r1, ip, r1
 8000536:	f100 38ff 	add.w	r8, r0, #4294967295
 800053a:	bf2c      	ite	cs
 800053c:	f04f 0901 	movcs.w	r9, #1
 8000540:	f04f 0900 	movcc.w	r9, #0
 8000544:	428d      	cmp	r5, r1
 8000546:	d902      	bls.n	800054e <__udivmoddi4+0x26e>
 8000548:	f1b9 0f00 	cmp.w	r9, #0
 800054c:	d031      	beq.n	80005b2 <__udivmoddi4+0x2d2>
 800054e:	4640      	mov	r0, r8
 8000550:	1b49      	subs	r1, r1, r5
 8000552:	b292      	uxth	r2, r2
 8000554:	fbb1 f5fe 	udiv	r5, r1, lr
 8000558:	fb0e 1115 	mls	r1, lr, r5, r1
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	fb05 f107 	mul.w	r1, r5, r7
 8000564:	4291      	cmp	r1, r2
 8000566:	d907      	bls.n	8000578 <__udivmoddi4+0x298>
 8000568:	eb1c 0202 	adds.w	r2, ip, r2
 800056c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x296>
 8000572:	4291      	cmp	r1, r2
 8000574:	d823      	bhi.n	80005be <__udivmoddi4+0x2de>
 8000576:	4645      	mov	r5, r8
 8000578:	1a52      	subs	r2, r2, r1
 800057a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800057e:	e726      	b.n	80003ce <__udivmoddi4+0xee>
 8000580:	4631      	mov	r1, r6
 8000582:	4630      	mov	r0, r6
 8000584:	e6f9      	b.n	800037a <__udivmoddi4+0x9a>
 8000586:	1a84      	subs	r4, r0, r2
 8000588:	eb65 0203 	sbc.w	r2, r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	4617      	mov	r7, r2
 8000590:	e70b      	b.n	80003aa <__udivmoddi4+0xca>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e74a      	b.n	800042e <__udivmoddi4+0x14e>
 8000598:	4464      	add	r4, ip
 800059a:	3802      	subs	r0, #2
 800059c:	e6e4      	b.n	8000368 <__udivmoddi4+0x88>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	3902      	subs	r1, #2
 80005a6:	4462      	add	r2, ip
 80005a8:	e6c9      	b.n	800033e <__udivmoddi4+0x5e>
 80005aa:	f1ae 0e02 	sub.w	lr, lr, #2
 80005ae:	443d      	add	r5, r7
 80005b0:	e76f      	b.n	8000492 <__udivmoddi4+0x1b2>
 80005b2:	3802      	subs	r0, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	e7cb      	b.n	8000550 <__udivmoddi4+0x270>
 80005b8:	3b02      	subs	r3, #2
 80005ba:	443d      	add	r5, r7
 80005bc:	e77e      	b.n	80004bc <__udivmoddi4+0x1dc>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	e7d9      	b.n	8000578 <__udivmoddi4+0x298>
 80005c4:	4618      	mov	r0, r3
 80005c6:	4631      	mov	r1, r6
 80005c8:	e6d7      	b.n	800037a <__udivmoddi4+0x9a>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <ethernetif_notify_conn_changed>:

struct netif gnetif;
extern BOOL timeFlag;

void ethernetif_notify_conn_changed(struct netif *netif)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
   when the callback is needed,
   */
  if (netif_is_link_up(netif))
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80005de:	089b      	lsrs	r3, r3, #2
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d00a      	beq.n	8000600 <ethernetif_notify_conn_changed+0x30>
  {
    HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2101      	movs	r1, #1
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <ethernetif_notify_conn_changed+0x4c>)
 80005f0:	f006 ff1c 	bl	800742c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <ethernetif_notify_conn_changed+0x50>)
 80005fa:	f006 ff17 	bl	800742c <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET);
  }
}
 80005fe:	e009      	b.n	8000614 <ethernetif_notify_conn_changed+0x44>
    HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <ethernetif_notify_conn_changed+0x4c>)
 8000606:	f006 ff11 	bl	800742c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2110      	movs	r1, #16
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <ethernetif_notify_conn_changed+0x50>)
 8000610:	f006 ff0c 	bl	800742c <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	42020400 	.word	0x42020400
 8000620:	42021800 	.word	0x42021800

08000624 <AppMain>:

void AppMain()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800062a:	b662      	cpsie	i
}
 800062c:	bf00      	nop
  __enable_irq();

  RESET_Init();
 800062e:	f003 fad9 	bl	8003be4 <RESET_Init>
  LED_Init();
 8000632:	f003 fa27 	bl	8003a84 <LED_Init>
  LED_SimpleAnimation();
 8000636:	f003 fa7f 	bl	8003b38 <LED_SimpleAnimation>

  svDebugInit();
 800063a:	f003 fce9 	bl	8004010 <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 800063e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000642:	2000      	movs	r0, #0
 8000644:	f003 fb36 	bl	8003cb4 <UART_Init>

  CAN_Init();
 8000648:	f001 ff6a 	bl	8002520 <CAN_Init>
  CAN_Open(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
 800064c:	2305      	movs	r3, #5
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2304      	movs	r3, #4
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2000      	movs	r0, #0
 8000658:	f001 ffe6 	bl	8002628 <CAN_Open>

  MX_LWIP_Init();
 800065c:	f000 fe4e 	bl	80012fc <MX_LWIP_Init>
  app_echoserver_init();
 8000660:	f001 f846 	bl	80016f0 <app_echoserver_init>

  /* USER CODE BEGIN 2 */
  ethernetif_notify_conn_changed(&gnetif);
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <AppMain+0x78>)
 8000666:	f7ff ffb3 	bl	80005d0 <ethernetif_notify_conn_changed>


  // Chk Reset Count
  //uint32_t pre_time = HAL_GetTick();
  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <AppMain+0x7c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d902      	bls.n	8000678 <AppMain+0x54>
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <AppMain+0x80>)
 8000674:	f003 fd00 	bl	8004078 <svDebugMessage>
  while(1)
  {
    /* End OF ECHO SERVER  */


    svDebugProcess();
 8000678:	f003 fc72 	bl	8003f60 <svDebugProcess>
    MX_LWIP_Process();
 800067c:	f000 fe80 	bl	8001380 <MX_LWIP_Process>


    /*tcp_client module */
    if(timeFlag)
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <AppMain+0x84>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d004      	beq.n	8000692 <AppMain+0x6e>
    {
      timeFlag = FALSE;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <AppMain+0x84>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
      app_start_get_time(); //get time information from the server
 800068e:	f000 fe83 	bl	8001398 <app_start_get_time>
    }

    /*tcp_echoserver */
#if LWIP_NETIF_LINK_CALLBACK
    Ethernet_Link_Periodic_Handle(&gnetif);
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <AppMain+0x78>)
 8000694:	f000 fe18 	bl	80012c8 <Ethernet_Link_Periodic_Handle>
    svDebugProcess();
 8000698:	e7ee      	b.n	8000678 <AppMain+0x54>
 800069a:	bf00      	nop
 800069c:	200000fc 	.word	0x200000fc
 80006a0:	2000003c 	.word	0x2000003c
 80006a4:	0801cf98 	.word	0x0801cf98
 80006a8:	20000258 	.word	0x20000258

080006ac <HAL_GPIO_EXTI_Rising_Callback>:
    */
  }
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006bc:	d103      	bne.n	80006c6 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 80006be:	2101      	movs	r1, #1
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 80006c2:	f006 fecb 	bl	800745c <HAL_GPIO_TogglePin>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	42020400 	.word	0x42020400

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f003 fd04 	bl	80040e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f80e 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f92a 	bl	8000938 <MX_GPIO_Init>
  MX_FLASH_Init();
 80006e4:	f000 f874 	bl	80007d0 <MX_FLASH_Init>
  MX_ICACHE_Init();
 80006e8:	f000 f884 	bl	80007f4 <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 80006ec:	f000 f88e 	bl	800080c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80006f0:	f000 f8d6 	bl	80008a0 <MX_USART3_UART_Init>
  //MX_FDCAN1_Init();
  //MX_ETH_Init();
  /* USER CODE BEGIN 2 */

  AppMain();
 80006f4:	f7ff ff96 	bl	8000624 <AppMain>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0x24>
	...

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	; 0x70
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2250      	movs	r2, #80	; 0x50
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f01b fc7a 	bl	801c004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <SystemClock_Config+0xd0>)
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	4a29      	ldr	r2, [pc, #164]	; (80007cc <SystemClock_Config+0xd0>)
 8000728:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800072c:	6113      	str	r3, [r2, #16]
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <SystemClock_Config+0xd0>)
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800073a:	bf00      	nop
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <SystemClock_Config+0xd0>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	2b08      	cmp	r3, #8
 8000746:	d1f9      	bne.n	800073c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000748:	2309      	movs	r3, #9
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 800074c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000752:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800075c:	2303      	movs	r3, #3
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000764:	2314      	movs	r3, #20
 8000766:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000774:	230c      	movs	r3, #12
 8000776:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000778:	2300      	movs	r3, #0
 800077a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f006 fec5 	bl	8007514 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000790:	f000 f9e6 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	231f      	movs	r3, #31
 8000796:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2303      	movs	r3, #3
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2103      	movs	r1, #3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f007 fae6 	bl	8007d84 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007be:	f000 f9cf 	bl	8000b60 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3770      	adds	r7, #112	; 0x70
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	44020800 	.word	0x44020800

080007d0 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 80007d4:	f006 faa2 	bl	8006d1c <HAL_FLASH_Unlock>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 80007de:	f000 f9bf 	bl	8000b60 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80007e2:	f006 fac1 	bl	8006d68 <HAL_FLASH_Lock>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 80007ec:	f000 f9b8 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007f8:	f006 fe7c 	bl	80074f4 <HAL_ICACHE_Enable>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000802:	f000 f9ad 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000812:	4a21      	ldr	r2, [pc, #132]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000814:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000818:	4a20      	ldr	r2, [pc, #128]	; (800089c <MX_LPUART1_UART_Init+0x90>)
 800081a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000830:	220c      	movs	r2, #12
 8000832:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000842:	2200      	movs	r2, #0
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000848:	2200      	movs	r2, #0
 800084a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800084c:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 800084e:	f00d fa79 	bl	800dd44 <HAL_UART_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000858:	f000 f982 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000860:	f00f f9af 	bl	800fbc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800086a:	f000 f979 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086e:	2100      	movs	r1, #0
 8000870:	4808      	ldr	r0, [pc, #32]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000872:	f00f f9e4 	bl	800fc3e <HAL_UARTEx_SetRxFifoThreshold>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800087c:	f000 f970 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_LPUART1_UART_Init+0x88>)
 8000882:	f00f f965 	bl	800fb50 <HAL_UARTEx_DisableFifoMode>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800088c:	f000 f968 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000130 	.word	0x20000130
 8000898:	44002400 	.word	0x44002400
 800089c:	00033324 	.word	0x00033324

080008a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <MX_USART3_UART_Init+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008ea:	f00d fa2b 	bl	800dd44 <HAL_UART_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008f4:	f000 f934 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008fc:	f00f f961 	bl	800fbc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000906:	f000 f92b 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <MX_USART3_UART_Init+0x90>)
 800090e:	f00f f996 	bl	800fc3e <HAL_UARTEx_SetRxFifoThreshold>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000918:	f000 f922 	bl	8000b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_USART3_UART_Init+0x90>)
 800091e:	f00f f917 	bl	800fb50 <HAL_UARTEx_DisableFifoMode>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 f91a 	bl	8000b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200001c4 	.word	0x200001c4
 8000934:	40004800 	.word	0x40004800

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08e      	sub	sp, #56	; 0x38
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094e:	4b6b      	ldr	r3, [pc, #428]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000954:	4a69      	ldr	r2, [pc, #420]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800095e:	4b67      	ldr	r3, [pc, #412]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	4b63      	ldr	r3, [pc, #396]	; (8000afc <MX_GPIO_Init+0x1c4>)
 800096e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000972:	4a62      	ldr	r2, [pc, #392]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800097c:	4b5f      	ldr	r3, [pc, #380]	; (8000afc <MX_GPIO_Init+0x1c4>)
 800097e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098a:	4b5c      	ldr	r3, [pc, #368]	; (8000afc <MX_GPIO_Init+0x1c4>)
 800098c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000990:	4a5a      	ldr	r2, [pc, #360]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000992:	f043 0320 	orr.w	r3, r3, #32
 8000996:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800099a:	4b58      	ldr	r3, [pc, #352]	; (8000afc <MX_GPIO_Init+0x1c4>)
 800099c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a0:	f003 0320 	and.w	r3, r3, #32
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a8:	4b54      	ldr	r3, [pc, #336]	; (8000afc <MX_GPIO_Init+0x1c4>)
 80009aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009ae:	4a53      	ldr	r2, [pc, #332]	; (8000afc <MX_GPIO_Init+0x1c4>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009b8:	4b50      	ldr	r3, [pc, #320]	; (8000afc <MX_GPIO_Init+0x1c4>)
 80009ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <MX_GPIO_Init+0x1c4>)
 80009c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009cc:	4a4b      	ldr	r2, [pc, #300]	; (8000afc <MX_GPIO_Init+0x1c4>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009d6:	4b49      	ldr	r3, [pc, #292]	; (8000afc <MX_GPIO_Init+0x1c4>)
 80009d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b45      	ldr	r3, [pc, #276]	; (8000afc <MX_GPIO_Init+0x1c4>)
 80009e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009ea:	4a44      	ldr	r2, [pc, #272]	; (8000afc <MX_GPIO_Init+0x1c4>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009f4:	4b41      	ldr	r3, [pc, #260]	; (8000afc <MX_GPIO_Init+0x1c4>)
 80009f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a08:	4a3c      	ldr	r2, [pc, #240]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a12:	4b3a      	ldr	r3, [pc, #232]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a20:	4b36      	ldr	r3, [pc, #216]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a26:	4a35      	ldr	r2, [pc, #212]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a30:	4b32      	ldr	r3, [pc, #200]	; (8000afc <MX_GPIO_Init+0x1c4>)
 8000a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2110      	movs	r1, #16
 8000a42:	482f      	ldr	r0, [pc, #188]	; (8000b00 <MX_GPIO_Init+0x1c8>)
 8000a44:	f006 fcf2 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	482d      	ldr	r0, [pc, #180]	; (8000b04 <MX_GPIO_Init+0x1cc>)
 8000a4e:	f006 fced 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	482c      	ldr	r0, [pc, #176]	; (8000b08 <MX_GPIO_Init+0x1d0>)
 8000a58:	f006 fce8 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_GPIO_Init+0x1d4>)
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4827      	ldr	r0, [pc, #156]	; (8000b10 <MX_GPIO_Init+0x1d8>)
 8000a72:	f006 fb89 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a76:	2310      	movs	r3, #16
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481c      	ldr	r0, [pc, #112]	; (8000b00 <MX_GPIO_Init+0x1c8>)
 8000a8e:	f006 fb7b 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000a92:	2301      	movs	r3, #1
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4816      	ldr	r0, [pc, #88]	; (8000b04 <MX_GPIO_Init+0x1cc>)
 8000aaa:	f006 fb6d 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000aae:	2310      	movs	r3, #16
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <MX_GPIO_Init+0x1d0>)
 8000ac6:	f006 fb5f 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_GPIO_Init+0x1d4>)
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	480a      	ldr	r0, [pc, #40]	; (8000b08 <MX_GPIO_Init+0x1d0>)
 8000ade:	f006 fb53 	bl	8007188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2105      	movs	r1, #5
 8000ae6:	2018      	movs	r0, #24
 8000ae8:	f003 fc34 	bl	8004354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000aec:	2018      	movs	r0, #24
 8000aee:	f003 fc4b 	bl	8004388 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	3738      	adds	r7, #56	; 0x38
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	44020c00 	.word	0x44020c00
 8000b00:	42021400 	.word	0x42021400
 8000b04:	42020400 	.word	0x42020400
 8000b08:	42021800 	.word	0x42021800
 8000b0c:	10110000 	.word	0x10110000
 8000b10:	42020800 	.word	0x42020800

08000b14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d101      	bne.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b26:	f003 fb03 	bl	8004130 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  timeCounter++;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b32:	6013      	str	r3, [r2, #0]

  if(timeCounter > 1000)
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b3c:	d905      	bls.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    timeFlag = TRUE;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]
    timeCounter = 0;
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40001000 	.word	0x40001000
 8000b58:	2000025c 	.word	0x2000025c
 8000b5c:	20000258 	.word	0x20000258

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>

08000b6a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	210f      	movs	r1, #15
 8000b72:	f06f 0001 	mvn.w	r0, #1
 8000b76:	f003 fbed 	bl	8004354 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b0d0      	sub	sp, #320	; 0x140
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b8a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000b8e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ba4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f01b fa27 	bl	801c004 <memset>
  if(huart->Instance==LPUART1)
 8000bb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a9e      	ldr	r2, [pc, #632]	; (8000e3c <HAL_UART_MspInit+0x2bc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d15e      	bne.n	8000c86 <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bcc:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000bd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000bdc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000be0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000be4:	2200      	movs	r2, #0
 8000be6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bea:	f107 0320 	add.w	r3, r7, #32
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f007 fc42 	bl	8008478 <HAL_RCCEx_PeriphCLKConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000bfa:	f7ff ffb1 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bfe:	4b90      	ldr	r3, [pc, #576]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000c00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c04:	4a8e      	ldr	r2, [pc, #568]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000c0e:	4b8c      	ldr	r3, [pc, #560]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000c10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c14:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c26:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c2a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b84      	ldr	r3, [pc, #528]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c32:	4a83      	ldr	r2, [pc, #524]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c3c:	4b80      	ldr	r3, [pc, #512]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c42:	f003 0202 	and.w	r2, r3, #2
 8000c46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c58:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5a:	23c0      	movs	r3, #192	; 0xc0
 8000c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c72:	2308      	movs	r3, #8
 8000c74:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4871      	ldr	r0, [pc, #452]	; (8000e44 <HAL_UART_MspInit+0x2c4>)
 8000c80:	f006 fa82 	bl	8007188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c84:	e0d5      	b.n	8000e32 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000c86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c8a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a6d      	ldr	r2, [pc, #436]	; (8000e48 <HAL_UART_MspInit+0x2c8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d165      	bne.n	8000d64 <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c9c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000ca0:	f04f 0202 	mov.w	r2, #2
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f007 fbdb 	bl	8008478 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000cc8:	f7ff ff4a 	bl	8000b60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ccc:	4b5c      	ldr	r3, [pc, #368]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cd2:	4a5b      	ldr	r2, [pc, #364]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000cdc:	4b58      	ldr	r3, [pc, #352]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ce2:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000ce6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cf8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	4b51      	ldr	r3, [pc, #324]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d00:	4a4f      	ldr	r2, [pc, #316]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d10:	f003 0208 	and.w	r2, r3, #8
 8000d14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d26:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d28:	2360      	movs	r3, #96	; 0x60
 8000d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d40:	2307      	movs	r3, #7
 8000d42:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d46:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	483f      	ldr	r0, [pc, #252]	; (8000e4c <HAL_UART_MspInit+0x2cc>)
 8000d4e:	f006 fa1b 	bl	8007188 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2105      	movs	r1, #5
 8000d56:	203b      	movs	r0, #59	; 0x3b
 8000d58:	f003 fafc 	bl	8004354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d5c:	203b      	movs	r0, #59	; 0x3b
 8000d5e:	f003 fb13 	bl	8004388 <HAL_NVIC_EnableIRQ>
}
 8000d62:	e066      	b.n	8000e32 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8000d64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a37      	ldr	r2, [pc, #220]	; (8000e50 <HAL_UART_MspInit+0x2d0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d15d      	bne.n	8000e32 <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d7a:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d7e:	f04f 0204 	mov.w	r2, #4
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d8e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d92:	2200      	movs	r2, #0
 8000d94:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f007 fb6c 	bl	8008478 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8000da6:	f7ff fedb 	bl	8000b60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000db0:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dc0:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000dc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dd2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000dd6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dde:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_UART_MspInit+0x2c0>)
 8000dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dee:	f003 0208 	and.w	r2, r3, #8
 8000df2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000df6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e00:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000e04:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e20:	2307      	movs	r3, #7
 8000e22:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e26:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4807      	ldr	r0, [pc, #28]	; (8000e4c <HAL_UART_MspInit+0x2cc>)
 8000e2e:	f006 f9ab 	bl	8007188 <HAL_GPIO_Init>
}
 8000e32:	bf00      	nop
 8000e34:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	44002400 	.word	0x44002400
 8000e40:	44020c00 	.word	0x44020c00
 8000e44:	42020400 	.word	0x42020400
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	42020c00 	.word	0x42020c00
 8000e50:	40004800 	.word	0x40004800

08000e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e5c:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <HAL_InitTick+0xd8>)
 8000e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e62:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <HAL_InitTick+0xd8>)
 8000e64:	f043 0310 	orr.w	r3, r3, #16
 8000e68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_InitTick+0xd8>)
 8000e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e7a:	f107 020c 	add.w	r2, r7, #12
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f007 fabf 	bl	8008408 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d103      	bne.n	8000e9c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e94:	f007 fa76 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 8000e98:	6378      	str	r0, [r7, #52]	; 0x34
 8000e9a:	e004      	b.n	8000ea6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e9c:	f007 fa72 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea8:	095b      	lsrs	r3, r3, #5
 8000eaa:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <HAL_InitTick+0xdc>)
 8000eac:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb0:	09db      	lsrs	r3, r3, #7
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <HAL_InitTick+0xe0>)
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_InitTick+0xe4>)
 8000eba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_InitTick+0xe0>)
 8000ebe:	2263      	movs	r2, #99	; 0x63
 8000ec0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <HAL_InitTick+0xe0>)
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_InitTick+0xe0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_InitTick+0xe0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <HAL_InitTick+0xe0>)
 8000ed6:	f00c fb4f 	bl	800d578 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d118      	bne.n	8000f1a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <HAL_InitTick+0xe0>)
 8000eea:	f00c fba7 	bl	800d63c <HAL_TIM_Base_Start_IT>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ef4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10e      	bne.n	8000f1a <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	d808      	bhi.n	8000f14 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000f02:	2200      	movs	r2, #0
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	2031      	movs	r0, #49	; 0x31
 8000f08:	f003 fa24 	bl	8004354 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_InitTick+0xe8>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e002      	b.n	8000f1a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000f1a:	2031      	movs	r0, #49	; 0x31
 8000f1c:	f003 fa34 	bl	8004388 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000f20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3738      	adds	r7, #56	; 0x38
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	44020c00 	.word	0x44020c00
 8000f30:	0a7c5ac5 	.word	0x0a7c5ac5
 8000f34:	20000260 	.word	0x20000260
 8000f38:	40001000 	.word	0x40001000
 8000f3c:	20000040 	.word	0x20000040

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000f70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f74:	f006 fa8c 	bl	8007490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM6_IRQHandler+0x10>)
 8000f82:	f00c fc09 	bl	800d798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000260 	.word	0x20000260

08000f90 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <USART2_IRQHandler+0x10>)
 8000f96:	f00d f825 	bl	800dfe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20003bd8 	.word	0x20003bd8

08000fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return 1;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_kill>:

int _kill(int pid, int sig)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <_kill+0x20>)
 8000fc0:	2216      	movs	r2, #22
 8000fc2:	601a      	str	r2, [r3, #0]
  return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	2000b284 	.word	0x2000b284

08000fd8 <_exit>:

void _exit (int status)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ffe5 	bl	8000fb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fea:	e7fe      	b.n	8000fea <_exit+0x12>

08000fec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00a      	b.n	8001014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffe:	f3af 8000 	nop.w
 8001002:	4601      	mov	r1, r0
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf0      	blt.n	8000ffe <_read+0x12>
  }

  return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e009      	b.n	800104c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf1      	blt.n	8001038 <_write+0x12>
  }
  return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_close>:

int _close(int file)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001086:	605a      	str	r2, [r3, #4]
  return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_isatty>:

int _isatty(int file)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d205      	bcs.n	8001104 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <_sbrk+0x6c>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	e009      	b.n	8001118 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	4a06      	ldr	r2, [pc, #24]	; (800112c <_sbrk+0x64>)
 8001114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	200a0000 	.word	0x200a0000
 8001128:	00000400 	.word	0x00000400
 800112c:	200002ac 	.word	0x200002ac
 8001130:	2000b290 	.word	0x2000b290
 8001134:	2000b284 	.word	0x2000b284

08001138 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <SystemInit+0xdc>)
 8001140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001144:	4a33      	ldr	r2, [pc, #204]	; (8001214 <SystemInit+0xdc>)
 8001146:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <SystemInit+0xe0>)
 8001150:	2201      	movs	r2, #1
 8001152:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <SystemInit+0xe0>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <SystemInit+0xe0>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <SystemInit+0xe0>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	492c      	ldr	r1, [pc, #176]	; (8001218 <SystemInit+0xe0>)
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <SystemInit+0xe4>)
 8001168:	4013      	ands	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800116c:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <SystemInit+0xe0>)
 800116e:	2200      	movs	r2, #0
 8001170:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <SystemInit+0xe0>)
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <SystemInit+0xe0>)
 800117a:	2200      	movs	r2, #0
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <SystemInit+0xe0>)
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <SystemInit+0xe8>)
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <SystemInit+0xe0>)
 8001186:	2200      	movs	r2, #0
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <SystemInit+0xe0>)
 800118c:	4a24      	ldr	r2, [pc, #144]	; (8001220 <SystemInit+0xe8>)
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <SystemInit+0xe0>)
 8001192:	2200      	movs	r2, #0
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <SystemInit+0xe0>)
 8001198:	4a21      	ldr	r2, [pc, #132]	; (8001220 <SystemInit+0xe8>)
 800119a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <SystemInit+0xe0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <SystemInit+0xe0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <SystemInit+0xe0>)
 80011a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <SystemInit+0xe0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <SystemInit+0xdc>)
 80011b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ba:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <SystemInit+0xec>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011c4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80011cc:	d003      	beq.n	80011d6 <SystemInit+0x9e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80011d4:	d117      	bne.n	8001206 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <SystemInit+0xec>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <SystemInit+0xec>)
 80011e4:	4a10      	ldr	r2, [pc, #64]	; (8001228 <SystemInit+0xf0>)
 80011e6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <SystemInit+0xec>)
 80011ea:	4a10      	ldr	r2, [pc, #64]	; (800122c <SystemInit+0xf4>)
 80011ec:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <SystemInit+0xec>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <SystemInit+0xec>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <SystemInit+0xec>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <SystemInit+0xec>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	61d3      	str	r3, [r2, #28]
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	44020c00 	.word	0x44020c00
 800121c:	eae2eae3 	.word	0xeae2eae3
 8001220:	01010280 	.word	0x01010280
 8001224:	40022000 	.word	0x40022000
 8001228:	08192a3b 	.word	0x08192a3b
 800122c:	4c5d6e7f 	.word	0x4c5d6e7f

08001230 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001232:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001234:	f7ff ff80 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <LoopForever+0x6>)
  ldr r1, =_edata
 800123a:	490d      	ldr	r1, [pc, #52]	; (8001270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <LoopForever+0xe>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001250:	4c0a      	ldr	r4, [pc, #40]	; (800127c <LoopForever+0x16>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800125e:	f01a ff43 	bl	801c0e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001262:	f7ff fa37 	bl	80006d4 <main>

08001266 <LoopForever>:

LoopForever:
    b LoopForever
 8001266:	e7fe      	b.n	8001266 <LoopForever>
  ldr   r0, =_estack
 8001268:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001274:	08020158 	.word	0x08020158
  ldr r2, =_sbss
 8001278:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800127c:	2000b28c 	.word	0x2000b28c

08001280 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC1_IRQHandler>

08001282 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  if (netif_is_link_up(netif))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <ethernet_link_status_updated+0x2c>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    LED_OnOff(LED2_YELLOW, TRUE);
 800129c:	2101      	movs	r1, #1
 800129e:	2002      	movs	r0, #2
 80012a0:	f002 fc02 	bl	8003aa8 <LED_OnOff>
    LED_OnOff(LED3_RED, FALSE);
 80012a4:	2100      	movs	r1, #0
 80012a6:	2003      	movs	r0, #3
 80012a8:	f002 fbfe 	bl	8003aa8 <LED_OnOff>
#else
    LED_OnOff(LED2_YELLOW, FALSE);
    LED_OnOff(LED3_RED, TRUE);
#endif /* LWIP_DHCP */
  }
}
 80012ac:	e007      	b.n	80012be <ethernet_link_status_updated+0x3c>
    LED_OnOff(LED2_YELLOW, FALSE);
 80012ae:	2100      	movs	r1, #0
 80012b0:	2002      	movs	r0, #2
 80012b2:	f002 fbf9 	bl	8003aa8 <LED_OnOff>
    LED_OnOff(LED3_RED, TRUE);
 80012b6:	2101      	movs	r1, #1
 80012b8:	2003      	movs	r0, #3
 80012ba:	f002 fbf5 	bl	8003aa8 <LED_OnOff>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80012d0:	f002 ff42 	bl	8004158 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <Ethernet_Link_Periodic_Handle+0x30>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b63      	cmp	r3, #99	; 0x63
 80012de:	d907      	bls.n	80012f0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80012e0:	f002 ff3a 	bl	8004158 <HAL_GetTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <Ethernet_Link_Periodic_Handle+0x30>)
 80012e8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 feba 	bl	8002064 <ethernet_link_check_state>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200002b0 	.word	0x200002b0

080012fc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8001302:	f00f fd2d 	bl	8010d60 <lwip_init>
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else

  /* IP address default setting */
  IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_LWIP_Init+0x6c>)
 8001308:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 800130a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800130e:	60bb      	str	r3, [r7, #8]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_LWIP_Init+0x70>)
 8001312:	607b      	str	r3, [r7, #4]
#endif
  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	f107 0208 	add.w	r2, r7, #8
 800131a:	f107 010c 	add.w	r1, r7, #12
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_LWIP_Init+0x74>)
 8001320:	9002      	str	r0, [sp, #8]
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_LWIP_Init+0x78>)
 8001324:	9001      	str	r0, [sp, #4]
 8001326:	2000      	movs	r0, #0
 8001328:	9000      	str	r0, [sp, #0]
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_LWIP_Init+0x7c>)
 800132c:	f010 fa00 	bl	8011730 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <MX_LWIP_Init+0x7c>)
 8001332:	f010 fbaf 	bl	8011a94 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_LWIP_Init+0x7c>)
 8001338:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <MX_LWIP_Init+0x7c>)
 800134a:	f010 fbb3 	bl	8011ab4 <netif_set_up>
 800134e:	e002      	b.n	8001356 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <MX_LWIP_Init+0x7c>)
 8001352:	f010 fc1b 	bl	8011b8c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001356:	4909      	ldr	r1, [pc, #36]	; (800137c <MX_LWIP_Init+0x80>)
 8001358:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_LWIP_Init+0x7c>)
 800135a:	f010 fcad 	bl	8011cb8 <netif_set_link_callback>
  //dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	78dba8c0 	.word	0x78dba8c0
 800136c:	01dba8c0 	.word	0x01dba8c0
 8001370:	0801b5f5 	.word	0x0801b5f5
 8001374:	08001d7d 	.word	0x08001d7d
 8001378:	200000fc 	.word	0x200000fc
 800137c:	08001283 	.word	0x08001283

08001380 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <MX_LWIP_Process+0x14>)
 8001386:	f000 fcd9 	bl	8001d3c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800138a:	f017 fd2b 	bl	8018de4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
  //ethernetif_set_link(&gnetif);
/* USER CODE END 4_3 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000fc 	.word	0x200000fc

08001398 <app_start_get_time>:
static void app_close_conn(void); //close function
static void app_send_data(void); //send function


void app_start_get_time(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  app_open_conn();
 800139c:	f000 f802 	bl	80013a4 <app_open_conn>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <app_open_conn>:
/*
 * app_open_connection
 * create a client pcb & call tcp_connect
 */
static void app_open_conn(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  err_t err;

  if (pcb_client == NULL)
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <app_open_conn+0x6c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d116      	bne.n	80013e0 <app_open_conn+0x3c>
  {
    pcb_client = tcp_new();
 80013b2:	f012 ff65 	bl	8014280 <tcp_new>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a15      	ldr	r2, [pc, #84]	; (8001410 <app_open_conn+0x6c>)
 80013ba:	6013      	str	r3, [r2, #0]
    if (pcb_client == NULL) //lack of memory
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <app_open_conn+0x6c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10d      	bne.n	80013e0 <app_open_conn+0x3c>
    {
      memp_free(MEMP_TCP_PCB, pcb_client);
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <app_open_conn+0x6c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	2001      	movs	r0, #1
 80013cc:	f010 f97e 	bl	80116cc <memp_free>
      pcb_client = NULL;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <app_open_conn+0x6c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET); //error led
 80013d6:	2201      	movs	r2, #1
 80013d8:	2110      	movs	r1, #16
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <app_open_conn+0x70>)
 80013dc:	f006 f826 	bl	800742c <HAL_GPIO_WritePin>
    }
  }

  IP4_ADDR(&server_addr, SERVER_IP1, SERVER_IP2, SERVER_IP3, SERVER_IP4); //server ip
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <app_open_conn+0x74>)
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <app_open_conn+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  err = tcp_connect(pcb_client, &server_addr, SERVER_PORT, tcp_callback_connected); //connect
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <app_open_conn+0x6c>)
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <app_open_conn+0x7c>)
 80013ec:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80013f0:	4909      	ldr	r1, [pc, #36]	; (8001418 <app_open_conn+0x74>)
 80013f2:	f011 ffeb 	bl	80133cc <tcp_connect>
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]

  if(err == ERR_ISCONN) //already connected
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	f113 0f0a 	cmn.w	r3, #10
 8001402:	d101      	bne.n	8001408 <app_open_conn+0x64>
  {
    app_close_conn();
 8001404:	f000 f928 	bl	8001658 <app_close_conn>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200002b4 	.word	0x200002b4
 8001414:	42021800 	.word	0x42021800
 8001418:	200002b8 	.word	0x200002b8
 800141c:	2adba8c0 	.word	0x2adba8c0
 8001420:	08001425 	.word	0x08001425

08001424 <tcp_callback_connected>:
/*
 * tcp_callback_connected
 * callback when connected, client sends a request to the server
 */
static err_t tcp_callback_connected(void *arg, struct tcp_pcb *pcb_new, err_t err)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);

  if (err != ERR_OK) //error when connect to the server
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <tcp_callback_connected+0x1c>
  {
    return err;
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	e01b      	b.n	8001478 <tcp_callback_connected+0x54>
  }

  tcp_setprio(pcb_new, TCP_PRIO_NORMAL); //set priority for the client pcb
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	68b8      	ldr	r0, [r7, #8]
 8001444:	f012 fd2a 	bl	8013e9c <tcp_setprio>

  tcp_arg(pcb_new, 0); //no argument is used
 8001448:	2100      	movs	r1, #0
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f012 ff20 	bl	8014290 <tcp_arg>
  tcp_sent(pcb_new, tcp_callback_sent); //register send callback
 8001450:	490b      	ldr	r1, [pc, #44]	; (8001480 <tcp_callback_connected+0x5c>)
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f012 ff50 	bl	80142f8 <tcp_sent>
  tcp_recv(pcb_new, tcp_callback_received);  //register receive callback
 8001458:	490a      	ldr	r1, [pc, #40]	; (8001484 <tcp_callback_connected+0x60>)
 800145a:	68b8      	ldr	r0, [r7, #8]
 800145c:	f012 ff2a 	bl	80142b4 <tcp_recv>
  tcp_err(pcb_new, tcp_callback_error); //register error callback
 8001460:	4909      	ldr	r1, [pc, #36]	; (8001488 <tcp_callback_connected+0x64>)
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f012 ff6a 	bl	801433c <tcp_err>
  tcp_poll(pcb_new, tcp_callback_poll, 0); //register poll callback
 8001468:	2200      	movs	r2, #0
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <tcp_callback_connected+0x68>)
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f012 ff9f 	bl	80143b0 <tcp_poll>

  app_send_data(); //send a request
 8001472:	f000 f80d 	bl	8001490 <app_send_data>

  return ERR_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	080014ed 	.word	0x080014ed
 8001484:	08001559 	.word	0x08001559
 8001488:	080016b5 	.word	0x080016b5
 800148c:	080016d9 	.word	0x080016d9

08001490 <app_send_data>:
/*
 * app_send_data
 * send the request to the server
 */
static void app_send_data(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  memset(&packet, 0, sizeof(struct time_packet));
 8001494:	220c      	movs	r2, #12
 8001496:	2100      	movs	r1, #0
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <app_send_data+0x50>)
 800149a:	f01a fdb3 	bl	801c004 <memset>
  packet.head = 0xAE; //head
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <app_send_data+0x50>)
 80014a0:	22ae      	movs	r2, #174	; 0xae
 80014a2:	701a      	strb	r2, [r3, #0]
  packet.type = REQ; //request type
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <app_send_data+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	705a      	strb	r2, [r3, #1]
  packet.tail = 0xEA; //tail
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <app_send_data+0x50>)
 80014ac:	22ea      	movs	r2, #234	; 0xea
 80014ae:	72da      	strb	r2, [r3, #11]
  packet.dummy[0] = 't';
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <app_send_data+0x50>)
 80014b2:	2274      	movs	r2, #116	; 0x74
 80014b4:	721a      	strb	r2, [r3, #8]
  packet.dummy[1] = 'e';
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <app_send_data+0x50>)
 80014b8:	2265      	movs	r2, #101	; 0x65
 80014ba:	725a      	strb	r2, [r3, #9]
  packet.dummy[2] = 's';
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <app_send_data+0x50>)
 80014be:	2273      	movs	r2, #115	; 0x73
 80014c0:	729a      	strb	r2, [r3, #10]
  packet.dummy[3] = 't';
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <app_send_data+0x50>)
 80014c4:	2274      	movs	r2, #116	; 0x74
 80014c6:	72da      	strb	r2, [r3, #11]
  nWritten = 0; //clear index
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <app_send_data+0x54>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	801a      	strh	r2, [r3, #0]

  // TCP_WRITE_FLAG_COPY : 복사 후 전송하기 때문에 packet 값을 변경해도 되지만 사용하지 않는 경우에는 packet 내용을 변경하면 원하지 않는 데이터가 전송

  //tcp_write(pcb_client, &packet,sizeof(struct time_packet), TCP_WRITE_FLAG_COPY); //use copied data
  tcp_write(pcb_client, &packet,sizeof(struct time_packet), 0); //use pointer, should not changed until receive ACK
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <app_send_data+0x58>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	220c      	movs	r2, #12
 80014d6:	4902      	ldr	r1, [pc, #8]	; (80014e0 <app_send_data+0x50>)
 80014d8:	f015 fe1c 	bl	8017114 <tcp_write>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200002bc 	.word	0x200002bc
 80014e4:	200002ca 	.word	0x200002ca
 80014e8:	200002b4 	.word	0x200002b4

080014ec <tcp_callback_sent>:
/*
 * tcp_callback_sent
 * callback when data sending is finished, control leds
 */
static err_t tcp_callback_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	4613      	mov	r3, r2
 80014f8:	80fb      	strh	r3, [r7, #6]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  nWritten += len;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <tcp_callback_sent+0x5c>)
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4413      	add	r3, r2
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <tcp_callback_sent+0x5c>)
 8001506:	801a      	strh	r2, [r3, #0]

  if(nWritten < sizeof(struct time_packet)) //need to flush remain data
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <tcp_callback_sent+0x5c>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	2b0b      	cmp	r3, #11
 800150e:	d805      	bhi.n	800151c <tcp_callback_sent+0x30>
  {
    tcp_output(pcb_client); //flush
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <tcp_callback_sent+0x60>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f016 fbe7 	bl	8017ce8 <tcp_output>
 800151a:	e00f      	b.n	800153c <tcp_callback_sent+0x50>
  }
  else if(nWritten > sizeof(struct time_packet)) //invalid length of sent data
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <tcp_callback_sent+0x5c>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	2b0c      	cmp	r3, #12
 8001522:	d907      	bls.n	8001534 <tcp_callback_sent+0x48>
  {
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET); //error led
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <tcp_callback_sent+0x64>)
 800152a:	f005 ff7f 	bl	800742c <HAL_GPIO_WritePin>
    app_close_conn();
 800152e:	f000 f893 	bl	8001658 <app_close_conn>
 8001532:	e003      	b.n	800153c <tcp_callback_sent+0x50>
  }
  else
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin); //blink green when sent O.K
 8001534:	2101      	movs	r1, #1
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <tcp_callback_sent+0x68>)
 8001538:	f005 ff90 	bl	800745c <HAL_GPIO_TogglePin>
  }

  return ERR_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200002ca 	.word	0x200002ca
 800154c:	200002b4 	.word	0x200002b4
 8001550:	42021800 	.word	0x42021800
 8001554:	42020400 	.word	0x42020400

08001558 <tcp_callback_received>:
/*
 * tcp_callback_received
 * callback when data is received, validate received data and parse it
 */
static err_t tcp_callback_received(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af04      	add	r7, sp, #16
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	70fb      	strb	r3, [r7, #3]
  err_t ret_err;

  if (p == NULL) //pbuf is null when session is closed
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d104      	bne.n	8001576 <tcp_callback_received+0x1e>
  {
    app_close_conn();
 800156c:	f000 f874 	bl	8001658 <app_close_conn>
    ret_err = ERR_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	75fb      	strb	r3, [r7, #23]
 8001574:	e064      	b.n	8001640 <tcp_callback_received+0xe8>
  }
  else if (err != ERR_OK) //ERR_ABRT is returned when called tcp_abort
 8001576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <tcp_callback_received+0x3e>
  {
    tcp_recved(tpcb, p->tot_len); //advertise window size
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	891b      	ldrh	r3, [r3, #8]
 8001582:	4619      	mov	r1, r3
 8001584:	68b8      	ldr	r0, [r7, #8]
 8001586:	f011 fe89 	bl	801329c <tcp_recved>

    pbuf_free(p); //free pbuf
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f010 ff14 	bl	80123b8 <pbuf_free>
    ret_err = err;
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	75fb      	strb	r3, [r7, #23]
 8001594:	e054      	b.n	8001640 <tcp_callback_received+0xe8>
  }
  else //receiving data
  {
    tcp_recved(tpcb, p->tot_len); //advertise window size
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	891b      	ldrh	r3, [r3, #8]
 800159a:	4619      	mov	r1, r3
 800159c:	68b8      	ldr	r0, [r7, #8]
 800159e:	f011 fe7d 	bl	801329c <tcp_recved>

    memcpy(&packet + nRead, p->payload, p->len);
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <tcp_callback_received+0xf4>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <tcp_callback_received+0xf8>)
 80015b4:	18d0      	adds	r0, r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6859      	ldr	r1, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	895b      	ldrh	r3, [r3, #10]
 80015be:	461a      	mov	r2, r3
 80015c0:	f01a fdb9 	bl	801c136 <memcpy>
    nRead += p->len;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	895a      	ldrh	r2, [r3, #10]
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <tcp_callback_received+0xf4>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <tcp_callback_received+0xf4>)
 80015d2:	801a      	strh	r2, [r3, #0]

    // PARSING
    if(nRead == sizeof(struct time_packet) && packet.type == RESP) //if received length is valid
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <tcp_callback_received+0xf4>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d123      	bne.n	8001624 <tcp_callback_received+0xcc>
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <tcp_callback_received+0xf8>)
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d11f      	bne.n	8001624 <tcp_callback_received+0xcc>
    {
      nRead = 0;
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <tcp_callback_received+0xf4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	801a      	strh	r2, [r3, #0]

      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
             packet.year + 2000,
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <tcp_callback_received+0xf8>)
 80015ec:	789b      	ldrb	r3, [r3, #2]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015ee:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <tcp_callback_received+0xf8>)
 80015f4:	78db      	ldrb	r3, [r3, #3]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015f6:	461c      	mov	r4, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <tcp_callback_received+0xf8>)
 80015fa:	791b      	ldrb	r3, [r3, #4]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80015fc:	461d      	mov	r5, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <tcp_callback_received+0xf8>)
 8001600:	795b      	ldrb	r3, [r3, #5]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001602:	461a      	mov	r2, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <tcp_callback_received+0xf8>)
 8001606:	799b      	ldrb	r3, [r3, #6]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001608:	4618      	mov	r0, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <tcp_callback_received+0xf8>)
 800160c:	79db      	ldrb	r3, [r3, #7]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	9001      	str	r0, [sp, #4]
 8001612:	9200      	str	r2, [sp, #0]
 8001614:	462b      	mov	r3, r5
 8001616:	4622      	mov	r2, r4
 8001618:	480e      	ldr	r0, [pc, #56]	; (8001654 <tcp_callback_received+0xfc>)
 800161a:	f01a fc1b 	bl	801be54 <iprintf>

      app_close_conn(); //close connection
 800161e:	f000 f81b 	bl	8001658 <app_close_conn>
 8001622:	e008      	b.n	8001636 <tcp_callback_received+0xde>
    }
    else if(nRead > sizeof(struct time_packet))
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <tcp_callback_received+0xf4>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	2b0c      	cmp	r3, #12
 800162a:	d904      	bls.n	8001636 <tcp_callback_received+0xde>
    {
      nRead = 0;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <tcp_callback_received+0xf4>)
 800162e:	2200      	movs	r2, #0
 8001630:	801a      	strh	r2, [r3, #0]
      app_close_conn(); //close connection
 8001632:	f000 f811 	bl	8001658 <app_close_conn>
    }

    pbuf_free(p); //free pbuf
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f010 febe 	bl	80123b8 <pbuf_free>
    ret_err = ERR_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	75fb      	strb	r3, [r7, #23]
  }

  return ret_err;
 8001640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bdb0      	pop	{r4, r5, r7, pc}
 800164c:	200002c8 	.word	0x200002c8
 8001650:	200002bc 	.word	0x200002bc
 8001654:	0801cfb0 	.word	0x0801cfb0

08001658 <app_close_conn>:
/*
 * app_close_conn
 * close connection & clear callbacks
 */
static void app_close_conn(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* clear callback functions */
  tcp_arg(pcb_client, NULL);
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <app_close_conn+0x58>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f012 fe14 	bl	8014290 <tcp_arg>
  tcp_sent(pcb_client, NULL);
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <app_close_conn+0x58>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f012 fe42 	bl	80142f8 <tcp_sent>
  tcp_recv(pcb_client, NULL);
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <app_close_conn+0x58>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f012 fe1a 	bl	80142b4 <tcp_recv>
  tcp_err(pcb_client, NULL);
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <app_close_conn+0x58>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f012 fe58 	bl	801433c <tcp_err>
  tcp_poll(pcb_client, NULL, 0);
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <app_close_conn+0x58>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f012 fe8b 	bl	80143b0 <tcp_poll>

  tcp_close(pcb_client);    //close connection
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <app_close_conn+0x58>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f011 fb38 	bl	8012d14 <tcp_close>
  pcb_client = NULL;
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <app_close_conn+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200002b4 	.word	0x200002b4

080016b4 <tcp_callback_error>:
/*
 *  error callback
 *  call when there's an error, turn on an error led
 */
static void tcp_callback_error(void *arg, err_t err)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET); //error loed
 80016c0:	2201      	movs	r2, #1
 80016c2:	2110      	movs	r1, #16
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <tcp_callback_error+0x20>)
 80016c6:	f005 feb1 	bl	800742c <HAL_GPIO_WritePin>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	42021800 	.word	0x42021800

080016d8 <tcp_callback_poll>:
/*
 * poll callback
 * called when lwip is idle, do something such as watchdog reset
 */
static err_t tcp_callback_poll(void *arg, struct tcp_pcb *tpcb)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  return ERR_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <app_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
err_t app_echoserver_init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  err_t err;
  tcp_echoserver_pcb = tcp_new();
 80016f6:	f012 fdc3 	bl	8014280 <tcp_new>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <app_echoserver_init+0x80>)
 80016fe:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb == NULL)
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <app_echoserver_init+0x80>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d108      	bne.n	800171a <app_echoserver_init+0x2a>
  {
    //lack of memory
    memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <app_echoserver_init+0x80>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	2001      	movs	r0, #1
 8001710:	f00f ffdc 	bl	80116cc <memp_free>
    return ERR_MEM;
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
 8001718:	e025      	b.n	8001766 <app_echoserver_init+0x76>
  }
  /* bind echo_pcb to port 7 (ECHO protocol) */
  err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <app_echoserver_init+0x80>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2207      	movs	r2, #7
 8001720:	4914      	ldr	r1, [pc, #80]	; (8001774 <app_echoserver_init+0x84>)
 8001722:	4618      	mov	r0, r3
 8001724:	f011 fbec 	bl	8012f00 <tcp_bind>
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]

  if (err != ERR_OK)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <app_echoserver_init+0x56>
  {
    /* deallocate the pcb */
    /* Failt to bind */
    memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <app_echoserver_init+0x80>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	2001      	movs	r0, #1
 800173c:	f00f ffc6 	bl	80116cc <memp_free>
    return err;
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	e00f      	b.n	8001766 <app_echoserver_init+0x76>
  }

  /* start tcp listening for echo_pcb */
  tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <app_echoserver_init+0x80>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	21ff      	movs	r1, #255	; 0xff
 800174c:	4618      	mov	r0, r3
 800174e:	f011 fc8f 	bl	8013070 <tcp_listen_with_backlog>
 8001752:	4603      	mov	r3, r0
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <app_echoserver_init+0x80>)
 8001756:	6013      	str	r3, [r2, #0]

  /* initialize LwIP tcp_accept callback function */
  tcp_accept(tcp_echoserver_pcb, app_callback_accepted); // regi accept callback
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <app_echoserver_init+0x80>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4906      	ldr	r1, [pc, #24]	; (8001778 <app_echoserver_init+0x88>)
 800175e:	4618      	mov	r0, r3
 8001760:	f012 fe0e 	bl	8014380 <tcp_accept>

  return ERR_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200002cc 	.word	0x200002cc
 8001774:	08020058 	.word	0x08020058
 8001778:	0800177d 	.word	0x0800177d

0800177c <app_callback_accepted>:
  * @param  err: not used 
  * @retval err_t: error status
  */
/* accept callback */
static err_t app_callback_accepted(void *arg, struct tcp_pcb *pcb_new, err_t err)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	4613      	mov	r3, r2
 8001788:	71fb      	strb	r3, [r7, #7]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(arg); //remove warning
  LWIP_UNUSED_ARG(err);

  tcp_setprio(pcb_new, TCP_PRIO_NORMAL); //set priority for new pcb  (TCP_PRIO_MIN , TCP_PRIO_NORMAL)
 800178a:	2140      	movs	r1, #64	; 0x40
 800178c:	68b8      	ldr	r0, [r7, #8]
 800178e:	f012 fb85 	bl	8013e9c <tcp_setprio>

  es = (struct tcp_echoserver_struct*)
  mem_malloc(sizeof(struct tcp_echoserver_struct)); //allocate tcp_echoserver_struct
 8001792:	200c      	movs	r0, #12
 8001794:	f00f fd9a 	bl	80112cc <mem_malloc>
 8001798:	6178      	str	r0, [r7, #20]

  if (es == NULL) //lack of memory
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d106      	bne.n	80017ae <app_callback_accepted+0x32>
  {
    app_close_connection(pcb_new, es); //close connection
 80017a0:	6979      	ldr	r1, [r7, #20]
 80017a2:	68b8      	ldr	r0, [r7, #8]
 80017a4:	f000 f988 	bl	8001ab8 <app_close_connection>
    return ERR_MEM;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	e01d      	b.n	80017ea <app_callback_accepted+0x6e>
  }

  es->state = ES_ACCEPTED; //accepted
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
  es->pcb = pcb_new; //set pcb pointer
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	605a      	str	r2, [r3, #4]
  es->retries = 0; //clear counter
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2200      	movs	r2, #0
 80017be:	705a      	strb	r2, [r3, #1]
  es->p = NULL; //clear buffer pointer
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]

  tcp_arg(pcb_new, es);   //send es structure as an argument
 80017c6:	6979      	ldr	r1, [r7, #20]
 80017c8:	68b8      	ldr	r0, [r7, #8]
 80017ca:	f012 fd61 	bl	8014290 <tcp_arg>
  tcp_recv(pcb_new, app_callback_received); //register receive callback
 80017ce:	4909      	ldr	r1, [pc, #36]	; (80017f4 <app_callback_accepted+0x78>)
 80017d0:	68b8      	ldr	r0, [r7, #8]
 80017d2:	f012 fd6f 	bl	80142b4 <tcp_recv>
  tcp_err(pcb_new, app_callback_error); //register error callback
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <app_callback_accepted+0x7c>)
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f012 fdaf 	bl	801433c <tcp_err>
  tcp_poll(pcb_new, app_callback_poll, 0); //register poll callback
 80017de:	2200      	movs	r2, #0
 80017e0:	4906      	ldr	r1, [pc, #24]	; (80017fc <app_callback_accepted+0x80>)
 80017e2:	68b8      	ldr	r0, [r7, #8]
 80017e4:	f012 fde4 	bl	80143b0 <tcp_poll>

  return ERR_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08001801 	.word	0x08001801
 80017f8:	08001935 	.word	0x08001935
 80017fc:	08001969 	.word	0x08001969

08001800 <app_callback_received>:
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
/* receive callback */
static err_t app_callback_received(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL", arg != NULL); //check argument
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <app_callback_received+0x20>
 8001814:	4b43      	ldr	r3, [pc, #268]	; (8001924 <app_callback_received+0x124>)
 8001816:	2295      	movs	r2, #149	; 0x95
 8001818:	4943      	ldr	r1, [pc, #268]	; (8001928 <app_callback_received+0x128>)
 800181a:	4844      	ldr	r0, [pc, #272]	; (800192c <app_callback_received+0x12c>)
 800181c:	f01a fb1a 	bl	801be54 <iprintf>
  es = (struct tcp_echoserver_struct*) arg;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	61bb      	str	r3, [r7, #24]

  if (p == NULL) //callback is called but there's no data
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <app_callback_received+0x58>
  {
    es->state = ES_CLOSING;
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2203      	movs	r2, #3
 800182e:	701a      	strb	r2, [r3, #0]
    if (es->p == NULL)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <app_callback_received+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 8001838:	69b9      	ldr	r1, [r7, #24]
 800183a:	68b8      	ldr	r0, [r7, #8]
 800183c:	f000 f93c 	bl	8001ab8 <app_close_connection>
 8001840:	e007      	b.n	8001852 <app_callback_received+0x52>
    }
    else //if there's remained data to send
    {
      tcp_sent(tpcb, app_callback_sent); //register send callback
 8001842:	493b      	ldr	r1, [pc, #236]	; (8001930 <app_callback_received+0x130>)
 8001844:	68b8      	ldr	r0, [r7, #8]
 8001846:	f012 fd57 	bl	80142f8 <tcp_sent>
      app_send_data(tpcb, es); //send remained data
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	68b8      	ldr	r0, [r7, #8]
 800184e:	f000 f8df 	bl	8001a10 <app_send_data>
    }
    ret_err = ERR_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	77fb      	strb	r3, [r7, #31]
 8001856:	e05f      	b.n	8001918 <app_callback_received+0x118>
  }
  else if (err != ERR_OK) //error when receiving
 8001858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <app_callback_received+0x78>
  {
    if (p != NULL) //buffer is not empty
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <app_callback_received+0x72>
    {
      es->p = NULL;
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
      pbuf_free(p); //clear buffer
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f010 fda3 	bl	80123b8 <pbuf_free>
    }
    ret_err = err;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	77fb      	strb	r3, [r7, #31]
 8001876:	e04f      	b.n	8001918 <app_callback_received+0x118>
  }
  else if (es->state == ES_ACCEPTED) //first data receiving
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d110      	bne.n	80018a2 <app_callback_received+0xa2>
  {
    es->state = ES_RECEIVED; //change state
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2202      	movs	r2, #2
 8001884:	701a      	strb	r2, [r3, #0]
    es->p = p; //set buffer pointer
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	609a      	str	r2, [r3, #8]
    tcp_sent(tpcb, app_callback_sent); //register send callback
 800188c:	4928      	ldr	r1, [pc, #160]	; (8001930 <app_callback_received+0x130>)
 800188e:	68b8      	ldr	r0, [r7, #8]
 8001890:	f012 fd32 	bl	80142f8 <tcp_sent>
    app_send_data(tpcb, es); //send data via es->p
 8001894:	69b9      	ldr	r1, [r7, #24]
 8001896:	68b8      	ldr	r0, [r7, #8]
 8001898:	f000 f8ba 	bl	8001a10 <app_send_data>
    ret_err = ERR_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	77fb      	strb	r3, [r7, #31]
 80018a0:	e03a      	b.n	8001918 <app_callback_received+0x118>
  }
  else if (es->state == ES_RECEIVED) //additional data receiving
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d115      	bne.n	80018d6 <app_callback_received+0xd6>
  {
    if (es->p == NULL) //no data to send
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d107      	bne.n	80018c2 <app_callback_received+0xc2>
    {
      es->p = p; //set buffer pointer
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
      app_send_data(tpcb, es); //send data
 80018b8:	69b9      	ldr	r1, [r7, #24]
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 f8a8 	bl	8001a10 <app_send_data>
 80018c0:	e006      	b.n	80018d0 <app_callback_received+0xd0>
    }
    else //buffer is not empty, there's data to send
    {
      struct pbuf *ptr = es->p; //head buffer
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr, p); //append tail buffer to the head, this buffer will be handled by poll callback
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f010 fe8c 	bl	80125e8 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	77fb      	strb	r3, [r7, #31]
 80018d4:	e020      	b.n	8001918 <app_callback_received+0x118>
  }
  else if (es->state == ES_CLOSING) //receiving data when connection is closing
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d10e      	bne.n	80018fc <app_callback_received+0xfc>
  {
    tcp_recved(tpcb, p->tot_len); //advertise window size
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	891b      	ldrh	r3, [r3, #8]
 80018e2:	4619      	mov	r1, r3
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f011 fcd9 	bl	801329c <tcp_recved>
    es->p = NULL;
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f010 fd61 	bl	80123b8 <pbuf_free>
    ret_err = ERR_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	77fb      	strb	r3, [r7, #31]
 80018fa:	e00d      	b.n	8001918 <app_callback_received+0x118>
  }
  else //receive complete
  {
    tcp_recved(tpcb, p->tot_len); //advertise window size
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	891b      	ldrh	r3, [r3, #8]
 8001900:	4619      	mov	r1, r3
 8001902:	68b8      	ldr	r0, [r7, #8]
 8001904:	f011 fcca 	bl	801329c <tcp_recved>
    es->p = NULL;
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f010 fd52 	bl	80123b8 <pbuf_free>
    ret_err = ERR_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8001918:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	0801cfd0 	.word	0x0801cfd0
 8001928:	0801d000 	.word	0x0801d000
 800192c:	0801d00c 	.word	0x0801d00c
 8001930:	080019c1 	.word	0x080019c1

08001934 <app_callback_error>:
  * @param  err: not used
  * @retval None
  */
/* error callback */
static void app_callback_error(void *arg, err_t err)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct*) arg;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <app_callback_error+0x1c>
  {
    mem_free(es); //free es structure
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f00f fb58 	bl	8011000 <mem_free>
  }

  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET); //turn on RED LED when there's error.
 8001950:	2201      	movs	r2, #1
 8001952:	2110      	movs	r1, #16
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <app_callback_error+0x30>)
 8001956:	f005 fd69 	bl	800742c <HAL_GPIO_WritePin>
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	42021800 	.word	0x42021800

08001968 <app_callback_poll>:
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
/* poll callback */
static err_t app_callback_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  struct tcp_echoserver_struct *es;
  es = (struct tcp_echoserver_struct*) arg;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  if (es == NULL) //if there's no es structure
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <app_callback_poll+0x20>
  {
    tcp_abort(tpcb); //abort connection
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f011 fab3 	bl	8012ee8 <tcp_abort>
    return ERR_ABRT;
 8001982:	f06f 030c 	mvn.w	r3, #12
 8001986:	e015      	b.n	80019b4 <app_callback_poll+0x4c>
  }

  if (es->p != NULL) //if there's data to send
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <app_callback_poll+0x3a>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8001990:	490a      	ldr	r1, [pc, #40]	; (80019bc <app_callback_poll+0x54>)
 8001992:	6838      	ldr	r0, [r7, #0]
 8001994:	f012 fcb0 	bl	80142f8 <tcp_sent>
    app_send_data(tpcb, es); //send data
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	6838      	ldr	r0, [r7, #0]
 800199c:	f000 f838 	bl	8001a10 <app_send_data>
 80019a0:	e007      	b.n	80019b2 <app_callback_poll+0x4a>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d103      	bne.n	80019b2 <app_callback_poll+0x4a>
    {
      app_close_connection(tpcb, es);   //close connection
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f000 f883 	bl	8001ab8 <app_close_connection>
    }
  }

  return ERR_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	080019c1 	.word	0x080019c1

080019c0 <app_callback_sent>:
  * @param  None
  * @retval None
  */
/* send callback */
static err_t app_callback_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct*) arg;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2200      	movs	r2, #0
 80019d6:	705a      	strb	r2, [r3, #1]

  if (es->p != NULL) //if there's data to send
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <app_callback_sent+0x32>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 80019e0:	490a      	ldr	r1, [pc, #40]	; (8001a0c <app_callback_sent+0x4c>)
 80019e2:	68b8      	ldr	r0, [r7, #8]
 80019e4:	f012 fc88 	bl	80142f8 <tcp_sent>
    app_send_data(tpcb, es); //send data
 80019e8:	6979      	ldr	r1, [r7, #20]
 80019ea:	68b8      	ldr	r0, [r7, #8]
 80019ec:	f000 f810 	bl	8001a10 <app_send_data>
 80019f0:	e007      	b.n	8001a02 <app_callback_sent+0x42>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d103      	bne.n	8001a02 <app_callback_sent+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 80019fa:	6979      	ldr	r1, [r7, #20]
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	f000 f85b 	bl	8001ab8 <app_close_connection>
    }
  }
  return ERR_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	080019c1 	.word	0x080019c1

08001a10 <app_send_data>:
  * @param  es: pointer on echo_state structure
  * @retval None
  */
/* send data */
static void app_send_data(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75fb      	strb	r3, [r7, #23]

  // while no error, data to send, data size is smaller than the size of the send buffer
  while ((wr_err == ERR_OK) && (es->p != NULL)
 8001a1e:	e037      	b.n	8001a90 <app_send_data+0x80>
      && (es->p->len <= tcp_sndbuf(tpcb)))
  {
    ptr = es->p;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	613b      	str	r3, [r7, #16]
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, TCP_WRITE_FLAG_COPY); //send data
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6859      	ldr	r1, [r3, #4]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	895a      	ldrh	r2, [r3, #10]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f015 fb6f 	bl	8017114 <tcp_write>
 8001a36:	4603      	mov	r3, r0
 8001a38:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d11d      	bne.n	8001a7e <app_send_data+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	895b      	ldrh	r3, [r3, #10]
 8001a46:	81fb      	strh	r3, [r7, #14]
      es->p = ptr->next;
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	609a      	str	r2, [r3, #8]

      if (es->p != NULL) //there's chained buffer to send
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <app_send_data+0x52>
      {
        pbuf_ref(es->p);  //increase reference counter
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f010 fd4b 	bl	80124f8 <pbuf_ref>
      }

      do
      {
        freed = pbuf_free(ptr);   //free old buffer
 8001a62:	6938      	ldr	r0, [r7, #16]
 8001a64:	f010 fca8 	bl	80123b8 <pbuf_free>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	737b      	strb	r3, [r7, #13]
      }
      while (freed == 0);
 8001a6c:	7b7b      	ldrb	r3, [r7, #13]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f7      	beq.n	8001a62 <app_send_data+0x52>

      tcp_recved(tpcb, plen);     //advertise window size
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f011 fc10 	bl	801329c <tcp_recved>
 8001a7c:	e008      	b.n	8001a90 <app_send_data+0x80>
    }
    else
    {
      es->p = ptr;  //fail to send, recover buffer pointer
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]
      es->retries++;  //increase counter
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	785b      	ldrb	r3, [r3, #1]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	705a      	strb	r2, [r3, #1]
      && (es->p->len <= tcp_sndbuf(tpcb)))
 8001a90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10b      	bne.n	8001ab0 <app_send_data+0xa0>
  while ((wr_err == ERR_OK) && (es->p != NULL)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <app_send_data+0xa0>
      && (es->p->len <= tcp_sndbuf(tpcb)))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	895a      	ldrh	r2, [r3, #10]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d9b7      	bls.n	8001a20 <app_send_data+0x10>
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <app_close_connection>:
  * @param  es: pointer on echo_state structure
  * @retval None
  */
/* close connection */
static void app_close_connection(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  /* clear callback functions */
  tcp_arg(tpcb, NULL);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f012 fbe3 	bl	8014290 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001aca:	2100      	movs	r1, #0
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f012 fc13 	bl	80142f8 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f012 fbed 	bl	80142b4 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001ada:	2100      	movs	r1, #0
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f012 fc2d 	bl	801433c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f012 fc62 	bl	80143b0 <tcp_poll>

  if (es != NULL)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <app_close_connection+0x40>
  {
    mem_free(es);   //free es structure
 8001af2:	6838      	ldr	r0, [r7, #0]
 8001af4:	f00f fa84 	bl	8011000 <mem_free>
  }

  tcp_close(tpcb);    //close connection
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f011 f90b 	bl	8012d14 <tcp_close>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8001b10:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <low_level_init+0xd8>)
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1a:	6018      	str	r0, [r3, #0]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	8019      	strh	r1, [r3, #0]

  EthHandle.Instance = ETH;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <low_level_init+0xdc>)
 8001b22:	4a31      	ldr	r2, [pc, #196]	; (8001be8 <low_level_init+0xe0>)
 8001b24:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 8001b26:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <low_level_init+0xdc>)
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <low_level_init+0xdc>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8001b34:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <low_level_init+0xdc>)
 8001b36:	4a2d      	ldr	r2, [pc, #180]	; (8001bec <low_level_init+0xe4>)
 8001b38:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <low_level_init+0xdc>)
 8001b3c:	4a2c      	ldr	r2, [pc, #176]	; (8001bf0 <low_level_init+0xe8>)
 8001b3e:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <low_level_init+0xdc>)
 8001b42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b46:	615a      	str	r2, [r3, #20]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8001b48:	4826      	ldr	r0, [pc, #152]	; (8001be4 <low_level_init+0xdc>)
 8001b4a:	f002 fcd1 	bl	80044f0 <HAL_ETH_Init>

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2206      	movs	r2, #6
 8001b52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001b8c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001b94:	f043 030a 	orr.w	r3, r3, #10
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8001ba0:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <low_level_init+0xec>)
 8001ba2:	f00f fc8d 	bl	80114c0 <memp_init_pool>

  /* Set Tx packet config common parameters */
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001ba6:	2238      	movs	r2, #56	; 0x38
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <low_level_init+0xf0>)
 8001bac:	f01a fa2a 	bl	801c004 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <low_level_init+0xf0>)
 8001bb2:	2221      	movs	r2, #33	; 0x21
 8001bb4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <low_level_init+0xf0>)
 8001bb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bbc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <low_level_init+0xf0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]

  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8001bc4:	490d      	ldr	r1, [pc, #52]	; (8001bfc <low_level_init+0xf4>)
 8001bc6:	480e      	ldr	r0, [pc, #56]	; (8001c00 <low_level_init+0xf8>)
 8001bc8:	f000 fb48 	bl	800225c <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <low_level_init+0xf8>)
 8001bce:	f000 fb77 	bl	80022c0 <LAN8742_Init>

  ethernet_link_check_state(netif);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fa46 	bl	8002064 <ethernet_link_check_state>
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	0801d034 	.word	0x0801d034
 8001be4:	2000351c 	.word	0x2000351c
 8001be8:	40028000 	.word	0x40028000
 8001bec:	200002d0 	.word	0x200002d0
 8001bf0:	20000330 	.word	0x20000330
 8001bf4:	0801fddc 	.word	0x0801fddc
 8001bf8:	200035cc 	.word	0x200035cc
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	20003604 	.word	0x20003604

08001c04 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b092      	sub	sp, #72	; 0x48
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2230      	movs	r2, #48	; 0x30
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f01a f9ed 	bl	801c004 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2230      	movs	r2, #48	; 0x30
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f01a f9e6 	bl	801c004 <memset>

  for(q = p; q != NULL; q = q->next)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8001c3c:	e045      	b.n	8001cca <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8001c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d902      	bls.n	8001c4a <low_level_output+0x46>
      return ERR_IF;
 8001c44:	f06f 030b 	mvn.w	r3, #11
 8001c48:	e055      	b.n	8001cf6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8001c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	3348      	adds	r3, #72	; 0x48
 8001c5a:	443b      	add	r3, r7
 8001c5c:	3b3c      	subs	r3, #60	; 0x3c
 8001c5e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8001c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c62:	895b      	ldrh	r3, [r3, #10]
 8001c64:	4619      	mov	r1, r3
 8001c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3348      	adds	r3, #72	; 0x48
 8001c72:	443b      	add	r3, r7
 8001c74:	3b38      	subs	r3, #56	; 0x38
 8001c76:	6019      	str	r1, [r3, #0]

    if(i>0)
 8001c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d011      	beq.n	8001ca2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8001c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	f107 000c 	add.w	r0, r7, #12
 8001c86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c88:	460b      	mov	r3, r1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	18c1      	adds	r1, r0, r3
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	3348      	adds	r3, #72	; 0x48
 8001c9c:	443b      	add	r3, r7
 8001c9e:	3b34      	subs	r3, #52	; 0x34
 8001ca0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8001ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8001caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	3348      	adds	r3, #72	; 0x48
 8001cb6:	443b      	add	r3, r7
 8001cb8:	3b34      	subs	r3, #52	; 0x34
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    }

    i++;
 8001cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8001cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8001cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1b6      	bne.n	8001c3e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	891b      	ldrh	r3, [r3, #8]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <low_level_output+0xfc>)
 8001cd8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <low_level_output+0xfc>)
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <low_level_output+0xfc>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8001ce8:	2214      	movs	r2, #20
 8001cea:	4905      	ldr	r1, [pc, #20]	; (8001d00 <low_level_output+0xfc>)
 8001cec:	4805      	ldr	r0, [pc, #20]	; (8001d04 <low_level_output+0x100>)
 8001cee:	f002 fd97 	bl	8004820 <HAL_ETH_Transmit>

  return errval;
 8001cf2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3748      	adds	r7, #72	; 0x48
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200035cc 	.word	0x200035cc
 8001d04:	2000351c 	.word	0x2000351c

08001d08 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <low_level_input+0x2c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <low_level_input+0x30>)
 8001d24:	f002 fe13 	bl	800494e <HAL_ETH_ReadData>
  }
  return p;
 8001d28:	68fb      	ldr	r3, [r7, #12]

}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20003518 	.word	0x20003518
 8001d38:	2000351c 	.word	0x2000351c

08001d3c <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input(struct netif *netif)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]

    do
    {
      p = low_level_input( netif );
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ffdd 	bl	8001d08 <low_level_input>
 8001d4e:	60f8      	str	r0, [r7, #12]
      if (p != NULL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <ethernetif_input+0x30>
      {
        if (netif->input( p, netif) != ERR_OK )
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	4798      	blx	r3
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <ethernetif_input+0x30>
        {
          pbuf_free(p);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f010 fb26 	bl	80123b8 <pbuf_free>
        }
      }

    } while(p!=NULL);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ea      	bne.n	8001d48 <ethernetif_input+0xc>

}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <ethernetif_init+0x1c>
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <ethernetif_init+0x48>)
 8001d8c:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001d90:	490d      	ldr	r1, [pc, #52]	; (8001dc8 <ethernetif_init+0x4c>)
 8001d92:	480e      	ldr	r0, [pc, #56]	; (8001dcc <ethernetif_init+0x50>)
 8001d94:	f01a f85e 	bl	801be54 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2273      	movs	r2, #115	; 0x73
 8001d9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2274      	movs	r2, #116	; 0x74
 8001da4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <ethernetif_init+0x54>)
 8001dac:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <ethernetif_init+0x58>)
 8001db2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fea7 	bl	8001b08 <low_level_init>

  return ERR_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	0801d03c 	.word	0x0801d03c
 8001dc8:	0801d068 	.word	0x0801d068
 8001dcc:	0801d078 	.word	0x0801d078
 8001dd0:	08019a75 	.word	0x08019a75
 8001dd4:	08001c05 	.word	0x08001c05

08001dd8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	4807      	ldr	r0, [pc, #28]	; (8001e04 <pbuf_free_custom+0x2c>)
 8001de8:	f00f fc4c 	bl	8011684 <memp_free_pool>
   /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <pbuf_free_custom+0x30>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <pbuf_free_custom+0x30>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	0801fddc 	.word	0x0801fddc
 8001e08:	20003518 	.word	0x20003518

08001e0c <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001e10:	f002 f9a2 	bl	8004158 <HAL_GetTick>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08e      	sub	sp, #56	; 0x38
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
	  if(heth->Instance==ETH)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a5d      	ldr	r2, [pc, #372]	; (8001fb0 <HAL_ETH_MspInit+0x194>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	f040 80b3 	bne.w	8001fa6 <HAL_ETH_MspInit+0x18a>
	  {
	  /* USER CODE BEGIN ETH_MspInit 0 */

	  /* USER CODE END ETH_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_ETH_CLK_ENABLE();
 8001e40:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	4a5b      	ldr	r2, [pc, #364]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e50:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5a:	623b      	str	r3, [r7, #32]
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
	    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001e5e:	4b55      	ldr	r3, [pc, #340]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e64:	4a53      	ldr	r2, [pc, #332]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e6e:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
	    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	4a4c      	ldr	r2, [pc, #304]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	69bb      	ldr	r3, [r7, #24]

	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea0:	4a44      	ldr	r2, [pc, #272]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eaa:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697b      	ldr	r3, [r7, #20]
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ec8:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001edc:	4a35      	ldr	r2, [pc, #212]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001efa:	4a2e      	ldr	r2, [pc, #184]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f00:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_ETH_MspInit+0x198>)
 8001f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
	    PC5     ------> ETH_RXD1
	    PB15     ------> ETH_TXD1
	    PG11     ------> ETH_TX_EN
	    PG13     ------> ETH_TXD0
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001f12:	2332      	movs	r3, #50	; 0x32
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f22:	230b      	movs	r3, #11
 8001f24:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4822      	ldr	r0, [pc, #136]	; (8001fb8 <HAL_ETH_MspInit+0x19c>)
 8001f2e:	f005 f92b 	bl	8007188 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001f32:	2386      	movs	r3, #134	; 0x86
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f42:	230b      	movs	r3, #11
 8001f44:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481b      	ldr	r0, [pc, #108]	; (8001fbc <HAL_ETH_MspInit+0x1a0>)
 8001f4e:	f005 f91b 	bl	8007188 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f64:	230b      	movs	r3, #11
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4814      	ldr	r0, [pc, #80]	; (8001fc0 <HAL_ETH_MspInit+0x1a4>)
 8001f70:	f005 f90a 	bl	8007188 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001f74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f86:	230b      	movs	r3, #11
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
	    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <HAL_ETH_MspInit+0x1a8>)
 8001f92:	f005 f8f9 	bl	8007188 <HAL_GPIO_Init>

	    /* ETH interrupt Init */
	    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2107      	movs	r1, #7
 8001f9a:	206a      	movs	r0, #106	; 0x6a
 8001f9c:	f002 f9da 	bl	8004354 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001fa0:	206a      	movs	r0, #106	; 0x6a
 8001fa2:	f002 f9f1 	bl	8004388 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN ETH_MspInit 1 */

	  /* USER CODE END ETH_MspInit 1 */
	  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3738      	adds	r7, #56	; 0x38
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40028000 	.word	0x40028000
 8001fb4:	44020c00 	.word	0x44020c00
 8001fb8:	42020800 	.word	0x42020800
 8001fbc:	42020000 	.word	0x42020000
 8001fc0:	42020400 	.word	0x42020400
 8001fc4:	42021800 	.word	0x42021800

08001fc8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <ETH_PHY_IO_Init+0x10>)
 8001fce:	f003 f883 	bl	80050d8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000351c 	.word	0x2000351c

08001fdc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return 0;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4807      	ldr	r0, [pc, #28]	; (800201c <ETH_PHY_IO_ReadReg+0x30>)
 8002000:	f002 fdd3 	bl	8004baa <HAL_ETH_ReadPHYRegister>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	e000      	b.n	8002012 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000351c 	.word	0x2000351c

08002020 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	68f9      	ldr	r1, [r7, #12]
 8002032:	4807      	ldr	r0, [pc, #28]	; (8002050 <ETH_PHY_IO_WriteReg+0x30>)
 8002034:	f002 fe0e 	bl	8004c54 <HAL_ETH_WritePHYRegister>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e000      	b.n	8002046 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000351c 	.word	0x2000351c

08002054 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002058:	f002 f87e 	bl	8004158 <HAL_GetTick>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <ethernet_link_check_state>:
/**
  * @brief
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0a0      	sub	sp, #128	; 0x80
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	2264      	movs	r2, #100	; 0x64
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f019 ffc5 	bl	801c004 <memset>
  int32_t PHYLinkState = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex =0U;
 800207e:	2300      	movs	r3, #0
 8002080:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002082:	2300      	movs	r3, #0
 8002084:	67bb      	str	r3, [r7, #120]	; 0x78
 8002086:	2300      	movs	r3, #0
 8002088:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800208a:	483a      	ldr	r0, [pc, #232]	; (8002174 <ethernet_link_check_state+0x110>)
 800208c:	f000 f9c0 	bl	8002410 <LAN8742_GetLinkState>
 8002090:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <ethernet_link_check_state+0x5a>
 80020a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	dc09      	bgt.n	80020be <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&EthHandle);
 80020aa:	4833      	ldr	r0, [pc, #204]	; (8002178 <ethernet_link_check_state+0x114>)
 80020ac:	f002 fb68 	bl	8004780 <HAL_ETH_Stop>
    netif_set_down(netif);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f00f fd6b 	bl	8011b8c <netif_set_down>
    netif_set_link_down(netif);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f00f fdce 	bl	8011c58 <netif_set_link_down>
      HAL_ETH_Start(&EthHandle);
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }
}
 80020bc:	e055      	b.n	800216a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d14e      	bne.n	800216a <ethernet_link_check_state+0x106>
 80020cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	dd4b      	ble.n	800216a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80020d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d4:	3b02      	subs	r3, #2
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d82a      	bhi.n	8002130 <ethernet_link_check_state+0xcc>
 80020da:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <ethernet_link_check_state+0x7c>)
 80020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e0:	080020f1 	.word	0x080020f1
 80020e4:	08002103 	.word	0x08002103
 80020e8:	08002113 	.word	0x08002113
 80020ec:	08002123 	.word	0x08002123
      duplex = ETH_FULLDUPLEX_MODE;
 80020f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80020f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80020fc:	2301      	movs	r3, #1
 80020fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8002100:	e017      	b.n	8002132 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8002102:	2300      	movs	r3, #0
 8002104:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8002106:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800210a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800210c:	2301      	movs	r3, #1
 800210e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8002110:	e00f      	b.n	8002132 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8002112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002116:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8002118:	2300      	movs	r3, #0
 800211a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800211c:	2301      	movs	r3, #1
 800211e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8002120:	e007      	b.n	8002132 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8002122:	2300      	movs	r3, #0
 8002124:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8002126:	2300      	movs	r3, #0
 8002128:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800212e:	e000      	b.n	8002132 <ethernet_link_check_state+0xce>
      break;
 8002130:	bf00      	nop
    if(linkchanged)
 8002132:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d018      	beq.n	800216a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4619      	mov	r1, r3
 800213e:	480e      	ldr	r0, [pc, #56]	; (8002178 <ethernet_link_check_state+0x114>)
 8002140:	f002 fddc 	bl	8004cfc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8002144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8002148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800214a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	4619      	mov	r1, r3
 8002152:	4809      	ldr	r0, [pc, #36]	; (8002178 <ethernet_link_check_state+0x114>)
 8002154:	f002 ffa6 	bl	80050a4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&EthHandle);
 8002158:	4807      	ldr	r0, [pc, #28]	; (8002178 <ethernet_link_check_state+0x114>)
 800215a:	f002 faaf 	bl	80046bc <HAL_ETH_Start>
      netif_set_up(netif);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f00f fca8 	bl	8011ab4 <netif_set_up>
      netif_set_link_up(netif);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f00f fd43 	bl	8011bf0 <netif_set_link_up>
}
 800216a:	bf00      	nop
 800216c:	3780      	adds	r7, #128	; 0x80
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20003604 	.word	0x20003604
 8002178:	2000351c 	.word	0x2000351c

0800217c <HAL_ETH_RxAllocateCallback>:


void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af02      	add	r7, sp, #8
 8002182:	6078      	str	r0, [r7, #4]
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8002184:	4812      	ldr	r0, [pc, #72]	; (80021d0 <HAL_ETH_RxAllocateCallback+0x54>)
 8002186:	f00f fa0f 	bl	80115a8 <memp_malloc_pool>
 800218a:	60f8      	str	r0, [r7, #12]
  if (p)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d014      	beq.n	80021bc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f103 0220 	add.w	r2, r3, #32
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <HAL_ETH_RxAllocateCallback+0x58>)
 80021a0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021aa:	9201      	str	r2, [sp, #4]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2241      	movs	r2, #65	; 0x41
 80021b2:	2100      	movs	r1, #0
 80021b4:	2000      	movs	r0, #0
 80021b6:	f00f ff45 	bl	8012044 <pbuf_alloced_custom>
  else
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 80021ba:	e005      	b.n	80021c8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	0801fddc 	.word	0x0801fddc
 80021d4:	08001dd9 	.word	0x08001dd9
 80021d8:	20003518 	.word	0x20003518

080021dc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	807b      	strh	r3, [r7, #2]
  struct pbuf **ppStart = (struct pbuf **)pStart;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3b20      	subs	r3, #32
 80021fa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	2200      	movs	r2, #0
 8002206:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e003      	b.n	8002226 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	e009      	b.n	8002248 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	891a      	ldrh	r2, [r3, #8]
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	4413      	add	r3, r2
 800223c:	b29a      	uxth	r2, r3
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f2      	bne.n	8002234 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
}
 800224e:	bf00      	nop
 8002250:	bf00      	nop
 8002252:	3724      	adds	r7, #36	; 0x24
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <LAN8742_RegisterBusIO+0x28>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <LAN8742_RegisterBusIO+0x28>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <LAN8742_RegisterBusIO+0x28>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	e014      	b.n	80022b4 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d17c      	bne.n	80023da <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	e01c      	b.n	8002334 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f107 0208 	add.w	r2, r7, #8
 8002302:	2112      	movs	r1, #18
 8002304:	6978      	ldr	r0, [r7, #20]
 8002306:	4798      	blx	r3
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	da03      	bge.n	8002316 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800230e:	f06f 0304 	mvn.w	r3, #4
 8002312:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002314:	e00b      	b.n	800232e <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	429a      	cmp	r2, r3
 8002320:	d105      	bne.n	800232e <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
         break;
 800232c:	e005      	b.n	800233a <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b1f      	cmp	r3, #31
 8002338:	d9df      	bls.n	80022fa <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b1f      	cmp	r3, #31
 8002340:	d902      	bls.n	8002348 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002342:	f06f 0302 	mvn.w	r3, #2
 8002346:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d145      	bne.n	80023da <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6810      	ldr	r0, [r2, #0]
 8002356:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800235a:	2100      	movs	r1, #0
 800235c:	4798      	blx	r3
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	db37      	blt.n	80023d4 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6810      	ldr	r0, [r2, #0]
 800236c:	f107 0208 	add.w	r2, r7, #8
 8002370:	2100      	movs	r1, #0
 8002372:	4798      	blx	r3
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	db28      	blt.n	80023cc <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	4798      	blx	r3
 8002380:	4603      	mov	r3, r0
 8002382:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002384:	e01c      	b.n	80023c0 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	4798      	blx	r3
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002398:	d80e      	bhi.n	80023b8 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6810      	ldr	r0, [r2, #0]
 80023a2:	f107 0208 	add.w	r2, r7, #8
 80023a6:	2100      	movs	r1, #0
 80023a8:	4798      	blx	r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	da07      	bge.n	80023c0 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 80023b0:	f06f 0304 	mvn.w	r3, #4
 80023b4:	613b      	str	r3, [r7, #16]
                 break;
 80023b6:	e010      	b.n	80023da <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80023b8:	f06f 0301 	mvn.w	r3, #1
 80023bc:	613b      	str	r3, [r7, #16]
               break;
 80023be:	e00c      	b.n	80023da <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1dd      	bne.n	8002386 <LAN8742_Init+0xc6>
 80023ca:	e006      	b.n	80023da <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80023cc:	f06f 0304 	mvn.w	r3, #4
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	e002      	b.n	80023da <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80023d4:	f06f 0303 	mvn.w	r3, #3
 80023d8:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d112      	bne.n	8002406 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4798      	blx	r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80023ea:	bf00      	nop
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4798      	blx	r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80023fe:	d9f5      	bls.n	80023ec <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	605a      	str	r2, [r3, #4]
   }

   return status;
 8002406:	693b      	ldr	r3, [r7, #16]
 }
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6810      	ldr	r0, [r2, #0]
 8002424:	f107 020c 	add.w	r2, r7, #12
 8002428:	2101      	movs	r1, #1
 800242a:	4798      	blx	r3
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	da02      	bge.n	8002438 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002432:	f06f 0304 	mvn.w	r3, #4
 8002436:	e06e      	b.n	8002516 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6810      	ldr	r0, [r2, #0]
 8002440:	f107 020c 	add.w	r2, r7, #12
 8002444:	2101      	movs	r1, #1
 8002446:	4798      	blx	r3
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	da02      	bge.n	8002454 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800244e:	f06f 0304 	mvn.w	r3, #4
 8002452:	e060      	b.n	8002516 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800245e:	2301      	movs	r3, #1
 8002460:	e059      	b.n	8002516 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6810      	ldr	r0, [r2, #0]
 800246a:	f107 020c 	add.w	r2, r7, #12
 800246e:	2100      	movs	r1, #0
 8002470:	4798      	blx	r3
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	da02      	bge.n	800247e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002478:	f06f 0304 	mvn.w	r3, #4
 800247c:	e04b      	b.n	8002516 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11b      	bne.n	80024c0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <LAN8742_GetLinkState+0x90>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800249c:	2302      	movs	r3, #2
 800249e:	e03a      	b.n	8002516 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e033      	b.n	8002516 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80024b8:	2304      	movs	r3, #4
 80024ba:	e02c      	b.n	8002516 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80024bc:	2305      	movs	r3, #5
 80024be:	e02a      	b.n	8002516 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6810      	ldr	r0, [r2, #0]
 80024c8:	f107 020c 	add.w	r2, r7, #12
 80024cc:	211f      	movs	r1, #31
 80024ce:	4798      	blx	r3
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	da02      	bge.n	80024dc <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80024d6:	f06f 0304 	mvn.w	r3, #4
 80024da:	e01c      	b.n	8002516 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80024e6:	2306      	movs	r3, #6
 80024e8:	e015      	b.n	8002516 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 031c 	and.w	r3, r3, #28
 80024f0:	2b18      	cmp	r3, #24
 80024f2:	d101      	bne.n	80024f8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80024f4:	2302      	movs	r3, #2
 80024f6:	e00e      	b.n	8002516 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 031c 	and.w	r3, r3, #28
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d101      	bne.n	8002506 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002502:	2303      	movs	r3, #3
 8002504:	e007      	b.n	8002516 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 031c 	and.w	r3, r3, #28
 800250c:	2b14      	cmp	r3, #20
 800250e:	d101      	bne.n	8002514 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002510:	2304      	movs	r3, #4
 8002512:	e000      	b.n	8002516 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002514:	2305      	movs	r3, #5
    }
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <CAN_Init>:
static volatile uint32_t err_int_cnt = 0;

static void CAN_ErrUpdate(uint8_t ch);

BOOL     CAN_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8002526:	2301      	movs	r3, #1
 8002528:	603b      	str	r3, [r7, #0]

  for(int i=0; i<CAN_MAX_CH; i++)
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	e070      	b.n	8002612 <CAN_Init+0xf2>
  {
    can_tbl[i].is_init = TRUE;
 8002530:	4a3c      	ldr	r2, [pc, #240]	; (8002624 <CAN_Init+0x104>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f240 516c 	movw	r1, #1388	; 0x56c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    can_tbl[i].is_open = TRUE;
 8002542:	4a38      	ldr	r2, [pc, #224]	; (8002624 <CAN_Init+0x104>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f240 516c 	movw	r1, #1388	; 0x56c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3304      	adds	r3, #4
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 8002556:	4a33      	ldr	r2, [pc, #204]	; (8002624 <CAN_Init+0x104>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f240 516c 	movw	r1, #1388	; 0x56c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3308      	adds	r3, #8
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    can_tbl[i].state = 0;
 800256a:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <CAN_Init+0x104>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	330c      	adds	r3, #12
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 800257e:	4a29      	ldr	r2, [pc, #164]	; (8002624 <CAN_Init+0x104>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f240 516c 	movw	r1, #1388	; 0x56c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3310      	adds	r3, #16
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 8002592:	4a24      	ldr	r2, [pc, #144]	; (8002624 <CAN_Init+0x104>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f240 516c 	movw	r1, #1388	; 0x56c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3314      	adds	r3, #20
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 80025a6:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <CAN_Init+0x104>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f240 516c 	movw	r1, #1388	; 0x56c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3318      	adds	r3, #24
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 80025ba:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <CAN_Init+0x104>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f240 516c 	movw	r1, #1388	; 0x56c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	331c      	adds	r3, #28
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <CAN_Init+0x104>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f240 516c 	movw	r1, #1388	; 0x56c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3320      	adds	r3, #32
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(CAN_MSG_t), CAN_MSG_RX_BUF_MAX);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f240 526c 	movw	r2, #1388	; 0x56c
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	3398      	adds	r3, #152	; 0x98
 80025ee:	4a0d      	ldr	r2, [pc, #52]	; (8002624 <CAN_Init+0x104>)
 80025f0:	1898      	adds	r0, r3, r2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f240 526c 	movw	r2, #1388	; 0x56c
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	33a8      	adds	r3, #168	; 0xa8
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <CAN_Init+0x104>)
 8002600:	4413      	add	r3, r2
 8002602:	1d19      	adds	r1, r3, #4
 8002604:	2310      	movs	r3, #16
 8002606:	224c      	movs	r2, #76	; 0x4c
 8002608:	f00d fba6 	bl	800fd58 <qbufferCreateBySize>
  for(int i=0; i<CAN_MAX_CH; i++)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3301      	adds	r3, #1
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	dd8b      	ble.n	8002530 <CAN_Init+0x10>

  }
  return ret;
 8002618:	683b      	ldr	r3, [r7, #0]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20003624 	.word	0x20003624

08002628 <CAN_Open>:

BOOL     CAN_Open(uint8_t ch, CAN_MODE_t mode, CAN_FRAME_t frame, CAN_BAUD_t baud, CAN_BAUD_t baud_data)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af02      	add	r7, sp, #8
 800262e:	4604      	mov	r4, r0
 8002630:	4608      	mov	r0, r1
 8002632:	4611      	mov	r1, r2
 8002634:	461a      	mov	r2, r3
 8002636:	4623      	mov	r3, r4
 8002638:	71fb      	strb	r3, [r7, #7]
 800263a:	4603      	mov	r3, r0
 800263c:	71bb      	strb	r3, [r7, #6]
 800263e:	460b      	mov	r3, r1
 8002640:	717b      	strb	r3, [r7, #5]
 8002642:	4613      	mov	r3, r2
 8002644:	713b      	strb	r3, [r7, #4]
  BOOL ret = TRUE;
 8002646:	2301      	movs	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;

  p_can = &can_tbl[ch].hfdcan;
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f240 526c 	movw	r2, #1388	; 0x56c
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	3330      	adds	r3, #48	; 0x30
 8002656:	4a90      	ldr	r2, [pc, #576]	; (8002898 <CAN_Open+0x270>)
 8002658:	4413      	add	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
  if(ch >= CAN_MAX_CH) return FALSE;
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <CAN_Open+0x3e>
 8002662:	2300      	movs	r3, #0
 8002664:	e114      	b.n	8002890 <CAN_Open+0x268>

  switch(ch)
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 80a8 	bne.w	80027be <CAN_Open+0x196>
  {
    case _DEF_CAN1:
      p_can->Instance = FDCAN1;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4a8a      	ldr	r2, [pc, #552]	; (800289c <CAN_Open+0x274>)
 8002672:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2200      	movs	r2, #0
 8002678:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat = frame_tbl[frame];
 800267a:	797b      	ldrb	r3, [r7, #5]
 800267c:	4a88      	ldr	r2, [pc, #544]	; (80028a0 <CAN_Open+0x278>)
 800267e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode = mode_tbl[mode];
 8002686:	79bb      	ldrb	r3, [r7, #6]
 8002688:	4a86      	ldr	r2, [pc, #536]	; (80028a4 <CAN_Open+0x27c>)
 800268a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission = ENABLE;
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2201      	movs	r2, #1
 8002696:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause = ENABLE;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2201      	movs	r2, #1
 800269c:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException = ENABLE;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2201      	movs	r2, #1
 80026a2:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 80026a4:	4b80      	ldr	r3, [pc, #512]	; (80028a8 <CAN_Open+0x280>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	793b      	ldrb	r3, [r7, #4]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	4413      	add	r3, r2
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 80026b4:	4b7c      	ldr	r3, [pc, #496]	; (80028a8 <CAN_Open+0x280>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	793b      	ldrb	r3, [r7, #4]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 80026c4:	4b78      	ldr	r3, [pc, #480]	; (80028a8 <CAN_Open+0x280>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	793b      	ldrb	r3, [r7, #4]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	4413      	add	r3, r2
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 80026d4:	4b74      	ldr	r3, [pc, #464]	; (80028a8 <CAN_Open+0x280>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	793b      	ldrb	r3, [r7, #4]
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	4413      	add	r3, r2
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 80026e4:	4b71      	ldr	r3, [pc, #452]	; (80028ac <CAN_Open+0x284>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	4413      	add	r3, r2
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 80026f6:	4b6d      	ldr	r3, [pc, #436]	; (80028ac <CAN_Open+0x284>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	4413      	add	r3, r2
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 8002708:	4b68      	ldr	r3, [pc, #416]	; (80028ac <CAN_Open+0x284>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	4413      	add	r3, r2
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 800271a:	4b64      	ldr	r3, [pc, #400]	; (80028ac <CAN_Open+0x284>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	4413      	add	r3, r2
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr = 28;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	221c      	movs	r2, #28
 8002730:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr = 8;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2208      	movs	r2, #8
 8002736:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION; //FIFO MODE
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2200      	movs	r2, #0
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c
      can_tbl[ch].mode                  = mode;
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	4a55      	ldr	r2, [pc, #340]	; (8002898 <CAN_Open+0x270>)
 8002742:	f240 516c 	movw	r1, #1388	; 0x56c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	332c      	adds	r3, #44	; 0x2c
 800274e:	79ba      	ldrb	r2, [r7, #6]
 8002750:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	4a50      	ldr	r2, [pc, #320]	; (8002898 <CAN_Open+0x270>)
 8002756:	f240 516c 	movw	r1, #1388	; 0x56c
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	332d      	adds	r3, #45	; 0x2d
 8002762:	797a      	ldrb	r2, [r7, #5]
 8002764:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	4a4b      	ldr	r2, [pc, #300]	; (8002898 <CAN_Open+0x270>)
 800276a:	f240 516c 	movw	r1, #1388	; 0x56c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	332e      	adds	r3, #46	; 0x2e
 8002776:	793a      	ldrb	r2, [r7, #4]
 8002778:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	4a46      	ldr	r2, [pc, #280]	; (8002898 <CAN_Open+0x270>)
 800277e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	332f      	adds	r3, #47	; 0x2f
 800278a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800278e:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	4a41      	ldr	r2, [pc, #260]	; (8002898 <CAN_Open+0x270>)
 8002794:	f240 516c 	movw	r1, #1388	; 0x56c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	2240      	movs	r2, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	4a3c      	ldr	r2, [pc, #240]	; (8002898 <CAN_Open+0x270>)
 80027a8:	f240 516c 	movw	r1, #1388	; 0x56c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3328      	adds	r3, #40	; 0x28
 80027b4:	4a3e      	ldr	r2, [pc, #248]	; (80028b0 <CAN_Open+0x288>)
 80027b6:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;

      ret = TRUE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	617b      	str	r3, [r7, #20]

      break;
 80027bc:	bf00      	nop
  }

  if(ret != TRUE)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d001      	beq.n	80027c8 <CAN_Open+0x1a0>
  {
    return FALSE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e063      	b.n	8002890 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 80027c8:	6938      	ldr	r0, [r7, #16]
 80027ca:	f003 fa5f 	bl	8005c8c <HAL_FDCAN_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <CAN_Open+0x1b0>
  {
    return FALSE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e05b      	b.n	8002890 <CAN_Open+0x268>
  }

  CAN_ConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 80027d8:	79f8      	ldrb	r0, [r7, #7]
 80027da:	2300      	movs	r3, #0
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	2300      	movs	r3, #0
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	f000 f866 	bl	80028b4 <CAN_ConfigFilter>
  CAN_ConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 80027e8:	79f8      	ldrb	r0, [r7, #7]
 80027ea:	2300      	movs	r3, #0
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2300      	movs	r3, #0
 80027f0:	2201      	movs	r2, #1
 80027f2:	2100      	movs	r1, #0
 80027f4:	f000 f85e 	bl	80028b4 <CAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80027f8:	2300      	movs	r3, #0
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2300      	movs	r3, #0
 80027fe:	2202      	movs	r2, #2
 8002800:	2102      	movs	r1, #2
 8002802:	6938      	ldr	r0, [r7, #16]
 8002804:	f003 fbf6 	bl	8005ff4 <HAL_FDCAN_ConfigGlobalFilter>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <CAN_Open+0x1ea>
  {
    return FALSE;
 800280e:	2300      	movs	r3, #0
 8002810:	e03e      	b.n	8002890 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	4a20      	ldr	r2, [pc, #128]	; (8002898 <CAN_Open+0x270>)
 8002816:	f240 516c 	movw	r1, #1388	; 0x56c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3328      	adds	r3, #40	; 0x28
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	4619      	mov	r1, r3
 8002828:	6938      	ldr	r0, [r7, #16]
 800282a:	f003 fec2 	bl	80065b2 <HAL_FDCAN_ActivateNotification>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <CAN_Open+0x210>
  {
    return FALSE;
 8002834:	2300      	movs	r3, #0
 8002836:	e02b      	b.n	8002890 <CAN_Open+0x268>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return FALSE;
 8002846:	2200      	movs	r2, #0
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	6938      	ldr	r0, [r7, #16]
 800284c:	f003 fc03 	bl	8006056 <HAL_FDCAN_ConfigTxDelayCompensation>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <CAN_Open+0x232>
 8002856:	2300      	movs	r3, #0
 8002858:	e01a      	b.n	8002890 <CAN_Open+0x268>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return FALSE;
 800285a:	6938      	ldr	r0, [r7, #16]
 800285c:	f003 fc1d 	bl	800609a <HAL_FDCAN_EnableTxDelayCompensation>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <CAN_Open+0x242>
 8002866:	2300      	movs	r3, #0
 8002868:	e012      	b.n	8002890 <CAN_Open+0x268>

  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 800286a:	6938      	ldr	r0, [r7, #16]
 800286c:	f003 fc36 	bl	80060dc <HAL_FDCAN_Start>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <CAN_Open+0x252>
  {
    return FALSE;
 8002876:	2300      	movs	r3, #0
 8002878:	e00a      	b.n	8002890 <CAN_Open+0x268>
  }

  can_tbl[ch].is_open = TRUE;
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	4a06      	ldr	r2, [pc, #24]	; (8002898 <CAN_Open+0x270>)
 800287e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  return ret;
 800288e:	697b      	ldr	r3, [r7, #20]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	20003624 	.word	0x20003624
 800289c:	4000a400 	.word	0x4000a400
 80028a0:	0801ff38 	.word	0x0801ff38
 80028a4:	0801ff44 	.word	0x0801ff44
 80028a8:	20000018 	.word	0x20000018
 80028ac:	2000001c 	.word	0x2000001c
 80028b0:	000e0007 	.word	0x000e0007

080028b4 <CAN_ConfigFilter>:
void     CAN_Close(uint8_t ch)
{

}
BOOL     CAN_ConfigFilter(uint8_t ch, uint8_t index, CAN_ID_TYPE_t id_type, uint32_t id, uint32_t id_mask)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	4603      	mov	r3, r0
 80028be:	71fb      	strb	r3, [r7, #7]
 80028c0:	460b      	mov	r3, r1
 80028c2:	71bb      	strb	r3, [r7, #6]
 80028c4:	4613      	mov	r3, r2
 80028c6:	717b      	strb	r3, [r7, #5]
  BOOL ret = FALSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24

  FDCAN_FilterTypeDef sFilterConfig;

  if (ch >= CAN_MAX_CH) return FALSE;
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <CAN_ConfigFilter+0x22>
 80028d2:	2300      	movs	r3, #0
 80028d4:	e034      	b.n	8002940 <CAN_ConfigFilter+0x8c>


  if (id_type == CAN_STD)
 80028d6:	797b      	ldrb	r3, [r7, #5]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <CAN_ConfigFilter+0x2e>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e002      	b.n	80028e8 <CAN_ConfigFilter+0x34>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80028e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028e6:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4a17      	ldr	r2, [pc, #92]	; (8002948 <CAN_ConfigFilter+0x94>)
 80028ec:	f240 516c 	movw	r1, #1388	; 0x56c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3324      	adds	r3, #36	; 0x24
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d102      	bne.n	8002904 <CAN_ConfigFilter+0x50>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 80028fe:	2301      	movs	r3, #1
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	e001      	b.n	8002908 <CAN_ConfigFilter+0x54>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 8002904:	2302      	movs	r3, #2
 8002906:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 8002908:	79bb      	ldrb	r3, [r7, #6]
 800290a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK; //Classic filter
 800290c:	2302      	movs	r3, #2
 800290e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	623b      	str	r3, [r7, #32]


  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f240 526c 	movw	r2, #1388	; 0x56c
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	3330      	adds	r3, #48	; 0x30
 8002924:	4a08      	ldr	r2, [pc, #32]	; (8002948 <CAN_ConfigFilter+0x94>)
 8002926:	4413      	add	r3, r2
 8002928:	f107 020c 	add.w	r2, r7, #12
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fb06 	bl	8005f40 <HAL_FDCAN_ConfigFilter>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <CAN_ConfigFilter+0x8a>
  {
    ret = TRUE;
 800293a:	2301      	movs	r3, #1
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002940:	4618      	mov	r0, r3
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20003624 	.word	0x20003624

0800294c <CAN_MsgAvailable>:

uint32_t CAN_MsgAvailable(uint8_t ch)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d901      	bls.n	8002960 <CAN_MsgAvailable+0x14>
 800295c:	2300      	movs	r3, #0
 800295e:	e00b      	b.n	8002978 <CAN_MsgAvailable+0x2c>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f240 526c 	movw	r2, #1388	; 0x56c
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	3398      	adds	r3, #152	; 0x98
 800296c:	4a04      	ldr	r2, [pc, #16]	; (8002980 <CAN_MsgAvailable+0x34>)
 800296e:	4413      	add	r3, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f00d fad4 	bl	800ff1e <qbufferAvailable>
 8002976:	4603      	mov	r3, r0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20003624 	.word	0x20003624

08002984 <CAN_MsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return TRUE;
}

BOOL     CAN_MsgWrite(uint8_t ch, CAN_MSG_t *p_msg, uint32_t timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b090      	sub	sp, #64	; 0x40
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	73fb      	strb	r3, [r7, #15]
  {
    FDCAN_HandleTypeDef  *p_can;
    FDCAN_TxHeaderTypeDef tx_header;
    uint32_t pre_time;
    BOOL ret = TRUE;
 8002992:	2301      	movs	r3, #1
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c


    if(ch > CAN_MAX_CH) return FALSE;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d901      	bls.n	80029a0 <CAN_MsgWrite+0x1c>
 800299c:	2300      	movs	r3, #0
 800299e:	e083      	b.n	8002aa8 <CAN_MsgWrite+0x124>

    if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return FALSE;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	4a43      	ldr	r2, [pc, #268]	; (8002ab0 <CAN_MsgWrite+0x12c>)
 80029a4:	f240 516c 	movw	r1, #1388	; 0x56c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3308      	adds	r3, #8
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <CAN_MsgWrite+0x3a>
 80029ba:	2300      	movs	r3, #0
 80029bc:	e074      	b.n	8002aa8 <CAN_MsgWrite+0x124>


    p_can = &can_tbl[ch].hfdcan;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	f240 526c 	movw	r2, #1388	; 0x56c
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	3330      	adds	r3, #48	; 0x30
 80029ca:	4a39      	ldr	r2, [pc, #228]	; (8002ab0 <CAN_MsgWrite+0x12c>)
 80029cc:	4413      	add	r3, r2
 80029ce:	63bb      	str	r3, [r7, #56]	; 0x38

    switch(p_msg->id_type)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <CAN_MsgWrite+0x5c>
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d003      	beq.n	80029e6 <CAN_MsgWrite+0x62>
 80029de:	e006      	b.n	80029ee <CAN_MsgWrite+0x6a>
    {
      case CAN_STD :
        tx_header.IdType = FDCAN_STANDARD_ID;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
        break;
 80029e4:	e003      	b.n	80029ee <CAN_MsgWrite+0x6a>

      case CAN_EXT :
        tx_header.IdType = FDCAN_EXTENDED_ID;
 80029e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029ea:	617b      	str	r3, [r7, #20]
        break;
 80029ec:	bf00      	nop
    }

    switch(p_msg->frame)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d011      	beq.n	8002a1c <CAN_MsgWrite+0x98>
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	dc16      	bgt.n	8002a2a <CAN_MsgWrite+0xa6>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <CAN_MsgWrite+0x82>
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d005      	beq.n	8002a10 <CAN_MsgWrite+0x8c>
 8002a04:	e011      	b.n	8002a2a <CAN_MsgWrite+0xa6>
    {
      case CAN_CLASSIC:
        tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a0e:	e00c      	b.n	8002a2a <CAN_MsgWrite+0xa6>

      case CAN_FD_NO_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 8002a10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a1a:	e006      	b.n	8002a2a <CAN_MsgWrite+0xa6>

      case CAN_FD_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 8002a1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_ON;
 8002a22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a28:	bf00      	nop
    }

    tx_header.Identifier          = p_msg->id;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	613b      	str	r3, [r7, #16]
    tx_header.MessageMarker       = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
    tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
    tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <CAN_MsgWrite+0x130>)
 8002a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4e:	61fb      	str	r3, [r7, #28]


    if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002a50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a52:	f003 fd9c 	bl	800658e <HAL_FDCAN_GetTxFifoFreeLevel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <CAN_MsgWrite+0xdc>
    {
      return FALSE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e023      	b.n	8002aa8 <CAN_MsgWrite+0x124>
    }


    pre_time = HAL_GetTick();
 8002a60:	f001 fb7a 	bl	8004158 <HAL_GetTick>
 8002a64:	6378      	str	r0, [r7, #52]	; 0x34
    if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1d9a      	adds	r2, r3, #6
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a72:	f003 fbcb 	bl	800620c <HAL_FDCAN_AddMessageToTxFifoQ>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d112      	bne.n	8002aa2 <CAN_MsgWrite+0x11e>
    {
      /* Wait transmission complete */
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002a7c:	e00a      	b.n	8002a94 <CAN_MsgWrite+0x110>
      {
        if (HAL_GetTick()-pre_time >= timeout)
 8002a7e:	f001 fb6b 	bl	8004158 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d802      	bhi.n	8002a94 <CAN_MsgWrite+0x110>
        {
          ret = FALSE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002a92:	e008      	b.n	8002aa6 <CAN_MsgWrite+0x122>
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a96:	f003 fd7a 	bl	800658e <HAL_FDCAN_GetTxFifoFreeLevel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ee      	beq.n	8002a7e <CAN_MsgWrite+0xfa>
 8002aa0:	e001      	b.n	8002aa6 <CAN_MsgWrite+0x122>
        }
      }
    }
    else
    {
      ret = FALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    return ret;
 8002aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3740      	adds	r7, #64	; 0x40
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20003624 	.word	0x20003624
 8002ab4:	0801fef8 	.word	0x0801fef8

08002ab8 <CAN_MsgRead>:
BOOL     CAN_MsgRead(uint8_t ch, CAN_MSG_t *p_msg)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  BOOL ret = TRUE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]

  if(ch > CAN_MAX_CH) return 0;
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d901      	bls.n	8002ad2 <CAN_MsgRead+0x1a>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e00e      	b.n	8002af0 <CAN_MsgRead+0x38>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f240 526c 	movw	r2, #1388	; 0x56c
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	3398      	adds	r3, #152	; 0x98
 8002ade:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <CAN_MsgRead+0x40>)
 8002ae0:	4413      	add	r3, r2
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f00d f9ae 	bl	800fe48 <qbufferRead>
 8002aec:	60f8      	str	r0, [r7, #12]

  return ret;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20003624 	.word	0x20003624

08002afc <CAN_GetRxErrCount>:

uint16_t CAN_GetRxErrCount(uint8_t ch)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d901      	bls.n	8002b14 <CAN_GetRxErrCount+0x18>
 8002b10:	2300      	movs	r3, #0
 8002b12:	e015      	b.n	8002b40 <CAN_GetRxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	f240 526c 	movw	r2, #1388	; 0x56c
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	3330      	adds	r3, #48	; 0x30
 8002b20:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <CAN_GetRxErrCount+0x4c>)
 8002b22:	4413      	add	r3, r2
 8002b24:	f107 020c 	add.w	r2, r7, #12
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fd0a 	bl	8006544 <HAL_FDCAN_GetErrorCounters>
 8002b30:	4603      	mov	r3, r0
 8002b32:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 8002b34:	7f7b      	ldrb	r3, [r7, #29]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <CAN_GetRxErrCount+0x42>
  {
    ret = error_counters.RxErrorCnt;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8002b3e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20003624 	.word	0x20003624

08002b4c <CAN_GetTxErrCount>:
uint16_t CAN_GetTxErrCount(uint8_t ch)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d901      	bls.n	8002b64 <CAN_GetTxErrCount+0x18>
 8002b60:	2300      	movs	r3, #0
 8002b62:	e015      	b.n	8002b90 <CAN_GetTxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f240 526c 	movw	r2, #1388	; 0x56c
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	3330      	adds	r3, #48	; 0x30
 8002b70:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <CAN_GetTxErrCount+0x4c>)
 8002b72:	4413      	add	r3, r2
 8002b74:	f107 020c 	add.w	r2, r7, #12
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 fce2 	bl	8006544 <HAL_FDCAN_GetErrorCounters>
 8002b80:	4603      	mov	r3, r0
 8002b82:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 8002b84:	7f7b      	ldrb	r3, [r7, #29]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <CAN_GetTxErrCount+0x42>
  {
    ret = error_counters.TxErrorCnt;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8002b8e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20003624 	.word	0x20003624

08002b9c <CAN_RxFifoCallback>:
  return HAL_FDCAN_GetState(&can_tbl[ch].hfdcan);
}


void CAN_RxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08e      	sub	sp, #56	; 0x38
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  CAN_MSG_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (CAN_MSG_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f240 526c 	movw	r2, #1388	; 0x56c
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	3398      	adds	r3, #152	; 0x98
 8002bb4:	4a4b      	ldr	r2, [pc, #300]	; (8002ce4 <CAN_RxFifoCallback+0x148>)
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00d f99d 	bl	800fef8 <qbufferPeekWrite>
 8002bbe:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	4a48      	ldr	r2, [pc, #288]	; (8002ce4 <CAN_RxFifoCallback+0x148>)
 8002bc4:	f240 516c 	movw	r1, #1388	; 0x56c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3324      	adds	r3, #36	; 0x24
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	3306      	adds	r3, #6
 8002bd6:	f107 020c 	add.w	r2, r7, #12
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f003 fb5a 	bl	8006294 <HAL_FDCAN_GetRxMessage>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d179      	bne.n	8002cda <CAN_RxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <CAN_RxFifoCallback+0x60>
    {
      rx_buf->id      = rx_header.Identifier;
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002bfa:	e006      	b.n	8002c0a <CAN_RxFifoCallback+0x6e>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c00:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <CAN_RxFifoCallback+0x14c>)
 8002c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1c:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c24:	d10d      	bne.n	8002c42 <CAN_RxFifoCallback+0xa6>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2c:	d104      	bne.n	8002c38 <CAN_RxFifoCallback+0x9c>
      {
        rx_buf->frame = CAN_FD_BRS;
 8002c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002c36:	e008      	b.n	8002c4a <CAN_RxFifoCallback+0xae>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002c40:	e003      	b.n	8002c4a <CAN_RxFifoCallback+0xae>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != TRUE)
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	f240 526c 	movw	r2, #1388	; 0x56c
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	3398      	adds	r3, #152	; 0x98
 8002c56:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <CAN_RxFifoCallback+0x148>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f00d f899 	bl	800fd96 <qbufferWrite>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d011      	beq.n	8002c8e <CAN_RxFifoCallback+0xf2>
    {
      can_tbl[ch].q_rx_full_cnt++;
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	491d      	ldr	r1, [pc, #116]	; (8002ce4 <CAN_RxFifoCallback+0x148>)
 8002c6e:	f240 526c 	movw	r2, #1388	; 0x56c
 8002c72:	fb03 f202 	mul.w	r2, r3, r2
 8002c76:	440a      	add	r2, r1
 8002c78:	3214      	adds	r2, #20
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	3201      	adds	r2, #1
 8002c7e:	4919      	ldr	r1, [pc, #100]	; (8002ce4 <CAN_RxFifoCallback+0x148>)
 8002c80:	f240 506c 	movw	r0, #1388	; 0x56c
 8002c84:	fb00 f303 	mul.w	r3, r0, r3
 8002c88:	440b      	add	r3, r1
 8002c8a:	3314      	adds	r3, #20
 8002c8c:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <CAN_RxFifoCallback+0x148>)
 8002c92:	f240 516c 	movw	r1, #1388	; 0x56c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3394      	adds	r3, #148	; 0x94
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01a      	beq.n	8002cda <CAN_RxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == TRUE)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4a0f      	ldr	r2, [pc, #60]	; (8002ce4 <CAN_RxFifoCallback+0x148>)
 8002ca8:	f240 516c 	movw	r1, #1388	; 0x56c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3394      	adds	r3, #148	; 0x94
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cb8:	4798      	blx	r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10c      	bne.n	8002cda <CAN_RxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f240 526c 	movw	r2, #1388	; 0x56c
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	3398      	adds	r3, #152	; 0x98
 8002ccc:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <CAN_RxFifoCallback+0x148>)
 8002cce:	4413      	add	r3, r2
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f00d f8b7 	bl	800fe48 <qbufferRead>
      }
    }
  }
}
 8002cda:	bf00      	nop
 8002cdc:	3738      	adds	r7, #56	; 0x38
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20003624 	.word	0x20003624
 8002ce8:	0801feb8 	.word	0x0801feb8

08002cec <CAN_Recovery>:

  can_tbl[ch].handler = NULL;
}

void CAN_Recovery(uint8_t ch)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d828      	bhi.n	8002d4e <CAN_Recovery+0x62>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f240 526c 	movw	r2, #1388	; 0x56c
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	3330      	adds	r3, #48	; 0x30
 8002d08:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <CAN_Recovery+0x6c>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 fa0d 	bl	800612c <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f240 526c 	movw	r2, #1388	; 0x56c
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	3330      	adds	r3, #48	; 0x30
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <CAN_Recovery+0x6c>)
 8002d20:	4413      	add	r3, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 f9da 	bl	80060dc <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	490b      	ldr	r1, [pc, #44]	; (8002d58 <CAN_Recovery+0x6c>)
 8002d2c:	f240 526c 	movw	r2, #1388	; 0x56c
 8002d30:	fb03 f202 	mul.w	r2, r3, r2
 8002d34:	440a      	add	r2, r1
 8002d36:	3210      	adds	r2, #16
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	3201      	adds	r2, #1
 8002d3c:	4906      	ldr	r1, [pc, #24]	; (8002d58 <CAN_Recovery+0x6c>)
 8002d3e:	f240 506c 	movw	r0, #1388	; 0x56c
 8002d42:	fb00 f303 	mul.w	r3, r0, r3
 8002d46:	440b      	add	r3, r1
 8002d48:	3310      	adds	r3, #16
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e000      	b.n	8002d50 <CAN_Recovery+0x64>
  if(ch > CAN_MAX_CH) return;
 8002d4e:	bf00      	nop
}
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20003624 	.word	0x20003624

08002d5c <CAN_Update>:

BOOL     CAN_Update(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
  BOOL ret = FALSE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
  CAN_TBL_t *p_can;

  for (int i=0; i<CAN_MAX_CH; i++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	e02f      	b.n	8002dcc <CAN_Update+0x70>
  {
    p_can = &can_tbl[i];
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f240 526c 	movw	r2, #1388	; 0x56c
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <CAN_Update+0x80>)
 8002d78:	4413      	add	r3, r2
 8002d7a:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7b1b      	ldrb	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <CAN_Update+0x2e>
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d011      	beq.n	8002dac <CAN_Update+0x50>
 8002d88:	e01d      	b.n	8002dc6 <CAN_Update+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d014      	beq.n	8002dc0 <CAN_Update+0x64>
        {
          CAN_Recovery(i);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ffa6 	bl	8002cec <CAN_Recovery>
          p_can->state = 1;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	731a      	strb	r2, [r3, #12]
          ret = TRUE;
 8002da6:	2301      	movs	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002daa:	e009      	b.n	8002dc0 <CAN_Update+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <CAN_Update+0x68>
        {
          p_can->state = 0;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	731a      	strb	r2, [r3, #12]
        }
        break;
 8002dbe:	e001      	b.n	8002dc4 <CAN_Update+0x68>
        break;
 8002dc0:	bf00      	nop
 8002dc2:	e000      	b.n	8002dc6 <CAN_Update+0x6a>
        break;
 8002dc4:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	ddcc      	ble.n	8002d6c <CAN_Update+0x10>
    }
  }

  return ret;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20003624 	.word	0x20003624

08002de0 <CAN_ErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void     CAN_ErrPrint(uint8_t ch)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d822      	bhi.n	8002e36 <CAN_ErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <CAN_ErrPrint+0x60>)
 8002df4:	f240 516c 	movw	r1, #1388	; 0x56c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3308      	adds	r3, #8
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) UART_Printf("  ERR : CAN_ERR_PASSIVE\n");
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <CAN_ErrPrint+0x34>
 8002e0e:	480d      	ldr	r0, [pc, #52]	; (8002e44 <CAN_ErrPrint+0x64>)
 8002e10:	f001 f81c 	bl	8003e4c <UART_Printf>
  if (err_code & CAN_ERR_WARNING) UART_Printf("  ERR : CAN_ERR_WARNING\n");
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <CAN_ErrPrint+0x44>
 8002e1e:	480a      	ldr	r0, [pc, #40]	; (8002e48 <CAN_ErrPrint+0x68>)
 8002e20:	f001 f814 	bl	8003e4c <UART_Printf>
  if (err_code & CAN_ERR_BUS_OFF) UART_Printf("  ERR : CAN_ERR_BUS_OFF\n");
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <CAN_ErrPrint+0x58>
 8002e2e:	4807      	ldr	r0, [pc, #28]	; (8002e4c <CAN_ErrPrint+0x6c>)
 8002e30:	f001 f80c 	bl	8003e4c <UART_Printf>
 8002e34:	e000      	b.n	8002e38 <CAN_ErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 8002e36:	bf00      	nop
}
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20003624 	.word	0x20003624
 8002e44:	0801d0a0 	.word	0x0801d0a0
 8002e48:	0801d0bc 	.word	0x0801d0bc
 8002e4c:	0801d0d8 	.word	0x0801d0d8

08002e50 <CAN_ErrUpdate>:

void CAN_ErrUpdate(uint8_t ch)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08e      	sub	sp, #56	; 0x38
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f240 526c 	movw	r2, #1388	; 0x56c
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	3330      	adds	r3, #48	; 0x30
 8002e66:	4a48      	ldr	r2, [pc, #288]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	f107 020c 	add.w	r2, r7, #12
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fb17 	bl	80064a4 <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d014      	beq.n	8002ea6 <CAN_ErrUpdate+0x56>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	4a42      	ldr	r2, [pc, #264]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002e80:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	493c      	ldr	r1, [pc, #240]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002e96:	f240 506c 	movw	r0, #1388	; 0x56c
 8002e9a:	fb00 f303 	mul.w	r3, r0, r3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e013      	b.n	8002ece <CAN_ErrUpdate+0x7e>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	4a37      	ldr	r2, [pc, #220]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002eaa:	f240 516c 	movw	r1, #1388	; 0x56c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	4932      	ldr	r1, [pc, #200]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002ec0:	f240 506c 	movw	r0, #1388	; 0x56c
 8002ec4:	fb00 f303 	mul.w	r3, r0, r3
 8002ec8:	440b      	add	r3, r1
 8002eca:	3308      	adds	r3, #8
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d014      	beq.n	8002efe <CAN_ErrUpdate+0xae>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	4a2c      	ldr	r2, [pc, #176]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002ed8:	f240 516c 	movw	r1, #1388	; 0x56c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	f042 0202 	orr.w	r2, r2, #2
 8002eec:	4926      	ldr	r1, [pc, #152]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002eee:	f240 506c 	movw	r0, #1388	; 0x56c
 8002ef2:	fb00 f303 	mul.w	r3, r0, r3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3308      	adds	r3, #8
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e013      	b.n	8002f26 <CAN_ErrUpdate+0xd6>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002f02:	f240 516c 	movw	r1, #1388	; 0x56c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	f022 0202 	bic.w	r2, r2, #2
 8002f16:	491c      	ldr	r1, [pc, #112]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002f18:	f240 506c 	movw	r0, #1388	; 0x56c
 8002f1c:	fb00 f303 	mul.w	r3, r0, r3
 8002f20:	440b      	add	r3, r1
 8002f22:	3308      	adds	r3, #8
 8002f24:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d014      	beq.n	8002f56 <CAN_ErrUpdate+0x106>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002f30:	f240 516c 	movw	r1, #1388	; 0x56c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	f042 0204 	orr.w	r2, r2, #4
 8002f44:	4910      	ldr	r1, [pc, #64]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002f46:	f240 506c 	movw	r0, #1388	; 0x56c
 8002f4a:	fb00 f303 	mul.w	r3, r0, r3
 8002f4e:	440b      	add	r3, r1
 8002f50:	3308      	adds	r3, #8
 8002f52:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8002f54:	e013      	b.n	8002f7e <CAN_ErrUpdate+0x12e>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002f5a:	f240 516c 	movw	r1, #1388	; 0x56c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3308      	adds	r3, #8
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	f022 0204 	bic.w	r2, r2, #4
 8002f6e:	4906      	ldr	r1, [pc, #24]	; (8002f88 <CAN_ErrUpdate+0x138>)
 8002f70:	f240 506c 	movw	r0, #1388	; 0x56c
 8002f74:	fb00 f303 	mul.w	r3, r0, r3
 8002f78:	440b      	add	r3, r1
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	3738      	adds	r7, #56	; 0x38
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20003624 	.word	0x20003624

08002f8c <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN1;
 8002f96:	2300      	movs	r3, #0
 8002f98:	73fb      	strb	r3, [r7, #15]

  CAN_ErrUpdate(ch);
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff57 	bl	8002e50 <CAN_ErrUpdate>
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN1;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_FDCAN_ErrorCallback+0x54>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	4a10      	ldr	r2, [pc, #64]	; (8003000 <HAL_FDCAN_ErrorCallback+0x54>)
 8002fc0:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d013      	beq.n	8002ff2 <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <HAL_FDCAN_ErrorCallback+0x58>)
 8002fce:	f240 516c 	movw	r1, #1388	; 0x56c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3308      	adds	r3, #8
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	f042 0210 	orr.w	r2, r2, #16
 8002fe2:	4908      	ldr	r1, [pc, #32]	; (8003004 <HAL_FDCAN_ErrorCallback+0x58>)
 8002fe4:	f240 506c 	movw	r0, #1388	; 0x56c
 8002fe8:	fb00 f303 	mul.w	r3, r0, r3
 8002fec:	440b      	add	r3, r1
 8002fee:	3308      	adds	r3, #8
 8002ff0:	601a      	str	r2, [r3, #0]
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20003b90 	.word	0x20003b90
 8003004:	20003624 	.word	0x20003624

08003008 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN1].hfdcan);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <FDCAN1_IT0_IRQHandler+0x10>)
 800300e:	f003 fbb6 	bl	800677e <HAL_FDCAN_IRQHandler>
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20003654 	.word	0x20003654

0800301c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    CAN_RxFifoCallback(_DEF_CAN1, hfdcan);
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	2000      	movs	r0, #0
 8003034:	f7ff fdb2 	bl	8002b9c <CAN_RxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	3301      	adds	r3, #1
 8003048:	4a07      	ldr	r2, [pc, #28]	; (8003068 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800304a:	61d3      	str	r3, [r2, #28]
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8003056:	4b04      	ldr	r3, [pc, #16]	; (8003068 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	3301      	adds	r3, #1
 800305c:	4a02      	ldr	r2, [pc, #8]	; (8003068 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800305e:	6213      	str	r3, [r2, #32]
  }
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20003624 	.word	0x20003624

0800306c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b0cc      	sub	sp, #304	; 0x130
 8003070:	af00      	add	r7, sp, #0
 8003072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800307a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800308c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003090:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003094:	4618      	mov	r0, r3
 8003096:	f44f 7384 	mov.w	r3, #264	; 0x108
 800309a:	461a      	mov	r2, r3
 800309c:	2100      	movs	r1, #0
 800309e:	f018 ffb1 	bl	801c004 <memset>
  if(hfdcan->Instance==FDCAN1)
 80030a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a37      	ldr	r2, [pc, #220]	; (800318c <HAL_FDCAN_MspInit+0x120>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d166      	bne.n	8003182 <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80030b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030b8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0304 	mov.w	r3, #4
 80030c4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80030c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d6:	f107 0310 	add.w	r3, r7, #16
 80030da:	4618      	mov	r0, r3
 80030dc:	f005 f9cc 	bl	8008478 <HAL_RCCEx_PeriphCLKConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 80030e6:	f7fd fd3b 	bl	8000b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80030ea:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_FDCAN_MspInit+0x124>)
 80030ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030f0:	4a27      	ldr	r2, [pc, #156]	; (8003190 <HAL_FDCAN_MspInit+0x124>)
 80030f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80030fa:	4b25      	ldr	r3, [pc, #148]	; (8003190 <HAL_FDCAN_MspInit+0x124>)
 80030fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003100:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003108:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003112:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003116:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_FDCAN_MspInit+0x124>)
 800311a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311e:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_FDCAN_MspInit+0x124>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_FDCAN_MspInit+0x124>)
 800312a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003136:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003140:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003144:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003146:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800314a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003160:	2309      	movs	r3, #9
 8003162:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003166:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800316a:	4619      	mov	r1, r3
 800316c:	4809      	ldr	r0, [pc, #36]	; (8003194 <HAL_FDCAN_MspInit+0x128>)
 800316e:	f004 f80b 	bl	8007188 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2105      	movs	r1, #5
 8003176:	2027      	movs	r0, #39	; 0x27
 8003178:	f001 f8ec 	bl	8004354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800317c:	2027      	movs	r0, #39	; 0x27
 800317e:	f001 f903 	bl	8004388 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003182:	bf00      	nop
 8003184:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	4000a400 	.word	0x4000a400
 8003190:	44020c00 	.word	0x44020c00
 8003194:	42020000 	.word	0x42020000

08003198 <CLI_FDCANTest>:
}

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (CAN_TEST, "CAN", "CAN [1(INFO),2(READ),3(SEND)] [SEND ID]", CLI_FDCANTest)
static void CLI_FDCANTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b0a1      	sub	sp, #132	; 0x84
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  BOOL ret = FALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (nCount == 2)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	f040 822b 	bne.w	8003608 <CLI_FDCANTest+0x470>
  {
    switch(nFirst)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	f000 80d3 	beq.w	8003360 <CLI_FDCANTest+0x1c8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b03      	cmp	r3, #3
 80031be:	f200 8223 	bhi.w	8003608 <CLI_FDCANTest+0x470>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d003      	beq.n	80031d0 <CLI_FDCANTest+0x38>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d062      	beq.n	8003294 <CLI_FDCANTest+0xfc>
          }
        }
        ret = TRUE;
    }
  }
}
 80031ce:	e21b      	b.n	8003608 <CLI_FDCANTest+0x470>
        for (int i=0; i<CAN_MAX_CH; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031d4:	e057      	b.n	8003286 <CLI_FDCANTest+0xee>
          DebugMsg(DEBUGMSG_CLI,"is_open       : %d\n", can_tbl[i].is_open);
 80031d6:	4b94      	ldr	r3, [pc, #592]	; (8003428 <CLI_FDCANTest+0x290>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <CLI_FDCANTest+0x60>
 80031de:	4a93      	ldr	r2, [pc, #588]	; (800342c <CLI_FDCANTest+0x294>)
 80031e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031e2:	f240 516c 	movw	r1, #1388	; 0x56c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4619      	mov	r1, r3
 80031f2:	488f      	ldr	r0, [pc, #572]	; (8003430 <CLI_FDCANTest+0x298>)
 80031f4:	f000 ff40 	bl	8004078 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 80031f8:	4b8b      	ldr	r3, [pc, #556]	; (8003428 <CLI_FDCANTest+0x290>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <CLI_FDCANTest+0x82>
 8003200:	4a8a      	ldr	r2, [pc, #552]	; (800342c <CLI_FDCANTest+0x294>)
 8003202:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003204:	f240 516c 	movw	r1, #1388	; 0x56c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3314      	adds	r3, #20
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	4887      	ldr	r0, [pc, #540]	; (8003434 <CLI_FDCANTest+0x29c>)
 8003216:	f000 ff2f 	bl	8004078 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 800321a:	4b83      	ldr	r3, [pc, #524]	; (8003428 <CLI_FDCANTest+0x290>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00c      	beq.n	800323c <CLI_FDCANTest+0xa4>
 8003222:	4a82      	ldr	r2, [pc, #520]	; (800342c <CLI_FDCANTest+0x294>)
 8003224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003226:	f240 516c 	movw	r1, #1388	; 0x56c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3318      	adds	r3, #24
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4619      	mov	r1, r3
 8003236:	4880      	ldr	r0, [pc, #512]	; (8003438 <CLI_FDCANTest+0x2a0>)
 8003238:	f000 ff1e 	bl	8004078 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 800323c:	4b7a      	ldr	r3, [pc, #488]	; (8003428 <CLI_FDCANTest+0x290>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00c      	beq.n	800325e <CLI_FDCANTest+0xc6>
 8003244:	4a79      	ldr	r2, [pc, #484]	; (800342c <CLI_FDCANTest+0x294>)
 8003246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003248:	f240 516c 	movw	r1, #1388	; 0x56c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	331c      	adds	r3, #28
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4619      	mov	r1, r3
 8003258:	4878      	ldr	r0, [pc, #480]	; (800343c <CLI_FDCANTest+0x2a4>)
 800325a:	f000 ff0d 	bl	8004078 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 800325e:	4b72      	ldr	r3, [pc, #456]	; (8003428 <CLI_FDCANTest+0x290>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <CLI_FDCANTest+0xe8>
 8003266:	4a71      	ldr	r2, [pc, #452]	; (800342c <CLI_FDCANTest+0x294>)
 8003268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800326a:	f240 516c 	movw	r1, #1388	; 0x56c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3320      	adds	r3, #32
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	4871      	ldr	r0, [pc, #452]	; (8003440 <CLI_FDCANTest+0x2a8>)
 800327c:	f000 fefc 	bl	8004078 <svDebugMessage>
        for (int i=0; i<CAN_MAX_CH; i++)
 8003280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003282:	3301      	adds	r3, #1
 8003284:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003288:	2b00      	cmp	r3, #0
 800328a:	dda4      	ble.n	80031d6 <CLI_FDCANTest+0x3e>
        ret = TRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 8003290:	bf00      	nop
}
 8003292:	e1b9      	b.n	8003608 <CLI_FDCANTest+0x470>
        uint32_t index = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	67bb      	str	r3, [r7, #120]	; 0x78
        while(svCLI_KeepLoop())
 8003298:	e05d      	b.n	8003356 <CLI_FDCANTest+0x1be>
          if (CAN_MsgAvailable(_DEF_CAN1))
 800329a:	2000      	movs	r0, #0
 800329c:	f7ff fb56 	bl	800294c <CAN_MsgAvailable>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d057      	beq.n	8003356 <CLI_FDCANTest+0x1be>
            CAN_MsgRead(_DEF_CAN1, &msg);
 80032a6:	f107 0310 	add.w	r3, r7, #16
 80032aa:	4619      	mov	r1, r3
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7ff fc03 	bl	8002ab8 <CAN_MsgRead>
            index %= 1000;
 80032b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b4:	4a63      	ldr	r2, [pc, #396]	; (8003444 <CLI_FDCANTest+0x2ac>)
 80032b6:	fba2 1203 	umull	r1, r2, r2, r3
 80032ba:	0992      	lsrs	r2, r2, #6
 80032bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032c0:	fb01 f202 	mul.w	r2, r1, r2
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", index++);
 80032c8:	4b57      	ldr	r3, [pc, #348]	; (8003428 <CLI_FDCANTest+0x290>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <CLI_FDCANTest+0x146>
 80032d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	67ba      	str	r2, [r7, #120]	; 0x78
 80032d6:	4619      	mov	r1, r3
 80032d8:	485b      	ldr	r0, [pc, #364]	; (8003448 <CLI_FDCANTest+0x2b0>)
 80032da:	f000 fecd 	bl	8004078 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 80032de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d107      	bne.n	80032f6 <CLI_FDCANTest+0x15e>
              DebugMsg(DEBUGMSG_CLI,"std ");
 80032e6:	4b50      	ldr	r3, [pc, #320]	; (8003428 <CLI_FDCANTest+0x290>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <CLI_FDCANTest+0x16c>
 80032ee:	4857      	ldr	r0, [pc, #348]	; (800344c <CLI_FDCANTest+0x2b4>)
 80032f0:	f000 fec2 	bl	8004078 <svDebugMessage>
 80032f4:	e006      	b.n	8003304 <CLI_FDCANTest+0x16c>
              DebugMsg(DEBUGMSG_CLI,"ext ");
 80032f6:	4b4c      	ldr	r3, [pc, #304]	; (8003428 <CLI_FDCANTest+0x290>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <CLI_FDCANTest+0x16c>
 80032fe:	4854      	ldr	r0, [pc, #336]	; (8003450 <CLI_FDCANTest+0x2b8>)
 8003300:	f000 feba 	bl	8004078 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8003304:	4b48      	ldr	r3, [pc, #288]	; (8003428 <CLI_FDCANTest+0x290>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <CLI_FDCANTest+0x180>
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	8aba      	ldrh	r2, [r7, #20]
 8003310:	4619      	mov	r1, r3
 8003312:	4850      	ldr	r0, [pc, #320]	; (8003454 <CLI_FDCANTest+0x2bc>)
 8003314:	f000 feb0 	bl	8004078 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8003318:	2300      	movs	r3, #0
 800331a:	677b      	str	r3, [r7, #116]	; 0x74
 800331c:	e00f      	b.n	800333e <CLI_FDCANTest+0x1a6>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 800331e:	4b42      	ldr	r3, [pc, #264]	; (8003428 <CLI_FDCANTest+0x290>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <CLI_FDCANTest+0x1a0>
 8003326:	f107 0216 	add.w	r2, r7, #22
 800332a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332c:	4413      	add	r3, r2
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	4849      	ldr	r0, [pc, #292]	; (8003458 <CLI_FDCANTest+0x2c0>)
 8003334:	f000 fea0 	bl	8004078 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8003338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800333a:	3301      	adds	r3, #1
 800333c:	677b      	str	r3, [r7, #116]	; 0x74
 800333e:	8abb      	ldrh	r3, [r7, #20]
 8003340:	461a      	mov	r2, r3
 8003342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003344:	4293      	cmp	r3, r2
 8003346:	dbea      	blt.n	800331e <CLI_FDCANTest+0x186>
            DebugMsg(DEBUGMSG_CLI,"\n");
 8003348:	4b37      	ldr	r3, [pc, #220]	; (8003428 <CLI_FDCANTest+0x290>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <CLI_FDCANTest+0x1be>
 8003350:	4842      	ldr	r0, [pc, #264]	; (800345c <CLI_FDCANTest+0x2c4>)
 8003352:	f000 fe91 	bl	8004078 <svDebugMessage>
        while(svCLI_KeepLoop())
 8003356:	f00c fee9 	bl	801012c <svCLI_KeepLoop>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d19c      	bne.n	800329a <CLI_FDCANTest+0x102>
        uint32_t num = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	66fb      	str	r3, [r7, #108]	; 0x6c
        err_code = can_tbl[_DEF_CAN1].err_code;
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <CLI_FDCANTest+0x294>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	66bb      	str	r3, [r7, #104]	; 0x68
        while(svCLI_KeepLoop())
 800336a:	e145      	b.n	80035f8 <CLI_FDCANTest+0x460>
          if (HAL_GetTick()-pre_time >= 1000)
 800336c:	f000 fef4 	bl	8004158 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337a:	f0c0 80be 	bcc.w	80034fa <CLI_FDCANTest+0x362>
            pre_time = HAL_GetTick();
 800337e:	f000 feeb 	bl	8004158 <HAL_GetTick>
 8003382:	6738      	str	r0, [r7, #112]	; 0x70
            msg.frame   = CAN_CLASSIC;
 8003384:	2300      	movs	r3, #0
 8003386:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            msg.id_type = CAN_EXT;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg.dlc     = CAN_DLC_2;
 8003390:	2302      	movs	r3, #2
 8003392:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            msg.id      = nAddress;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	613b      	str	r3, [r7, #16]
            msg.length  = 2;
 800339a:	2302      	movs	r3, #2
 800339c:	82bb      	strh	r3, [r7, #20]
            msg.data[0] = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	75bb      	strb	r3, [r7, #22]
            msg.data[1] = 2;
 80033a2:	2302      	movs	r3, #2
 80033a4:	75fb      	strb	r3, [r7, #23]
            if (CAN_MsgWrite(_DEF_CAN1, &msg, 10) > 0)
 80033a6:	f107 0310 	add.w	r3, r7, #16
 80033aa:	220a      	movs	r2, #10
 80033ac:	4619      	mov	r1, r3
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7ff fae8 	bl	8002984 <CAN_MsgWrite>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d070      	beq.n	800349c <CLI_FDCANTest+0x304>
              index %= 1000;
 80033ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033bc:	4a21      	ldr	r2, [pc, #132]	; (8003444 <CLI_FDCANTest+0x2ac>)
 80033be:	fba2 1203 	umull	r1, r2, r2, r3
 80033c2:	0992      	lsrs	r2, r2, #6
 80033c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c8:	fb01 f202 	mul.w	r2, r1, r2
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	67bb      	str	r3, [r7, #120]	; 0x78
              DebugMsg(DEBUGMSG_CLI,"%03d(T) -> id ", num++);
 80033d0:	4b15      	ldr	r3, [pc, #84]	; (8003428 <CLI_FDCANTest+0x290>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d006      	beq.n	80033e6 <CLI_FDCANTest+0x24e>
 80033d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033de:	4619      	mov	r1, r3
 80033e0:	481f      	ldr	r0, [pc, #124]	; (8003460 <CLI_FDCANTest+0x2c8>)
 80033e2:	f000 fe49 	bl	8004078 <svDebugMessage>
              if (msg.id_type == CAN_STD)
 80033e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <CLI_FDCANTest+0x266>
                DebugMsg(DEBUGMSG_CLI,"std ");
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <CLI_FDCANTest+0x290>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <CLI_FDCANTest+0x274>
 80033f6:	4815      	ldr	r0, [pc, #84]	; (800344c <CLI_FDCANTest+0x2b4>)
 80033f8:	f000 fe3e 	bl	8004078 <svDebugMessage>
 80033fc:	e006      	b.n	800340c <CLI_FDCANTest+0x274>
                DebugMsg(DEBUGMSG_CLI,"ext ");
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <CLI_FDCANTest+0x290>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <CLI_FDCANTest+0x274>
 8003406:	4812      	ldr	r0, [pc, #72]	; (8003450 <CLI_FDCANTest+0x2b8>)
 8003408:	f000 fe36 	bl	8004078 <svDebugMessage>
              DebugMsg(DEBUGMSG_CLI, ": 0x%08X, L:%02d, ", msg.id, msg.length);
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <CLI_FDCANTest+0x290>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <CLI_FDCANTest+0x288>
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	8aba      	ldrh	r2, [r7, #20]
 8003418:	4619      	mov	r1, r3
 800341a:	480e      	ldr	r0, [pc, #56]	; (8003454 <CLI_FDCANTest+0x2bc>)
 800341c:	f000 fe2c 	bl	8004078 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 8003420:	2300      	movs	r3, #0
 8003422:	667b      	str	r3, [r7, #100]	; 0x64
 8003424:	e02e      	b.n	8003484 <CLI_FDCANTest+0x2ec>
 8003426:	bf00      	nop
 8003428:	2000003c 	.word	0x2000003c
 800342c:	20003624 	.word	0x20003624
 8003430:	0801d120 	.word	0x0801d120
 8003434:	0801d134 	.word	0x0801d134
 8003438:	0801d148 	.word	0x0801d148
 800343c:	0801d15c 	.word	0x0801d15c
 8003440:	0801d170 	.word	0x0801d170
 8003444:	10624dd3 	.word	0x10624dd3
 8003448:	0801d184 	.word	0x0801d184
 800344c:	0801d194 	.word	0x0801d194
 8003450:	0801d19c 	.word	0x0801d19c
 8003454:	0801d1a4 	.word	0x0801d1a4
 8003458:	0801d1b8 	.word	0x0801d1b8
 800345c:	0801d1c0 	.word	0x0801d1c0
 8003460:	0801d1c4 	.word	0x0801d1c4
                DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8003464:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <CLI_FDCANTest+0x478>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <CLI_FDCANTest+0x2e6>
 800346c:	f107 0216 	add.w	r2, r7, #22
 8003470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	4619      	mov	r1, r3
 8003478:	4866      	ldr	r0, [pc, #408]	; (8003614 <CLI_FDCANTest+0x47c>)
 800347a:	f000 fdfd 	bl	8004078 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 800347e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003480:	3301      	adds	r3, #1
 8003482:	667b      	str	r3, [r7, #100]	; 0x64
 8003484:	8abb      	ldrh	r3, [r7, #20]
 8003486:	461a      	mov	r2, r3
 8003488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800348a:	4293      	cmp	r3, r2
 800348c:	dbea      	blt.n	8003464 <CLI_FDCANTest+0x2cc>
              DebugMsg(DEBUGMSG_CLI,"\n");
 800348e:	4b60      	ldr	r3, [pc, #384]	; (8003610 <CLI_FDCANTest+0x478>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <CLI_FDCANTest+0x304>
 8003496:	4860      	ldr	r0, [pc, #384]	; (8003618 <CLI_FDCANTest+0x480>)
 8003498:	f000 fdee 	bl	8004078 <svDebugMessage>
            if (CAN_GetRxErrCount(_DEF_CAN1) > 0 || CAN_GetTxErrCount(_DEF_CAN1) > 0)
 800349c:	2000      	movs	r0, #0
 800349e:	f7ff fb2d 	bl	8002afc <CAN_GetRxErrCount>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <CLI_FDCANTest+0x31c>
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7ff fb4f 	bl	8002b4c <CAN_GetTxErrCount>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d011      	beq.n	80034d8 <CLI_FDCANTest+0x340>
              DebugMsg(DEBUGMSG_CLI,"ErrCnt : %d, %d\n", CAN_GetRxErrCount(_DEF_CAN1), CAN_GetTxErrCount(_DEF_CAN1));
 80034b4:	4b56      	ldr	r3, [pc, #344]	; (8003610 <CLI_FDCANTest+0x478>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00d      	beq.n	80034d8 <CLI_FDCANTest+0x340>
 80034bc:	2000      	movs	r0, #0
 80034be:	f7ff fb1d 	bl	8002afc <CAN_GetRxErrCount>
 80034c2:	4603      	mov	r3, r0
 80034c4:	461c      	mov	r4, r3
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7ff fb40 	bl	8002b4c <CAN_GetTxErrCount>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	4621      	mov	r1, r4
 80034d2:	4852      	ldr	r0, [pc, #328]	; (800361c <CLI_FDCANTest+0x484>)
 80034d4:	f000 fdd0 	bl	8004078 <svDebugMessage>
            if (err_int_cnt > 0)
 80034d8:	4b51      	ldr	r3, [pc, #324]	; (8003620 <CLI_FDCANTest+0x488>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00c      	beq.n	80034fa <CLI_FDCANTest+0x362>
              DebugMsg(DEBUGMSG_CLI,"Cnt : %d\n",err_int_cnt);
 80034e0:	4b4b      	ldr	r3, [pc, #300]	; (8003610 <CLI_FDCANTest+0x478>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <CLI_FDCANTest+0x35c>
 80034e8:	4b4d      	ldr	r3, [pc, #308]	; (8003620 <CLI_FDCANTest+0x488>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4619      	mov	r1, r3
 80034ee:	484d      	ldr	r0, [pc, #308]	; (8003624 <CLI_FDCANTest+0x48c>)
 80034f0:	f000 fdc2 	bl	8004078 <svDebugMessage>
              err_int_cnt = 0;
 80034f4:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <CLI_FDCANTest+0x488>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
          if (can_tbl[_DEF_CAN1].err_code != err_code)
 80034fa:	4b4b      	ldr	r3, [pc, #300]	; (8003628 <CLI_FDCANTest+0x490>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003500:	429a      	cmp	r2, r3
 8003502:	d00f      	beq.n	8003524 <CLI_FDCANTest+0x38c>
            DebugMsg(DEBUGMSG_CLI, "ErrCode : 0x%X\n", can_tbl[_DEF_CAN1].err_code);
 8003504:	4b42      	ldr	r3, [pc, #264]	; (8003610 <CLI_FDCANTest+0x478>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <CLI_FDCANTest+0x380>
 800350c:	4b46      	ldr	r3, [pc, #280]	; (8003628 <CLI_FDCANTest+0x490>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4619      	mov	r1, r3
 8003512:	4846      	ldr	r0, [pc, #280]	; (800362c <CLI_FDCANTest+0x494>)
 8003514:	f000 fdb0 	bl	8004078 <svDebugMessage>
            CAN_ErrPrint(_DEF_CAN1);
 8003518:	2000      	movs	r0, #0
 800351a:	f7ff fc61 	bl	8002de0 <CAN_ErrPrint>
            err_code = can_tbl[_DEF_CAN1].err_code;
 800351e:	4b42      	ldr	r3, [pc, #264]	; (8003628 <CLI_FDCANTest+0x490>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	66bb      	str	r3, [r7, #104]	; 0x68
          if (CAN_Update())
 8003524:	f7ff fc1a 	bl	8002d5c <CAN_Update>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <CLI_FDCANTest+0x3a4>
            DebugMsg(DEBUGMSG_CLI,"BusOff Recovery\n");
 800352e:	4b38      	ldr	r3, [pc, #224]	; (8003610 <CLI_FDCANTest+0x478>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <CLI_FDCANTest+0x3a4>
 8003536:	483e      	ldr	r0, [pc, #248]	; (8003630 <CLI_FDCANTest+0x498>)
 8003538:	f000 fd9e 	bl	8004078 <svDebugMessage>
          if (CAN_MsgAvailable(_DEF_CAN1))
 800353c:	2000      	movs	r0, #0
 800353e:	f7ff fa05 	bl	800294c <CAN_MsgAvailable>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d057      	beq.n	80035f8 <CLI_FDCANTest+0x460>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	4619      	mov	r1, r3
 800354e:	2000      	movs	r0, #0
 8003550:	f7ff fab2 	bl	8002ab8 <CAN_MsgRead>
            index %= 1000;
 8003554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003556:	4a37      	ldr	r2, [pc, #220]	; (8003634 <CLI_FDCANTest+0x49c>)
 8003558:	fba2 1203 	umull	r1, r2, r2, r3
 800355c:	0992      	lsrs	r2, r2, #6
 800355e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003562:	fb01 f202 	mul.w	r2, r1, r2
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", num++);
 800356a:	4b29      	ldr	r3, [pc, #164]	; (8003610 <CLI_FDCANTest+0x478>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <CLI_FDCANTest+0x3e8>
 8003572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003578:	4619      	mov	r1, r3
 800357a:	482f      	ldr	r0, [pc, #188]	; (8003638 <CLI_FDCANTest+0x4a0>)
 800357c:	f000 fd7c 	bl	8004078 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8003580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <CLI_FDCANTest+0x400>
              DebugMsg(DEBUGMSG_CLI, "std ");
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <CLI_FDCANTest+0x478>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <CLI_FDCANTest+0x40e>
 8003590:	482a      	ldr	r0, [pc, #168]	; (800363c <CLI_FDCANTest+0x4a4>)
 8003592:	f000 fd71 	bl	8004078 <svDebugMessage>
 8003596:	e006      	b.n	80035a6 <CLI_FDCANTest+0x40e>
              DebugMsg(DEBUGMSG_CLI, "ext ");
 8003598:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <CLI_FDCANTest+0x478>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <CLI_FDCANTest+0x40e>
 80035a0:	4827      	ldr	r0, [pc, #156]	; (8003640 <CLI_FDCANTest+0x4a8>)
 80035a2:	f000 fd69 	bl	8004078 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 80035a6:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <CLI_FDCANTest+0x478>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <CLI_FDCANTest+0x422>
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	8aba      	ldrh	r2, [r7, #20]
 80035b2:	4619      	mov	r1, r3
 80035b4:	4823      	ldr	r0, [pc, #140]	; (8003644 <CLI_FDCANTest+0x4ac>)
 80035b6:	f000 fd5f 	bl	8004078 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	663b      	str	r3, [r7, #96]	; 0x60
 80035be:	e00f      	b.n	80035e0 <CLI_FDCANTest+0x448>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <CLI_FDCANTest+0x478>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <CLI_FDCANTest+0x442>
 80035c8:	f107 0216 	add.w	r2, r7, #22
 80035cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ce:	4413      	add	r3, r2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	480f      	ldr	r0, [pc, #60]	; (8003614 <CLI_FDCANTest+0x47c>)
 80035d6:	f000 fd4f 	bl	8004078 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80035da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035dc:	3301      	adds	r3, #1
 80035de:	663b      	str	r3, [r7, #96]	; 0x60
 80035e0:	8abb      	ldrh	r3, [r7, #20]
 80035e2:	461a      	mov	r2, r3
 80035e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035e6:	4293      	cmp	r3, r2
 80035e8:	dbea      	blt.n	80035c0 <CLI_FDCANTest+0x428>
            DebugMsg(DEBUGMSG_CLI,"\n");
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <CLI_FDCANTest+0x478>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <CLI_FDCANTest+0x460>
 80035f2:	4809      	ldr	r0, [pc, #36]	; (8003618 <CLI_FDCANTest+0x480>)
 80035f4:	f000 fd40 	bl	8004078 <svDebugMessage>
        while(svCLI_KeepLoop())
 80035f8:	f00c fd98 	bl	801012c <svCLI_KeepLoop>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f47f aeb4 	bne.w	800336c <CLI_FDCANTest+0x1d4>
        ret = TRUE;
 8003604:	2301      	movs	r3, #1
 8003606:	65fb      	str	r3, [r7, #92]	; 0x5c
}
 8003608:	bf00      	nop
 800360a:	3784      	adds	r7, #132	; 0x84
 800360c:	46bd      	mov	sp, r7
 800360e:	bd90      	pop	{r4, r7, pc}
 8003610:	2000003c 	.word	0x2000003c
 8003614:	0801d1b8 	.word	0x0801d1b8
 8003618:	0801d1c0 	.word	0x0801d1c0
 800361c:	0801d1d4 	.word	0x0801d1d4
 8003620:	20003b90 	.word	0x20003b90
 8003624:	0801d1e8 	.word	0x0801d1e8
 8003628:	20003624 	.word	0x20003624
 800362c:	0801d1f4 	.word	0x0801d1f4
 8003630:	0801d204 	.word	0x0801d204
 8003634:	10624dd3 	.word	0x10624dd3
 8003638:	0801d184 	.word	0x0801d184
 800363c:	0801d194 	.word	0x0801d194
 8003640:	0801d19c 	.word	0x0801d19c
 8003644:	0801d1a4 	.word	0x0801d1a4

08003648 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	; 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 8003656:	f04f 33ff 	mov.w	r3, #4294967295
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 800365c:	f04f 33ff 	mov.w	r3, #4294967295
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 8003662:	f003 fb5b 	bl	8006d1c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <Flash_Erase+0xb0>)
 8003668:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800366c:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
 800367e:	e013      	b.n	80036a8 <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	b29b      	uxth	r3, r3
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f837 	bl	80036fc <Flash_InSector>
 800368e:	4603      	mov	r3, r0
 8003690:	2b01      	cmp	r3, #1
 8003692:	d106      	bne.n	80036a2 <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	2b00      	cmp	r3, #0
 8003698:	da01      	bge.n	800369e <Flash_Erase+0x56>
      {
        start_sector = i;
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	3301      	adds	r3, #1
 80036a6:	623b      	str	r3, [r7, #32]
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	2b7f      	cmp	r3, #127	; 0x7f
 80036ac:	dde8      	ble.n	8003680 <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	db19      	blt.n	80036e8 <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80036b4:	2304      	movs	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 80036c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80036ca:	f107 0208 	add.w	r2, r7, #8
 80036ce:	f107 030c 	add.w	r3, r7, #12
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 fc53 	bl	8006f80 <HAL_FLASHEx_Erase>
 80036da:	4603      	mov	r3, r0
 80036dc:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <Flash_Erase+0xa0>
    {
      ret = TRUE;
 80036e4:	2301      	movs	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 80036e8:	f003 fb3e 	bl	8006d68 <HAL_FLASH_Lock>
  return ret;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3730      	adds	r7, #48	; 0x30
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40022000 	.word	0x40022000

080036fc <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b08b      	sub	sp, #44	; 0x2c
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 800370e:	89fb      	ldrh	r3, [r7, #14]
 8003710:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8003714:	035b      	lsls	r3, r3, #13
 8003716:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800371e:	331f      	adds	r3, #31
 8003720:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	3b01      	subs	r3, #1
 800372e:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	429a      	cmp	r2, r3
 8003736:	d305      	bcc.n	8003744 <Flash_InSector+0x48>
 8003738:	6a3a      	ldr	r2, [r7, #32]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	d801      	bhi.n	8003744 <Flash_InSector+0x48>
  {
    ret = TRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	429a      	cmp	r2, r3
 800374a:	d305      	bcc.n	8003758 <Flash_InSector+0x5c>
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	429a      	cmp	r2, r3
 8003752:	d801      	bhi.n	8003758 <Flash_InSector+0x5c>
  {
    ret = TRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	429a      	cmp	r2, r3
 800375e:	d305      	bcc.n	800376c <Flash_InSector+0x70>
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	429a      	cmp	r2, r3
 8003766:	d801      	bhi.n	800376c <Flash_InSector+0x70>
  {
    ret = TRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	429a      	cmp	r2, r3
 8003772:	d305      	bcc.n	8003780 <Flash_InSector+0x84>
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	429a      	cmp	r2, r3
 800377a:	d801      	bhi.n	8003780 <Flash_InSector+0x84>
  {
    ret = TRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003782:	4618      	mov	r0, r3
 8003784:	372c      	adds	r7, #44	; 0x2c
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b092      	sub	sp, #72	; 0x48
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800379a:	2301      	movs	r3, #1
 800379c:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 800379e:	f003 fabd 	bl	8006d1c <HAL_FLASH_Unlock>

  index = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 80037ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <Flash_Write+0x2e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b0f      	cmp	r3, #15
 80037b8:	f200 808e 	bhi.w	80038d8 <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 80037c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	2210      	movs	r2, #16
 80037cc:	4618      	mov	r0, r3
 80037ce:	f018 fcb2 	bl	801c136 <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 80037d2:	f107 0210 	add.w	r2, r7, #16
 80037d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d8:	18d0      	adds	r0, r2, r3
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	f1c3 0210 	rsb	r2, r3, #16
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4293      	cmp	r3, r2
 80037e4:	bf28      	it	cs
 80037e6:	4613      	movcs	r3, r2
 80037e8:	461a      	mov	r2, r3
 80037ea:	68b9      	ldr	r1, [r7, #8]
 80037ec:	f018 fca3 	bl	801c136 <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	461a      	mov	r2, r3
 80037f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037f8:	2002      	movs	r0, #2
 80037fa:	f003 fa17 	bl	8006c2c <HAL_FLASH_Program>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 8003804:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <Flash_Write+0x82>
    {
      return FALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	e06c      	b.n	80038ea <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 8003810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d107      	bne.n	8003826 <Flash_Write+0x98>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d804      	bhi.n	8003826 <Flash_Write+0x98>
    {
      index += length;
 800381c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	643b      	str	r3, [r7, #64]	; 0x40
 8003824:	e004      	b.n	8003830 <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 8003826:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	3310      	adds	r3, #16
 800382e:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 8003830:	e052      	b.n	80038d8 <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b10      	cmp	r3, #16
 800383a:	bf28      	it	cs
 800383c:	2310      	movcs	r3, #16
 800383e:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	2b10      	cmp	r3, #16
 8003844:	d117      	bne.n	8003876 <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384a:	18d1      	adds	r1, r2, r3
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003850:	4413      	add	r3, r2
 8003852:	461a      	mov	r2, r3
 8003854:	2002      	movs	r0, #2
 8003856:	f003 f9e9 	bl	8006c2c <HAL_FLASH_Program>
 800385a:	4603      	mov	r3, r0
 800385c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8003860:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <Flash_Write+0xe0>
      {
        ret = FALSE;
 8003868:	2300      	movs	r3, #0
 800386a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800386c:	e03a      	b.n	80038e4 <Flash_Write+0x156>
      }
      index += write_length;
 800386e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	4413      	add	r3, r2
 8003874:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387a:	429a      	cmp	r2, r3
 800387c:	d02c      	beq.n	80038d8 <Flash_Write+0x14a>
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b0f      	cmp	r3, #15
 8003886:	d827      	bhi.n	80038d8 <Flash_Write+0x14a>
    {
      offset = length - index;
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003894:	4413      	add	r3, r2
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8003898:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800389a:	f107 0310 	add.w	r3, r7, #16
 800389e:	2210      	movs	r2, #16
 80038a0:	4618      	mov	r0, r3
 80038a2:	f018 fc48 	bl	801c136 <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038aa:	18d1      	adds	r1, r2, r3
 80038ac:	f107 0310 	add.w	r3, r7, #16
 80038b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038b2:	4618      	mov	r0, r3
 80038b4:	f018 fc3f 	bl	801c136 <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 80038b8:	f107 0310 	add.w	r3, r7, #16
 80038bc:	461a      	mov	r2, r3
 80038be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038c0:	2002      	movs	r0, #2
 80038c2:	f003 f9b3 	bl	8006c2c <HAL_FLASH_Program>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 80038cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <Flash_Write+0x154>
      {
        return FALSE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e008      	b.n	80038ea <Flash_Write+0x15c>
  while(index < length)
 80038d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d3a8      	bcc.n	8003832 <Flash_Write+0xa4>
 80038e0:	e000      	b.n	80038e4 <Flash_Write+0x156>
      }
      break;
 80038e2:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 80038e4:	f003 fa40 	bl	8006d68 <HAL_FLASH_Lock>
  return ret;
 80038e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3748      	adds	r7, #72	; 0x48
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b089      	sub	sp, #36	; 0x24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	e00c      	b.n	8003926 <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4413      	add	r3, r2
 8003912:	7819      	ldrb	r1, [r3, #0]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	4413      	add	r3, r2
 800391c:	460a      	mov	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	3301      	adds	r3, #1
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d8ee      	bhi.n	800390c <Flash_Read+0x1a>
  }



  return ret;
 800392e:	69bb      	ldr	r3, [r7, #24]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3724      	adds	r7, #36	; 0x24
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b09a      	sub	sp, #104	; 0x68
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b02      	cmp	r3, #2
 800394e:	f040 8085 	bne.w	8003a5c <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d049      	beq.n	80039ec <CLI_FlashTest+0xb0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b03      	cmp	r3, #3
 800395c:	d871      	bhi.n	8003a42 <CLI_FlashTest+0x106>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d003      	beq.n	800396c <CLI_FlashTest+0x30>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d029      	beq.n	80039be <CLI_FlashTest+0x82>
 800396a:	e06a      	b.n	8003a42 <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 800396c:	4b3d      	ldr	r3, [pc, #244]	; (8003a64 <CLI_FlashTest+0x128>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <CLI_FlashTest+0x3e>
 8003974:	483c      	ldr	r0, [pc, #240]	; (8003a68 <CLI_FlashTest+0x12c>)
 8003976:	f000 fb7f 	bl	8004078 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 800397a:	f107 0310 	add.w	r3, r7, #16
 800397e:	2210      	movs	r2, #16
 8003980:	4619      	mov	r1, r3
 8003982:	6838      	ldr	r0, [r7, #0]
 8003984:	f7ff ffb5 	bl	80038f2 <Flash_Read>
        for(int i=0; i<16; i++)
 8003988:	2300      	movs	r3, #0
 800398a:	667b      	str	r3, [r7, #100]	; 0x64
 800398c:	e013      	b.n	80039b6 <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 800398e:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <CLI_FlashTest+0x128>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00c      	beq.n	80039b0 <CLI_FlashTest+0x74>
 8003996:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	18d1      	adds	r1, r2, r3
 800399c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	3368      	adds	r3, #104	; 0x68
 80039a2:	443b      	add	r3, r7
 80039a4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4830      	ldr	r0, [pc, #192]	; (8003a6c <CLI_FlashTest+0x130>)
 80039ac:	f000 fb64 	bl	8004078 <svDebugMessage>
        for(int i=0; i<16; i++)
 80039b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039b2:	3301      	adds	r3, #1
 80039b4:	667b      	str	r3, [r7, #100]	; 0x64
 80039b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	dde8      	ble.n	800398e <CLI_FlashTest+0x52>
        }
        break;
 80039bc:	e04e      	b.n	8003a5c <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 80039be:	2110      	movs	r1, #16
 80039c0:	6838      	ldr	r0, [r7, #0]
 80039c2:	f7ff fe41 	bl	8003648 <Flash_Erase>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d107      	bne.n	80039dc <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <CLI_FlashTest+0x128>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d03e      	beq.n	8003a52 <CLI_FlashTest+0x116>
 80039d4:	4826      	ldr	r0, [pc, #152]	; (8003a70 <CLI_FlashTest+0x134>)
 80039d6:	f000 fb4f 	bl	8004078 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 80039da:	e03a      	b.n	8003a52 <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <CLI_FlashTest+0x128>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d036      	beq.n	8003a52 <CLI_FlashTest+0x116>
 80039e4:	4823      	ldr	r0, [pc, #140]	; (8003a74 <CLI_FlashTest+0x138>)
 80039e6:	f000 fb47 	bl	8004078 <svDebugMessage>
        break;
 80039ea:	e032      	b.n	8003a52 <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 80039ec:	2300      	movs	r3, #0
 80039ee:	663b      	str	r3, [r7, #96]	; 0x60
 80039f0:	e00a      	b.n	8003a08 <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 80039f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f4:	b2d9      	uxtb	r1, r3
 80039f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80039fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fc:	4413      	add	r3, r2
 80039fe:	460a      	mov	r2, r1
 8003a00:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 8003a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a04:	3301      	adds	r3, #1
 8003a06:	663b      	str	r3, [r7, #96]	; 0x60
 8003a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	ddf1      	ble.n	80039f2 <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 8003a0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a12:	2210      	movs	r2, #16
 8003a14:	4619      	mov	r1, r3
 8003a16:	6838      	ldr	r0, [r7, #0]
 8003a18:	f7ff feb9 	bl	800378e <Flash_Write>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d107      	bne.n	8003a32 <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <CLI_FlashTest+0x128>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d015      	beq.n	8003a56 <CLI_FlashTest+0x11a>
 8003a2a:	4813      	ldr	r0, [pc, #76]	; (8003a78 <CLI_FlashTest+0x13c>)
 8003a2c:	f000 fb24 	bl	8004078 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 8003a30:	e011      	b.n	8003a56 <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <CLI_FlashTest+0x128>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <CLI_FlashTest+0x11a>
 8003a3a:	4810      	ldr	r0, [pc, #64]	; (8003a7c <CLI_FlashTest+0x140>)
 8003a3c:	f000 fb1c 	bl	8004078 <svDebugMessage>
        break;
 8003a40:	e009      	b.n	8003a56 <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <CLI_FlashTest+0x128>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <CLI_FlashTest+0x11e>
 8003a4a:	480d      	ldr	r0, [pc, #52]	; (8003a80 <CLI_FlashTest+0x144>)
 8003a4c:	f000 fb14 	bl	8004078 <svDebugMessage>
        break;
 8003a50:	e003      	b.n	8003a5a <CLI_FlashTest+0x11e>
        break;
 8003a52:	bf00      	nop
 8003a54:	e002      	b.n	8003a5c <CLI_FlashTest+0x120>
        break;
 8003a56:	bf00      	nop
 8003a58:	e000      	b.n	8003a5c <CLI_FlashTest+0x120>
        break;
 8003a5a:	bf00      	nop
    }
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3768      	adds	r7, #104	; 0x68
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	2000003c 	.word	0x2000003c
 8003a68:	0801d25c 	.word	0x0801d25c
 8003a6c:	0801d28c 	.word	0x0801d28c
 8003a70:	0801d29c 	.word	0x0801d29c
 8003a74:	0801d2a8 	.word	0x0801d2a8
 8003a78:	0801d2b4 	.word	0x0801d2b4
 8003a7c:	0801d2c0 	.word	0x0801d2c0
 8003a80:	0801d2cc 	.word	0x0801d2cc

08003a84 <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <LED_Init+0x1c>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <LED_Init+0x20>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20003b94 	.word	0x20003b94
 8003aa4:	20003b98 	.word	0x20003b98

08003aa8 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <LED_OnOff+0x7c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d02d      	beq.n	8003b18 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <LED_OnOff+0x80>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d02c      	beq.n	8003b1e <LED_OnOff+0x76>
  {
    switch(eLED){
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d010      	beq.n	8003aec <LED_OnOff+0x44>
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	dc26      	bgt.n	8003b1c <LED_OnOff+0x74>
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d002      	beq.n	8003ad8 <LED_OnOff+0x30>
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d005      	beq.n	8003ae2 <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 8003ad6:	e021      	b.n	8003b1c <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <LED_OnOff+0x84>)
 8003ada:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 8003adc:	2301      	movs	r3, #1
 8003ade:	817b      	strh	r3, [r7, #10]
        break;
 8003ae0:	e009      	b.n	8003af6 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 8003ae2:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <LED_OnOff+0x88>)
 8003ae4:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 8003ae6:	2310      	movs	r3, #16
 8003ae8:	817b      	strh	r3, [r7, #10]
        break;
 8003aea:	e004      	b.n	8003af6 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <LED_OnOff+0x8c>)
 8003aee:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 8003af0:	2310      	movs	r3, #16
 8003af2:	817b      	strh	r3, [r7, #10]
        break;
 8003af4:	bf00      	nop
        break;
    }
    if(bOn)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 8003afc:	897b      	ldrh	r3, [r7, #10]
 8003afe:	2201      	movs	r2, #1
 8003b00:	4619      	mov	r1, r3
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f003 fc92 	bl	800742c <HAL_GPIO_WritePin>
 8003b08:	e009      	b.n	8003b1e <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4619      	mov	r1, r3
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f003 fc8b 	bl	800742c <HAL_GPIO_WritePin>
 8003b16:	e002      	b.n	8003b1e <LED_OnOff+0x76>
    return;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <LED_OnOff+0x76>
        return;
 8003b1c:	bf00      	nop
    }
  }
}
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20003b98 	.word	0x20003b98
 8003b28:	20003b94 	.word	0x20003b94
 8003b2c:	42020400 	.word	0x42020400
 8003b30:	42021400 	.word	0x42021400
 8003b34:	42021800 	.word	0x42021800

08003b38 <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	e02c      	b.n	8003b9e <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 8003b44:	2101      	movs	r1, #1
 8003b46:	2001      	movs	r0, #1
 8003b48:	f7ff ffae 	bl	8003aa8 <LED_OnOff>
    HAL_Delay(50);
 8003b4c:	2032      	movs	r0, #50	; 0x32
 8003b4e:	f000 fb0f 	bl	8004170 <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 8003b52:	2100      	movs	r1, #0
 8003b54:	2001      	movs	r0, #1
 8003b56:	f7ff ffa7 	bl	8003aa8 <LED_OnOff>
    HAL_Delay(50);
 8003b5a:	2032      	movs	r0, #50	; 0x32
 8003b5c:	f000 fb08 	bl	8004170 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 8003b60:	2101      	movs	r1, #1
 8003b62:	2002      	movs	r0, #2
 8003b64:	f7ff ffa0 	bl	8003aa8 <LED_OnOff>
    HAL_Delay(50);
 8003b68:	2032      	movs	r0, #50	; 0x32
 8003b6a:	f000 fb01 	bl	8004170 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 8003b6e:	2100      	movs	r1, #0
 8003b70:	2002      	movs	r0, #2
 8003b72:	f7ff ff99 	bl	8003aa8 <LED_OnOff>
    HAL_Delay(50);
 8003b76:	2032      	movs	r0, #50	; 0x32
 8003b78:	f000 fafa 	bl	8004170 <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	2003      	movs	r0, #3
 8003b80:	f7ff ff92 	bl	8003aa8 <LED_OnOff>
    HAL_Delay(50);
 8003b84:	2032      	movs	r0, #50	; 0x32
 8003b86:	f000 faf3 	bl	8004170 <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	f7ff ff8b 	bl	8003aa8 <LED_OnOff>
    HAL_Delay(50);
 8003b92:	2032      	movs	r0, #50	; 0x32
 8003b94:	f000 faec 	bl	8004170 <HAL_Delay>
  for(int i =0; i<3; i++)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	ddcf      	ble.n	8003b44 <LED_SimpleAnimation+0xc>
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d10b      	bne.n	8003bda <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f7ff ff67 	bl	8003aa8 <LED_OnOff>
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <RESET_Init+0x80>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 8003c02:	4919      	ldr	r1, [pc, #100]	; (8003c68 <RESET_Init+0x84>)
 8003c04:	2002      	movs	r0, #2
 8003c06:	f000 f845 	bl	8003c94 <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 8003c0a:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <RESET_Init+0x88>)
 8003c0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01c      	beq.n	8003c52 <RESET_Init+0x6e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d019      	beq.n	8003c52 <RESET_Init+0x6e>
 8003c1e:	2002      	movs	r0, #2
 8003c20:	f000 f828 	bl	8003c74 <RTC_ReadBackupReg>
 8003c24:	4603      	mov	r3, r0
 8003c26:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <RESET_Init+0x84>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d112      	bne.n	8003c52 <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f000 f821 	bl	8003c74 <RTC_ReadBackupReg>
 8003c32:	4603      	mov	r3, r0
 8003c34:	3301      	adds	r3, #1
 8003c36:	4619      	mov	r1, r3
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f000 f82b 	bl	8003c94 <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 8003c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c42:	f000 fa95 	bl	8004170 <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 8003c46:	2001      	movs	r0, #1
 8003c48:	f000 f814 	bl	8003c74 <RTC_ReadBackupReg>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <RESET_Init+0x8c>)
 8003c50:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 8003c52:	2100      	movs	r1, #0
 8003c54:	2001      	movs	r0, #1
 8003c56:	f000 f81d 	bl	8003c94 <RTC_WriteBackupReg>

  return ret;
 8003c5a:	683b      	ldr	r3, [r7, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	e000edf0 	.word	0xe000edf0
 8003c68:	20240215 	.word	0x20240215
 8003c6c:	44020c00 	.word	0x44020c00
 8003c70:	20003b9c 	.word	0x20003b9c

08003c74 <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4804      	ldr	r0, [pc, #16]	; (8003c90 <RTC_ReadBackupReg+0x1c>)
 8003c80:	f009 fc64 	bl	800d54c <HAL_RTCEx_BKUPRead>
 8003c84:	4603      	mov	r3, r0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20003ba0 	.word	0x20003ba0

08003c94 <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4803      	ldr	r0, [pc, #12]	; (8003cb0 <RTC_WriteBackupReg+0x1c>)
 8003ca4:	f009 fc3a 	bl	800d51c <HAL_RTCEx_BKUPWrite>
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20003ba0 	.word	0x20003ba0

08003cb4 <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	6039      	str	r1, [r7, #0]
 8003cbe:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d177      	bne.n	8003db6 <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <UART_Init+0x10c>)
 8003cc8:	4a3e      	ldr	r2, [pc, #248]	; (8003dc4 <UART_Init+0x110>)
 8003cca:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 8003ccc:	4a3c      	ldr	r2, [pc, #240]	; (8003dc0 <UART_Init+0x10c>)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cd2:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <UART_Init+0x10c>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8003cd8:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <UART_Init+0x10c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 8003cde:	4b38      	ldr	r3, [pc, #224]	; (8003dc0 <UART_Init+0x10c>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 8003ce4:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <UART_Init+0x10c>)
 8003ce6:	220c      	movs	r2, #12
 8003ce8:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <UART_Init+0x10c>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cf0:	4b33      	ldr	r3, [pc, #204]	; (8003dc0 <UART_Init+0x10c>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cf6:	4b32      	ldr	r3, [pc, #200]	; (8003dc0 <UART_Init+0x10c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cfc:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <UART_Init+0x10c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d02:	4b2f      	ldr	r3, [pc, #188]	; (8003dc0 <UART_Init+0x10c>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d08:	482d      	ldr	r0, [pc, #180]	; (8003dc0 <UART_Init+0x10c>)
 8003d0a:	f00a f81b 	bl	800dd44 <HAL_UART_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <UART_Init+0x72>
      {
        Error_Handler();
 8003d14:	f7fc ff24 	bl	8000b60 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <UART_Init+0x114>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003d1e:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <UART_Init+0x118>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e031      	b.n	8003d8a <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d26:	2100      	movs	r1, #0
 8003d28:	4825      	ldr	r0, [pc, #148]	; (8003dc0 <UART_Init+0x10c>)
 8003d2a:	f00b ff4a 	bl	800fbc2 <HAL_UARTEx_SetTxFifoThreshold>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <UART_Init+0x92>
      {
        Error_Handler();
 8003d34:	f7fc ff14 	bl	8000b60 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <UART_Init+0x114>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003d3e:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <UART_Init+0x118>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e021      	b.n	8003d8a <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d46:	2100      	movs	r1, #0
 8003d48:	481d      	ldr	r0, [pc, #116]	; (8003dc0 <UART_Init+0x10c>)
 8003d4a:	f00b ff78 	bl	800fc3e <HAL_UARTEx_SetRxFifoThreshold>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <UART_Init+0xb2>
      {
        Error_Handler();
 8003d54:	f7fc ff04 	bl	8000b60 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <UART_Init+0x114>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <UART_Init+0x118>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e011      	b.n	8003d8a <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003d66:	4816      	ldr	r0, [pc, #88]	; (8003dc0 <UART_Init+0x10c>)
 8003d68:	f00b fef2 	bl	800fb50 <HAL_UARTEx_DisableFifoMode>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <UART_Init+0xd0>
      {
        Error_Handler();
 8003d72:	f7fc fef5 	bl	8000b60 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003d76:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <UART_Init+0x114>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <UART_Init+0x118>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e002      	b.n	8003d8a <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 8003d84:	4812      	ldr	r0, [pc, #72]	; (8003dd0 <UART_Init+0x11c>)
 8003d86:	f00c fee4 	bl	8010b52 <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4911      	ldr	r1, [pc, #68]	; (8003dd4 <UART_Init+0x120>)
 8003d8e:	480c      	ldr	r0, [pc, #48]	; (8003dc0 <UART_Init+0x10c>)
 8003d90:	f00a f8c6 	bl	800df20 <HAL_UART_Receive_IT>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <UART_Init+0x114>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <UART_Init+0x118>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 8003da6:	e007      	b.n	8003db8 <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <UART_Init+0x114>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 8003dae:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <UART_Init+0x118>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
      break;
 8003db4:	e000      	b.n	8003db8 <UART_Init+0x104>
    default:
      break;
 8003db6:	bf00      	nop
  }
  return;
 8003db8:	bf00      	nop
}
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20003bd8 	.word	0x20003bd8
 8003dc4:	40004400 	.word	0x40004400
 8003dc8:	20003bd4 	.word	0x20003bd4
 8003dcc:	20003cec 	.word	0x20003cec
 8003dd0:	20000020 	.word	0x20000020
 8003dd4:	20003bd0 	.word	0x20003bd0

08003dd8 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 8003de2:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <IsUartConnected+0x1c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20003bd4 	.word	0x20003bd4

08003df8 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	71fb      	strb	r3, [r7, #7]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d110      	bne.n	8003e34 <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 8003e12:	88ba      	ldrh	r2, [r7, #4]
 8003e14:	2364      	movs	r3, #100	; 0x64
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	480a      	ldr	r0, [pc, #40]	; (8003e44 <UART_Write+0x4c>)
 8003e1a:	f009 ffe3 	bl	800dde4 <HAL_UART_Transmit>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 8003e22:	7afb      	ldrb	r3, [r7, #11]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d107      	bne.n	8003e38 <UART_Write+0x40>
      {
        ret = Len;
 8003e28:	88bb      	ldrh	r3, [r7, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <UART_Write+0x50>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
      }
      break;
 8003e32:	e001      	b.n	8003e38 <UART_Write+0x40>
    default:
      break;
 8003e34:	bf00      	nop
 8003e36:	e000      	b.n	8003e3a <UART_Write+0x42>
      break;
 8003e38:	bf00      	nop
  }
  return ret;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20003bd8 	.word	0x20003bd8
 8003e48:	20003cec 	.word	0x20003cec

08003e4c <UART_Printf>:
  return ret;
}


uint32_t UART_Printf(uint8_t ch, char* fmt, ...) // ... arg
{
 8003e4c:	b40e      	push	{r1, r2, r3}
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b0c7      	sub	sp, #284	; 0x11c
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4602      	mov	r2, r0
 8003e56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e5a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003e5e:	701a      	strb	r2, [r3, #0]
  va_list args;

  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003e60:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003e64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e6c:	601a      	str	r2, [r3, #0]
  // printf 결과를 buf 에 저장
  len = vsnprintf(buf, 256, fmt, args);
 8003e6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e76:	f107 0010 	add.w	r0, r7, #16
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e84:	f018 f866 	bl	801bf54 <vsniprintf>
 8003e88:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = UART_Write(ch, (uint8_t *)buf, len);
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	f107 0110 	add.w	r1, r7, #16
 8003e96:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e9a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ffa9 	bl	8003df8 <UART_Write>
 8003ea6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8003eaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eba:	b003      	add	sp, #12
 8003ebc:	4770      	bx	lr
	...

08003ec0 <Uart_Available>:

uint32_t Uart_Available(uint8_t ch)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <Uart_Available+0x1e>
  {
    case _DEF_UART1:
      ret = svRingBuffer_GetCount(&g_uartRxBuff);
 8003ed4:	4804      	ldr	r0, [pc, #16]	; (8003ee8 <Uart_Available+0x28>)
 8003ed6:	f00c fe1a 	bl	8010b0e <svRingBuffer_GetCount>
 8003eda:	60f8      	str	r0, [r7, #12]
      break;
 8003edc:	bf00      	nop
  }

  return ret;
 8003ede:	68fb      	ldr	r3, [r7, #12]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000020 	.word	0x20000020

08003eec <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <HAL_UART_RxCpltCallback+0x40>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d112      	bne.n	8003f24 <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <HAL_UART_RxCpltCallback+0x44>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	4619      	mov	r1, r3
 8003f04:	480b      	ldr	r0, [pc, #44]	; (8003f34 <HAL_UART_RxCpltCallback+0x48>)
 8003f06:	f00c fe3c 	bl	8010b82 <svRingBuffer_Push>
 8003f0a:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f113 0f02 	cmn.w	r3, #2
 8003f12:	d102      	bne.n	8003f1a <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8003f14:	4807      	ldr	r0, [pc, #28]	; (8003f34 <HAL_UART_RxCpltCallback+0x48>)
 8003f16:	f00c fe1c 	bl	8010b52 <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4904      	ldr	r1, [pc, #16]	; (8003f30 <HAL_UART_RxCpltCallback+0x44>)
 8003f1e:	4806      	ldr	r0, [pc, #24]	; (8003f38 <HAL_UART_RxCpltCallback+0x4c>)
 8003f20:	f009 fffe 	bl	800df20 <HAL_UART_Receive_IT>
  }
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40004400 	.word	0x40004400
 8003f30:	20003bd0 	.word	0x20003bd0
 8003f34:	20000020 	.word	0x20000020
 8003f38:	20003bd8 	.word	0x20003bd8

08003f3c <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8003f40:	4806      	ldr	r0, [pc, #24]	; (8003f5c <svDebugRxChar+0x20>)
 8003f42:	f00c fde4 	bl	8010b0e <svRingBuffer_GetCount>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d004      	beq.n	8003f56 <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8003f4c:	4803      	ldr	r0, [pc, #12]	; (8003f5c <svDebugRxChar+0x20>)
 8003f4e:	f00c fe4c 	bl	8010bea <svRingBuffer_Pop>
 8003f52:	4603      	mov	r3, r0
 8003f54:	e000      	b.n	8003f58 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8003f56:	2300      	movs	r3, #0
	}
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20000020 	.word	0x20000020

08003f60 <svDebugProcess>:

void svDebugProcess(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8003f66:	2000      	movs	r0, #0
 8003f68:	f7ff ff36 	bl	8003dd8 <IsUartConnected>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01a      	beq.n	8003fa8 <svDebugProcess+0x48>
	  svCLI_Handler();
 8003f72:	f00c fc79 	bl	8010868 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8003f76:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <svDebugProcess+0x50>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d114      	bne.n	8003fa8 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8003f7e:	480d      	ldr	r0, [pc, #52]	; (8003fb4 <svDebugProcess+0x54>)
 8003f80:	f017 fd49 	bl	801ba16 <lwrb_get_linear_block_read_length>
 8003f84:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8003f8c:	4809      	ldr	r0, [pc, #36]	; (8003fb4 <svDebugProcess+0x54>)
 8003f8e:	f017 fd26 	bl	801b9de <lwrb_get_linear_block_read_address>
 8003f92:	4601      	mov	r1, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f7ff ff2c 	bl	8003df8 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4804      	ldr	r0, [pc, #16]	; (8003fb4 <svDebugProcess+0x54>)
 8003fa4:	f017 fd6a 	bl	801ba7c <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20003cec 	.word	0x20003cec
 8003fb4:	20003cf0 	.word	0x20003cf0

08003fb8 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8003fc6:	7afb      	ldrb	r3, [r7, #11]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d11a      	bne.n	8004002 <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f7ff ff03 	bl	8003dd8 <IsUartConnected>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d014      	beq.n	8004002 <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8003fd8:	f000 f8be 	bl	8004158 <HAL_GetTick>
 8003fdc:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8003fde:	e003      	b.n	8003fe8 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <svDebugCallback+0x54>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d006      	beq.n	8003ff6 <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8003fe8:	6978      	ldr	r0, [r7, #20]
 8003fea:	f000 f863 	bl	80040b4 <GetElapsedTime>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b63      	cmp	r3, #99	; 0x63
 8003ff2:	d9f5      	bls.n	8003fe0 <svDebugCallback+0x28>
 8003ff4:	e000      	b.n	8003ff8 <svDebugCallback+0x40>
					break;
 8003ff6:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <svDebugCallback+0x54>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8003ffe:	f7ff ffaf 	bl	8003f60 <svDebugProcess>
		}
	}
}
 8004002:	bf00      	nop
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20003cec 	.word	0x20003cec

08004010 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8004014:	4809      	ldr	r0, [pc, #36]	; (800403c <svDebugInit+0x2c>)
 8004016:	f00c fd9c 	bl	8010b52 <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 800401a:	2200      	movs	r2, #0
 800401c:	4908      	ldr	r1, [pc, #32]	; (8004040 <svDebugInit+0x30>)
 800401e:	4809      	ldr	r0, [pc, #36]	; (8004044 <svDebugInit+0x34>)
 8004020:	f00b ff96 	bl	800ff50 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8004024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004028:	4907      	ldr	r1, [pc, #28]	; (8004048 <svDebugInit+0x38>)
 800402a:	4808      	ldr	r0, [pc, #32]	; (800404c <svDebugInit+0x3c>)
 800402c:	f017 fbb8 	bl	801b7a0 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8004030:	4907      	ldr	r1, [pc, #28]	; (8004050 <svDebugInit+0x40>)
 8004032:	4806      	ldr	r0, [pc, #24]	; (800404c <svDebugInit+0x3c>)
 8004034:	f017 fbd5 	bl	801b7e2 <lwrb_set_evt_fn>
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000020 	.word	0x20000020
 8004040:	08004055 	.word	0x08004055
 8004044:	08003f3d 	.word	0x08003f3d
 8004048:	20003d04 	.word	0x20003d04
 800404c:	20003cf0 	.word	0x20003cf0
 8004050:	08003fb9 	.word	0x08003fb9

08004054 <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 800405e:	1dfb      	adds	r3, r7, #7
 8004060:	2201      	movs	r2, #1
 8004062:	4619      	mov	r1, r3
 8004064:	4803      	ldr	r0, [pc, #12]	; (8004074 <svDebugPutChar+0x20>)
 8004066:	f017 fbd5 	bl	801b814 <lwrb_write>
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20003cf0 	.word	0x20003cf0

08004078 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8004078:	b40f      	push	{r0, r1, r2, r3}
 800407a:	b580      	push	{r7, lr}
 800407c:	b082      	sub	sp, #8
 800407e:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	6939      	ldr	r1, [r7, #16]
 800408a:	4808      	ldr	r0, [pc, #32]	; (80040ac <svDebugMessage+0x34>)
 800408c:	f017 ff86 	bl	801bf9c <vsiprintf>
 8004090:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	461a      	mov	r2, r3
 8004096:	4905      	ldr	r1, [pc, #20]	; (80040ac <svDebugMessage+0x34>)
 8004098:	4805      	ldr	r0, [pc, #20]	; (80040b0 <svDebugMessage+0x38>)
 800409a:	f017 fbbb 	bl	801b814 <lwrb_write>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a8:	b004      	add	sp, #16
 80040aa:	4770      	bx	lr
 80040ac:	20003f08 	.word	0x20003f08
 80040b0:	20003cf0 	.word	0x20003cf0

080040b4 <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 80040bc:	f000 f84c 	bl	8004158 <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d204      	bcs.n	80040d4 <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	e002      	b.n	80040da <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	1ad3      	subs	r3, r2, r3
	}
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e8:	2003      	movs	r0, #3
 80040ea:	f000 f928 	bl	800433e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80040ee:	f004 f801 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 80040f2:	4602      	mov	r2, r0
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_Init+0x40>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	490a      	ldr	r1, [pc, #40]	; (8004128 <HAL_Init+0x44>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	4a09      	ldr	r2, [pc, #36]	; (800412c <HAL_Init+0x48>)
 8004106:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004108:	200f      	movs	r0, #15
 800410a:	f7fc fea3 	bl	8000e54 <HAL_InitTick>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e002      	b.n	800411e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004118:	f7fc fd27 	bl	8000b6a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	44020c00 	.word	0x44020c00
 8004128:	0801fdc4 	.word	0x0801fdc4
 800412c:	20000000 	.word	0x20000000

08004130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_IncTick+0x20>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_IncTick+0x24>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4413      	add	r3, r2
 8004140:	4a04      	ldr	r2, [pc, #16]	; (8004154 <HAL_IncTick+0x24>)
 8004142:	6013      	str	r3, [r2, #0]
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000044 	.word	0x20000044
 8004154:	20003f88 	.word	0x20003f88

08004158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return uwTick;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <HAL_GetTick+0x14>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20003f88 	.word	0x20003f88

08004170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004178:	f7ff ffee 	bl	8004158 <HAL_GetTick>
 800417c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d005      	beq.n	8004196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <HAL_Delay+0x44>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004196:	bf00      	nop
 8004198:	f7ff ffde 	bl	8004158 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d8f7      	bhi.n	8004198 <HAL_Delay+0x28>
  {
  }
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000044 	.word	0x20000044

080041b8 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 80041c0:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80041c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041c6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80041ca:	4905      	ldr	r1, [pc, #20]	; (80041e0 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	44000400 	.word	0x44000400

080041e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <__NVIC_SetPriorityGrouping+0x44>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004200:	4013      	ands	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800420c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004216:	4a04      	ldr	r2, [pc, #16]	; (8004228 <__NVIC_SetPriorityGrouping+0x44>)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	60d3      	str	r3, [r2, #12]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <__NVIC_GetPriorityGrouping+0x18>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 0307 	and.w	r3, r3, #7
}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004256:	2b00      	cmp	r3, #0
 8004258:	db0b      	blt.n	8004272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	4907      	ldr	r1, [pc, #28]	; (8004280 <__NVIC_EnableIRQ+0x38>)
 8004262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	2001      	movs	r0, #1
 800426a:	fa00 f202 	lsl.w	r2, r0, r2
 800426e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000e100 	.word	0xe000e100

08004284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004294:	2b00      	cmp	r3, #0
 8004296:	db0a      	blt.n	80042ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	490c      	ldr	r1, [pc, #48]	; (80042d0 <__NVIC_SetPriority+0x4c>)
 800429e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a2:	0112      	lsls	r2, r2, #4
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	440b      	add	r3, r1
 80042a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042ac:	e00a      	b.n	80042c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4908      	ldr	r1, [pc, #32]	; (80042d4 <__NVIC_SetPriority+0x50>)
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	3b04      	subs	r3, #4
 80042bc:	0112      	lsls	r2, r2, #4
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	440b      	add	r3, r1
 80042c2:	761a      	strb	r2, [r3, #24]
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	e000e100 	.word	0xe000e100
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d8:	b480      	push	{r7}
 80042da:	b089      	sub	sp, #36	; 0x24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f1c3 0307 	rsb	r3, r3, #7
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	bf28      	it	cs
 80042f6:	2304      	movcs	r3, #4
 80042f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3304      	adds	r3, #4
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d902      	bls.n	8004308 <NVIC_EncodePriority+0x30>
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3b03      	subs	r3, #3
 8004306:	e000      	b.n	800430a <NVIC_EncodePriority+0x32>
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800430c:	f04f 32ff 	mov.w	r2, #4294967295
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43da      	mvns	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	401a      	ands	r2, r3
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004320:	f04f 31ff 	mov.w	r1, #4294967295
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	fa01 f303 	lsl.w	r3, r1, r3
 800432a:	43d9      	mvns	r1, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	4313      	orrs	r3, r2
         );
}
 8004332:	4618      	mov	r0, r3
 8004334:	3724      	adds	r7, #36	; 0x24
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff ff4c 	bl	80041e4 <__NVIC_SetPriorityGrouping>
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004362:	f7ff ff63 	bl	800422c <__NVIC_GetPriorityGrouping>
 8004366:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	6978      	ldr	r0, [r7, #20]
 800436e:	f7ff ffb3 	bl	80042d8 <NVIC_EncodePriority>
 8004372:	4602      	mov	r2, r0
 8004374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff82 	bl	8004284 <__NVIC_SetPriority>
}
 8004380:	bf00      	nop
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff56 	bl	8004248 <__NVIC_EnableIRQ>
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80043ac:	f7ff fed4 	bl	8004158 <HAL_GetTick>
 80043b0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e06b      	b.n	8004494 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d008      	beq.n	80043da <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e05c      	b.n	8004494 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0204 	orr.w	r2, r2, #4
 80043e8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2205      	movs	r2, #5
 80043ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80043f2:	e020      	b.n	8004436 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80043f4:	f7ff feb0 	bl	8004158 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d919      	bls.n	8004436 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	f043 0210 	orr.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2203      	movs	r2, #3
 8004412:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004426:	2201      	movs	r2, #1
 8004428:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e02e      	b.n	8004494 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0d7      	beq.n	80043f4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0202 	orr.w	r2, r2, #2
 8004452:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2204      	movs	r2, #4
 8004458:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004464:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447e:	2201      	movs	r2, #1
 8004480:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2200      	movs	r2, #0
 8004488:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e019      	b.n	80044e2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e00e      	b.n	80044e2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2204      	movs	r2, #4
 80044c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044da:	f043 0304 	orr.w	r3, r3, #4
 80044de:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0d2      	b.n	80046a8 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2223      	movs	r2, #35	; 0x23
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fd fc81 	bl	8001e1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 800451a:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <HAL_ETH_Init+0x1c0>)
 800451c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004520:	4a63      	ldr	r2, [pc, #396]	; (80046b0 <HAL_ETH_Init+0x1c0>)
 8004522:	f043 0302 	orr.w	r3, r3, #2
 8004526:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800452a:	4b61      	ldr	r3, [pc, #388]	; (80046b0 <HAL_ETH_Init+0x1c0>)
 800452c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	7a1b      	ldrb	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d103      	bne.n	8004548 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8004540:	2000      	movs	r0, #0
 8004542:	f7ff fe39 	bl	80041b8 <HAL_SBS_ETHInterfaceSelect>
 8004546:	e003      	b.n	8004550 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8004548:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800454c:	f7ff fe34 	bl	80041b8 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8004550:	4b58      	ldr	r3, [pc, #352]	; (80046b4 <HAL_ETH_Init+0x1c4>)
 8004552:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800456c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800456e:	f7ff fdf3 	bl	8004158 <HAL_GetTick>
 8004572:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004574:	e011      	b.n	800459a <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004576:	f7ff fdef 	bl	8004158 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004584:	d909      	bls.n	800459a <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2204      	movs	r2, #4
 800458a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	22e0      	movs	r2, #224	; 0xe0
 8004592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e086      	b.n	80046a8 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e4      	bne.n	8004576 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fd93 	bl	80050d8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80045b2:	f003 fecb 	bl	800834c <HAL_RCC_GetHCLKFreq>
 80045b6:	4603      	mov	r3, r0
 80045b8:	4a3f      	ldr	r2, [pc, #252]	; (80046b8 <HAL_ETH_Init+0x1c8>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	0c9a      	lsrs	r2, r3, #18
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3a01      	subs	r2, #1
 80045c6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 ff8e 	bl	80054ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80045dc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	22e0      	movs	r2, #224	; 0xe0
 8004608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e04b      	b.n	80046a8 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004618:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800461c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004620:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6952      	ldr	r2, [r2, #20]
 8004628:	0051      	lsls	r1, r2, #1
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	430b      	orrs	r3, r1
 8004630:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004634:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fff4 	bl	8005626 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f001 f83a 	bl	80056b8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	3305      	adds	r3, #5
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	021a      	lsls	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	4619      	mov	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	3303      	adds	r3, #3
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	061a      	lsls	r2, r3, #24
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	3302      	adds	r3, #2
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	3301      	adds	r3, #1
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004682:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004690:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004692:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2210      	movs	r2, #16
 80046a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	44020c00 	.word	0x44020c00
 80046b4:	44000400 	.word	0x44000400
 80046b8:	431bde83 	.word	0x431bde83

080046bc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ca:	2b10      	cmp	r3, #16
 80046cc:	d153      	bne.n	8004776 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2223      	movs	r2, #35	; 0x23
 80046d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2204      	movs	r2, #4
 80046da:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f9f6 	bl	8004ace <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0202 	orr.w	r2, r2, #2
 80046f0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800472e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800474a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004756:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8004762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004766:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2223      	movs	r2, #35	; 0x23
 800476e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	e000      	b.n	8004778 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478e:	2b23      	cmp	r3, #35	; 0x23
 8004790:	d13f      	bne.n	8004812 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2223      	movs	r2, #35	; 0x23
 8004796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047b2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047ce:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0202 	bic.w	r2, r2, #2
 8004804:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2210      	movs	r2, #16
 800480a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f043 0201 	orr.w	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484c:	2b23      	cmp	r3, #35	; 0x23
 800484e:	d179      	bne.n	8004944 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004850:	2200      	movs	r2, #0
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 ff8c 	bl	8005772 <ETH_Prepare_Tx_Descriptors>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d009      	beq.n	8004874 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004866:	f043 0202 	orr.w	r2, r3, #2
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e068      	b.n	8004946 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8004874:	f3bf 8f4f 	dsb	sy
}
 8004878:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3206      	adds	r2, #6
 8004882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004886:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	2b03      	cmp	r3, #3
 8004898:	d904      	bls.n	80048a4 <HAL_ETH_Transmit+0x84>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	1f1a      	subs	r2, r3, #4
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3106      	adds	r1, #6
 80048b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80048b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048b8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80048bc:	f7ff fc4c 	bl	8004158 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80048c2:	e039      	b.n	8004938 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80048d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f043 0208 	orr.w	r2, r3, #8
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e023      	b.n	8004946 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d018      	beq.n	8004938 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7ff fc27 	bl	8004158 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	429a      	cmp	r2, r3
 8004914:	d302      	bcc.n	800491c <HAL_ETH_Transmit+0xfc>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10d      	bne.n	8004938 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f043 0204 	orr.w	r2, r3, #4
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8004932:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e006      	b.n	8004946 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	dbc1      	blt.n	80048c4 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	e000      	b.n	8004946 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
  }
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b088      	sub	sp, #32
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0a5      	b.n	8004ac6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004980:	2b23      	cmp	r3, #35	; 0x23
 8004982:	d001      	beq.n	8004988 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e09e      	b.n	8004ac6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	3212      	adds	r2, #18
 8004994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004998:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499e:	f1c3 0304 	rsb	r3, r3, #4
 80049a2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80049a4:	e067      	b.n	8004a76 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <HAL_ETH_ReadData+0x88>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d03d      	beq.n	8004a52 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00d      	beq.n	8004a1c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f7fd fbd3 	bl	80021dc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	441a      	add	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3301      	adds	r3, #1
 8004a56:	61fb      	str	r3, [r7, #28]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d902      	bls.n	8004a64 <HAL_ETH_ReadData+0x116>
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3b04      	subs	r3, #4
 8004a62:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	3212      	adds	r2, #18
 8004a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	3301      	adds	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	db06      	blt.n	8004a8c <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d202      	bcs.n	8004a8c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d08c      	beq.n	80049a6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	441a      	add	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f814 	bl	8004ace <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d108      	bne.n	8004ac4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3720      	adds	r7, #32
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b088      	sub	sp, #32
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004ada:	2301      	movs	r3, #1
 8004adc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	3212      	adds	r2, #18
 8004aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aee:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004af6:	e03b      	b.n	8004b70 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d112      	bne.n	8004b26 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fd fb39 	bl	800217c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	74fb      	strb	r3, [r7, #19]
 8004b14:	e007      	b.n	8004b26 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	461a      	mov	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d021      	beq.n	8004b70 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8004b2c:	f3bf 8f5f 	dmb	sy
}
 8004b30:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	e003      	b.n	8004b4c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8004b4a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d902      	bls.n	8004b5e <ETH_UpdateDescriptor+0x90>
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3b04      	subs	r3, #4
 8004b5c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	3212      	adds	r2, #18
 8004b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b68:	617b      	str	r3, [r7, #20]
      desccount--;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <ETH_UpdateDescriptor+0xae>
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1bd      	bne.n	8004af8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d00d      	beq.n	8004ba2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e03e      	b.n	8004c4a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bd4:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	055b      	lsls	r3, r3, #21
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f043 030c 	orr.w	r3, r3, #12
 8004bf8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004c0c:	f7ff faa4 	bl	8004158 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004c12:	e009      	b.n	8004c28 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004c14:	f7ff faa0 	bl	8004158 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c22:	d901      	bls.n	8004c28 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e010      	b.n	8004c4a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ed      	bne.n	8004c14 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e03c      	b.n	8004cf0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c7e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	055b      	lsls	r3, r3, #21
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f023 030c 	bic.w	r3, r3, #12
 8004ca2:	f043 0304 	orr.w	r3, r3, #4
 8004ca6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_ETH_WritePHYRegister+0xa4>)
 8004cb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004cba:	4a0f      	ldr	r2, [pc, #60]	; (8004cf8 <HAL_ETH_WritePHYRegister+0xa4>)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004cc2:	f7ff fa49 	bl	8004158 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004cc8:	e009      	b.n	8004cde <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004cca:	f7ff fa45 	bl	8004158 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cd8:	d901      	bls.n	8004cde <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e008      	b.n	8004cf0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1ed      	bne.n	8004cca <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40028000 	.word	0x40028000

08004cfc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e1c3      	b.n	8005098 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 020c 	and.w	r2, r3, #12
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf14      	ite	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	2300      	moveq	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf14      	ite	ne
 8004df6:	2301      	movne	r3, #1
 8004df8:	2300      	moveq	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf0c      	ite	eq
 8004e10:	2301      	moveq	r3, #1
 8004e12:	2300      	movne	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	461a      	mov	r2, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf0c      	ite	eq
 8004e2a:	2301      	moveq	r3, #1
 8004e2c:	2300      	movne	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bf14      	ite	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	2300      	moveq	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf0c      	ite	eq
 8004ef0:	2301      	moveq	r3, #1
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bf14      	ite	ne
 8004f0c:	2301      	movne	r3, #1
 8004f0e:	2300      	moveq	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf14      	ite	ne
 8004f28:	2301      	movne	r3, #1
 8004f2a:	2300      	moveq	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf14      	ite	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	2300      	moveq	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	0e5b      	lsrs	r3, r3, #25
 8004f5a:	f003 021f 	and.w	r2, r3, #31
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 020f 	and.w	r2, r3, #15
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bf14      	ite	ne
 8004f9a:	2301      	movne	r3, #1
 8004f9c:	2300      	moveq	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf14      	ite	ne
 800500e:	2301      	movne	r3, #1
 8005010:	2300      	moveq	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005024:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005034:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	bf14      	ite	ne
 800506a:	2301      	movne	r3, #1
 800506c:	2300      	moveq	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	bf0c      	ite	eq
 8005088:	2301      	moveq	r3, #1
 800508a:	2300      	movne	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e00b      	b.n	80050d0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d105      	bne.n	80050ce <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f86f 	bl	80051a8 <ETH_SetMACConfig>

    return HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e000      	b.n	80050d0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
  }
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80050f2:	f003 f92b 	bl	800834c <HAL_RCC_GetHCLKFreq>
 80050f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4a25      	ldr	r2, [pc, #148]	; (8005190 <HAL_ETH_SetMDIOClockRange+0xb8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d908      	bls.n	8005112 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4a24      	ldr	r2, [pc, #144]	; (8005194 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d804      	bhi.n	8005112 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e034      	b.n	800517c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d908      	bls.n	800512c <HAL_ETH_SetMDIOClockRange+0x54>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d204      	bcs.n	800512c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	e027      	b.n	800517c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4a1a      	ldr	r2, [pc, #104]	; (8005198 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d303      	bcc.n	800513c <HAL_ETH_SetMDIOClockRange+0x64>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4a19      	ldr	r2, [pc, #100]	; (800519c <HAL_ETH_SetMDIOClockRange+0xc4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d91e      	bls.n	800517a <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_ETH_SetMDIOClockRange+0xc4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d908      	bls.n	8005156 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d804      	bhi.n	8005156 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e012      	b.n	800517c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d908      	bls.n	8005170 <HAL_ETH_SetMDIOClockRange+0x98>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d804      	bhi.n	8005170 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	e005      	b.n	800517c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e000      	b.n	800517c <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800517a:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	01312cff 	.word	0x01312cff
 8005194:	02160ebf 	.word	0x02160ebf
 8005198:	03938700 	.word	0x03938700
 800519c:	05f5e0ff 	.word	0x05f5e0ff
 80051a0:	08f0d17f 	.word	0x08f0d17f
 80051a4:	0ee6b280 	.word	0x0ee6b280

080051a8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80051ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	791b      	ldrb	r3, [r3, #4]
 80051c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80051c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7b1b      	ldrb	r3, [r3, #12]
 80051c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7b5b      	ldrb	r3, [r3, #13]
 80051d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	7b9b      	ldrb	r3, [r3, #14]
 80051d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	7bdb      	ldrb	r3, [r3, #15]
 80051e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	7c12      	ldrb	r2, [r2, #16]
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	d102      	bne.n	80051f2 <ETH_SetMACConfig+0x4a>
 80051ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051f0:	e000      	b.n	80051f4 <ETH_SetMACConfig+0x4c>
 80051f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	7c52      	ldrb	r2, [r2, #17]
 80051fa:	2a00      	cmp	r2, #0
 80051fc:	d102      	bne.n	8005204 <ETH_SetMACConfig+0x5c>
 80051fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005202:	e000      	b.n	8005206 <ETH_SetMACConfig+0x5e>
 8005204:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005206:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	7c9b      	ldrb	r3, [r3, #18]
 800520c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800520e:	431a      	orrs	r2, r3
               macconf->Speed |
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005214:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800521a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	7f1b      	ldrb	r3, [r3, #28]
 8005220:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	7f5b      	ldrb	r3, [r3, #29]
 8005228:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800522a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	7f92      	ldrb	r2, [r2, #30]
 8005230:	2a00      	cmp	r2, #0
 8005232:	d102      	bne.n	800523a <ETH_SetMACConfig+0x92>
 8005234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005238:	e000      	b.n	800523c <ETH_SetMACConfig+0x94>
 800523a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800523c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7fdb      	ldrb	r3, [r3, #31]
 8005242:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005244:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	f892 2020 	ldrb.w	r2, [r2, #32]
 800524c:	2a00      	cmp	r2, #0
 800524e:	d102      	bne.n	8005256 <ETH_SetMACConfig+0xae>
 8005250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005254:	e000      	b.n	8005258 <ETH_SetMACConfig+0xb0>
 8005256:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005258:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800525e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005266:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005268:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b57      	ldr	r3, [pc, #348]	; (80053d8 <ETH_SetMACConfig+0x230>)
 800527a:	4013      	ands	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	430b      	orrs	r3, r1
 8005284:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005292:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005294:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800529c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800529e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	d102      	bne.n	80052ba <ETH_SetMACConfig+0x112>
 80052b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052b8:	e000      	b.n	80052bc <ETH_SetMACConfig+0x114>
 80052ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b43      	ldr	r3, [pc, #268]	; (80053dc <ETH_SetMACConfig+0x234>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	68f9      	ldr	r1, [r7, #12]
 80052d6:	430b      	orrs	r3, r1
 80052d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80052f4:	f023 0301 	bic.w	r3, r3, #1
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	68f9      	ldr	r1, [r7, #12]
 80052fe:	430b      	orrs	r3, r1
 8005300:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005308:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800530e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005316:	2a00      	cmp	r2, #0
 8005318:	d101      	bne.n	800531e <ETH_SetMACConfig+0x176>
 800531a:	2280      	movs	r2, #128	; 0x80
 800531c:	e000      	b.n	8005320 <ETH_SetMACConfig+0x178>
 800531e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005320:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005326:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005332:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005336:	4013      	ands	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	68f9      	ldr	r1, [r7, #12]
 800533e:	430b      	orrs	r3, r1
 8005340:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005348:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005350:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	f023 0103 	bic.w	r1, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	430a      	orrs	r2, r1
 800536a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005376:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005392:	2a00      	cmp	r2, #0
 8005394:	d101      	bne.n	800539a <ETH_SetMACConfig+0x1f2>
 8005396:	2240      	movs	r2, #64	; 0x40
 8005398:	e000      	b.n	800539c <ETH_SetMACConfig+0x1f4>
 800539a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800539c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80053a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80053ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80053bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	00048083 	.word	0x00048083
 80053dc:	c0f88000 	.word	0xc0f88000

080053e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80053f8:	f023 0302 	bic.w	r3, r3, #2
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	6811      	ldr	r1, [r2, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	430b      	orrs	r3, r1
 8005406:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800540a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	791b      	ldrb	r3, [r3, #4]
 8005410:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005416:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	7b1b      	ldrb	r3, [r3, #12]
 800541c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	430b      	orrs	r3, r1
 800543c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005440:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	7b5b      	ldrb	r3, [r3, #13]
 8005446:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005458:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800545c:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <ETH_SetDMAConfig+0x104>)
 800545e:	4013      	ands	r3, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	68f9      	ldr	r1, [r7, #12]
 8005466:	430b      	orrs	r3, r1
 8005468:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800546c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	7d1b      	ldrb	r3, [r3, #20]
 8005478:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800547a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	7f5b      	ldrb	r3, [r3, #29]
 8005480:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <ETH_SetDMAConfig+0x108>)
 8005494:	4013      	ands	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	430b      	orrs	r3, r1
 800549e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054a2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	7f1b      	ldrb	r3, [r3, #28]
 80054aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054c4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	430b      	orrs	r3, r1
 80054d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	fffec000 	.word	0xfffec000
 80054e8:	ffc0efef 	.word	0xffc0efef

080054ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b0a4      	sub	sp, #144	; 0x90
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054fa:	2300      	movs	r3, #0
 80054fc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005504:	2300      	movs	r3, #0
 8005506:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800552c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005534:	2300      	movs	r3, #0
 8005536:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005538:	2300      	movs	r3, #0
 800553a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800553e:	2300      	movs	r3, #0
 8005540:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005544:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005548:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800554a:	2300      	movs	r3, #0
 800554c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005550:	2300      	movs	r3, #0
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005566:	2300      	movs	r3, #0
 8005568:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800556a:	2300      	movs	r3, #0
 800556c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800556e:	2300      	movs	r3, #0
 8005570:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005572:	2300      	movs	r3, #0
 8005574:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005584:	2320      	movs	r3, #32
 8005586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005590:	2300      	movs	r3, #0
 8005592:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005596:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800559c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80055a8:	2302      	movs	r3, #2
 80055aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80055c6:	2300      	movs	r3, #0
 80055c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80055d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055d4:	4619      	mov	r1, r3
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff fde6 	bl	80051a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80055dc:	2301      	movs	r3, #1
 80055de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80055e0:	2301      	movs	r3, #1
 80055e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005600:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005604:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005606:	2300      	movs	r3, #0
 8005608:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800560c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fee1 	bl	80053e0 <ETH_SetDMAConfig>
}
 800561e:	bf00      	nop
 8005620:	3790      	adds	r7, #144	; 0x90
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e01d      	b.n	8005670 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68d9      	ldr	r1, [r3, #12]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4613      	mov	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4413      	add	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	440b      	add	r3, r1
 8005644:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2200      	movs	r2, #0
 8005650:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	3206      	adds	r2, #6
 8005666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3301      	adds	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d9de      	bls.n	8005634 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005684:	461a      	mov	r2, r3
 8005686:	2303      	movs	r3, #3
 8005688:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005698:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e023      	b.n	800570e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6919      	ldr	r1, [r3, #16]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4613      	mov	r3, r2
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	4413      	add	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	440b      	add	r3, r1
 80056d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2200      	movs	r2, #0
 80056e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2200      	movs	r2, #0
 80056ee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	3212      	adds	r2, #18
 8005704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d9d8      	bls.n	80056c6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573a:	461a      	mov	r2, r3
 800573c:	2303      	movs	r3, #3
 800573e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005762:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005772:	b480      	push	{r7}
 8005774:	b08d      	sub	sp, #52	; 0x34
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3318      	adds	r3, #24
 8005782:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579c:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b4:	d007      	beq.n	80057c6 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	3304      	adds	r3, #4
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80057c6:	2302      	movs	r3, #2
 80057c8:	e25a      	b.n	8005c80 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d044      	beq.n	8005860 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	0c1b      	lsrs	r3, r3, #16
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057e2:	431a      	orrs	r2, r3
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005802:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d027      	beq.n	8005860 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	b29a      	uxth	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	431a      	orrs	r2, r3
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	431a      	orrs	r2, r3
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800584e:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800585e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d010      	beq.n	800588e <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005874:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	6992      	ldr	r2, [r2, #24]
 800587c:	431a      	orrs	r2, r3
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	d105      	bne.n	80058a6 <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d036      	beq.n	8005914 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80058b2:	f3bf 8f5f 	dmb	sy
}
 80058b6:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	3301      	adds	r3, #1
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d902      	bls.n	80058d6 <ETH_Prepare_Tx_Descriptors+0x164>
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	3b04      	subs	r3, #4
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058de:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	3301      	adds	r3, #1
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f2:	d10f      	bne.n	8005914 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80058fe:	f3bf 8f5f 	dmb	sy
}
 8005902:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005910:	2302      	movs	r3, #2
 8005912:	e1b5      	b.n	8005c80 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	3301      	adds	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800592c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	431a      	orrs	r2, r3
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d014      	beq.n	800596c <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 800595a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	6852      	ldr	r2, [r2, #4]
 8005962:	0412      	lsls	r2, r2, #16
 8005964:	431a      	orrs	r2, r3
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	609a      	str	r2, [r3, #8]
 800596a:	e00a      	b.n	8005982 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	2200      	movs	r2, #0
 8005970:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 800597a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0310 	and.w	r3, r3, #16
 800598a:	2b00      	cmp	r3, #0
 800598c:	d019      	beq.n	80059c2 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	04db      	lsls	r3, r3, #19
 800599c:	431a      	orrs	r2, r3
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	0c9b      	lsrs	r3, r3, #18
 80059a8:	049b      	lsls	r3, r3, #18
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	69d2      	ldr	r2, [r2, #28]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	e028      	b.n	8005a14 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80059ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	6852      	ldr	r2, [r2, #4]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005a4a:	f3bf 8f5f 	dmb	sy
}
 8005a4e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80d9 	beq.w	8005c1c <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	431a      	orrs	r2, r3
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005a7c:	e0ce      	b.n	8005c1c <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d902      	bls.n	8005a9c <ETH_Prepare_Tx_Descriptors+0x32a>
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	3b04      	subs	r3, #4
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005abe:	d007      	beq.n	8005ad0 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d029      	beq.n	8005b24 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005adc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae2:	e019      	b.n	8005b18 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8005ae4:	f3bf 8f5f 	dmb	sy
}
 8005ae8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	3301      	adds	r3, #1
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d902      	bls.n	8005b08 <ETH_Prepare_Tx_Descriptors+0x396>
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	3b04      	subs	r3, #4
 8005b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b10:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	3301      	adds	r3, #1
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d3e1      	bcc.n	8005ae4 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8005b20:	2302      	movs	r3, #2
 8005b22:	e0ad      	b.n	8005c80 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	3301      	adds	r3, #1
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	6852      	ldr	r2, [r2, #4]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d014      	beq.n	8005b82 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005b70:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	6852      	ldr	r2, [r2, #4]
 8005b78:	0412      	lsls	r2, r2, #16
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	e00a      	b.n	8005b98 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	2200      	movs	r2, #0
 8005b86:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005b90:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00f      	beq.n	8005bc4 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	0c9b      	lsrs	r3, r3, #18
 8005baa:	049b      	lsls	r3, r3, #18
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	69d2      	ldr	r2, [r2, #28]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	60da      	str	r2, [r3, #12]
 8005bc2:	e019      	b.n	8005bf8 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005bcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	6852      	ldr	r2, [r2, #4]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005bfe:	f3bf 8f5f 	dmb	sy
}
 8005c02:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f47f af2c 	bne.w	8005a7e <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d006      	beq.n	8005c3a <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	609a      	str	r2, [r3, #8]
 8005c38:	e005      	b.n	8005c46 <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c66:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c68:	b672      	cpsid	i
}
 8005c6a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	4413      	add	r3, r2
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005c7a:	b662      	cpsie	i
}
 8005c7c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3734      	adds	r7, #52	; 0x34
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e147      	b.n	8005f2e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fd f9da 	bl	800306c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0210 	bic.w	r2, r2, #16
 8005cc6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cc8:	f7fe fa46 	bl	8004158 <HAL_GetTick>
 8005ccc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005cce:	e012      	b.n	8005cf6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005cd0:	f7fe fa42 	bl	8004158 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b0a      	cmp	r3, #10
 8005cdc:	d90b      	bls.n	8005cf6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce2:	f043 0201 	orr.w	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2203      	movs	r2, #3
 8005cee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e11b      	b.n	8005f2e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d0e5      	beq.n	8005cd0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d14:	f7fe fa20 	bl	8004158 <HAL_GetTick>
 8005d18:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d1a:	e012      	b.n	8005d42 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d1c:	f7fe fa1c 	bl	8004158 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b0a      	cmp	r3, #10
 8005d28:	d90b      	bls.n	8005d42 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2e:	f043 0201 	orr.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2203      	movs	r2, #3
 8005d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0f5      	b.n	8005f2e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0e5      	beq.n	8005d1c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0202 	orr.w	r2, r2, #2
 8005d5e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a74      	ldr	r2, [pc, #464]	; (8005f38 <HAL_FDCAN_Init+0x2ac>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d103      	bne.n	8005d72 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005d6a:	4a74      	ldr	r2, [pc, #464]	; (8005f3c <HAL_FDCAN_Init+0x2b0>)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	7c1b      	ldrb	r3, [r3, #16]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d108      	bne.n	8005d8c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d88:	619a      	str	r2, [r3, #24]
 8005d8a:	e007      	b.n	8005d9c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d9a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	7c5b      	ldrb	r3, [r3, #17]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d108      	bne.n	8005db6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005db2:	619a      	str	r2, [r3, #24]
 8005db4:	e007      	b.n	8005dc6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dc4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	7c9b      	ldrb	r3, [r3, #18]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d108      	bne.n	8005de0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ddc:	619a      	str	r2, [r3, #24]
 8005dde:	e007      	b.n	8005df0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005e14:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0210 	bic.w	r2, r2, #16
 8005e24:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d108      	bne.n	8005e40 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0204 	orr.w	r2, r2, #4
 8005e3c:	619a      	str	r2, [r3, #24]
 8005e3e:	e02c      	b.n	8005e9a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d028      	beq.n	8005e9a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d01c      	beq.n	8005e8a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e5e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0210 	orr.w	r2, r2, #16
 8005e6e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d110      	bne.n	8005e9a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0220 	orr.w	r2, r2, #32
 8005e86:	619a      	str	r2, [r3, #24]
 8005e88:	e007      	b.n	8005e9a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0220 	orr.w	r2, r2, #32
 8005e98:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005eaa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005eb2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005ec2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ec4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ece:	d115      	bne.n	8005efc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	3b01      	subs	r3, #1
 8005edc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ede:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005ee8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ef8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005efa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fdac 	bl	8006a70 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	4000a400 	.word	0x4000a400
 8005f3c:	4000a500 	.word	0x4000a500

08005f40 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f50:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d002      	beq.n	8005f5e <HAL_FDCAN_ConfigFilter+0x1e>
 8005f58:	7dfb      	ldrb	r3, [r7, #23]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d13d      	bne.n	8005fda <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d119      	bne.n	8005f9a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005f72:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005f7a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e01d      	b.n	8005fd6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	075a      	lsls	r2, r3, #29
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	079a      	lsls	r2, r3, #30
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e006      	b.n	8005fe8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fde:	f043 0202 	orr.w	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	d116      	bne.n	800603c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006016:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	011a      	lsls	r2, r3, #4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	431a      	orrs	r2, r3
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	431a      	orrs	r2, r3
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	431a      	orrs	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e006      	b.n	800604a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006040:	f043 0204 	orr.w	r2, r3, #4
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b01      	cmp	r3, #1
 800606c:	d108      	bne.n	8006080 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	0219      	lsls	r1, r3, #8
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	430a      	orrs	r2, r1
 800607a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e006      	b.n	800608e <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006084:	f043 0204 	orr.w	r2, r3, #4
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
  }
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d109      	bne.n	80060c2 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80060bc:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e006      	b.n	80060d0 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c6:	f043 0204 	orr.w	r2, r3, #4
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
  }
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d110      	bne.n	8006112 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	e006      	b.n	8006120 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006116:	f043 0204 	orr.w	r2, r3, #4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
  }
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d156      	bne.n	80061f2 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006154:	e011      	b.n	800617a <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b0a      	cmp	r3, #10
 800615a:	d90b      	bls.n	8006174 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006160:	f043 0201 	orr.w	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2203      	movs	r2, #3
 800616c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e045      	b.n	8006200 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0e6      	beq.n	8006156 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0210 	bic.w	r2, r2, #16
 800619a:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800619c:	e011      	b.n	80061c2 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b0a      	cmp	r3, #10
 80061a2:	d90b      	bls.n	80061bc <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a8:	f043 0201 	orr.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2203      	movs	r2, #3
 80061b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e021      	b.n	8006200 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d0e6      	beq.n	800619e <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0202 	orr.w	r2, r2, #2
 80061de:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e006      	b.n	8006200 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f6:	f043 0208 	orr.w	r2, r3, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
  }
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d12c      	bne.n	800627e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800622c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006238:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e023      	b.n	800628c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68b9      	ldr	r1, [r7, #8]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fc6a 	bl	8006b34 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2101      	movs	r1, #1
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	fa01 f202 	lsl.w	r2, r1, r2
 800626c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006270:	2201      	movs	r2, #1
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	409a      	lsls	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	e006      	b.n	800628c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006282:	f043 0208 	orr.w	r2, r3, #8
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
  }
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006294:	b480      	push	{r7}
 8006296:	b08b      	sub	sp, #44	; 0x2c
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062ac:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80062ae:	7efb      	ldrb	r3, [r7, #27]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	f040 80e8 	bne.w	8006486 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d137      	bne.n	800632c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d107      	bne.n	80062dc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0db      	b.n	8006494 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e4:	0e1b      	lsrs	r3, r3, #24
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d10a      	bne.n	8006304 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f6:	0a5b      	lsrs	r3, r3, #9
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006300:	2301      	movs	r3, #1
 8006302:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	0a1b      	lsrs	r3, r3, #8
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	4613      	mov	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	4413      	add	r3, r2
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	440b      	add	r3, r1
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
 800632a:	e036      	b.n	800639a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0a3      	b.n	8006494 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006354:	0e1b      	lsrs	r3, r3, #24
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b01      	cmp	r3, #1
 800635c:	d10a      	bne.n	8006374 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006366:	0a1b      	lsrs	r3, r3, #8
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006370:	2301      	movs	r3, #1
 8006372:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	4613      	mov	r3, r2
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4413      	add	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	440b      	add	r3, r1
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d107      	bne.n	80063be <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	0c9b      	lsrs	r3, r3, #18
 80063b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e005      	b.n	80063ca <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	3304      	adds	r3, #4
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	0c1b      	lsrs	r3, r3, #16
 80063f8:	f003 020f 	and.w	r2, r3, #15
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	0e1b      	lsrs	r3, r3, #24
 800641e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	0fda      	lsrs	r2, r3, #31
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	3304      	adds	r3, #4
 8006434:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	e00a      	b.n	8006456 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	441a      	add	r2, r3
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	440b      	add	r3, r1
 800644c:	7812      	ldrb	r2, [r2, #0]
 800644e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	3301      	adds	r3, #1
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800645c:	5cd3      	ldrb	r3, [r2, r3]
 800645e:	461a      	mov	r2, r3
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	4293      	cmp	r3, r2
 8006464:	d3ec      	bcc.n	8006440 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	d105      	bne.n	8006478 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006476:	e004      	b.n	8006482 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	e006      	b.n	8006494 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648a:	f043 0208 	orr.w	r2, r3, #8
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
  }
}
 8006494:	4618      	mov	r0, r3
 8006496:	372c      	adds	r7, #44	; 0x2c
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	0801ff50 	.word	0x0801ff50

080064a4 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0207 	and.w	r2, r3, #7
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	f003 0207 	and.w	r2, r3, #7
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0218 	and.w	r2, r3, #24
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	f003 0201 	and.w	r2, r3, #1
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	099b      	lsrs	r3, r3, #6
 80064e6:	f003 0201 	and.w	r2, r3, #1
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	09db      	lsrs	r3, r3, #7
 80064f2:	f003 0201 	and.w	r2, r3, #1
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	0adb      	lsrs	r3, r3, #11
 80064fe:	f003 0201 	and.w	r2, r3, #1
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	0b1b      	lsrs	r3, r3, #12
 800650a:	f003 0201 	and.w	r2, r3, #1
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	0b5b      	lsrs	r3, r3, #13
 8006516:	f003 0201 	and.w	r2, r3, #1
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	0b9b      	lsrs	r3, r3, #14
 8006522:	f003 0201 	and.w	r2, r3, #1
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	0c1b      	lsrs	r3, r3, #16
 800652e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	b2da      	uxtb	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	0bdb      	lsrs	r3, r3, #15
 800656e:	f003 0201 	and.w	r2, r3, #1
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	b2da      	uxtb	r2, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80065a4:	68fb      	ldr	r3, [r7, #12]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b087      	sub	sp, #28
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065c4:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d003      	beq.n	80065d4 <HAL_FDCAN_ActivateNotification+0x22>
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	f040 80c8 	bne.w	8006764 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d004      	beq.n	80065f0 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d03b      	beq.n	8006668 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d031      	beq.n	8006668 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d027      	beq.n	8006668 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800661e:	2b00      	cmp	r3, #0
 8006620:	d004      	beq.n	800662c <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01d      	beq.n	8006668 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d013      	beq.n	8006668 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d107      	bne.n	8006678 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d13b      	bne.n	8006704 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d131      	bne.n	8006704 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d004      	beq.n	80066b4 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d127      	bne.n	8006704 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d004      	beq.n	80066c8 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d11d      	bne.n	8006704 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d004      	beq.n	80066dc <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d113      	bne.n	8006704 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d004      	beq.n	80066f0 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00c      	beq.n	8006714 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0202 	orr.w	r2, r2, #2
 8006712:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	430a      	orrs	r2, r1
 800672e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	430a      	orrs	r2, r1
 800674c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	430a      	orrs	r2, r1
 800675e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	e006      	b.n	8006772 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006768:	f043 0202 	orr.w	r2, r3, #2
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b08c      	sub	sp, #48	; 0x30
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800679a:	4013      	ands	r3, r2
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067b2:	4013      	ands	r3, r2
 80067b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ca:	4013      	ands	r3, r2
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d4:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80067d8:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	6a3a      	ldr	r2, [r7, #32]
 80067e2:	4013      	ands	r3, r2
 80067e4:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80067f0:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	4013      	ands	r3, r2
 80067fc:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006804:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680c:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d006      	beq.n	8006830 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2240      	movs	r2, #64	; 0x40
 8006828:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f916 	bl	8006a5c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006836:	2b00      	cmp	r3, #0
 8006838:	d019      	beq.n	800686e <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d014      	beq.n	800686e <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800684c:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4013      	ands	r3, r2
 800685a:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006864:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006866:	6939      	ldr	r1, [r7, #16]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f8d8 	bl	8006a1e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800687a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800687c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f8a2 	bl	80069c8 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	2b00      	cmp	r3, #0
 8006888:	d007      	beq.n	800689a <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006890:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fc fbc1 	bl	800301c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80068a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f897 	bl	80069de <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00c      	beq.n	80068d4 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068cc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f890 	bl	80069f4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d018      	beq.n	8006910 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d013      	beq.n	8006910 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80068f0:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4013      	ands	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2280      	movs	r2, #128	; 0x80
 8006906:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006908:	68f9      	ldr	r1, [r7, #12]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f87c 	bl	8006a08 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00c      	beq.n	8006934 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800692c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f880 	bl	8006a34 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00c      	beq.n	8006958 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d007      	beq.n	8006958 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006950:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f878 	bl	8006a48 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00f      	beq.n	8006982 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006974:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800697a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006990:	69f9      	ldr	r1, [r7, #28]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fc fafa 	bl	8002f8c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6a3a      	ldr	r2, [r7, #32]
 80069a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fc faf6 	bl	8002fac <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80069c0:	bf00      	nop
 80069c2:	3730      	adds	r7, #48	; 0x30
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006a78:	4b2c      	ldr	r3, [pc, #176]	; (8006b2c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8006a7a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a2b      	ldr	r2, [pc, #172]	; (8006b30 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d103      	bne.n	8006a8e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a8c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a9c:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa4:	041a      	lsls	r2, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac2:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	061a      	lsls	r2, r3, #24
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	e005      	b.n	8006b10 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d3f3      	bcc.n	8006b04 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	4000ac00 	.word	0x4000ac00
 8006b30:	4000a800 	.word	0x4000a800

08006b34 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b089      	sub	sp, #36	; 0x24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006b52:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	61fb      	str	r3, [r7, #28]
 8006b5e:	e00a      	b.n	8006b76 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006b68:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006b6e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b74:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b80:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006b86:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006b8c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	440b      	add	r3, r1
 8006ba8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	e020      	b.n	8006c0a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	3303      	adds	r3, #3
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	4413      	add	r3, r2
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	3302      	adds	r3, #2
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	440b      	add	r3, r1
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006be0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	3301      	adds	r3, #1
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	440b      	add	r3, r1
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006bee:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006bf8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	3304      	adds	r3, #4
 8006c02:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	3304      	adds	r3, #4
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	4a06      	ldr	r2, [pc, #24]	; (8006c28 <FDCAN_CopyMessageToRAM+0xf4>)
 8006c10:	5cd3      	ldrb	r3, [r2, r3]
 8006c12:	461a      	mov	r2, r3
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d3d6      	bcc.n	8006bc8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	3724      	adds	r7, #36	; 0x24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	0801ff50 	.word	0x0801ff50

08006c2c <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006c38:	4b32      	ldr	r3, [pc, #200]	; (8006d04 <HAL_FLASH_Program+0xd8>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_FLASH_Program+0x18>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e05a      	b.n	8006cfa <HAL_FLASH_Program+0xce>
 8006c44:	4b2f      	ldr	r3, [pc, #188]	; (8006d04 <HAL_FLASH_Program+0xd8>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006c4a:	4b2e      	ldr	r3, [pc, #184]	; (8006d04 <HAL_FLASH_Program+0xd8>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c54:	f000 f8a4 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8006c5c:	7ffb      	ldrb	r3, [r7, #31]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d147      	bne.n	8006cf2 <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8006c62:	4a28      	ldr	r2, [pc, #160]	; (8006d04 <HAL_FLASH_Program+0xd8>)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006c68:	4b27      	ldr	r3, [pc, #156]	; (8006d08 <HAL_FLASH_Program+0xdc>)
 8006c6a:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d104      	bne.n	8006c80 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	68b8      	ldr	r0, [r7, #8]
 8006c7a:	f000 f8df 	bl	8006e3c <FLASH_Program_QuadWord>
 8006c7e:	e01b      	b.n	8006cb8 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a22      	ldr	r2, [pc, #136]	; (8006d0c <HAL_FLASH_Program+0xe0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <HAL_FLASH_Program+0x64>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a21      	ldr	r2, [pc, #132]	; (8006d10 <HAL_FLASH_Program+0xe4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d104      	bne.n	8006c9a <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	68b8      	ldr	r0, [r7, #8]
 8006c94:	f000 f90e 	bl	8006eb4 <FLASH_Program_QuadWord_OBK>
 8006c98:	e00e      	b.n	8006cb8 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ca0:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <HAL_FLASH_Program+0xe8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d104      	bne.n	8006cb0 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	68b8      	ldr	r0, [r7, #8]
 8006caa:	f000 f94f 	bl	8006f4c <FLASH_Program_HalfWord>
 8006cae:	e003      	b.n	8006cb8 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	68b8      	ldr	r0, [r7, #8]
 8006cb4:	f000 f94a 	bl	8006f4c <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cbc:	f000 f870 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 8006cce:	f023 0304 	bic.w	r3, r3, #4
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	401a      	ands	r2, r3
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4a0c      	ldr	r2, [pc, #48]	; (8006d10 <HAL_FLASH_Program+0xe4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d107      	bne.n	8006cf2 <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <HAL_FLASH_Program+0xec>)
 8006ce4:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 0204 	bic.w	r2, r3, #4
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006cf2:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <HAL_FLASH_Program+0xd8>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3720      	adds	r7, #32
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000048 	.word	0x20000048
 8006d08:	40022028 	.word	0x40022028
 8006d0c:	10000002 	.word	0x10000002
 8006d10:	10000006 	.word	0x10000006
 8006d14:	40000002 	.word	0x40000002
 8006d18:	40022040 	.word	0x40022040

08006d1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8006d26:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <HAL_FLASH_Unlock+0x40>)
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00d      	beq.n	8006d4e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8006d32:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <HAL_FLASH_Unlock+0x40>)
 8006d34:	4a0a      	ldr	r2, [pc, #40]	; (8006d60 <HAL_FLASH_Unlock+0x44>)
 8006d36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8006d38:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <HAL_FLASH_Unlock+0x40>)
 8006d3a:	4a0a      	ldr	r2, [pc, #40]	; (8006d64 <HAL_FLASH_Unlock+0x48>)
 8006d3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8006d3e:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <HAL_FLASH_Unlock+0x40>)
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	40022000 	.word	0x40022000
 8006d60:	45670123 	.word	0x45670123
 8006d64:	cdef89ab 	.word	0xcdef89ab

08006d68 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8006d72:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <HAL_FLASH_Lock+0x34>)
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <HAL_FLASH_Lock+0x34>)
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8006d7e:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <HAL_FLASH_Lock+0x34>)
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	40022000 	.word	0x40022000

08006da0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8006da8:	f7fd f9d6 	bl	8004158 <HAL_GetTick>
 8006dac:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8006dae:	4b20      	ldr	r3, [pc, #128]	; (8006e30 <FLASH_WaitForLastOperation+0x90>)
 8006db0:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8006db2:	e010      	b.n	8006dd6 <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d00c      	beq.n	8006dd6 <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006dbc:	f7fd f9cc 	bl	8004158 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d302      	bcc.n	8006dd2 <FLASH_WaitForLastOperation+0x32>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e027      	b.n	8006e26 <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 030b 	and.w	r3, r3, #11
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e8      	bne.n	8006db4 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 8006de2:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <FLASH_WaitForLastOperation+0x94>)
 8006de4:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 8006dee:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00c      	beq.n	8006e10 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <FLASH_WaitForLastOperation+0x98>)
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	4a0e      	ldr	r2, [pc, #56]	; (8006e38 <FLASH_WaitForLastOperation+0x98>)
 8006e00:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e00a      	b.n	8006e26 <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e22:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40022020 	.word	0x40022020
 8006e34:	40022030 	.word	0x40022030
 8006e38:	20000048 	.word	0x20000048

08006e3c <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b08b      	sub	sp, #44	; 0x2c
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8006e46:	2304      	movs	r3, #4
 8006e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006e54:	4b16      	ldr	r3, [pc, #88]	; (8006eb0 <FLASH_Program_QuadWord+0x74>)
 8006e56:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f043 0202 	orr.w	r2, r3, #2
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e64:	f3ef 8310 	mrs	r3, PRIMASK
 8006e68:	613b      	str	r3, [r7, #16]
  return(result);
 8006e6a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006e6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e6e:	b672      	cpsid	i
}
 8006e70:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	623b      	str	r3, [r7, #32]
    src_addr++;
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	3304      	adds	r3, #4
 8006e84:	61fb      	str	r3, [r7, #28]
    index--;
 8006e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8006e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1ec      	bne.n	8006e72 <FLASH_Program_QuadWord+0x36>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ea2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006ea4:	bf00      	nop
 8006ea6:	372c      	adds	r7, #44	; 0x2c
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	40022028 	.word	0x40022028

08006eb4 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b08b      	sub	sp, #44	; 0x2c
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8006ebe:	2304      	movs	r3, #4
 8006ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006ecc:	4b1c      	ldr	r3, [pc, #112]	; (8006f40 <FLASH_Program_QuadWord_OBK+0x8c>)
 8006ece:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006ed0:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <FLASH_Program_QuadWord_OBK+0x90>)
 8006ed2:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f043 0202 	orr.w	r2, r3, #2
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	4b18      	ldr	r3, [pc, #96]	; (8006f48 <FLASH_Program_QuadWord_OBK+0x94>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	431a      	orrs	r2, r3
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ef8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006efc:	b672      	cpsid	i
}
 8006efe:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	623b      	str	r3, [r7, #32]
    src_addr++;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	3304      	adds	r3, #4
 8006f12:	61fb      	str	r3, [r7, #28]
    index--;
 8006f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8006f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1ec      	bne.n	8006f00 <FLASH_Program_QuadWord_OBK+0x4c>
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f383 8810 	msr	PRIMASK, r3
}
 8006f30:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006f32:	bf00      	nop
 8006f34:	372c      	adds	r7, #44	; 0x2c
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40022028 	.word	0x40022028
 8006f44:	40022040 	.word	0x40022040
 8006f48:	20000048 	.word	0x20000048

08006f4c <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <FLASH_Program_HalfWord+0x30>)
 8006f58:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f043 0202 	orr.w	r2, r3, #2
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8812      	ldrh	r2, [r2, #0]
 8006f6c:	b292      	uxth	r2, r2
 8006f6e:	801a      	strh	r2, [r3, #0]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40022028 	.word	0x40022028

08006f80 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006f8a:	4b3a      	ldr	r3, [pc, #232]	; (8007074 <HAL_FLASHEx_Erase+0xf4>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_FLASHEx_Erase+0x16>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e06a      	b.n	800706c <HAL_FLASHEx_Erase+0xec>
 8006f96:	4b37      	ldr	r3, [pc, #220]	; (8007074 <HAL_FLASHEx_Erase+0xf4>)
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f9c:	4b35      	ldr	r3, [pc, #212]	; (8007074 <HAL_FLASHEx_Erase+0xf4>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fa6:	f7ff fefb 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d157      	bne.n	8007064 <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a2e      	ldr	r2, [pc, #184]	; (8007074 <HAL_FLASHEx_Erase+0xf4>)
 8006fba:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006fbc:	4b2e      	ldr	r3, [pc, #184]	; (8007078 <HAL_FLASHEx_Erase+0xf8>)
 8006fbe:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fc8:	f248 0208 	movw	r2, #32776	; 0x8008
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10b      	bne.n	8006fe8 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 f853 	bl	8007080 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fde:	f7ff fedf 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	75fb      	strb	r3, [r7, #23]
 8006fe6:	e033      	b.n	8007050 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a23      	ldr	r2, [pc, #140]	; (800707c <HAL_FLASHEx_Erase+0xfc>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d108      	bne.n	8007004 <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8006ff2:	f000 f8b5 	bl	8007160 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ffa:	f7ff fed1 	bl	8006da0 <FLASH_WaitForLastOperation>
 8006ffe:	4603      	mov	r3, r0
 8007000:	75fb      	strb	r3, [r7, #23]
 8007002:	e025      	b.n	8007050 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	f04f 32ff 	mov.w	r2, #4294967295
 800700a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	e015      	b.n	8007040 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	4619      	mov	r1, r3
 800701a:	6938      	ldr	r0, [r7, #16]
 800701c:	f000 f868 	bl	80070f0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007024:	f7ff febc 	bl	8006da0 <FLASH_WaitForLastOperation>
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	601a      	str	r2, [r3, #0]
          break;
 8007038:	e00a      	b.n	8007050 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	3301      	adds	r3, #1
 800703e:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4413      	add	r3, r2
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	429a      	cmp	r2, r3
 800704e:	d3e1      	bcc.n	8007014 <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800705c:	43db      	mvns	r3, r3
 800705e:	401a      	ands	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007064:	4b03      	ldr	r3, [pc, #12]	; (8007074 <HAL_FLASHEx_Erase+0xf4>)
 8007066:	2200      	movs	r2, #0
 8007068:	701a      	strb	r2, [r3, #0]

  return status;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20000048 	.word	0x20000048
 8007078:	40022028 	.word	0x40022028
 800707c:	80000008 	.word	0x80000008

08007080 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8007088:	4b18      	ldr	r3, [pc, #96]	; (80070ec <FLASH_MassErase+0x6c>)
 800708a:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	2b03      	cmp	r3, #3
 8007094:	d108      	bne.n	80070a8 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800709e:	f043 0320 	orr.w	r3, r3, #32
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 80070a6:	e01b      	b.n	80070e0 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ba:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80070be:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070d8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	6013      	str	r3, [r2, #0]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	40022028 	.word	0x40022028

080070f0 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80070fa:	4b18      	ldr	r3, [pc, #96]	; (800715c <FLASH_Erase_Sector+0x6c>)
 80070fc:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d011      	beq.n	800712c <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007110:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	019b      	lsls	r3, r3, #6
 8007120:	4313      	orrs	r3, r2
 8007122:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 800712a:	e010      	b.n	800714e <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	019b      	lsls	r3, r3, #6
 8007140:	4313      	orrs	r3, r2
 8007142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007146:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	6013      	str	r3, [r2, #0]
}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40022028 	.word	0x40022028

08007160 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8007166:	4b07      	ldr	r3, [pc, #28]	; (8007184 <FLASH_OBKErase+0x24>)
 8007168:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f043 0208 	orr.w	r2, r3, #8
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	601a      	str	r2, [r3, #0]
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40022040 	.word	0x40022040

08007188 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007196:	e136      	b.n	8007406 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	2101      	movs	r1, #1
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	fa01 f303 	lsl.w	r3, r1, r3
 80071a4:	4013      	ands	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 8128 	beq.w	8007400 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d003      	beq.n	80071c0 <HAL_GPIO_Init+0x38>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b12      	cmp	r3, #18
 80071be:	d125      	bne.n	800720c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	08da      	lsrs	r2, r3, #3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	3208      	adds	r2, #8
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	220f      	movs	r2, #15
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	43db      	mvns	r3, r3
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4013      	ands	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f003 020f 	and.w	r2, r3, #15
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	08da      	lsrs	r2, r3, #3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3208      	adds	r2, #8
 8007206:	6979      	ldr	r1, [r7, #20]
 8007208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	2203      	movs	r2, #3
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	43db      	mvns	r3, r3
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4013      	ands	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f003 0203 	and.w	r2, r3, #3
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	fa02 f303 	lsl.w	r3, r2, r3
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d00b      	beq.n	8007260 <HAL_GPIO_Init+0xd8>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d007      	beq.n	8007260 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007254:	2b11      	cmp	r3, #17
 8007256:	d003      	beq.n	8007260 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b12      	cmp	r3, #18
 800725e:	d130      	bne.n	80072c2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	2203      	movs	r2, #3
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	43db      	mvns	r3, r3
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4013      	ands	r3, r2
 8007276:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	fa02 f303 	lsl.w	r3, r2, r3
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007296:	2201      	movs	r2, #1
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	43db      	mvns	r3, r3
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4013      	ands	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	091b      	lsrs	r3, r3, #4
 80072ac:	f003 0201 	and.w	r2, r3, #1
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d017      	beq.n	80072fa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	2203      	movs	r2, #3
 80072d6:	fa02 f303 	lsl.w	r3, r2, r3
 80072da:	43db      	mvns	r3, r3
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4013      	ands	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d07c      	beq.n	8007400 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007306:	4a47      	ldr	r2, [pc, #284]	; (8007424 <HAL_GPIO_Init+0x29c>)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	089b      	lsrs	r3, r3, #2
 800730c:	3318      	adds	r3, #24
 800730e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007312:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	220f      	movs	r2, #15
 800731e:	fa02 f303 	lsl.w	r3, r2, r3
 8007322:	43db      	mvns	r3, r3
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4013      	ands	r3, r2
 8007328:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	0a9a      	lsrs	r2, r3, #10
 800732e:	4b3e      	ldr	r3, [pc, #248]	; (8007428 <HAL_GPIO_Init+0x2a0>)
 8007330:	4013      	ands	r3, r2
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	f002 0203 	and.w	r2, r2, #3
 8007338:	00d2      	lsls	r2, r2, #3
 800733a:	4093      	lsls	r3, r2
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007342:	4938      	ldr	r1, [pc, #224]	; (8007424 <HAL_GPIO_Init+0x29c>)
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	089b      	lsrs	r3, r3, #2
 8007348:	3318      	adds	r3, #24
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007350:	4b34      	ldr	r3, [pc, #208]	; (8007424 <HAL_GPIO_Init+0x29c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	43db      	mvns	r3, r3
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	4013      	ands	r3, r2
 800735e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8007374:	4a2b      	ldr	r2, [pc, #172]	; (8007424 <HAL_GPIO_Init+0x29c>)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800737a:	4b2a      	ldr	r3, [pc, #168]	; (8007424 <HAL_GPIO_Init+0x29c>)
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	43db      	mvns	r3, r3
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4013      	ands	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800739e:	4a21      	ldr	r2, [pc, #132]	; (8007424 <HAL_GPIO_Init+0x29c>)
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80073a4:	4b1f      	ldr	r3, [pc, #124]	; (8007424 <HAL_GPIO_Init+0x29c>)
 80073a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	43db      	mvns	r3, r3
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4013      	ands	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80073ca:	4a16      	ldr	r2, [pc, #88]	; (8007424 <HAL_GPIO_Init+0x29c>)
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80073d2:	4b14      	ldr	r3, [pc, #80]	; (8007424 <HAL_GPIO_Init+0x29c>)
 80073d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073d8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	43db      	mvns	r3, r3
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4013      	ands	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80073f8:	4a0a      	ldr	r2, [pc, #40]	; (8007424 <HAL_GPIO_Init+0x29c>)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	3301      	adds	r3, #1
 8007404:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	f47f aec1 	bne.w	8007198 <HAL_GPIO_Init+0x10>
  }
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	44022000 	.word	0x44022000
 8007428:	002f7f7f 	.word	0x002f7f7f

0800742c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	807b      	strh	r3, [r7, #2]
 8007438:	4613      	mov	r3, r2
 800743a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800743c:	787b      	ldrb	r3, [r7, #1]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007442:	887a      	ldrh	r2, [r7, #2]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007448:	e002      	b.n	8007450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800744a:	887a      	ldrh	r2, [r7, #2]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800746e:	887a      	ldrh	r2, [r7, #2]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4013      	ands	r3, r2
 8007474:	041a      	lsls	r2, r3, #16
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	43d9      	mvns	r1, r3
 800747a:	887b      	ldrh	r3, [r7, #2]
 800747c:	400b      	ands	r3, r1
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	619a      	str	r2, [r3, #24]
}
 8007484:	bf00      	nop
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800749a:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d006      	beq.n	80074b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80074a6:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80074ac:	88fb      	ldrh	r3, [r7, #6]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7f9 f8fc 	bl	80006ac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80074b4:	4b08      	ldr	r3, [pc, #32]	; (80074d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	88fb      	ldrh	r3, [r7, #6]
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d006      	beq.n	80074ce <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80074c0:	4a05      	ldr	r2, [pc, #20]	; (80074d8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 f807 	bl	80074dc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	44022000 	.word	0x44022000

080074dc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <HAL_ICACHE_Enable+0x1c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a04      	ldr	r2, [pc, #16]	; (8007510 <HAL_ICACHE_Enable+0x1c>)
 80074fe:	f043 0301 	orr.w	r3, r3, #1
 8007502:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	40030400 	.word	0x40030400

08007514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f000 bc28 	b.w	8007d78 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007528:	4b94      	ldr	r3, [pc, #592]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f003 0318 	and.w	r3, r3, #24
 8007530:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8007532:	4b92      	ldr	r3, [pc, #584]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b00      	cmp	r3, #0
 8007546:	d05b      	beq.n	8007600 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	2b08      	cmp	r3, #8
 800754c:	d005      	beq.n	800755a <HAL_RCC_OscConfig+0x46>
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	2b18      	cmp	r3, #24
 8007552:	d114      	bne.n	800757e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d111      	bne.n	800757e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f000 bc08 	b.w	8007d78 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007568:	4b84      	ldr	r3, [pc, #528]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	041b      	lsls	r3, r3, #16
 8007576:	4981      	ldr	r1, [pc, #516]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007578:	4313      	orrs	r3, r2
 800757a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800757c:	e040      	b.n	8007600 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d023      	beq.n	80075ce <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007586:	4b7d      	ldr	r3, [pc, #500]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a7c      	ldr	r2, [pc, #496]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800758c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007592:	f7fc fde1 	bl	8004158 <HAL_GetTick>
 8007596:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007598:	e008      	b.n	80075ac <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800759a:	f7fc fddd 	bl	8004158 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e3e5      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80075ac:	4b73      	ldr	r3, [pc, #460]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0f0      	beq.n	800759a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80075b8:	4b70      	ldr	r3, [pc, #448]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	041b      	lsls	r3, r3, #16
 80075c6:	496d      	ldr	r1, [pc, #436]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	618b      	str	r3, [r1, #24]
 80075cc:	e018      	b.n	8007600 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80075ce:	4b6b      	ldr	r3, [pc, #428]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a6a      	ldr	r2, [pc, #424]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80075d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075da:	f7fc fdbd 	bl	8004158 <HAL_GetTick>
 80075de:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80075e2:	f7fc fdb9 	bl	8004158 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e3c1      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80075f4:	4b61      	ldr	r3, [pc, #388]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f0      	bne.n	80075e2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 80a0 	beq.w	800774e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2b10      	cmp	r3, #16
 8007612:	d005      	beq.n	8007620 <HAL_RCC_OscConfig+0x10c>
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	2b18      	cmp	r3, #24
 8007618:	d109      	bne.n	800762e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b03      	cmp	r3, #3
 800761e:	d106      	bne.n	800762e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 8092 	bne.w	800774e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e3a4      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007636:	d106      	bne.n	8007646 <HAL_RCC_OscConfig+0x132>
 8007638:	4b50      	ldr	r3, [pc, #320]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a4f      	ldr	r2, [pc, #316]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800763e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	e058      	b.n	80076f8 <HAL_RCC_OscConfig+0x1e4>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d112      	bne.n	8007674 <HAL_RCC_OscConfig+0x160>
 800764e:	4b4b      	ldr	r3, [pc, #300]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a4a      	ldr	r2, [pc, #296]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	4b48      	ldr	r3, [pc, #288]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a47      	ldr	r2, [pc, #284]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007660:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	4b45      	ldr	r3, [pc, #276]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a44      	ldr	r2, [pc, #272]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800766c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	e041      	b.n	80076f8 <HAL_RCC_OscConfig+0x1e4>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800767c:	d112      	bne.n	80076a4 <HAL_RCC_OscConfig+0x190>
 800767e:	4b3f      	ldr	r3, [pc, #252]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a3e      	ldr	r2, [pc, #248]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	4b3c      	ldr	r3, [pc, #240]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a3b      	ldr	r2, [pc, #236]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007690:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	4b39      	ldr	r3, [pc, #228]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a38      	ldr	r2, [pc, #224]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800769c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e029      	b.n	80076f8 <HAL_RCC_OscConfig+0x1e4>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80076ac:	d112      	bne.n	80076d4 <HAL_RCC_OscConfig+0x1c0>
 80076ae:	4b33      	ldr	r3, [pc, #204]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a32      	ldr	r2, [pc, #200]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4b30      	ldr	r3, [pc, #192]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a2f      	ldr	r2, [pc, #188]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	4b2d      	ldr	r3, [pc, #180]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a2c      	ldr	r2, [pc, #176]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	e011      	b.n	80076f8 <HAL_RCC_OscConfig+0x1e4>
 80076d4:	4b29      	ldr	r3, [pc, #164]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a28      	ldr	r2, [pc, #160]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	4b26      	ldr	r3, [pc, #152]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a25      	ldr	r2, [pc, #148]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	4b23      	ldr	r3, [pc, #140]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a22      	ldr	r2, [pc, #136]	; (800777c <HAL_RCC_OscConfig+0x268>)
 80076f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80076f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d013      	beq.n	8007728 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007700:	f7fc fd2a 	bl	8004158 <HAL_GetTick>
 8007704:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007708:	f7fc fd26 	bl	8004158 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b64      	cmp	r3, #100	; 0x64
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e32e      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800771a:	4b18      	ldr	r3, [pc, #96]	; (800777c <HAL_RCC_OscConfig+0x268>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0x1f4>
 8007726:	e012      	b.n	800774e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007728:	f7fc fd16 	bl	8004158 <HAL_GetTick>
 800772c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007730:	f7fc fd12 	bl	8004158 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b64      	cmp	r3, #100	; 0x64
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e31a      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007742:	4b0e      	ldr	r3, [pc, #56]	; (800777c <HAL_RCC_OscConfig+0x268>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 809a 	beq.w	8007890 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_RCC_OscConfig+0x25a>
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2b18      	cmp	r3, #24
 8007766:	d149      	bne.n	80077fc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d146      	bne.n	80077fc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d104      	bne.n	8007780 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e2fe      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
 800777a:	bf00      	nop
 800777c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11c      	bne.n	80077c0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8007786:	4b9a      	ldr	r3, [pc, #616]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0218 	and.w	r2, r3, #24
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	d014      	beq.n	80077c0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007796:	4b96      	ldr	r3, [pc, #600]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f023 0218 	bic.w	r2, r3, #24
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	4993      	ldr	r1, [pc, #588]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80077a8:	f000 fdd0 	bl	800834c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80077ac:	4b91      	ldr	r3, [pc, #580]	; (80079f4 <HAL_RCC_OscConfig+0x4e0>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7f9 fb4f 	bl	8000e54 <HAL_InitTick>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e2db      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c0:	f7fc fcca 	bl	8004158 <HAL_GetTick>
 80077c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077c6:	e008      	b.n	80077da <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80077c8:	f7fc fcc6 	bl	8004158 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e2ce      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077da:	4b85      	ldr	r3, [pc, #532]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d0f0      	beq.n	80077c8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80077e6:	4b82      	ldr	r3, [pc, #520]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	041b      	lsls	r3, r3, #16
 80077f4:	497e      	ldr	r1, [pc, #504]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80077fa:	e049      	b.n	8007890 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02c      	beq.n	800785e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007804:	4b7a      	ldr	r3, [pc, #488]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f023 0218 	bic.w	r2, r3, #24
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	4977      	ldr	r1, [pc, #476]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007812:	4313      	orrs	r3, r2
 8007814:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8007816:	4b76      	ldr	r3, [pc, #472]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a75      	ldr	r2, [pc, #468]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 800781c:	f043 0301 	orr.w	r3, r3, #1
 8007820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007822:	f7fc fc99 	bl	8004158 <HAL_GetTick>
 8007826:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007828:	e008      	b.n	800783c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800782a:	f7fc fc95 	bl	8004158 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e29d      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800783c:	4b6c      	ldr	r3, [pc, #432]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0f0      	beq.n	800782a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007848:	4b69      	ldr	r3, [pc, #420]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	041b      	lsls	r3, r3, #16
 8007856:	4966      	ldr	r1, [pc, #408]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007858:	4313      	orrs	r3, r2
 800785a:	610b      	str	r3, [r1, #16]
 800785c:	e018      	b.n	8007890 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800785e:	4b64      	ldr	r3, [pc, #400]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a63      	ldr	r2, [pc, #396]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007864:	f023 0301 	bic.w	r3, r3, #1
 8007868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786a:	f7fc fc75 	bl	8004158 <HAL_GetTick>
 800786e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007872:	f7fc fc71 	bl	8004158 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e279      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007884:	4b5a      	ldr	r3, [pc, #360]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f0      	bne.n	8007872 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0308 	and.w	r3, r3, #8
 8007898:	2b00      	cmp	r3, #0
 800789a:	d03c      	beq.n	8007916 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01c      	beq.n	80078de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078a4:	4b52      	ldr	r3, [pc, #328]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80078a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078aa:	4a51      	ldr	r2, [pc, #324]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80078ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b4:	f7fc fc50 	bl	8004158 <HAL_GetTick>
 80078b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80078bc:	f7fc fc4c 	bl	8004158 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e254      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80078ce:	4b48      	ldr	r3, [pc, #288]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80078d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0ef      	beq.n	80078bc <HAL_RCC_OscConfig+0x3a8>
 80078dc:	e01b      	b.n	8007916 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078de:	4b44      	ldr	r3, [pc, #272]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80078e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078e4:	4a42      	ldr	r2, [pc, #264]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80078e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ee:	f7fc fc33 	bl	8004158 <HAL_GetTick>
 80078f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80078f6:	f7fc fc2f 	bl	8004158 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e237      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007908:	4b39      	ldr	r3, [pc, #228]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 800790a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800790e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1ef      	bne.n	80078f6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80d2 	beq.w	8007ac8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007924:	4b34      	ldr	r3, [pc, #208]	; (80079f8 <HAL_RCC_OscConfig+0x4e4>)
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d118      	bne.n	8007962 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007930:	4b31      	ldr	r3, [pc, #196]	; (80079f8 <HAL_RCC_OscConfig+0x4e4>)
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	4a30      	ldr	r2, [pc, #192]	; (80079f8 <HAL_RCC_OscConfig+0x4e4>)
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800793c:	f7fc fc0c 	bl	8004158 <HAL_GetTick>
 8007940:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007944:	f7fc fc08 	bl	8004158 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e210      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007956:	4b28      	ldr	r3, [pc, #160]	; (80079f8 <HAL_RCC_OscConfig+0x4e4>)
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0f0      	beq.n	8007944 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d108      	bne.n	800797c <HAL_RCC_OscConfig+0x468>
 800796a:	4b21      	ldr	r3, [pc, #132]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 800796c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007970:	4a1f      	ldr	r2, [pc, #124]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007972:	f043 0301 	orr.w	r3, r3, #1
 8007976:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800797a:	e074      	b.n	8007a66 <HAL_RCC_OscConfig+0x552>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d118      	bne.n	80079b6 <HAL_RCC_OscConfig+0x4a2>
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800798a:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007994:	4b16      	ldr	r3, [pc, #88]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 8007996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800799a:	4a15      	ldr	r2, [pc, #84]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 800799c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80079a4:	4b12      	ldr	r3, [pc, #72]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80079a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079aa:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80079ac:	f023 0304 	bic.w	r3, r3, #4
 80079b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80079b4:	e057      	b.n	8007a66 <HAL_RCC_OscConfig+0x552>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b05      	cmp	r3, #5
 80079bc:	d11e      	bne.n	80079fc <HAL_RCC_OscConfig+0x4e8>
 80079be:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80079c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079c4:	4a0a      	ldr	r2, [pc, #40]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80079c6:	f043 0304 	orr.w	r3, r3, #4
 80079ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80079ce:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80079d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079d4:	4a06      	ldr	r2, [pc, #24]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80079d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80079de:	4b04      	ldr	r3, [pc, #16]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80079e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079e4:	4a02      	ldr	r2, [pc, #8]	; (80079f0 <HAL_RCC_OscConfig+0x4dc>)
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80079ee:	e03a      	b.n	8007a66 <HAL_RCC_OscConfig+0x552>
 80079f0:	44020c00 	.word	0x44020c00
 80079f4:	20000040 	.word	0x20000040
 80079f8:	44020800 	.word	0x44020800
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2b85      	cmp	r3, #133	; 0x85
 8007a02:	d118      	bne.n	8007a36 <HAL_RCC_OscConfig+0x522>
 8007a04:	4ba2      	ldr	r3, [pc, #648]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a0a:	4aa1      	ldr	r2, [pc, #644]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a0c:	f043 0304 	orr.w	r3, r3, #4
 8007a10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007a14:	4b9e      	ldr	r3, [pc, #632]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a1a:	4a9d      	ldr	r2, [pc, #628]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007a24:	4b9a      	ldr	r3, [pc, #616]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a2a:	4a99      	ldr	r2, [pc, #612]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007a34:	e017      	b.n	8007a66 <HAL_RCC_OscConfig+0x552>
 8007a36:	4b96      	ldr	r3, [pc, #600]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a3c:	4a94      	ldr	r2, [pc, #592]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a3e:	f023 0301 	bic.w	r3, r3, #1
 8007a42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007a46:	4b92      	ldr	r3, [pc, #584]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a4c:	4a90      	ldr	r2, [pc, #576]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a4e:	f023 0304 	bic.w	r3, r3, #4
 8007a52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007a56:	4b8e      	ldr	r3, [pc, #568]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a5c:	4a8c      	ldr	r2, [pc, #560]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d016      	beq.n	8007a9c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a6e:	f7fc fb73 	bl	8004158 <HAL_GetTick>
 8007a72:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a74:	e00a      	b.n	8007a8c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a76:	f7fc fb6f 	bl	8004158 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d901      	bls.n	8007a8c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e175      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a8c:	4b80      	ldr	r3, [pc, #512]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0ed      	beq.n	8007a76 <HAL_RCC_OscConfig+0x562>
 8007a9a:	e015      	b.n	8007ac8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9c:	f7fc fb5c 	bl	8004158 <HAL_GetTick>
 8007aa0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007aa2:	e00a      	b.n	8007aba <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aa4:	f7fc fb58 	bl	8004158 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e15e      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007aba:	4b75      	ldr	r3, [pc, #468]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1ed      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d036      	beq.n	8007b42 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d019      	beq.n	8007b10 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007adc:	4b6c      	ldr	r3, [pc, #432]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a6b      	ldr	r2, [pc, #428]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007ae2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae8:	f7fc fb36 	bl	8004158 <HAL_GetTick>
 8007aec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007af0:	f7fc fb32 	bl	8004158 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e13a      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007b02:	4b63      	ldr	r3, [pc, #396]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0f0      	beq.n	8007af0 <HAL_RCC_OscConfig+0x5dc>
 8007b0e:	e018      	b.n	8007b42 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b10:	4b5f      	ldr	r3, [pc, #380]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a5e      	ldr	r2, [pc, #376]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b1c:	f7fc fb1c 	bl	8004158 <HAL_GetTick>
 8007b20:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007b24:	f7fc fb18 	bl	8004158 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e120      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007b36:	4b56      	ldr	r3, [pc, #344]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f0      	bne.n	8007b24 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 8115 	beq.w	8007d76 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	2b18      	cmp	r3, #24
 8007b50:	f000 80af 	beq.w	8007cb2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	f040 8086 	bne.w	8007c6a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007b5e:	4b4c      	ldr	r3, [pc, #304]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a4b      	ldr	r2, [pc, #300]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6a:	f7fc faf5 	bl	8004158 <HAL_GetTick>
 8007b6e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007b70:	e008      	b.n	8007b84 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007b72:	f7fc faf1 	bl	8004158 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e0f9      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007b84:	4b42      	ldr	r3, [pc, #264]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1f0      	bne.n	8007b72 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8007b90:	4b3f      	ldr	r3, [pc, #252]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b98:	f023 0303 	bic.w	r3, r3, #3
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ba4:	0212      	lsls	r2, r2, #8
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	4939      	ldr	r1, [pc, #228]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	628b      	str	r3, [r1, #40]	; 0x28
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	025b      	lsls	r3, r3, #9
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	061b      	lsls	r3, r3, #24
 8007bda:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007bde:	492c      	ldr	r1, [pc, #176]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007be4:	4b2a      	ldr	r3, [pc, #168]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	4a29      	ldr	r2, [pc, #164]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007bea:	f023 0310 	bic.w	r3, r3, #16
 8007bee:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf4:	4a26      	ldr	r2, [pc, #152]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007bfa:	4b25      	ldr	r3, [pc, #148]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	4a24      	ldr	r2, [pc, #144]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c00:	f043 0310 	orr.w	r3, r3, #16
 8007c04:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8007c06:	4b22      	ldr	r3, [pc, #136]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	f023 020c 	bic.w	r2, r3, #12
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c12:	491f      	ldr	r1, [pc, #124]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8007c18:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	f023 0220 	bic.w	r2, r3, #32
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c24:	491a      	ldr	r1, [pc, #104]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c2a:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2e:	4a18      	ldr	r2, [pc, #96]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c34:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8007c36:	4b16      	ldr	r3, [pc, #88]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a15      	ldr	r2, [pc, #84]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c42:	f7fc fa89 	bl	8004158 <HAL_GetTick>
 8007c46:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007c48:	e008      	b.n	8007c5c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007c4a:	f7fc fa85 	bl	8004158 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e08d      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007c5c:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0f0      	beq.n	8007c4a <HAL_RCC_OscConfig+0x736>
 8007c68:	e085      	b.n	8007d76 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a08      	ldr	r2, [pc, #32]	; (8007c90 <HAL_RCC_OscConfig+0x77c>)
 8007c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c76:	f7fc fa6f 	bl	8004158 <HAL_GetTick>
 8007c7a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007c7c:	e00a      	b.n	8007c94 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007c7e:	f7fc fa6b 	bl	8004158 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d903      	bls.n	8007c94 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e073      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
 8007c90:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007c94:	4b3a      	ldr	r3, [pc, #232]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1ee      	bne.n	8007c7e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007ca0:	4b37      	ldr	r3, [pc, #220]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	4a36      	ldr	r2, [pc, #216]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007ca6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	6293      	str	r3, [r2, #40]	; 0x28
 8007cb0:	e061      	b.n	8007d76 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007cb2:	4b33      	ldr	r3, [pc, #204]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007cb8:	4b31      	ldr	r3, [pc, #196]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d031      	beq.n	8007d2a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f003 0203 	and.w	r2, r3, #3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d12a      	bne.n	8007d2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	0a1b      	lsrs	r3, r3, #8
 8007cd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d122      	bne.n	8007d2a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d11a      	bne.n	8007d2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	0a5b      	lsrs	r3, r3, #9
 8007cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d00:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d111      	bne.n	8007d2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d12:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d108      	bne.n	8007d2a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	0e1b      	lsrs	r3, r3, #24
 8007d1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d001      	beq.n	8007d2e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e024      	b.n	8007d78 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007d2e:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	08db      	lsrs	r3, r3, #3
 8007d34:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d01a      	beq.n	8007d76 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007d40:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d44:	4a0e      	ldr	r2, [pc, #56]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007d46:	f023 0310 	bic.w	r3, r3, #16
 8007d4a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4c:	f7fc fa04 	bl	8004158 <HAL_GetTick>
 8007d50:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8007d52:	bf00      	nop
 8007d54:	f7fc fa00 	bl	8004158 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d0f9      	beq.n	8007d54 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d64:	4a06      	ldr	r2, [pc, #24]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007d6a:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	4a04      	ldr	r2, [pc, #16]	; (8007d80 <HAL_RCC_OscConfig+0x86c>)
 8007d70:	f043 0310 	orr.w	r3, r3, #16
 8007d74:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3720      	adds	r7, #32
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	44020c00 	.word	0x44020c00

08007d84 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e19e      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d98:	4b83      	ldr	r3, [pc, #524]	; (8007fa8 <HAL_RCC_ClockConfig+0x224>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d910      	bls.n	8007dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007da6:	4b80      	ldr	r3, [pc, #512]	; (8007fa8 <HAL_RCC_ClockConfig+0x224>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f023 020f 	bic.w	r2, r3, #15
 8007dae:	497e      	ldr	r1, [pc, #504]	; (8007fa8 <HAL_RCC_ClockConfig+0x224>)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db6:	4b7c      	ldr	r3, [pc, #496]	; (8007fa8 <HAL_RCC_ClockConfig+0x224>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 030f 	and.w	r3, r3, #15
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d001      	beq.n	8007dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e186      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0310 	and.w	r3, r3, #16
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d012      	beq.n	8007dfa <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695a      	ldr	r2, [r3, #20]
 8007dd8:	4b74      	ldr	r3, [pc, #464]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d909      	bls.n	8007dfa <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007de6:	4b71      	ldr	r3, [pc, #452]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	496d      	ldr	r1, [pc, #436]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d012      	beq.n	8007e2c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691a      	ldr	r2, [r3, #16]
 8007e0a:	4b68      	ldr	r3, [pc, #416]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	091b      	lsrs	r3, r3, #4
 8007e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d909      	bls.n	8007e2c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007e18:	4b64      	ldr	r3, [pc, #400]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	4961      	ldr	r1, [pc, #388]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d010      	beq.n	8007e5a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68da      	ldr	r2, [r3, #12]
 8007e3c:	4b5b      	ldr	r3, [pc, #364]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d908      	bls.n	8007e5a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007e48:	4b58      	ldr	r3, [pc, #352]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	4955      	ldr	r1, [pc, #340]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d010      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	4b50      	ldr	r3, [pc, #320]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d908      	bls.n	8007e88 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007e76:	4b4d      	ldr	r3, [pc, #308]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	f023 020f 	bic.w	r2, r3, #15
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	494a      	ldr	r1, [pc, #296]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8093 	beq.w	8007fbc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d107      	bne.n	8007eae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007e9e:	4b43      	ldr	r3, [pc, #268]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d121      	bne.n	8007eee <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e113      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d107      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eb6:	4b3d      	ldr	r3, [pc, #244]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d115      	bne.n	8007eee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e107      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d107      	bne.n	8007ede <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007ece:	4b37      	ldr	r3, [pc, #220]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0fb      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ede:	4b33      	ldr	r3, [pc, #204]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e0f3      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8007eee:	4b2f      	ldr	r3, [pc, #188]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	f023 0203 	bic.w	r2, r3, #3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	492c      	ldr	r1, [pc, #176]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f00:	f7fc f92a 	bl	8004158 <HAL_GetTick>
 8007f04:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d112      	bne.n	8007f34 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f0e:	e00a      	b.n	8007f26 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007f10:	f7fc f922 	bl	8004158 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e0d7      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f26:	4b21      	ldr	r3, [pc, #132]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f003 0318 	and.w	r3, r3, #24
 8007f2e:	2b18      	cmp	r3, #24
 8007f30:	d1ee      	bne.n	8007f10 <HAL_RCC_ClockConfig+0x18c>
 8007f32:	e043      	b.n	8007fbc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d112      	bne.n	8007f62 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f3c:	e00a      	b.n	8007f54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007f3e:	f7fc f90b 	bl	8004158 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e0c0      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f54:	4b15      	ldr	r3, [pc, #84]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	f003 0318 	and.w	r3, r3, #24
 8007f5c:	2b10      	cmp	r3, #16
 8007f5e:	d1ee      	bne.n	8007f3e <HAL_RCC_ClockConfig+0x1ba>
 8007f60:	e02c      	b.n	8007fbc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d122      	bne.n	8007fb0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007f6a:	e00a      	b.n	8007f82 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007f6c:	f7fc f8f4 	bl	8004158 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e0a9      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007f82:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <HAL_RCC_ClockConfig+0x228>)
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	f003 0318 	and.w	r3, r3, #24
 8007f8a:	2b08      	cmp	r3, #8
 8007f8c:	d1ee      	bne.n	8007f6c <HAL_RCC_ClockConfig+0x1e8>
 8007f8e:	e015      	b.n	8007fbc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007f90:	f7fc f8e2 	bl	8004158 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d906      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e097      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
 8007fa6:	bf00      	nop
 8007fa8:	40022000 	.word	0x40022000
 8007fac:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fb0:	4b4b      	ldr	r3, [pc, #300]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f003 0318 	and.w	r3, r3, #24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e9      	bne.n	8007f90 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d010      	beq.n	8007fea <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	4b44      	ldr	r3, [pc, #272]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	f003 030f 	and.w	r3, r3, #15
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d208      	bcs.n	8007fea <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007fd8:	4b41      	ldr	r3, [pc, #260]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	f023 020f 	bic.w	r2, r3, #15
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	493e      	ldr	r1, [pc, #248]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fea:	4b3e      	ldr	r3, [pc, #248]	; (80080e4 <HAL_RCC_ClockConfig+0x360>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d210      	bcs.n	800801a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff8:	4b3a      	ldr	r3, [pc, #232]	; (80080e4 <HAL_RCC_ClockConfig+0x360>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f023 020f 	bic.w	r2, r3, #15
 8008000:	4938      	ldr	r1, [pc, #224]	; (80080e4 <HAL_RCC_ClockConfig+0x360>)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	4313      	orrs	r3, r2
 8008006:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008008:	4b36      	ldr	r3, [pc, #216]	; (80080e4 <HAL_RCC_ClockConfig+0x360>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d001      	beq.n	800801a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e05d      	b.n	80080d6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d010      	beq.n	8008048 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	4b2d      	ldr	r3, [pc, #180]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008032:	429a      	cmp	r2, r3
 8008034:	d208      	bcs.n	8008048 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8008036:	4b2a      	ldr	r3, [pc, #168]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	4927      	ldr	r1, [pc, #156]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d012      	beq.n	800807a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	4b21      	ldr	r3, [pc, #132]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	091b      	lsrs	r3, r3, #4
 800805e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008062:	429a      	cmp	r2, r3
 8008064:	d209      	bcs.n	800807a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8008066:	4b1e      	ldr	r3, [pc, #120]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	491a      	ldr	r1, [pc, #104]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 8008076:	4313      	orrs	r3, r2
 8008078:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0310 	and.w	r3, r3, #16
 8008082:	2b00      	cmp	r3, #0
 8008084:	d012      	beq.n	80080ac <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	0a1b      	lsrs	r3, r3, #8
 8008090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008094:	429a      	cmp	r2, r3
 8008096:	d209      	bcs.n	80080ac <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8008098:	4b11      	ldr	r3, [pc, #68]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	490e      	ldr	r1, [pc, #56]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80080ac:	f000 f822 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 80080b0:	4602      	mov	r2, r0
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <HAL_RCC_ClockConfig+0x35c>)
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	490b      	ldr	r1, [pc, #44]	; (80080e8 <HAL_RCC_ClockConfig+0x364>)
 80080bc:	5ccb      	ldrb	r3, [r1, r3]
 80080be:	fa22 f303 	lsr.w	r3, r2, r3
 80080c2:	4a0a      	ldr	r2, [pc, #40]	; (80080ec <HAL_RCC_ClockConfig+0x368>)
 80080c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80080c6:	4b0a      	ldr	r3, [pc, #40]	; (80080f0 <HAL_RCC_ClockConfig+0x36c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7f8 fec2 	bl	8000e54 <HAL_InitTick>
 80080d0:	4603      	mov	r3, r0
 80080d2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80080d4:	7afb      	ldrb	r3, [r7, #11]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	44020c00 	.word	0x44020c00
 80080e4:	40022000 	.word	0x40022000
 80080e8:	0801fdc4 	.word	0x0801fdc4
 80080ec:	20000000 	.word	0x20000000
 80080f0:	20000040 	.word	0x20000040

080080f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b089      	sub	sp, #36	; 0x24
 80080f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80080fa:	4b8c      	ldr	r3, [pc, #560]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	f003 0318 	and.w	r3, r3, #24
 8008102:	2b08      	cmp	r3, #8
 8008104:	d102      	bne.n	800810c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008106:	4b8a      	ldr	r3, [pc, #552]	; (8008330 <HAL_RCC_GetSysClockFreq+0x23c>)
 8008108:	61fb      	str	r3, [r7, #28]
 800810a:	e107      	b.n	800831c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800810c:	4b87      	ldr	r3, [pc, #540]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 800810e:	69db      	ldr	r3, [r3, #28]
 8008110:	f003 0318 	and.w	r3, r3, #24
 8008114:	2b00      	cmp	r3, #0
 8008116:	d112      	bne.n	800813e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8008118:	4b84      	ldr	r3, [pc, #528]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d009      	beq.n	8008138 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008124:	4b81      	ldr	r3, [pc, #516]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	08db      	lsrs	r3, r3, #3
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	4a81      	ldr	r2, [pc, #516]	; (8008334 <HAL_RCC_GetSysClockFreq+0x240>)
 8008130:	fa22 f303 	lsr.w	r3, r2, r3
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	e0f1      	b.n	800831c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8008138:	4b7e      	ldr	r3, [pc, #504]	; (8008334 <HAL_RCC_GetSysClockFreq+0x240>)
 800813a:	61fb      	str	r3, [r7, #28]
 800813c:	e0ee      	b.n	800831c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800813e:	4b7b      	ldr	r3, [pc, #492]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f003 0318 	and.w	r3, r3, #24
 8008146:	2b10      	cmp	r3, #16
 8008148:	d102      	bne.n	8008150 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800814a:	4b7b      	ldr	r3, [pc, #492]	; (8008338 <HAL_RCC_GetSysClockFreq+0x244>)
 800814c:	61fb      	str	r3, [r7, #28]
 800814e:	e0e5      	b.n	800831c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008150:	4b76      	ldr	r3, [pc, #472]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	f003 0318 	and.w	r3, r3, #24
 8008158:	2b18      	cmp	r3, #24
 800815a:	f040 80dd 	bne.w	8008318 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800815e:	4b73      	ldr	r3, [pc, #460]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 8008160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008168:	4b70      	ldr	r3, [pc, #448]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 800816a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008172:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008174:	4b6d      	ldr	r3, [pc, #436]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	091b      	lsrs	r3, r3, #4
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008180:	4b6a      	ldr	r3, [pc, #424]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8008184:	08db      	lsrs	r3, r3, #3
 8008186:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	fb02 f303 	mul.w	r3, r2, r3
 8008190:	ee07 3a90 	vmov	s15, r3
 8008194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008198:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 80b7 	beq.w	8008312 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d003      	beq.n	80081b2 <HAL_RCC_GetSysClockFreq+0xbe>
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d056      	beq.n	800825e <HAL_RCC_GetSysClockFreq+0x16a>
 80081b0:	e077      	b.n	80082a2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80081b2:	4b5e      	ldr	r3, [pc, #376]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d02d      	beq.n	800821a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081be:	4b5b      	ldr	r3, [pc, #364]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	08db      	lsrs	r3, r3, #3
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	4a5a      	ldr	r2, [pc, #360]	; (8008334 <HAL_RCC_GetSysClockFreq+0x240>)
 80081ca:	fa22 f303 	lsr.w	r3, r2, r3
 80081ce:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e8:	4b50      	ldr	r3, [pc, #320]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 80081ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f0:	ee07 3a90 	vmov	s15, r3
 80081f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80081f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80081fc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800833c <HAL_RCC_GetSysClockFreq+0x248>
 8008200:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008204:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800820c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008214:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8008218:	e065      	b.n	80082e6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	ee07 3a90 	vmov	s15, r3
 8008220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008224:	eddf 6a46 	vldr	s13, [pc, #280]	; 8008340 <HAL_RCC_GetSysClockFreq+0x24c>
 8008228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800822c:	4b3f      	ldr	r3, [pc, #252]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008234:	ee07 3a90 	vmov	s15, r3
 8008238:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800823c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008240:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800833c <HAL_RCC_GetSysClockFreq+0x248>
 8008244:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008248:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800824c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008250:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008258:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800825c:	e043      	b.n	80082e6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008268:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008344 <HAL_RCC_GetSysClockFreq+0x250>
 800826c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008270:	4b2e      	ldr	r3, [pc, #184]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 8008272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008278:	ee07 3a90 	vmov	s15, r3
 800827c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008280:	ed97 6a02 	vldr	s12, [r7, #8]
 8008284:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800833c <HAL_RCC_GetSysClockFreq+0x248>
 8008288:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800828c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008294:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80082a0:	e021      	b.n	80082e6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ac:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008348 <HAL_RCC_GetSysClockFreq+0x254>
 80082b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b4:	4b1d      	ldr	r3, [pc, #116]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 80082b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082bc:	ee07 3a90 	vmov	s15, r3
 80082c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80082c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80082c8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800833c <HAL_RCC_GetSysClockFreq+0x248>
 80082cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80082d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80082d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80082dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80082e4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80082e6:	4b11      	ldr	r3, [pc, #68]	; (800832c <HAL_RCC_GetSysClockFreq+0x238>)
 80082e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ea:	0a5b      	lsrs	r3, r3, #9
 80082ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f0:	3301      	adds	r3, #1
 80082f2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80082fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8008302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800830a:	ee17 3a90 	vmov	r3, s15
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	e004      	b.n	800831c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	61fb      	str	r3, [r7, #28]
 8008316:	e001      	b.n	800831c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8008318:	4b06      	ldr	r3, [pc, #24]	; (8008334 <HAL_RCC_GetSysClockFreq+0x240>)
 800831a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800831c:	69fb      	ldr	r3, [r7, #28]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3724      	adds	r7, #36	; 0x24
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	44020c00 	.word	0x44020c00
 8008330:	003d0900 	.word	0x003d0900
 8008334:	03d09000 	.word	0x03d09000
 8008338:	007a1200 	.word	0x007a1200
 800833c:	46000000 	.word	0x46000000
 8008340:	4c742400 	.word	0x4c742400
 8008344:	4af42400 	.word	0x4af42400
 8008348:	4a742400 	.word	0x4a742400

0800834c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008350:	f7ff fed0 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 8008354:	4602      	mov	r2, r0
 8008356:	4b08      	ldr	r3, [pc, #32]	; (8008378 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008358:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800835a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800835e:	4907      	ldr	r1, [pc, #28]	; (800837c <HAL_RCC_GetHCLKFreq+0x30>)
 8008360:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008362:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008366:	fa22 f303 	lsr.w	r3, r2, r3
 800836a:	4a05      	ldr	r2, [pc, #20]	; (8008380 <HAL_RCC_GetHCLKFreq+0x34>)
 800836c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800836e:	4b04      	ldr	r3, [pc, #16]	; (8008380 <HAL_RCC_GetHCLKFreq+0x34>)
 8008370:	681b      	ldr	r3, [r3, #0]
}
 8008372:	4618      	mov	r0, r3
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	44020c00 	.word	0x44020c00
 800837c:	0801fdc4 	.word	0x0801fdc4
 8008380:	20000000 	.word	0x20000000

08008384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8008388:	f7ff ffe0 	bl	800834c <HAL_RCC_GetHCLKFreq>
 800838c:	4602      	mov	r2, r0
 800838e:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	091b      	lsrs	r3, r3, #4
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	4904      	ldr	r1, [pc, #16]	; (80083ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800839a:	5ccb      	ldrb	r3, [r1, r3]
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	44020c00 	.word	0x44020c00
 80083ac:	0801fdd4 	.word	0x0801fdd4

080083b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80083b4:	f7ff ffca 	bl	800834c <HAL_RCC_GetHCLKFreq>
 80083b8:	4602      	mov	r2, r0
 80083ba:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	0a1b      	lsrs	r3, r3, #8
 80083c0:	f003 0307 	and.w	r3, r3, #7
 80083c4:	4904      	ldr	r1, [pc, #16]	; (80083d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80083c6:	5ccb      	ldrb	r3, [r1, r3]
 80083c8:	f003 031f 	and.w	r3, r3, #31
 80083cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	44020c00 	.word	0x44020c00
 80083d8:	0801fdd4 	.word	0x0801fdd4

080083dc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80083e0:	f7ff ffb4 	bl	800834c <HAL_RCC_GetHCLKFreq>
 80083e4:	4602      	mov	r2, r0
 80083e6:	4b06      	ldr	r3, [pc, #24]	; (8008400 <HAL_RCC_GetPCLK3Freq+0x24>)
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	0b1b      	lsrs	r3, r3, #12
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	4904      	ldr	r1, [pc, #16]	; (8008404 <HAL_RCC_GetPCLK3Freq+0x28>)
 80083f2:	5ccb      	ldrb	r3, [r1, r3]
 80083f4:	f003 031f 	and.w	r3, r3, #31
 80083f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	44020c00 	.word	0x44020c00
 8008404:	0801fdd4 	.word	0x0801fdd4

08008408 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	221f      	movs	r2, #31
 8008416:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <HAL_RCC_GetClockConfig+0x68>)
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	f003 0203 	and.w	r2, r3, #3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8008424:	4b12      	ldr	r3, [pc, #72]	; (8008470 <HAL_RCC_GetClockConfig+0x68>)
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f003 020f 	and.w	r2, r3, #15
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	091b      	lsrs	r3, r3, #4
 8008442:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	0a1b      	lsrs	r3, r3, #8
 800844e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008456:	4b07      	ldr	r3, [pc, #28]	; (8008474 <HAL_RCC_GetClockConfig+0x6c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 020f 	and.w	r2, r3, #15
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	601a      	str	r2, [r3, #0]
}
 8008462:	bf00      	nop
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	44020c00 	.word	0x44020c00
 8008474:	40022000 	.word	0x40022000

08008478 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800847c:	b0d8      	sub	sp, #352	; 0x160
 800847e:	af00      	add	r7, sp, #0
 8008480:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008484:	2300      	movs	r3, #0
 8008486:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800848a:	2300      	movs	r3, #0
 800848c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008490:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 800849c:	2500      	movs	r5, #0
 800849e:	ea54 0305 	orrs.w	r3, r4, r5
 80084a2:	d00b      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80084a4:	4bcd      	ldr	r3, [pc, #820]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80084a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084aa:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80084ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b4:	4ac9      	ldr	r2, [pc, #804]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80084b6:	430b      	orrs	r3, r1
 80084b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c4:	f002 0801 	and.w	r8, r2, #1
 80084c8:	f04f 0900 	mov.w	r9, #0
 80084cc:	ea58 0309 	orrs.w	r3, r8, r9
 80084d0:	d042      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80084d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084d8:	2b05      	cmp	r3, #5
 80084da:	d823      	bhi.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80084dc:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	0800852d 	.word	0x0800852d
 80084e8:	080084fd 	.word	0x080084fd
 80084ec:	08008511 	.word	0x08008511
 80084f0:	0800852d 	.word	0x0800852d
 80084f4:	0800852d 	.word	0x0800852d
 80084f8:	0800852d 	.word	0x0800852d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008500:	3308      	adds	r3, #8
 8008502:	4618      	mov	r0, r3
 8008504:	f004 feda 	bl	800d2bc <RCCEx_PLL2_Config>
 8008508:	4603      	mov	r3, r0
 800850a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800850e:	e00e      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008514:	3330      	adds	r3, #48	; 0x30
 8008516:	4618      	mov	r0, r3
 8008518:	f004 ff68 	bl	800d3ec <RCCEx_PLL3_Config>
 800851c:	4603      	mov	r3, r0
 800851e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8008522:	e004      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800852a:	e000      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800852c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800852e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10c      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008536:	4ba9      	ldr	r3, [pc, #676]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800853c:	f023 0107 	bic.w	r1, r3, #7
 8008540:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008546:	4aa5      	ldr	r2, [pc, #660]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008548:	430b      	orrs	r3, r1
 800854a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800854e:	e003      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008550:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008554:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008558:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f002 0a02 	and.w	sl, r2, #2
 8008564:	f04f 0b00 	mov.w	fp, #0
 8008568:	ea5a 030b 	orrs.w	r3, sl, fp
 800856c:	f000 8088 	beq.w	8008680 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8008570:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008576:	2b28      	cmp	r3, #40	; 0x28
 8008578:	d868      	bhi.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800857a:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	08008655 	.word	0x08008655
 8008584:	0800864d 	.word	0x0800864d
 8008588:	0800864d 	.word	0x0800864d
 800858c:	0800864d 	.word	0x0800864d
 8008590:	0800864d 	.word	0x0800864d
 8008594:	0800864d 	.word	0x0800864d
 8008598:	0800864d 	.word	0x0800864d
 800859c:	0800864d 	.word	0x0800864d
 80085a0:	08008625 	.word	0x08008625
 80085a4:	0800864d 	.word	0x0800864d
 80085a8:	0800864d 	.word	0x0800864d
 80085ac:	0800864d 	.word	0x0800864d
 80085b0:	0800864d 	.word	0x0800864d
 80085b4:	0800864d 	.word	0x0800864d
 80085b8:	0800864d 	.word	0x0800864d
 80085bc:	0800864d 	.word	0x0800864d
 80085c0:	08008639 	.word	0x08008639
 80085c4:	0800864d 	.word	0x0800864d
 80085c8:	0800864d 	.word	0x0800864d
 80085cc:	0800864d 	.word	0x0800864d
 80085d0:	0800864d 	.word	0x0800864d
 80085d4:	0800864d 	.word	0x0800864d
 80085d8:	0800864d 	.word	0x0800864d
 80085dc:	0800864d 	.word	0x0800864d
 80085e0:	08008655 	.word	0x08008655
 80085e4:	0800864d 	.word	0x0800864d
 80085e8:	0800864d 	.word	0x0800864d
 80085ec:	0800864d 	.word	0x0800864d
 80085f0:	0800864d 	.word	0x0800864d
 80085f4:	0800864d 	.word	0x0800864d
 80085f8:	0800864d 	.word	0x0800864d
 80085fc:	0800864d 	.word	0x0800864d
 8008600:	08008655 	.word	0x08008655
 8008604:	0800864d 	.word	0x0800864d
 8008608:	0800864d 	.word	0x0800864d
 800860c:	0800864d 	.word	0x0800864d
 8008610:	0800864d 	.word	0x0800864d
 8008614:	0800864d 	.word	0x0800864d
 8008618:	0800864d 	.word	0x0800864d
 800861c:	0800864d 	.word	0x0800864d
 8008620:	08008655 	.word	0x08008655
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008624:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008628:	3308      	adds	r3, #8
 800862a:	4618      	mov	r0, r3
 800862c:	f004 fe46 	bl	800d2bc <RCCEx_PLL2_Config>
 8008630:	4603      	mov	r3, r0
 8008632:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8008636:	e00e      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008638:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800863c:	3330      	adds	r3, #48	; 0x30
 800863e:	4618      	mov	r0, r3
 8008640:	f004 fed4 	bl	800d3ec <RCCEx_PLL3_Config>
 8008644:	4603      	mov	r3, r0
 8008646:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800864a:	e004      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008652:	e000      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8008654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008656:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10c      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800865e:	4b5f      	ldr	r3, [pc, #380]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008664:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008668:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800866c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866e:	4a5b      	ldr	r2, [pc, #364]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008670:	430b      	orrs	r3, r1
 8008672:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008676:	e003      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008678:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800867c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008680:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f002 0304 	and.w	r3, r2, #4
 800868c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008690:	2300      	movs	r3, #0
 8008692:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8008696:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800869a:	460b      	mov	r3, r1
 800869c:	4313      	orrs	r3, r2
 800869e:	d04e      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80086a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80086aa:	d02c      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80086ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80086b0:	d825      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80086b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b6:	d028      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80086b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086bc:	d81f      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80086be:	2bc0      	cmp	r3, #192	; 0xc0
 80086c0:	d025      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80086c2:	2bc0      	cmp	r3, #192	; 0xc0
 80086c4:	d81b      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80086c6:	2b80      	cmp	r3, #128	; 0x80
 80086c8:	d00f      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x272>
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d817      	bhi.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01f      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80086d2:	2b40      	cmp	r3, #64	; 0x40
 80086d4:	d113      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086da:	3308      	adds	r3, #8
 80086dc:	4618      	mov	r0, r3
 80086de:	f004 fded 	bl	800d2bc <RCCEx_PLL2_Config>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80086e8:	e014      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086ee:	3330      	adds	r3, #48	; 0x30
 80086f0:	4618      	mov	r0, r3
 80086f2:	f004 fe7b 	bl	800d3ec <RCCEx_PLL3_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80086fc:	e00a      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008704:	e006      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8008706:	bf00      	nop
 8008708:	e004      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800870a:	bf00      	nop
 800870c:	e002      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800870e:	bf00      	nop
 8008710:	e000      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8008712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008714:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10c      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800871c:	4b2f      	ldr	r3, [pc, #188]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800871e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008722:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008726:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800872a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800872c:	4a2b      	ldr	r2, [pc, #172]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800872e:	430b      	orrs	r3, r1
 8008730:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008734:	e003      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008736:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800873a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800873e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	f002 0308 	and.w	r3, r2, #8
 800874a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800874e:	2300      	movs	r3, #0
 8008750:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8008754:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8008758:	460b      	mov	r3, r1
 800875a:	4313      	orrs	r3, r2
 800875c:	d056      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800875e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008764:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008768:	d031      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x356>
 800876a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800876e:	d82a      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008774:	d02d      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800877a:	d824      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800877c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008780:	d029      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8008782:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008786:	d81e      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800878c:	d011      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800878e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008792:	d818      	bhi.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d023      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800879c:	d113      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800879e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087a2:	3308      	adds	r3, #8
 80087a4:	4618      	mov	r0, r3
 80087a6:	f004 fd89 	bl	800d2bc <RCCEx_PLL2_Config>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80087b0:	e017      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087b6:	3330      	adds	r3, #48	; 0x30
 80087b8:	4618      	mov	r0, r3
 80087ba:	f004 fe17 	bl	800d3ec <RCCEx_PLL3_Config>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80087c4:	e00d      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80087cc:	e009      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80087ce:	bf00      	nop
 80087d0:	e007      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80087d2:	bf00      	nop
 80087d4:	e005      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80087d6:	bf00      	nop
 80087d8:	e003      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80087da:	bf00      	nop
 80087dc:	44020c00 	.word	0x44020c00
        break;
 80087e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10c      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80087ea:	4bbb      	ldr	r3, [pc, #748]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80087ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087f0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80087f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087fa:	4ab7      	ldr	r2, [pc, #732]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80087fc:	430b      	orrs	r3, r1
 80087fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008802:	e003      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008804:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008808:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800880c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f002 0310 	and.w	r3, r2, #16
 8008818:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800881c:	2300      	movs	r3, #0
 800881e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008822:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8008826:	460b      	mov	r3, r1
 8008828:	4313      	orrs	r3, r2
 800882a:	d053      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800882c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008832:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008836:	d031      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8008838:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800883c:	d82a      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800883e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008842:	d02d      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008848:	d824      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800884a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800884e:	d029      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8008850:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008854:	d81e      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885a:	d011      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800885c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008860:	d818      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d020      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8008866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886a:	d113      	bne.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800886c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008870:	3308      	adds	r3, #8
 8008872:	4618      	mov	r0, r3
 8008874:	f004 fd22 	bl	800d2bc <RCCEx_PLL2_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800887e:	e014      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008880:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008884:	3330      	adds	r3, #48	; 0x30
 8008886:	4618      	mov	r0, r3
 8008888:	f004 fdb0 	bl	800d3ec <RCCEx_PLL3_Config>
 800888c:	4603      	mov	r3, r0
 800888e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8008892:	e00a      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800889a:	e006      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800889c:	bf00      	nop
 800889e:	e004      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80088a0:	bf00      	nop
 80088a2:	e002      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80088a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10c      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80088b2:	4b89      	ldr	r3, [pc, #548]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80088b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80088b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80088bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c2:	4a85      	ldr	r2, [pc, #532]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80088c4:	430b      	orrs	r3, r1
 80088c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80088ca:	e003      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80088d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80088d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f002 0320 	and.w	r3, r2, #32
 80088e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80088ea:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80088ee:	460b      	mov	r3, r1
 80088f0:	4313      	orrs	r3, r2
 80088f2:	d053      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80088f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80088fe:	d031      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8008900:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008904:	d82a      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800890a:	d02d      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800890c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008910:	d824      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008912:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008916:	d029      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8008918:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800891c:	d81e      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800891e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008922:	d011      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008928:	d818      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d020      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800892e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008932:	d113      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008934:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008938:	3308      	adds	r3, #8
 800893a:	4618      	mov	r0, r3
 800893c:	f004 fcbe 	bl	800d2bc <RCCEx_PLL2_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8008946:	e014      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008948:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800894c:	3330      	adds	r3, #48	; 0x30
 800894e:	4618      	mov	r0, r3
 8008950:	f004 fd4c 	bl	800d3ec <RCCEx_PLL3_Config>
 8008954:	4603      	mov	r3, r0
 8008956:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800895a:	e00a      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008962:	e006      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008964:	bf00      	nop
 8008966:	e004      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008968:	bf00      	nop
 800896a:	e002      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800896c:	bf00      	nop
 800896e:	e000      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008972:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10c      	bne.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800897a:	4b57      	ldr	r3, [pc, #348]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800897c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008980:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8008984:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898a:	4a53      	ldr	r2, [pc, #332]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800898c:	430b      	orrs	r3, r1
 800898e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008992:	e003      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008994:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008998:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800899c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80089a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80089ac:	2300      	movs	r3, #0
 80089ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80089b2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80089b6:	460b      	mov	r3, r1
 80089b8:	4313      	orrs	r3, r2
 80089ba:	d053      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80089bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80089c6:	d031      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80089c8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80089cc:	d82a      	bhi.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80089ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d2:	d02d      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80089d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d8:	d824      	bhi.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80089da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80089de:	d029      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80089e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80089e4:	d81e      	bhi.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80089e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089ea:	d011      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80089ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089f0:	d818      	bhi.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d020      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80089f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089fa:	d113      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a00:	3308      	adds	r3, #8
 8008a02:	4618      	mov	r0, r3
 8008a04:	f004 fc5a 	bl	800d2bc <RCCEx_PLL2_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8008a0e:	e014      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a14:	3330      	adds	r3, #48	; 0x30
 8008a16:	4618      	mov	r0, r3
 8008a18:	f004 fce8 	bl	800d3ec <RCCEx_PLL3_Config>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8008a22:	e00a      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008a2a:	e006      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008a2c:	bf00      	nop
 8008a2e:	e004      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008a30:	bf00      	nop
 8008a32:	e002      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008a34:	bf00      	nop
 8008a36:	e000      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10c      	bne.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8008a42:	4b25      	ldr	r3, [pc, #148]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008a44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008a48:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8008a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a52:	4a21      	ldr	r2, [pc, #132]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008a54:	430b      	orrs	r3, r1
 8008a56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008a5a:	e003      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008a70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008a74:	2300      	movs	r3, #0
 8008a76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008a7a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4313      	orrs	r3, r2
 8008a82:	d055      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8008a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a8a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008a8e:	d033      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008a90:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008a94:	d82c      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a9a:	d02f      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008a9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aa0:	d826      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008aa2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008aa6:	d02b      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008aa8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008aac:	d820      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ab2:	d013      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ab8:	d81a      	bhi.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d022      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ac2:	d115      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ac8:	3308      	adds	r3, #8
 8008aca:	4618      	mov	r0, r3
 8008acc:	f004 fbf6 	bl	800d2bc <RCCEx_PLL2_Config>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8008ad6:	e016      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008ad8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ae0:	3330      	adds	r3, #48	; 0x30
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f004 fc82 	bl	800d3ec <RCCEx_PLL3_Config>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8008aee:	e00a      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008af6:	e006      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008af8:	bf00      	nop
 8008afa:	e004      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008afc:	bf00      	nop
 8008afe:	e002      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008b00:	bf00      	nop
 8008b02:	e000      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10c      	bne.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8008b0e:	4bbb      	ldr	r3, [pc, #748]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008b10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b14:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008b18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b1e:	4ab7      	ldr	r2, [pc, #732]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008b20:	430b      	orrs	r3, r1
 8008b22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008b26:	e003      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b28:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008b2c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8008b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008b3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008b40:	2300      	movs	r3, #0
 8008b42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b46:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	d053      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8008b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b56:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008b5a:	d031      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008b5c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008b60:	d82a      	bhi.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b66:	d02d      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8008b68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b6c:	d824      	bhi.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008b6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b72:	d029      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8008b74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b78:	d81e      	bhi.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b7e:	d011      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8008b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b84:	d818      	bhi.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d020      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x754>
 8008b8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b8e:	d113      	bne.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b94:	3308      	adds	r3, #8
 8008b96:	4618      	mov	r0, r3
 8008b98:	f004 fb90 	bl	800d2bc <RCCEx_PLL2_Config>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8008ba2:	e014      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ba8:	3330      	adds	r3, #48	; 0x30
 8008baa:	4618      	mov	r0, r3
 8008bac:	f004 fc1e 	bl	800d3ec <RCCEx_PLL3_Config>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8008bb6:	e00a      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008bbe:	e006      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008bc0:	bf00      	nop
 8008bc2:	e004      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008bc4:	bf00      	nop
 8008bc6:	e002      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008bc8:	bf00      	nop
 8008bca:	e000      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10c      	bne.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8008bd6:	4b89      	ldr	r3, [pc, #548]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008bdc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008be6:	4a85      	ldr	r2, [pc, #532]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008be8:	430b      	orrs	r3, r1
 8008bea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008bee:	e003      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008bf4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8008bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8008c04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008c0e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008c12:	460b      	mov	r3, r1
 8008c14:	4313      	orrs	r3, r2
 8008c16:	d055      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8008c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c20:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8008c24:	d031      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8008c26:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8008c2a:	d82a      	bhi.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c30:	d02d      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8008c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c36:	d824      	bhi.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008c38:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008c3c:	d029      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008c3e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008c42:	d81e      	bhi.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c48:	d011      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8008c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c4e:	d818      	bhi.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d020      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c58:	d113      	bne.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c5e:	3308      	adds	r3, #8
 8008c60:	4618      	mov	r0, r3
 8008c62:	f004 fb2b 	bl	800d2bc <RCCEx_PLL2_Config>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008c6c:	e014      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c72:	3330      	adds	r3, #48	; 0x30
 8008c74:	4618      	mov	r0, r3
 8008c76:	f004 fbb9 	bl	800d3ec <RCCEx_PLL3_Config>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008c80:	e00a      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008c88:	e006      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008c8a:	bf00      	nop
 8008c8c:	e004      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008c8e:	bf00      	nop
 8008c90:	e002      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008c92:	bf00      	nop
 8008c94:	e000      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10d      	bne.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8008ca0:	4b56      	ldr	r3, [pc, #344]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008ca6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8008caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cb2:	4a52      	ldr	r2, [pc, #328]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008cba:	e003      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cbc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008cc0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8008cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008cd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008cda:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	d044      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8008ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cec:	2b05      	cmp	r3, #5
 8008cee:	d823      	bhi.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008cf0:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf6:	bf00      	nop
 8008cf8:	08008d41 	.word	0x08008d41
 8008cfc:	08008d11 	.word	0x08008d11
 8008d00:	08008d25 	.word	0x08008d25
 8008d04:	08008d41 	.word	0x08008d41
 8008d08:	08008d41 	.word	0x08008d41
 8008d0c:	08008d41 	.word	0x08008d41
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d14:	3308      	adds	r3, #8
 8008d16:	4618      	mov	r0, r3
 8008d18:	f004 fad0 	bl	800d2bc <RCCEx_PLL2_Config>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8008d22:	e00e      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d28:	3330      	adds	r3, #48	; 0x30
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f004 fb5e 	bl	800d3ec <RCCEx_PLL3_Config>
 8008d30:	4603      	mov	r3, r0
 8008d32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8008d36:	e004      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008d3e:	e000      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8008d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10d      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8008d4a:	4b2c      	ldr	r3, [pc, #176]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008d4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008d50:	f023 0107 	bic.w	r1, r3, #7
 8008d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d5c:	4a27      	ldr	r2, [pc, #156]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008d64:	e003      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d6a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008d6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008d7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d84:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	d04f      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8008d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d96:	2b50      	cmp	r3, #80	; 0x50
 8008d98:	d029      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008d9a:	2b50      	cmp	r3, #80	; 0x50
 8008d9c:	d823      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008d9e:	2b40      	cmp	r3, #64	; 0x40
 8008da0:	d027      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008da2:	2b40      	cmp	r3, #64	; 0x40
 8008da4:	d81f      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008da6:	2b30      	cmp	r3, #48	; 0x30
 8008da8:	d025      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008daa:	2b30      	cmp	r3, #48	; 0x30
 8008dac:	d81b      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	d00f      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	d817      	bhi.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d022      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d113      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008dbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f004 fa79 	bl	800d2bc <RCCEx_PLL2_Config>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8008dd0:	e017      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dd6:	3330      	adds	r3, #48	; 0x30
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f004 fb07 	bl	800d3ec <RCCEx_PLL3_Config>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8008de4:	e00d      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008dec:	e009      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008dee:	bf00      	nop
 8008df0:	e007      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008df2:	bf00      	nop
 8008df4:	e005      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008df6:	bf00      	nop
 8008df8:	e003      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8008dfa:	bf00      	nop
 8008dfc:	44020c00 	.word	0x44020c00
        break;
 8008e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10d      	bne.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8008e0a:	4baf      	ldr	r3, [pc, #700]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008e0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008e10:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e1c:	4aaa      	ldr	r2, [pc, #680]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008e1e:	430b      	orrs	r3, r1
 8008e20:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008e24:	e003      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008e2a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008e3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	d055      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8008e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e56:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e5a:	d031      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8008e5c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e60:	d82a      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008e62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e66:	d02d      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8008e68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e6c:	d824      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008e6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e72:	d029      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8008e74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e78:	d81e      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008e7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e7e:	d011      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8008e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e84:	d818      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d020      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8008e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e8e:	d113      	bne.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e94:	3308      	adds	r3, #8
 8008e96:	4618      	mov	r0, r3
 8008e98:	f004 fa10 	bl	800d2bc <RCCEx_PLL2_Config>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008ea2:	e014      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ea8:	3330      	adds	r3, #48	; 0x30
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f004 fa9e 	bl	800d3ec <RCCEx_PLL3_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008eb6:	e00a      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008ebe:	e006      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008ec0:	bf00      	nop
 8008ec2:	e004      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008ec4:	bf00      	nop
 8008ec6:	e002      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008ec8:	bf00      	nop
 8008eca:	e000      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ece:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10d      	bne.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008ed6:	4b7c      	ldr	r3, [pc, #496]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008edc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ee8:	4a77      	ldr	r2, [pc, #476]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008eea:	430b      	orrs	r3, r1
 8008eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008ef0:	e003      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008ef6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008efa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008f14:	460b      	mov	r3, r1
 8008f16:	4313      	orrs	r3, r2
 8008f18:	d03d      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8008f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f26:	d01b      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8008f28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f2c:	d814      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8008f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f32:	d017      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8008f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f38:	d80e      	bhi.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d014      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8008f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f42:	d109      	bne.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f48:	3330      	adds	r3, #48	; 0x30
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f004 fa4e 	bl	800d3ec <RCCEx_PLL3_Config>
 8008f50:	4603      	mov	r3, r0
 8008f52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8008f56:	e008      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008f5e:	e004      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008f60:	bf00      	nop
 8008f62:	e002      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008f64:	bf00      	nop
 8008f66:	e000      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10d      	bne.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008f72:	4b55      	ldr	r3, [pc, #340]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008f74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f78:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f84:	4a50      	ldr	r2, [pc, #320]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008f86:	430b      	orrs	r3, r1
 8008f88:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008f8c:	e003      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f92:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008fa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008fac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	d03d      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8008fb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fbe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008fc2:	d01b      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8008fc4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008fc8:	d814      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008fca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fce:	d017      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8008fd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fd4:	d80e      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d014      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8008fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fde:	d109      	bne.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fe4:	3330      	adds	r3, #48	; 0x30
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f004 fa00 	bl	800d3ec <RCCEx_PLL3_Config>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8008ff2:	e008      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008ffa:	e004      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008ffc:	bf00      	nop
 8008ffe:	e002      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8009000:	bf00      	nop
 8009002:	e000      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8009004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009006:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10d      	bne.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800900e:	4b2e      	ldr	r3, [pc, #184]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009010:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009014:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8009018:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800901c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009020:	4a29      	ldr	r2, [pc, #164]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009022:	430b      	orrs	r3, r1
 8009024:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009028:	e003      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800902e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009032:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800903e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009042:	2300      	movs	r3, #0
 8009044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009048:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800904c:	460b      	mov	r3, r1
 800904e:	4313      	orrs	r3, r2
 8009050:	d040      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8009052:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800905a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800905e:	d01b      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8009060:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009064:	d814      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8009066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800906a:	d017      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800906c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009070:	d80e      	bhi.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8009072:	2b00      	cmp	r3, #0
 8009074:	d014      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800907a:	d109      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800907c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009080:	3330      	adds	r3, #48	; 0x30
 8009082:	4618      	mov	r0, r3
 8009084:	f004 f9b2 	bl	800d3ec <RCCEx_PLL3_Config>
 8009088:	4603      	mov	r3, r0
 800908a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800908e:	e008      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009096:	e004      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8009098:	bf00      	nop
 800909a:	e002      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800909c:	bf00      	nop
 800909e:	e000      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80090a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d110      	bne.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80090ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090b0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80090b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090bc:	4a02      	ldr	r2, [pc, #8]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80090be:	430b      	orrs	r3, r1
 80090c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80090c4:	e006      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80090c6:	bf00      	nop
 80090c8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80090d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80090d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	2100      	movs	r1, #0
 80090de:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80090e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4313      	orrs	r3, r2
 80090f2:	d03d      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80090f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009100:	d01b      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009102:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009106:	d814      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8009108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800910c:	d017      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800910e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009112:	d80e      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8009114:	2b00      	cmp	r3, #0
 8009116:	d014      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8009118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800911c:	d109      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800911e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009122:	3330      	adds	r3, #48	; 0x30
 8009124:	4618      	mov	r0, r3
 8009126:	f004 f961 	bl	800d3ec <RCCEx_PLL3_Config>
 800912a:	4603      	mov	r3, r0
 800912c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8009130:	e008      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009138:	e004      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800913a:	bf00      	nop
 800913c:	e002      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800913e:	bf00      	nop
 8009140:	e000      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8009142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009144:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10d      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800914c:	4bbe      	ldr	r3, [pc, #760]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800914e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009152:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009156:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800915a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800915e:	4aba      	ldr	r2, [pc, #744]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009160:	430b      	orrs	r3, r1
 8009162:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009166:	e003      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009168:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800916c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8009170:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800917c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009180:	2300      	movs	r3, #0
 8009182:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009186:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800918a:	460b      	mov	r3, r1
 800918c:	4313      	orrs	r3, r2
 800918e:	d035      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8009190:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009194:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800919c:	d015      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800919e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091a2:	d80e      	bhi.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d012      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80091a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091ac:	d109      	bne.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091b2:	3330      	adds	r3, #48	; 0x30
 80091b4:	4618      	mov	r0, r3
 80091b6:	f004 f919 	bl	800d3ec <RCCEx_PLL3_Config>
 80091ba:	4603      	mov	r3, r0
 80091bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80091c0:	e006      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80091c8:	e002      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80091ca:	bf00      	nop
 80091cc:	e000      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80091ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10d      	bne.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80091d8:	4b9b      	ldr	r3, [pc, #620]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80091da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80091de:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80091e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091ea:	4a97      	ldr	r2, [pc, #604]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80091ec:	430b      	orrs	r3, r1
 80091ee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80091f2:	e003      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091f8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80091fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	2100      	movs	r1, #0
 8009206:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800920a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800920e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009212:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009216:	460b      	mov	r3, r1
 8009218:	4313      	orrs	r3, r2
 800921a:	d00e      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800921c:	4b8a      	ldr	r3, [pc, #552]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	4a89      	ldr	r2, [pc, #548]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009222:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009226:	61d3      	str	r3, [r2, #28]
 8009228:	4b87      	ldr	r3, [pc, #540]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800922a:	69d9      	ldr	r1, [r3, #28]
 800922c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009230:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009234:	4a84      	ldr	r2, [pc, #528]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009236:	430b      	orrs	r3, r1
 8009238:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800923a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800924a:	2300      	movs	r3, #0
 800924c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009250:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009254:	460b      	mov	r3, r1
 8009256:	4313      	orrs	r3, r2
 8009258:	d055      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800925a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800925e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009262:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009266:	d031      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8009268:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800926c:	d82a      	bhi.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800926e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009272:	d02d      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8009274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009278:	d824      	bhi.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800927a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800927e:	d029      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8009280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009284:	d81e      	bhi.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800928a:	d011      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800928c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009290:	d818      	bhi.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d020      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8009296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800929a:	d113      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800929c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092a0:	3308      	adds	r3, #8
 80092a2:	4618      	mov	r0, r3
 80092a4:	f004 f80a 	bl	800d2bc <RCCEx_PLL2_Config>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80092ae:	e014      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80092b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092b4:	3330      	adds	r3, #48	; 0x30
 80092b6:	4618      	mov	r0, r3
 80092b8:	f004 f898 	bl	800d3ec <RCCEx_PLL3_Config>
 80092bc:	4603      	mov	r3, r0
 80092be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80092c2:	e00a      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80092ca:	e006      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80092cc:	bf00      	nop
 80092ce:	e004      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80092d0:	bf00      	nop
 80092d2:	e002      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80092d4:	bf00      	nop
 80092d6:	e000      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80092d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10d      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80092e2:	4b59      	ldr	r3, [pc, #356]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80092e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80092e8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80092ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092f4:	4a54      	ldr	r2, [pc, #336]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80092f6:	430b      	orrs	r3, r1
 80092f8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80092fc:	e003      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009302:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009306:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009312:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009316:	2300      	movs	r3, #0
 8009318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800931c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009320:	460b      	mov	r3, r1
 8009322:	4313      	orrs	r3, r2
 8009324:	d055      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8009326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800932a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800932e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009332:	d031      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8009334:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009338:	d82a      	bhi.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800933a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800933e:	d02d      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8009340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009344:	d824      	bhi.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009346:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800934a:	d029      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800934c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009350:	d81e      	bhi.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009356:	d011      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8009358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800935c:	d818      	bhi.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d020      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009366:	d113      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009368:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800936c:	3308      	adds	r3, #8
 800936e:	4618      	mov	r0, r3
 8009370:	f003 ffa4 	bl	800d2bc <RCCEx_PLL2_Config>
 8009374:	4603      	mov	r3, r0
 8009376:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800937a:	e014      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800937c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009380:	3330      	adds	r3, #48	; 0x30
 8009382:	4618      	mov	r0, r3
 8009384:	f004 f832 	bl	800d3ec <RCCEx_PLL3_Config>
 8009388:	4603      	mov	r3, r0
 800938a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800938e:	e00a      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009396:	e006      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009398:	bf00      	nop
 800939a:	e004      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800939c:	bf00      	nop
 800939e:	e002      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80093a0:	bf00      	nop
 80093a2:	e000      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80093a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10d      	bne.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80093ae:	4b26      	ldr	r3, [pc, #152]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80093b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80093b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80093b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80093c0:	4a21      	ldr	r2, [pc, #132]	; (8009448 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80093c2:	430b      	orrs	r3, r1
 80093c4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80093c8:	e003      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80093ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80093d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	2100      	movs	r1, #0
 80093dc:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80093e0:	f003 0320 	and.w	r3, r3, #32
 80093e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093ec:	460b      	mov	r3, r1
 80093ee:	4313      	orrs	r3, r2
 80093f0:	d057      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80093f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80093fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093fe:	d033      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8009400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009404:	d82c      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009406:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800940a:	d02f      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800940c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009410:	d826      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009412:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009416:	d02b      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8009418:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800941c:	d820      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800941e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009422:	d013      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009428:	d81a      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d022      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800942e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009432:	d115      	bne.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009434:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009438:	3308      	adds	r3, #8
 800943a:	4618      	mov	r0, r3
 800943c:	f003 ff3e 	bl	800d2bc <RCCEx_PLL2_Config>
 8009440:	4603      	mov	r3, r0
 8009442:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8009446:	e016      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8009448:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800944c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009450:	3330      	adds	r3, #48	; 0x30
 8009452:	4618      	mov	r0, r3
 8009454:	f003 ffca 	bl	800d3ec <RCCEx_PLL3_Config>
 8009458:	4603      	mov	r3, r0
 800945a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800945e:	e00a      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009466:	e006      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009468:	bf00      	nop
 800946a:	e004      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800946c:	bf00      	nop
 800946e:	e002      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009470:	bf00      	nop
 8009472:	e000      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009476:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10d      	bne.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800947e:	4bbb      	ldr	r3, [pc, #748]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009480:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009484:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009488:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800948c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009490:	4ab6      	ldr	r2, [pc, #728]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009492:	430b      	orrs	r3, r1
 8009494:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009498:	e003      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800949a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800949e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80094a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094aa:	2100      	movs	r1, #0
 80094ac:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80094b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80094b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80094bc:	460b      	mov	r3, r1
 80094be:	4313      	orrs	r3, r2
 80094c0:	d055      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80094c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094ca:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80094ce:	d031      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80094d0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80094d4:	d82a      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80094d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094da:	d02d      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80094dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094e0:	d824      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80094e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094e6:	d029      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80094e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094ec:	d81e      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80094ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094f2:	d011      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80094f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094f8:	d818      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d020      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80094fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009502:	d113      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009504:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009508:	3308      	adds	r3, #8
 800950a:	4618      	mov	r0, r3
 800950c:	f003 fed6 	bl	800d2bc <RCCEx_PLL2_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8009516:	e014      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009518:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800951c:	3330      	adds	r3, #48	; 0x30
 800951e:	4618      	mov	r0, r3
 8009520:	f003 ff64 	bl	800d3ec <RCCEx_PLL3_Config>
 8009524:	4603      	mov	r3, r0
 8009526:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800952a:	e00a      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009532:	e006      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009534:	bf00      	nop
 8009536:	e004      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009538:	bf00      	nop
 800953a:	e002      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800953c:	bf00      	nop
 800953e:	e000      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009542:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10d      	bne.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800954a:	4b88      	ldr	r3, [pc, #544]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800954c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009550:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8009554:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800955c:	4a83      	ldr	r2, [pc, #524]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800955e:	430b      	orrs	r3, r1
 8009560:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009564:	e003      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009566:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800956a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800956e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	2100      	movs	r1, #0
 8009578:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800957c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009584:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009588:	460b      	mov	r3, r1
 800958a:	4313      	orrs	r3, r2
 800958c:	d055      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800958e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009596:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800959a:	d031      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800959c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80095a0:	d82a      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80095a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095a6:	d02d      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80095a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095ac:	d824      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80095ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095b2:	d029      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80095b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095b8:	d81e      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80095ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095be:	d011      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80095c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095c4:	d818      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d020      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80095ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095ce:	d113      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80095d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095d4:	3308      	adds	r3, #8
 80095d6:	4618      	mov	r0, r3
 80095d8:	f003 fe70 	bl	800d2bc <RCCEx_PLL2_Config>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80095e2:	e014      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80095e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095e8:	3330      	adds	r3, #48	; 0x30
 80095ea:	4618      	mov	r0, r3
 80095ec:	f003 fefe 	bl	800d3ec <RCCEx_PLL3_Config>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80095f6:	e00a      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80095fe:	e006      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009600:	bf00      	nop
 8009602:	e004      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009604:	bf00      	nop
 8009606:	e002      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009608:	bf00      	nop
 800960a:	e000      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800960c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800960e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10d      	bne.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8009616:	4b55      	ldr	r3, [pc, #340]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009618:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800961c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009620:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009624:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009628:	4a50      	ldr	r2, [pc, #320]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800962a:	430b      	orrs	r3, r1
 800962c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009630:	e003      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009632:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009636:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800963a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	2100      	movs	r1, #0
 8009644:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8009648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009650:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009654:	460b      	mov	r3, r1
 8009656:	4313      	orrs	r3, r2
 8009658:	d055      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800965a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800965e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009666:	d031      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8009668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800966c:	d82a      	bhi.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800966e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009672:	d02d      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8009674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009678:	d824      	bhi.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800967a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800967e:	d029      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8009680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009684:	d81e      	bhi.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800968a:	d011      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800968c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009690:	d818      	bhi.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d020      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8009696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800969a:	d113      	bne.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800969c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096a0:	3308      	adds	r3, #8
 80096a2:	4618      	mov	r0, r3
 80096a4:	f003 fe0a 	bl	800d2bc <RCCEx_PLL2_Config>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80096ae:	e014      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80096b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096b4:	3330      	adds	r3, #48	; 0x30
 80096b6:	4618      	mov	r0, r3
 80096b8:	f003 fe98 	bl	800d3ec <RCCEx_PLL3_Config>
 80096bc:	4603      	mov	r3, r0
 80096be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80096c2:	e00a      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80096ca:	e006      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80096cc:	bf00      	nop
 80096ce:	e004      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80096d0:	bf00      	nop
 80096d2:	e002      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80096d4:	bf00      	nop
 80096d6:	e000      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80096d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10d      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80096e2:	4b22      	ldr	r3, [pc, #136]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80096e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80096e8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80096ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80096f4:	4a1d      	ldr	r2, [pc, #116]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80096f6:	430b      	orrs	r3, r1
 80096f8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80096fc:	e003      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009702:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009706:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009716:	2300      	movs	r3, #0
 8009718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800971c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009720:	460b      	mov	r3, r1
 8009722:	4313      	orrs	r3, r2
 8009724:	d055      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009726:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800972a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800972e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009732:	d035      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8009734:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009738:	d82e      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800973a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800973e:	d031      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8009740:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009744:	d828      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800974a:	d01b      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800974c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009750:	d822      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8009756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800975a:	d009      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800975c:	e01c      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800975e:	4b03      	ldr	r3, [pc, #12]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009762:	4a02      	ldr	r2, [pc, #8]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009768:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800976a:	e01c      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800976c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009770:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009774:	3308      	adds	r3, #8
 8009776:	4618      	mov	r0, r3
 8009778:	f003 fda0 	bl	800d2bc <RCCEx_PLL2_Config>
 800977c:	4603      	mov	r3, r0
 800977e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009782:	e010      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009784:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009788:	3330      	adds	r3, #48	; 0x30
 800978a:	4618      	mov	r0, r3
 800978c:	f003 fe2e 	bl	800d3ec <RCCEx_PLL3_Config>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009796:	e006      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800979e:	e002      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80097a0:	bf00      	nop
 80097a2:	e000      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80097a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10d      	bne.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80097ae:	4bc3      	ldr	r3, [pc, #780]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80097b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80097b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80097b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80097c0:	4abe      	ldr	r2, [pc, #760]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80097c2:	430b      	orrs	r3, r1
 80097c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80097c8:	e003      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80097ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80097d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80097de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097e2:	2300      	movs	r3, #0
 80097e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097e8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80097ec:	460b      	mov	r3, r1
 80097ee:	4313      	orrs	r3, r2
 80097f0:	d051      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80097f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80097fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097fe:	d033      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8009800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009804:	d82c      	bhi.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009806:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800980a:	d02d      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800980c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009810:	d826      	bhi.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009816:	d019      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8009818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800981c:	d820      	bhi.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8009822:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009826:	d007      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8009828:	e01a      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800982a:	4ba4      	ldr	r3, [pc, #656]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800982c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982e:	4aa3      	ldr	r2, [pc, #652]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009834:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009836:	e018      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800983c:	3308      	adds	r3, #8
 800983e:	4618      	mov	r0, r3
 8009840:	f003 fd3c 	bl	800d2bc <RCCEx_PLL2_Config>
 8009844:	4603      	mov	r3, r0
 8009846:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800984a:	e00e      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800984c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009850:	3330      	adds	r3, #48	; 0x30
 8009852:	4618      	mov	r0, r3
 8009854:	f003 fdca 	bl	800d3ec <RCCEx_PLL3_Config>
 8009858:	4603      	mov	r3, r0
 800985a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800985e:	e004      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009866:	e000      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8009868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800986a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10d      	bne.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009872:	4b92      	ldr	r3, [pc, #584]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009878:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 800987c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009880:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009884:	4a8d      	ldr	r2, [pc, #564]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009886:	430b      	orrs	r3, r1
 8009888:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800988c:	e003      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009892:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009896:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80098a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80098a4:	2300      	movs	r3, #0
 80098a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80098ac:	460b      	mov	r3, r1
 80098ae:	4313      	orrs	r3, r2
 80098b0:	d032      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80098b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	d80f      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d211      	bcs.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d911      	bls.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d109      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098ce:	3308      	adds	r3, #8
 80098d0:	4618      	mov	r0, r3
 80098d2:	f003 fcf3 	bl	800d2bc <RCCEx_PLL2_Config>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80098dc:	e006      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80098e4:	e002      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80098e6:	bf00      	nop
 80098e8:	e000      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80098ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10d      	bne.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80098f4:	4b71      	ldr	r3, [pc, #452]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80098f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098fa:	f023 0107 	bic.w	r1, r3, #7
 80098fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009902:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009906:	4a6d      	ldr	r2, [pc, #436]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009908:	430b      	orrs	r3, r1
 800990a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800990e:	e003      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009910:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009914:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8009918:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	2100      	movs	r1, #0
 8009922:	6739      	str	r1, [r7, #112]	; 0x70
 8009924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009928:	677b      	str	r3, [r7, #116]	; 0x74
 800992a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800992e:	460b      	mov	r3, r1
 8009930:	4313      	orrs	r3, r2
 8009932:	d024      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8009934:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800993c:	2b00      	cmp	r3, #0
 800993e:	d005      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8009940:	2b08      	cmp	r3, #8
 8009942:	d005      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800994a:	e002      	b.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800994c:	bf00      	nop
 800994e:	e000      	b.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8009950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009952:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10d      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800995a:	4b58      	ldr	r3, [pc, #352]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800995c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009960:	f023 0108 	bic.w	r1, r3, #8
 8009964:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800996c:	4a53      	ldr	r2, [pc, #332]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800996e:	430b      	orrs	r3, r1
 8009970:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009974:	e003      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800997a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800997e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800998a:	66bb      	str	r3, [r7, #104]	; 0x68
 800998c:	2300      	movs	r3, #0
 800998e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009990:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009994:	460b      	mov	r3, r1
 8009996:	4313      	orrs	r3, r2
 8009998:	f000 80b9 	beq.w	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800999c:	4b48      	ldr	r3, [pc, #288]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	4a47      	ldr	r2, [pc, #284]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099a8:	f7fa fbd6 	bl	8004158 <HAL_GetTick>
 80099ac:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80099b0:	e00b      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099b2:	f7fa fbd1 	bl	8004158 <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d903      	bls.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80099c2:	2303      	movs	r3, #3
 80099c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80099c8:	e005      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80099ca:	4b3d      	ldr	r3, [pc, #244]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0ed      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80099d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f040 8093 	bne.w	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80099e0:	4b36      	ldr	r3, [pc, #216]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80099e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80099ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d023      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80099f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099fa:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80099fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d01b      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a06:	4b2d      	ldr	r3, [pc, #180]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a10:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a14:	4b29      	ldr	r3, [pc, #164]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a1a:	4a28      	ldr	r2, [pc, #160]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a24:	4b25      	ldr	r3, [pc, #148]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a2a:	4a24      	ldr	r2, [pc, #144]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a34:	4a21      	ldr	r2, [pc, #132]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009a3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d019      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a4a:	f7fa fb85 	bl	8004158 <HAL_GetTick>
 8009a4e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a52:	e00d      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a54:	f7fa fb80 	bl	8004158 <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009a5e:	1ad2      	subs	r2, r2, r3
 8009a60:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d903      	bls.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8009a6e:	e006      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a70:	4b12      	ldr	r3, [pc, #72]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0ea      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8009a7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d13a      	bne.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009a86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a8a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a96:	d115      	bne.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8009a98:	4b08      	ldr	r3, [pc, #32]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009aa4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009aa8:	091b      	lsrs	r3, r3, #4
 8009aaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009aae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009ab2:	4a02      	ldr	r2, [pc, #8]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009ab4:	430b      	orrs	r3, r1
 8009ab6:	61d3      	str	r3, [r2, #28]
 8009ab8:	e00a      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8009aba:	bf00      	nop
 8009abc:	44020c00 	.word	0x44020c00
 8009ac0:	44020800 	.word	0x44020800
 8009ac4:	4b9f      	ldr	r3, [pc, #636]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	4a9e      	ldr	r2, [pc, #632]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009aca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009ace:	61d3      	str	r3, [r2, #28]
 8009ad0:	4b9c      	ldr	r3, [pc, #624]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ad6:	4a9b      	ldr	r2, [pc, #620]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009adc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009ae0:	4b98      	ldr	r3, [pc, #608]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ae2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8009ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009aea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009af2:	4a94      	ldr	r2, [pc, #592]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009af4:	430b      	orrs	r3, r1
 8009af6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009afa:	e008      	b.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009afc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b00:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8009b04:	e003      	b.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b0a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	667b      	str	r3, [r7, #100]	; 0x64
 8009b20:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009b24:	460b      	mov	r3, r1
 8009b26:	4313      	orrs	r3, r2
 8009b28:	d035      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009b32:	2b30      	cmp	r3, #48	; 0x30
 8009b34:	d014      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8009b36:	2b30      	cmp	r3, #48	; 0x30
 8009b38:	d80e      	bhi.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d012      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	d80a      	bhi.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d010      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8009b46:	2b10      	cmp	r3, #16
 8009b48:	d106      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b4a:	4b7e      	ldr	r3, [pc, #504]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	4a7d      	ldr	r2, [pc, #500]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b54:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8009b56:	e008      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009b5e:	e004      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009b60:	bf00      	nop
 8009b62:	e002      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009b64:	bf00      	nop
 8009b66:	e000      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10d      	bne.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009b72:	4b74      	ldr	r3, [pc, #464]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b78:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b80:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009b84:	4a6f      	ldr	r2, [pc, #444]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009b86:	430b      	orrs	r3, r1
 8009b88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b8c:	e003      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b92:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009ba2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ba8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009bac:	460b      	mov	r3, r1
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	d033      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8009bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bb6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8009bbe:	2b40      	cmp	r3, #64	; 0x40
 8009bc0:	d007      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8009bc2:	e010      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bc4:	4b5f      	ldr	r3, [pc, #380]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc8:	4a5e      	ldr	r2, [pc, #376]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bce:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009bd0:	e00d      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009bd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f003 fb6f 	bl	800d2bc <RCCEx_PLL2_Config>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009be4:	e003      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10d      	bne.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8009bf6:	4b53      	ldr	r3, [pc, #332]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009bf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009bfc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8009c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c04:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009c08:	4a4e      	ldr	r2, [pc, #312]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009c10:	e003      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c16:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009c26:	653b      	str	r3, [r7, #80]	; 0x50
 8009c28:	2300      	movs	r3, #0
 8009c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8009c2c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009c30:	460b      	mov	r3, r1
 8009c32:	4313      	orrs	r3, r2
 8009c34:	d033      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8009c36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8009c42:	2b80      	cmp	r3, #128	; 0x80
 8009c44:	d007      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8009c46:	e010      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c48:	4b3e      	ldr	r3, [pc, #248]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4c:	4a3d      	ldr	r2, [pc, #244]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c52:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8009c54:	e00d      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f003 fb2d 	bl	800d2bc <RCCEx_PLL2_Config>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8009c68:	e003      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10d      	bne.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8009c7a:	4b32      	ldr	r3, [pc, #200]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009c7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c80:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c88:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009c8c:	4a2d      	ldr	r2, [pc, #180]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009c8e:	430b      	orrs	r3, r1
 8009c90:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009c94:	e003      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c9a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8009caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cac:	2300      	movs	r3, #0
 8009cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	d04a      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8009cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	d827      	bhi.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8009cc6:	a201      	add	r2, pc, #4	; (adr r2, 8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8009cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ccc:	08009ce1 	.word	0x08009ce1
 8009cd0:	08009cef 	.word	0x08009cef
 8009cd4:	08009d03 	.word	0x08009d03
 8009cd8:	08009d1f 	.word	0x08009d1f
 8009cdc:	08009d1f 	.word	0x08009d1f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ce0:	4b18      	ldr	r3, [pc, #96]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce4:	4a17      	ldr	r2, [pc, #92]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cea:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009cec:	e018      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009cee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f003 fae1 	bl	800d2bc <RCCEx_PLL2_Config>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009d00:	e00e      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d06:	3330      	adds	r3, #48	; 0x30
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f003 fb6f 	bl	800d3ec <RCCEx_PLL3_Config>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009d14:	e004      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009d1c:	e000      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8009d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10f      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009d28:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d2e:	f023 0107 	bic.w	r1, r3, #7
 8009d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d3a:	4a02      	ldr	r2, [pc, #8]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d42:	e005      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8009d44:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d4c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8009d5e:	2300      	movs	r3, #0
 8009d60:	647b      	str	r3, [r7, #68]	; 0x44
 8009d62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009d66:	460b      	mov	r3, r1
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	f000 8081 	beq.w	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8009d6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009d76:	2b20      	cmp	r3, #32
 8009d78:	d85f      	bhi.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8009d7a:	a201      	add	r2, pc, #4	; (adr r2, 8009d80 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8009d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d80:	08009e05 	.word	0x08009e05
 8009d84:	08009e3b 	.word	0x08009e3b
 8009d88:	08009e3b 	.word	0x08009e3b
 8009d8c:	08009e3b 	.word	0x08009e3b
 8009d90:	08009e3b 	.word	0x08009e3b
 8009d94:	08009e3b 	.word	0x08009e3b
 8009d98:	08009e3b 	.word	0x08009e3b
 8009d9c:	08009e3b 	.word	0x08009e3b
 8009da0:	08009e13 	.word	0x08009e13
 8009da4:	08009e3b 	.word	0x08009e3b
 8009da8:	08009e3b 	.word	0x08009e3b
 8009dac:	08009e3b 	.word	0x08009e3b
 8009db0:	08009e3b 	.word	0x08009e3b
 8009db4:	08009e3b 	.word	0x08009e3b
 8009db8:	08009e3b 	.word	0x08009e3b
 8009dbc:	08009e3b 	.word	0x08009e3b
 8009dc0:	08009e27 	.word	0x08009e27
 8009dc4:	08009e3b 	.word	0x08009e3b
 8009dc8:	08009e3b 	.word	0x08009e3b
 8009dcc:	08009e3b 	.word	0x08009e3b
 8009dd0:	08009e3b 	.word	0x08009e3b
 8009dd4:	08009e3b 	.word	0x08009e3b
 8009dd8:	08009e3b 	.word	0x08009e3b
 8009ddc:	08009e3b 	.word	0x08009e3b
 8009de0:	08009e43 	.word	0x08009e43
 8009de4:	08009e3b 	.word	0x08009e3b
 8009de8:	08009e3b 	.word	0x08009e3b
 8009dec:	08009e3b 	.word	0x08009e3b
 8009df0:	08009e3b 	.word	0x08009e3b
 8009df4:	08009e3b 	.word	0x08009e3b
 8009df8:	08009e3b 	.word	0x08009e3b
 8009dfc:	08009e3b 	.word	0x08009e3b
 8009e00:	08009e43 	.word	0x08009e43
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e04:	4bab      	ldr	r3, [pc, #684]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e08:	4aaa      	ldr	r2, [pc, #680]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e0e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009e10:	e018      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e16:	3308      	adds	r3, #8
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f003 fa4f 	bl	800d2bc <RCCEx_PLL2_Config>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009e24:	e00e      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e2a:	3330      	adds	r3, #48	; 0x30
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f003 fadd 	bl	800d3ec <RCCEx_PLL3_Config>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009e38:	e004      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009e40:	e000      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8009e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10d      	bne.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009e4c:	4b99      	ldr	r3, [pc, #612]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e52:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e5e:	4a95      	ldr	r2, [pc, #596]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009e60:	430b      	orrs	r3, r1
 8009e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e66:	e003      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009e7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e7e:	2300      	movs	r3, #0
 8009e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009e86:	460b      	mov	r3, r1
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	d04e      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8009e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e98:	d02e      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8009e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9e:	d827      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009ea0:	2bc0      	cmp	r3, #192	; 0xc0
 8009ea2:	d02b      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8009ea4:	2bc0      	cmp	r3, #192	; 0xc0
 8009ea6:	d823      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009ea8:	2b80      	cmp	r3, #128	; 0x80
 8009eaa:	d017      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8009eac:	2b80      	cmp	r3, #128	; 0x80
 8009eae:	d81f      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d002      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8009eb4:	2b40      	cmp	r3, #64	; 0x40
 8009eb6:	d007      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8009eb8:	e01a      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eba:	4b7e      	ldr	r3, [pc, #504]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebe:	4a7d      	ldr	r2, [pc, #500]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ec4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009ec6:	e01a      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ecc:	3308      	adds	r3, #8
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f003 f9f4 	bl	800d2bc <RCCEx_PLL2_Config>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009eda:	e010      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ee0:	3330      	adds	r3, #48	; 0x30
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f003 fa82 	bl	800d3ec <RCCEx_PLL3_Config>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009eee:	e006      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009ef6:	e002      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8009ef8:	bf00      	nop
 8009efa:	e000      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8009efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009efe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10d      	bne.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009f06:	4b6b      	ldr	r3, [pc, #428]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f0c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f18:	4a66      	ldr	r2, [pc, #408]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009f1a:	430b      	orrs	r3, r1
 8009f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f20:	e003      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8009f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009f36:	633b      	str	r3, [r7, #48]	; 0x30
 8009f38:	2300      	movs	r3, #0
 8009f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009f40:	460b      	mov	r3, r1
 8009f42:	4313      	orrs	r3, r2
 8009f44:	d055      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8009f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009f4e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009f52:	d031      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8009f54:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009f58:	d82a      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f5e:	d02d      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8009f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f64:	d824      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009f66:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009f6a:	d029      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8009f6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009f70:	d81e      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f76:	d011      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8009f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f7c:	d818      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d020      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8009f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f86:	d113      	bne.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f003 f994 	bl	800d2bc <RCCEx_PLL2_Config>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8009f9a:	e014      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009fa0:	3330      	adds	r3, #48	; 0x30
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f003 fa22 	bl	800d3ec <RCCEx_PLL3_Config>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8009fae:	e00a      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009fb6:	e006      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009fb8:	bf00      	nop
 8009fba:	e004      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009fbc:	bf00      	nop
 8009fbe:	e002      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009fc0:	bf00      	nop
 8009fc2:	e000      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10d      	bne.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8009fce:	4b39      	ldr	r3, [pc, #228]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fd4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8009fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009fdc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009fe0:	4a34      	ldr	r2, [pc, #208]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009fe8:	e003      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009fee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8009ff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 800a000:	2300      	movs	r3, #0
 800a002:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a004:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a008:	460b      	mov	r3, r1
 800a00a:	4313      	orrs	r3, r2
 800a00c:	d058      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800a00e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a016:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a01a:	d031      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800a01c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a020:	d82a      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a026:	d02d      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800a028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a02c:	d824      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a02e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a032:	d029      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800a034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a038:	d81e      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a03e:	d011      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800a040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a044:	d818      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d020      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800a04a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a04e:	d113      	bne.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a050:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a054:	3308      	adds	r3, #8
 800a056:	4618      	mov	r0, r3
 800a058:	f003 f930 	bl	800d2bc <RCCEx_PLL2_Config>
 800a05c:	4603      	mov	r3, r0
 800a05e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800a062:	e014      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a068:	3330      	adds	r3, #48	; 0x30
 800a06a:	4618      	mov	r0, r3
 800a06c:	f003 f9be 	bl	800d3ec <RCCEx_PLL3_Config>
 800a070:	4603      	mov	r3, r0
 800a072:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800a076:	e00a      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a07e:	e006      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a080:	bf00      	nop
 800a082:	e004      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a084:	bf00      	nop
 800a086:	e002      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a088:	bf00      	nop
 800a08a:	e000      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a08c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a08e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a092:	2b00      	cmp	r3, #0
 800a094:	d110      	bne.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800a096:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a09c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a0a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a0a8:	4902      	ldr	r1, [pc, #8]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a0b0:	e006      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800a0b2:	bf00      	nop
 800a0b4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a0bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a0c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	6239      	str	r1, [r7, #32]
 800a0cc:	f003 0301 	and.w	r3, r3, #1
 800a0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	d055      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800a0dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0e4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800a0e8:	d031      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800a0ea:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800a0ee:	d82a      	bhi.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a0f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0f4:	d02d      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800a0f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0fa:	d824      	bhi.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a0fc:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800a100:	d029      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800a102:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800a106:	d81e      	bhi.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a10c:	d011      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800a10e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a112:	d818      	bhi.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a114:	2b00      	cmp	r3, #0
 800a116:	d020      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800a118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a11c:	d113      	bne.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a11e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a122:	3308      	adds	r3, #8
 800a124:	4618      	mov	r0, r3
 800a126:	f003 f8c9 	bl	800d2bc <RCCEx_PLL2_Config>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a130:	e014      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a132:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a136:	3330      	adds	r3, #48	; 0x30
 800a138:	4618      	mov	r0, r3
 800a13a:	f003 f957 	bl	800d3ec <RCCEx_PLL3_Config>
 800a13e:	4603      	mov	r3, r0
 800a140:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a144:	e00a      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a14c:	e006      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a14e:	bf00      	nop
 800a150:	e004      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a152:	bf00      	nop
 800a154:	e002      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a156:	bf00      	nop
 800a158:	e000      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a15a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a15c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10d      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800a164:	4b88      	ldr	r3, [pc, #544]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a16a:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800a16e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a176:	4984      	ldr	r1, [pc, #528]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a17e:	e003      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a180:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a184:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a188:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	2100      	movs	r1, #0
 800a192:	61b9      	str	r1, [r7, #24]
 800a194:	f003 0302 	and.w	r3, r3, #2
 800a198:	61fb      	str	r3, [r7, #28]
 800a19a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	d03d      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800a1a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a1a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d81c      	bhi.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800a1b0:	a201      	add	r2, pc, #4	; (adr r2, 800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800a1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b6:	bf00      	nop
 800a1b8:	0800a1f3 	.word	0x0800a1f3
 800a1bc:	0800a1c9 	.word	0x0800a1c9
 800a1c0:	0800a1d7 	.word	0x0800a1d7
 800a1c4:	0800a1f3 	.word	0x0800a1f3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1c8:	4b6f      	ldr	r3, [pc, #444]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1cc:	4a6e      	ldr	r2, [pc, #440]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a1ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1d2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a1d4:	e00e      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a1d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a1da:	3308      	adds	r3, #8
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f003 f86d 	bl	800d2bc <RCCEx_PLL2_Config>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800a1e8:	e004      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a1f0:	e000      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800a1f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10d      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a1fc:	4b62      	ldr	r3, [pc, #392]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a1fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a202:	f023 0203 	bic.w	r2, r3, #3
 800a206:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a20a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a20e:	495e      	ldr	r1, [pc, #376]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a210:	4313      	orrs	r3, r2
 800a212:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a216:	e003      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a218:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a21c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a220:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	2100      	movs	r1, #0
 800a22a:	6139      	str	r1, [r7, #16]
 800a22c:	f003 0304 	and.w	r3, r3, #4
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a236:	460b      	mov	r3, r1
 800a238:	4313      	orrs	r3, r2
 800a23a:	d03a      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800a23c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a240:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a248:	d00e      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800a24a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a24e:	d815      	bhi.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800a250:	2b00      	cmp	r3, #0
 800a252:	d017      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800a254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a258:	d110      	bne.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a25a:	4b4b      	ldr	r3, [pc, #300]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25e:	4a4a      	ldr	r2, [pc, #296]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a264:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800a266:	e00e      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a268:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a26c:	3308      	adds	r3, #8
 800a26e:	4618      	mov	r0, r3
 800a270:	f003 f824 	bl	800d2bc <RCCEx_PLL2_Config>
 800a274:	4603      	mov	r3, r0
 800a276:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800a27a:	e004      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a282:	e000      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800a284:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a286:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10d      	bne.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800a28e:	4b3e      	ldr	r3, [pc, #248]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a29c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a2a0:	4939      	ldr	r1, [pc, #228]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800a2a8:	e003      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a2ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	f003 0310 	and.w	r3, r3, #16
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	d038      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800a2ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a2d6:	2b30      	cmp	r3, #48	; 0x30
 800a2d8:	d01b      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800a2da:	2b30      	cmp	r3, #48	; 0x30
 800a2dc:	d815      	bhi.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	d002      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800a2e2:	2b20      	cmp	r3, #32
 800a2e4:	d007      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800a2e6:	e010      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e8:	4b27      	ldr	r3, [pc, #156]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	4a26      	ldr	r2, [pc, #152]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a2ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2f2:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2f4:	e00e      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a2f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2fa:	3330      	adds	r3, #48	; 0x30
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f003 f875 	bl	800d3ec <RCCEx_PLL3_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800a308:	e004      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a310:	e000      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800a312:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a314:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10d      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800a31c:	4b1a      	ldr	r3, [pc, #104]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a31e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a322:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a326:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a32a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a32e:	4916      	ldr	r1, [pc, #88]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a330:	4313      	orrs	r3, r2
 800a332:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a336:	e003      	b.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a338:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a33c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a340:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	2100      	movs	r1, #0
 800a34a:	6039      	str	r1, [r7, #0]
 800a34c:	f003 0308 	and.w	r3, r3, #8
 800a350:	607b      	str	r3, [r7, #4]
 800a352:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a356:	460b      	mov	r3, r1
 800a358:	4313      	orrs	r3, r2
 800a35a:	d00c      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800a35c:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a35e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a366:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a36a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a36e:	4906      	ldr	r1, [pc, #24]	; (800a388 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a370:	4313      	orrs	r3, r2
 800a372:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800a376:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a380:	46bd      	mov	sp, r7
 800a382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a386:	bf00      	nop
 800a388:	44020c00 	.word	0x44020c00

0800a38c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b08b      	sub	sp, #44	; 0x2c
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a394:	4bad      	ldr	r3, [pc, #692]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a39e:	4bab      	ldr	r3, [pc, #684]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	f003 0303 	and.w	r3, r3, #3
 800a3a6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800a3a8:	4ba8      	ldr	r3, [pc, #672]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ac:	0a1b      	lsrs	r3, r3, #8
 800a3ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3b2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800a3b4:	4ba5      	ldr	r3, [pc, #660]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b8:	f003 0310 	and.w	r3, r3, #16
 800a3bc:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a3be:	4ba3      	ldr	r3, [pc, #652]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c2:	08db      	lsrs	r3, r3, #3
 800a3c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	fb02 f303 	mul.w	r3, r2, r3
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 8126 	beq.w	800a62e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d053      	beq.n	800a490 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d86f      	bhi.n	800a4ce <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d003      	beq.n	800a3fc <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d02b      	beq.n	800a452 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800a3fa:	e068      	b.n	800a4ce <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a3fc:	4b93      	ldr	r3, [pc, #588]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	08db      	lsrs	r3, r3, #3
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	4a92      	ldr	r2, [pc, #584]	; (800a650 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a408:	fa22 f303 	lsr.w	r3, r2, r3
 800a40c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	ee07 3a90 	vmov	s15, r3
 800a414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	ee07 3a90 	vmov	s15, r3
 800a42c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a430:	ed97 6a04 	vldr	s12, [r7, #16]
 800a434:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a654 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a43c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a44c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a450:	e068      	b.n	800a524 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	ee07 3a90 	vmov	s15, r3
 800a458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a45c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a658 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	ee07 3a90 	vmov	s15, r3
 800a46a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46e:	ed97 6a04 	vldr	s12, [r7, #16]
 800a472:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a654 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a47a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a47e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a48a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a48e:	e049      	b.n	800a524 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	ee07 3a90 	vmov	s15, r3
 800a496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a49a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a65c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800a49e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	ee07 3a90 	vmov	s15, r3
 800a4a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ac:	ed97 6a04 	vldr	s12, [r7, #16]
 800a4b0:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a654 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a4b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a4cc:	e02a      	b.n	800a524 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a4ce:	4b5f      	ldr	r3, [pc, #380]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	08db      	lsrs	r3, r3, #3
 800a4d4:	f003 0303 	and.w	r3, r3, #3
 800a4d8:	4a5d      	ldr	r2, [pc, #372]	; (800a650 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a4da:	fa22 f303 	lsr.w	r3, r2, r3
 800a4de:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	ee07 3a90 	vmov	s15, r3
 800a4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	ee07 3a90 	vmov	s15, r3
 800a4f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a502:	ed97 6a04 	vldr	s12, [r7, #16]
 800a506:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a654 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a50a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a50e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a51e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a522:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a524:	4b49      	ldr	r3, [pc, #292]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a52c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a530:	d121      	bne.n	800a576 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a532:	4b46      	ldr	r3, [pc, #280]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d017      	beq.n	800a56e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a53e:	4b43      	ldr	r3, [pc, #268]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a542:	0a5b      	lsrs	r3, r3, #9
 800a544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a548:	ee07 3a90 	vmov	s15, r3
 800a54c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800a550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a554:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a558:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a55c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a564:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	e006      	b.n	800a57c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	e002      	b.n	800a57c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a57c:	4b33      	ldr	r3, [pc, #204]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a588:	d121      	bne.n	800a5ce <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a58a:	4b30      	ldr	r3, [pc, #192]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d017      	beq.n	800a5c6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a596:	4b2d      	ldr	r3, [pc, #180]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59a:	0c1b      	lsrs	r3, r3, #16
 800a59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5a0:	ee07 3a90 	vmov	s15, r3
 800a5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a5a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a5b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a5b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5bc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	605a      	str	r2, [r3, #4]
 800a5c4:	e006      	b.n	800a5d4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	605a      	str	r2, [r3, #4]
 800a5cc:	e002      	b.n	800a5d4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5d4:	4b1d      	ldr	r3, [pc, #116]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5e0:	d121      	bne.n	800a626 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a5e2:	4b1a      	ldr	r3, [pc, #104]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d017      	beq.n	800a61e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a5ee:	4b17      	ldr	r3, [pc, #92]	; (800a64c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5f2:	0e1b      	lsrs	r3, r3, #24
 800a5f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f8:	ee07 3a90 	vmov	s15, r3
 800a5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800a600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a604:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a608:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a60c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a614:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a61c:	e010      	b.n	800a640 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	609a      	str	r2, [r3, #8]
}
 800a624:	e00c      	b.n	800a640 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	609a      	str	r2, [r3, #8]
}
 800a62c:	e008      	b.n	800a640 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	609a      	str	r2, [r3, #8]
}
 800a640:	bf00      	nop
 800a642:	372c      	adds	r7, #44	; 0x2c
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	44020c00 	.word	0x44020c00
 800a650:	03d09000 	.word	0x03d09000
 800a654:	46000000 	.word	0x46000000
 800a658:	4a742400 	.word	0x4a742400
 800a65c:	4af42400 	.word	0x4af42400

0800a660 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800a660:	b480      	push	{r7}
 800a662:	b08b      	sub	sp, #44	; 0x2c
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a668:	4bad      	ldr	r3, [pc, #692]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a66a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a670:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a672:	4bab      	ldr	r3, [pc, #684]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a676:	f003 0303 	and.w	r3, r3, #3
 800a67a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800a67c:	4ba8      	ldr	r3, [pc, #672]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a680:	0a1b      	lsrs	r3, r3, #8
 800a682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a686:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800a688:	4ba5      	ldr	r3, [pc, #660]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68c:	f003 0310 	and.w	r3, r3, #16
 800a690:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a692:	4ba3      	ldr	r3, [pc, #652]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	08db      	lsrs	r3, r3, #3
 800a698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	fb02 f303 	mul.w	r3, r2, r3
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 8126 	beq.w	800a902 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d053      	beq.n	800a764 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d86f      	bhi.n	800a7a2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d003      	beq.n	800a6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d02b      	beq.n	800a726 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800a6ce:	e068      	b.n	800a7a2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6d0:	4b93      	ldr	r3, [pc, #588]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	08db      	lsrs	r3, r3, #3
 800a6d6:	f003 0303 	and.w	r3, r3, #3
 800a6da:	4a92      	ldr	r2, [pc, #584]	; (800a924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a6dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	ee07 3a90 	vmov	s15, r3
 800a6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	ee07 3a90 	vmov	s15, r3
 800a700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a704:	ed97 6a04 	vldr	s12, [r7, #16]
 800a708:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a928 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a70c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a71c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a720:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a724:	e068      	b.n	800a7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	ee07 3a90 	vmov	s15, r3
 800a72c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a730:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a92c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800a734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	ee07 3a90 	vmov	s15, r3
 800a73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a742:	ed97 6a04 	vldr	s12, [r7, #16]
 800a746:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a928 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a762:	e049      	b.n	800a7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76e:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a930 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800a772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a776:	6a3b      	ldr	r3, [r7, #32]
 800a778:	ee07 3a90 	vmov	s15, r3
 800a77c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a780:	ed97 6a04 	vldr	s12, [r7, #16]
 800a784:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a928 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a78c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a79c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a7a0:	e02a      	b.n	800a7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7a2:	4b5f      	ldr	r3, [pc, #380]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	08db      	lsrs	r3, r3, #3
 800a7a8:	f003 0303 	and.w	r3, r3, #3
 800a7ac:	4a5d      	ldr	r2, [pc, #372]	; (800a924 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a7ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	ee07 3a90 	vmov	s15, r3
 800a7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	ee07 3a90 	vmov	s15, r3
 800a7c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	ee07 3a90 	vmov	s15, r3
 800a7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d6:	ed97 6a04 	vldr	s12, [r7, #16]
 800a7da:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a928 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a7f6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7f8:	4b49      	ldr	r3, [pc, #292]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a804:	d121      	bne.n	800a84a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a806:	4b46      	ldr	r3, [pc, #280]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d017      	beq.n	800a842 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a812:	4b43      	ldr	r3, [pc, #268]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	0a5b      	lsrs	r3, r3, #9
 800a818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a81c:	ee07 3a90 	vmov	s15, r3
 800a820:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800a824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a828:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a82c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a838:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	e006      	b.n	800a850 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	e002      	b.n	800a850 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a850:	4b33      	ldr	r3, [pc, #204]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a85c:	d121      	bne.n	800a8a2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a85e:	4b30      	ldr	r3, [pc, #192]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a866:	2b00      	cmp	r3, #0
 800a868:	d017      	beq.n	800a89a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a86a:	4b2d      	ldr	r3, [pc, #180]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86e:	0c1b      	lsrs	r3, r3, #16
 800a870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a874:	ee07 3a90 	vmov	s15, r3
 800a878:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a87c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a880:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a884:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a88c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a890:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	605a      	str	r2, [r3, #4]
 800a898:	e006      	b.n	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	605a      	str	r2, [r3, #4]
 800a8a0:	e002      	b.n	800a8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8a8:	4b1d      	ldr	r3, [pc, #116]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8b4:	d121      	bne.n	800a8fa <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a8b6:	4b1a      	ldr	r3, [pc, #104]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d017      	beq.n	800a8f2 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a8c2:	4b17      	ldr	r3, [pc, #92]	; (800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c6:	0e1b      	lsrs	r3, r3, #24
 800a8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8cc:	ee07 3a90 	vmov	s15, r3
 800a8d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800a8d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8d8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a8dc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a8e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a8f0:	e010      	b.n	800a914 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	609a      	str	r2, [r3, #8]
}
 800a8f8:	e00c      	b.n	800a914 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	609a      	str	r2, [r3, #8]
}
 800a900:	e008      	b.n	800a914 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	609a      	str	r2, [r3, #8]
}
 800a914:	bf00      	nop
 800a916:	372c      	adds	r7, #44	; 0x2c
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	44020c00 	.word	0x44020c00
 800a924:	03d09000 	.word	0x03d09000
 800a928:	46000000 	.word	0x46000000
 800a92c:	4a742400 	.word	0x4a742400
 800a930:	4af42400 	.word	0x4af42400

0800a934 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800a934:	b480      	push	{r7}
 800a936:	b08b      	sub	sp, #44	; 0x2c
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a93c:	4bad      	ldr	r3, [pc, #692]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a944:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a946:	4bab      	ldr	r3, [pc, #684]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800a950:	4ba8      	ldr	r3, [pc, #672]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a954:	0a1b      	lsrs	r3, r3, #8
 800a956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a95a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800a95c:	4ba5      	ldr	r3, [pc, #660]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a960:	f003 0310 	and.w	r3, r3, #16
 800a964:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a966:	4ba3      	ldr	r3, [pc, #652]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a96a:	08db      	lsrs	r3, r3, #3
 800a96c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	fb02 f303 	mul.w	r3, r2, r3
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 8126 	beq.w	800abd6 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d053      	beq.n	800aa38 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	2b03      	cmp	r3, #3
 800a994:	d86f      	bhi.n	800aa76 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d003      	beq.n	800a9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d02b      	beq.n	800a9fa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800a9a2:	e068      	b.n	800aa76 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9a4:	4b93      	ldr	r3, [pc, #588]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	08db      	lsrs	r3, r3, #3
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	4a92      	ldr	r2, [pc, #584]	; (800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	ee07 3a90 	vmov	s15, r3
 800a9bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	ee07 3a90 	vmov	s15, r3
 800a9d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9d8:	ed97 6a04 	vldr	s12, [r7, #16]
 800a9dc:	eddf 5a87 	vldr	s11, [pc, #540]	; 800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a9e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a9f8:	e068      	b.n	800aacc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	ee07 3a90 	vmov	s15, r3
 800aa00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa04:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800ac00 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800aa08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa16:	ed97 6a04 	vldr	s12, [r7, #16]
 800aa1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800aa1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800aa36:	e049      	b.n	800aacc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa42:	eddf 6a70 	vldr	s13, [pc, #448]	; 800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800aa46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	ee07 3a90 	vmov	s15, r3
 800aa50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa54:	ed97 6a04 	vldr	s12, [r7, #16]
 800aa58:	eddf 5a68 	vldr	s11, [pc, #416]	; 800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800aa5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa70:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800aa74:	e02a      	b.n	800aacc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa76:	4b5f      	ldr	r3, [pc, #380]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	08db      	lsrs	r3, r3, #3
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	4a5d      	ldr	r2, [pc, #372]	; (800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800aa82:	fa22 f303 	lsr.w	r3, r2, r3
 800aa86:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	ee07 3a90 	vmov	s15, r3
 800aa98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaaa:	ed97 6a04 	vldr	s12, [r7, #16]
 800aaae:	eddf 5a53 	vldr	s11, [pc, #332]	; 800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800aab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800aaca:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aacc:	4b49      	ldr	r3, [pc, #292]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aad8:	d121      	bne.n	800ab1e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800aada:	4b46      	ldr	r3, [pc, #280]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800aadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d017      	beq.n	800ab16 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aae6:	4b43      	ldr	r3, [pc, #268]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800aae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaea:	0a5b      	lsrs	r3, r3, #9
 800aaec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaf0:	ee07 3a90 	vmov	s15, r3
 800aaf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800aaf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aafc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800ab00:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ab04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab0c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	e006      	b.n	800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	601a      	str	r2, [r3, #0]
 800ab1c:	e002      	b.n	800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab24:	4b33      	ldr	r3, [pc, #204]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab30:	d121      	bne.n	800ab76 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ab32:	4b30      	ldr	r3, [pc, #192]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d017      	beq.n	800ab6e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ab3e:	4b2d      	ldr	r3, [pc, #180]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab42:	0c1b      	lsrs	r3, r3, #16
 800ab44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab48:	ee07 3a90 	vmov	s15, r3
 800ab4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ab50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab54:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800ab58:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ab5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab64:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	605a      	str	r2, [r3, #4]
 800ab6c:	e006      	b.n	800ab7c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	605a      	str	r2, [r3, #4]
 800ab74:	e002      	b.n	800ab7c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab7c:	4b1d      	ldr	r3, [pc, #116]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab88:	d121      	bne.n	800abce <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ab8a:	4b1a      	ldr	r3, [pc, #104]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d017      	beq.n	800abc6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ab96:	4b17      	ldr	r3, [pc, #92]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ab98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab9a:	0e1b      	lsrs	r3, r3, #24
 800ab9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aba0:	ee07 3a90 	vmov	s15, r3
 800aba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800aba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800abb0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800abb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abbc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800abc4:	e010      	b.n	800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	609a      	str	r2, [r3, #8]
}
 800abcc:	e00c      	b.n	800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	609a      	str	r2, [r3, #8]
}
 800abd4:	e008      	b.n	800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	609a      	str	r2, [r3, #8]
}
 800abe8:	bf00      	nop
 800abea:	372c      	adds	r7, #44	; 0x2c
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	44020c00 	.word	0x44020c00
 800abf8:	03d09000 	.word	0x03d09000
 800abfc:	46000000 	.word	0x46000000
 800ac00:	4a742400 	.word	0x4a742400
 800ac04:	4af42400 	.word	0x4af42400

0800ac08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ac08:	b590      	push	{r4, r7, lr}
 800ac0a:	b08f      	sub	sp, #60	; 0x3c
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ac12:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac16:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800ac1a:	4321      	orrs	r1, r4
 800ac1c:	d150      	bne.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ac1e:	4b26      	ldr	r3, [pc, #152]	; (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ac20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac28:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ac2a:	4b23      	ldr	r3, [pc, #140]	; (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ac2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac30:	f003 0302 	and.w	r3, r3, #2
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d108      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac3e:	d104      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ac40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac44:	637b      	str	r3, [r7, #52]	; 0x34
 800ac46:	f002 bb2a 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ac4a:	4b1b      	ldr	r3, [pc, #108]	; (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ac4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ac50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac58:	d108      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac60:	d104      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800ac62:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ac66:	637b      	str	r3, [r7, #52]	; 0x34
 800ac68:	f002 bb19 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800ac6c:	4b12      	ldr	r3, [pc, #72]	; (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac78:	d119      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac80:	d115      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800ac82:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ac84:	69db      	ldr	r3, [r3, #28]
 800ac86:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800ac8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac8e:	d30a      	bcc.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800ac90:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	0a1b      	lsrs	r3, r3, #8
 800ac96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac9a:	4a08      	ldr	r2, [pc, #32]	; (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800ac9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800aca2:	f002 bafc 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800aca6:	2300      	movs	r3, #0
 800aca8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800acaa:	f002 baf8 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	637b      	str	r3, [r7, #52]	; 0x34
 800acb2:	f002 baf4 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800acb6:	bf00      	nop
 800acb8:	44020c00 	.word	0x44020c00
 800acbc:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800acc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acc4:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800acc8:	ea50 0104 	orrs.w	r1, r0, r4
 800accc:	f001 8275 	beq.w	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800acd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acd4:	2801      	cmp	r0, #1
 800acd6:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800acda:	f082 82dd 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800acde:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ace2:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800ace6:	ea50 0104 	orrs.w	r1, r0, r4
 800acea:	f001 816c 	beq.w	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800acee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acf2:	2801      	cmp	r0, #1
 800acf4:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800acf8:	f082 82ce 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800acfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad00:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800ad04:	ea50 0104 	orrs.w	r1, r0, r4
 800ad08:	f001 8602 	beq.w	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800ad0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad10:	2801      	cmp	r0, #1
 800ad12:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800ad16:	f082 82bf 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad1e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800ad22:	ea50 0104 	orrs.w	r1, r0, r4
 800ad26:	f001 854c 	beq.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800ad2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad2e:	2801      	cmp	r0, #1
 800ad30:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800ad34:	f082 82b0 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad3c:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800ad40:	ea50 0104 	orrs.w	r1, r0, r4
 800ad44:	f001 849e 	beq.w	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800ad48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad4c:	2801      	cmp	r0, #1
 800ad4e:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800ad52:	f082 82a1 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad56:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad5a:	f1a1 0420 	sub.w	r4, r1, #32
 800ad5e:	ea50 0104 	orrs.w	r1, r0, r4
 800ad62:	f001 83e8 	beq.w	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800ad66:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad6a:	2801      	cmp	r0, #1
 800ad6c:	f171 0120 	sbcs.w	r1, r1, #32
 800ad70:	f082 8292 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad74:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad78:	f1a1 0410 	sub.w	r4, r1, #16
 800ad7c:	ea50 0104 	orrs.w	r1, r0, r4
 800ad80:	f002 8256 	beq.w	800d230 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800ad84:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad88:	2801      	cmp	r0, #1
 800ad8a:	f171 0110 	sbcs.w	r1, r1, #16
 800ad8e:	f082 8283 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad92:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad96:	f1a1 0408 	sub.w	r4, r1, #8
 800ad9a:	ea50 0104 	orrs.w	r1, r0, r4
 800ad9e:	f002 81cc 	beq.w	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800ada2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ada6:	2801      	cmp	r0, #1
 800ada8:	f171 0108 	sbcs.w	r1, r1, #8
 800adac:	f082 8274 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800adb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adb4:	1f0c      	subs	r4, r1, #4
 800adb6:	ea50 0104 	orrs.w	r1, r0, r4
 800adba:	f001 8648 	beq.w	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800adbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adc2:	2801      	cmp	r0, #1
 800adc4:	f171 0104 	sbcs.w	r1, r1, #4
 800adc8:	f082 8266 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800adcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800add0:	1e8c      	subs	r4, r1, #2
 800add2:	ea50 0104 	orrs.w	r1, r0, r4
 800add6:	f002 8143 	beq.w	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800adda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adde:	2801      	cmp	r0, #1
 800ade0:	f171 0102 	sbcs.w	r1, r1, #2
 800ade4:	f082 8258 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ade8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adec:	1e4c      	subs	r4, r1, #1
 800adee:	ea50 0104 	orrs.w	r1, r0, r4
 800adf2:	f002 80ce 	beq.w	800cf92 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800adf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adfa:	2801      	cmp	r0, #1
 800adfc:	f171 0101 	sbcs.w	r1, r1, #1
 800ae00:	f082 824a 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae04:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae08:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800ae0c:	4321      	orrs	r1, r4
 800ae0e:	f002 8059 	beq.w	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800ae12:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae16:	4cd9      	ldr	r4, [pc, #868]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800ae18:	42a0      	cmp	r0, r4
 800ae1a:	f171 0100 	sbcs.w	r1, r1, #0
 800ae1e:	f082 823b 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae22:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae26:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800ae2a:	4321      	orrs	r1, r4
 800ae2c:	f001 87d9 	beq.w	800cde2 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800ae30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae34:	4cd2      	ldr	r4, [pc, #840]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800ae36:	42a0      	cmp	r0, r4
 800ae38:	f171 0100 	sbcs.w	r1, r1, #0
 800ae3c:	f082 822c 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae44:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800ae48:	4321      	orrs	r1, r4
 800ae4a:	f001 8751 	beq.w	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800ae4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae52:	4ccc      	ldr	r4, [pc, #816]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800ae54:	42a0      	cmp	r0, r4
 800ae56:	f171 0100 	sbcs.w	r1, r1, #0
 800ae5a:	f082 821d 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae62:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800ae66:	4321      	orrs	r1, r4
 800ae68:	f001 869a 	beq.w	800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800ae6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae70:	4cc5      	ldr	r4, [pc, #788]	; (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800ae72:	42a0      	cmp	r0, r4
 800ae74:	f171 0100 	sbcs.w	r1, r1, #0
 800ae78:	f082 820e 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae80:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800ae84:	4321      	orrs	r1, r4
 800ae86:	f001 8612 	beq.w	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800ae8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae8e:	4cbf      	ldr	r4, [pc, #764]	; (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800ae90:	42a0      	cmp	r0, r4
 800ae92:	f171 0100 	sbcs.w	r1, r1, #0
 800ae96:	f082 81ff 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae9e:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800aea2:	4321      	orrs	r1, r4
 800aea4:	f002 817e 	beq.w	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800aea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeac:	4cb8      	ldr	r4, [pc, #736]	; (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aeae:	42a0      	cmp	r0, r4
 800aeb0:	f171 0100 	sbcs.w	r1, r1, #0
 800aeb4:	f082 81f0 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aeb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aebc:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 800aec0:	4321      	orrs	r1, r4
 800aec2:	f000 829e 	beq.w	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800aec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeca:	4cb2      	ldr	r4, [pc, #712]	; (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aecc:	42a0      	cmp	r0, r4
 800aece:	f171 0100 	sbcs.w	r1, r1, #0
 800aed2:	f082 81e1 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeda:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800aede:	4321      	orrs	r1, r4
 800aee0:	f000 826d 	beq.w	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800aee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aee8:	4cab      	ldr	r4, [pc, #684]	; (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800aeea:	42a0      	cmp	r0, r4
 800aeec:	f171 0100 	sbcs.w	r1, r1, #0
 800aef0:	f082 81d2 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aef4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aef8:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800aefc:	4321      	orrs	r1, r4
 800aefe:	f001 800d 	beq.w	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800af02:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af06:	4ca5      	ldr	r4, [pc, #660]	; (800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800af08:	42a0      	cmp	r0, r4
 800af0a:	f171 0100 	sbcs.w	r1, r1, #0
 800af0e:	f082 81c3 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af12:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af16:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800af1a:	4321      	orrs	r1, r4
 800af1c:	f000 81d0 	beq.w	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800af20:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af24:	4c9e      	ldr	r4, [pc, #632]	; (800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800af26:	42a0      	cmp	r0, r4
 800af28:	f171 0100 	sbcs.w	r1, r1, #0
 800af2c:	f082 81b4 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af34:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 800af38:	4321      	orrs	r1, r4
 800af3a:	f000 8142 	beq.w	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800af3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af42:	4c98      	ldr	r4, [pc, #608]	; (800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800af44:	42a0      	cmp	r0, r4
 800af46:	f171 0100 	sbcs.w	r1, r1, #0
 800af4a:	f082 81a5 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af52:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800af56:	4321      	orrs	r1, r4
 800af58:	f001 824e 	beq.w	800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800af5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af60:	4c91      	ldr	r4, [pc, #580]	; (800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800af62:	42a0      	cmp	r0, r4
 800af64:	f171 0100 	sbcs.w	r1, r1, #0
 800af68:	f082 8196 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af70:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800af74:	4321      	orrs	r1, r4
 800af76:	f001 8197 	beq.w	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800af7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af7e:	4c8b      	ldr	r4, [pc, #556]	; (800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800af80:	42a0      	cmp	r0, r4
 800af82:	f171 0100 	sbcs.w	r1, r1, #0
 800af86:	f082 8187 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800af8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af8e:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800af92:	4321      	orrs	r1, r4
 800af94:	f001 8154 	beq.w	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800af98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af9c:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800afa0:	f171 0100 	sbcs.w	r1, r1, #0
 800afa4:	f082 8178 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800afa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afac:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800afb0:	4321      	orrs	r1, r4
 800afb2:	f001 80b7 	beq.w	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800afb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afba:	f248 0401 	movw	r4, #32769	; 0x8001
 800afbe:	42a0      	cmp	r0, r4
 800afc0:	f171 0100 	sbcs.w	r1, r1, #0
 800afc4:	f082 8168 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800afc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afcc:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 800afd0:	4321      	orrs	r1, r4
 800afd2:	f001 8064 	beq.w	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800afd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afda:	f244 0401 	movw	r4, #16385	; 0x4001
 800afde:	42a0      	cmp	r0, r4
 800afe0:	f171 0100 	sbcs.w	r1, r1, #0
 800afe4:	f082 8158 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800afe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afec:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 800aff0:	4321      	orrs	r1, r4
 800aff2:	f001 8011 	beq.w	800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800aff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800affa:	f242 0401 	movw	r4, #8193	; 0x2001
 800affe:	42a0      	cmp	r0, r4
 800b000:	f171 0100 	sbcs.w	r1, r1, #0
 800b004:	f082 8148 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b00c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 800b010:	4321      	orrs	r1, r4
 800b012:	f000 871e 	beq.w	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800b016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b01a:	f241 0401 	movw	r4, #4097	; 0x1001
 800b01e:	42a0      	cmp	r0, r4
 800b020:	f171 0100 	sbcs.w	r1, r1, #0
 800b024:	f082 8138 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b02c:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800b030:	4321      	orrs	r1, r4
 800b032:	f000 86a8 	beq.w	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800b036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b03a:	f640 0401 	movw	r4, #2049	; 0x801
 800b03e:	42a0      	cmp	r0, r4
 800b040:	f171 0100 	sbcs.w	r1, r1, #0
 800b044:	f082 8128 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b04c:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 800b050:	4321      	orrs	r1, r4
 800b052:	f000 8632 	beq.w	800bcba <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800b056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b05a:	f240 4401 	movw	r4, #1025	; 0x401
 800b05e:	42a0      	cmp	r0, r4
 800b060:	f171 0100 	sbcs.w	r1, r1, #0
 800b064:	f082 8118 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b06c:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 800b070:	4321      	orrs	r1, r4
 800b072:	f000 85b0 	beq.w	800bbd6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800b076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b07a:	f240 2401 	movw	r4, #513	; 0x201
 800b07e:	42a0      	cmp	r0, r4
 800b080:	f171 0100 	sbcs.w	r1, r1, #0
 800b084:	f082 8108 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b08c:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 800b090:	4321      	orrs	r1, r4
 800b092:	f000 8535 	beq.w	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800b096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b09a:	f240 1401 	movw	r4, #257	; 0x101
 800b09e:	42a0      	cmp	r0, r4
 800b0a0:	f171 0100 	sbcs.w	r1, r1, #0
 800b0a4:	f082 80f8 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0ac:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800b0b0:	4321      	orrs	r1, r4
 800b0b2:	f000 84ba 	beq.w	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800b0b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0ba:	2881      	cmp	r0, #129	; 0x81
 800b0bc:	f171 0100 	sbcs.w	r1, r1, #0
 800b0c0:	f082 80ea 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0c8:	2821      	cmp	r0, #33	; 0x21
 800b0ca:	f171 0100 	sbcs.w	r1, r1, #0
 800b0ce:	d26f      	bcs.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b0d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0d4:	4301      	orrs	r1, r0
 800b0d6:	f002 80df 	beq.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0de:	1e42      	subs	r2, r0, #1
 800b0e0:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b0e4:	2a20      	cmp	r2, #32
 800b0e6:	f173 0100 	sbcs.w	r1, r3, #0
 800b0ea:	f082 80d5 	bcs.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0ee:	2a1f      	cmp	r2, #31
 800b0f0:	f202 80d2 	bhi.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0f4:	a101      	add	r1, pc, #4	; (adr r1, 800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800b0f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b0fa:	bf00      	nop
 800b0fc:	0800b45d 	.word	0x0800b45d
 800b100:	0800b529 	.word	0x0800b529
 800b104:	0800d299 	.word	0x0800d299
 800b108:	0800b5e9 	.word	0x0800b5e9
 800b10c:	0800d299 	.word	0x0800d299
 800b110:	0800d299 	.word	0x0800d299
 800b114:	0800d299 	.word	0x0800d299
 800b118:	0800b6b9 	.word	0x0800b6b9
 800b11c:	0800d299 	.word	0x0800d299
 800b120:	0800d299 	.word	0x0800d299
 800b124:	0800d299 	.word	0x0800d299
 800b128:	0800d299 	.word	0x0800d299
 800b12c:	0800d299 	.word	0x0800d299
 800b130:	0800d299 	.word	0x0800d299
 800b134:	0800d299 	.word	0x0800d299
 800b138:	0800b79b 	.word	0x0800b79b
 800b13c:	0800d299 	.word	0x0800d299
 800b140:	0800d299 	.word	0x0800d299
 800b144:	0800d299 	.word	0x0800d299
 800b148:	0800d299 	.word	0x0800d299
 800b14c:	0800d299 	.word	0x0800d299
 800b150:	0800d299 	.word	0x0800d299
 800b154:	0800d299 	.word	0x0800d299
 800b158:	0800d299 	.word	0x0800d299
 800b15c:	0800d299 	.word	0x0800d299
 800b160:	0800d299 	.word	0x0800d299
 800b164:	0800d299 	.word	0x0800d299
 800b168:	0800d299 	.word	0x0800d299
 800b16c:	0800d299 	.word	0x0800d299
 800b170:	0800d299 	.word	0x0800d299
 800b174:	0800d299 	.word	0x0800d299
 800b178:	0800b871 	.word	0x0800b871
 800b17c:	80000001 	.word	0x80000001
 800b180:	40000001 	.word	0x40000001
 800b184:	20000001 	.word	0x20000001
 800b188:	10000001 	.word	0x10000001
 800b18c:	08000001 	.word	0x08000001
 800b190:	04000001 	.word	0x04000001
 800b194:	00800001 	.word	0x00800001
 800b198:	00400001 	.word	0x00400001
 800b19c:	00200001 	.word	0x00200001
 800b1a0:	00100001 	.word	0x00100001
 800b1a4:	00080001 	.word	0x00080001
 800b1a8:	00040001 	.word	0x00040001
 800b1ac:	00020001 	.word	0x00020001
 800b1b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1b4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800b1b8:	430b      	orrs	r3, r1
 800b1ba:	f000 83c4 	beq.w	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800b1be:	f002 b86b 	b.w	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b1c2:	4ba1      	ldr	r3, [pc, #644]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b1c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b1c8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b1cc:	633b      	str	r3, [r7, #48]	; 0x30
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1d4:	d036      	beq.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1dc:	d86b      	bhi.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800b1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1e4:	d02b      	beq.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1ec:	d863      	bhi.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1f4:	d01b      	beq.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1fc:	d85b      	bhi.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b20a:	d008      	beq.n	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800b20c:	e053      	b.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b20e:	f107 0320 	add.w	r3, r7, #32
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff f8ba 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b21c:	e04e      	b.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b21e:	f107 0314 	add.w	r3, r7, #20
 800b222:	4618      	mov	r0, r3
 800b224:	f7ff fa1c 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b22c:	e046      	b.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b22e:	f107 0308 	add.w	r3, r7, #8
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff fb7e 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b23c:	e03e      	b.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b23e:	4b83      	ldr	r3, [pc, #524]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b242:	e03b      	b.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b244:	4b80      	ldr	r3, [pc, #512]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b24a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b250:	4b7d      	ldr	r3, [pc, #500]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 0302 	and.w	r3, r3, #2
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d10c      	bne.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800b25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d109      	bne.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b262:	4b79      	ldr	r3, [pc, #484]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	08db      	lsrs	r3, r3, #3
 800b268:	f003 0303 	and.w	r3, r3, #3
 800b26c:	4a78      	ldr	r2, [pc, #480]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800b26e:	fa22 f303 	lsr.w	r3, r2, r3
 800b272:	637b      	str	r3, [r7, #52]	; 0x34
 800b274:	e01e      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b276:	4b74      	ldr	r3, [pc, #464]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b27e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b282:	d106      	bne.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28a:	d102      	bne.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b28c:	4b71      	ldr	r3, [pc, #452]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800b28e:	637b      	str	r3, [r7, #52]	; 0x34
 800b290:	e010      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b292:	4b6d      	ldr	r3, [pc, #436]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b29a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b29e:	d106      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800b2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2a6:	d102      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b2a8:	4b6b      	ldr	r3, [pc, #428]	; (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b2ac:	e002      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800b2b2:	e003      	b.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800b2b4:	e002      	b.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b2ba:	bf00      	nop
          }
        }
        break;
 800b2bc:	f001 bfef 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b2c0:	4b61      	ldr	r3, [pc, #388]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b2c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b2c6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800b2ca:	633b      	str	r3, [r7, #48]	; 0x30
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2d2:	d036      	beq.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2da:	d86b      	bhi.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b2e2:	d02b      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b2ea:	d863      	bhi.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2f2:	d01b      	beq.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2fa:	d85b      	bhi.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d004      	beq.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b304:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b308:	d008      	beq.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800b30a:	e053      	b.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b30c:	f107 0320 	add.w	r3, r7, #32
 800b310:	4618      	mov	r0, r3
 800b312:	f7ff f83b 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b31a:	e04e      	b.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b31c:	f107 0314 	add.w	r3, r7, #20
 800b320:	4618      	mov	r0, r3
 800b322:	f7ff f99d 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b32a:	e046      	b.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b32c:	f107 0308 	add.w	r3, r7, #8
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff faff 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b33a:	e03e      	b.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b33c:	4b43      	ldr	r3, [pc, #268]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b33e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b340:	e03b      	b.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b342:	4b41      	ldr	r3, [pc, #260]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b348:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b34c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b34e:	4b3e      	ldr	r3, [pc, #248]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b02      	cmp	r3, #2
 800b358:	d10c      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800b35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d109      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b360:	4b39      	ldr	r3, [pc, #228]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	08db      	lsrs	r3, r3, #3
 800b366:	f003 0303 	and.w	r3, r3, #3
 800b36a:	4a39      	ldr	r2, [pc, #228]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800b36c:	fa22 f303 	lsr.w	r3, r2, r3
 800b370:	637b      	str	r3, [r7, #52]	; 0x34
 800b372:	e01e      	b.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b374:	4b34      	ldr	r3, [pc, #208]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b37c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b380:	d106      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b388:	d102      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b38a:	4b32      	ldr	r3, [pc, #200]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800b38c:	637b      	str	r3, [r7, #52]	; 0x34
 800b38e:	e010      	b.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b390:	4b2d      	ldr	r3, [pc, #180]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b39c:	d106      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3a4:	d102      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b3a6:	4b2c      	ldr	r3, [pc, #176]	; (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800b3a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3aa:	e002      	b.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800b3b0:	e003      	b.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800b3b2:	e002      	b.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b3b8:	bf00      	nop
          }
        }
        break;
 800b3ba:	f001 bf70 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b3be:	4b22      	ldr	r3, [pc, #136]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b3c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d108      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3d0:	f107 0320 	add.w	r3, r7, #32
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe ffd9 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b3de:	f001 bf5e 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e4:	2b40      	cmp	r3, #64	; 0x40
 800b3e6:	d108      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3e8:	f107 0314 	add.w	r3, r7, #20
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff f937 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3f6:	f001 bf52 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b3fe:	f001 bf4e 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800b402:	4b11      	ldr	r3, [pc, #68]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b404:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b40c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	2b00      	cmp	r3, #0
 800b412:	d108      	bne.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b414:	f107 0320 	add.w	r3, r7, #32
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe ffb7 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b420:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b422:	f001 bf3c 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b428:	2b80      	cmp	r3, #128	; 0x80
 800b42a:	d108      	bne.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b42c:	f107 0314 	add.w	r3, r7, #20
 800b430:	4618      	mov	r0, r3
 800b432:	f7ff f915 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b43a:	f001 bf30 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b442:	f001 bf2c 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b446:	bf00      	nop
 800b448:	44020c00 	.word	0x44020c00
 800b44c:	00bb8000 	.word	0x00bb8000
 800b450:	03d09000 	.word	0x03d09000
 800b454:	003d0900 	.word	0x003d0900
 800b458:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b45c:	4b9d      	ldr	r3, [pc, #628]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b45e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b462:	f003 0307 	and.w	r3, r3, #7
 800b466:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d104      	bne.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b46e:	f7fc ff9f 	bl	80083b0 <HAL_RCC_GetPCLK2Freq>
 800b472:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b474:	f001 bf13 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800b478:	4b96      	ldr	r3, [pc, #600]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b484:	d10a      	bne.n	800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800b486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d107      	bne.n	800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b48c:	f107 0314 	add.w	r3, r7, #20
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff f8e5 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
 800b49a:	e043      	b.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800b49c:	4b8d      	ldr	r3, [pc, #564]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4a8:	d10a      	bne.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d107      	bne.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4b0:	f107 0308 	add.w	r3, r7, #8
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7ff fa3d 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b4be:	e031      	b.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b4c0:	4b84      	ldr	r3, [pc, #528]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d10c      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	2b03      	cmp	r3, #3
 800b4d0:	d109      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b4d2:	4b80      	ldr	r3, [pc, #512]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	08db      	lsrs	r3, r3, #3
 800b4d8:	f003 0303 	and.w	r3, r3, #3
 800b4dc:	4a7e      	ldr	r2, [pc, #504]	; (800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b4de:	fa22 f303 	lsr.w	r3, r2, r3
 800b4e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4e4:	e01e      	b.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800b4e6:	4b7b      	ldr	r3, [pc, #492]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4f2:	d105      	bne.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d102      	bne.n	800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800b4fa:	4b78      	ldr	r3, [pc, #480]	; (800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b4fe:	e011      	b.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b500:	4b74      	ldr	r3, [pc, #464]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d106      	bne.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	2b05      	cmp	r3, #5
 800b512:	d103      	bne.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800b514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b518:	637b      	str	r3, [r7, #52]	; 0x34
 800b51a:	e003      	b.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b520:	f001 bebd 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b524:	f001 bebb 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b528:	4b6a      	ldr	r3, [pc, #424]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b52a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b52e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b532:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	2b00      	cmp	r3, #0
 800b538:	d104      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b53a:	f7fc ff23 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800b53e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b540:	f001 bead 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800b544:	4b63      	ldr	r3, [pc, #396]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b54c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b550:	d10a      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800b552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b554:	2b08      	cmp	r3, #8
 800b556:	d107      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b558:	f107 0314 	add.w	r3, r7, #20
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7ff f87f 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	637b      	str	r3, [r7, #52]	; 0x34
 800b566:	e03d      	b.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	2b10      	cmp	r3, #16
 800b56c:	d108      	bne.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b56e:	f107 0308 	add.w	r3, r7, #8
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff f9de 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b57c:	f001 be8f 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b580:	4b54      	ldr	r3, [pc, #336]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0302 	and.w	r3, r3, #2
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d10c      	bne.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800b58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58e:	2b18      	cmp	r3, #24
 800b590:	d109      	bne.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b592:	4b50      	ldr	r3, [pc, #320]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	08db      	lsrs	r3, r3, #3
 800b598:	f003 0303 	and.w	r3, r3, #3
 800b59c:	4a4e      	ldr	r2, [pc, #312]	; (800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b59e:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5a4:	e01e      	b.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800b5a6:	4b4b      	ldr	r3, [pc, #300]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b2:	d105      	bne.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b6:	2b20      	cmp	r3, #32
 800b5b8:	d102      	bne.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800b5ba:	4b48      	ldr	r3, [pc, #288]	; (800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b5bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b5be:	e011      	b.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b5c0:	4b44      	ldr	r3, [pc, #272]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b5c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d106      	bne.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	2b28      	cmp	r3, #40	; 0x28
 800b5d2:	d103      	bne.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800b5d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5da:	e003      	b.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5e0:	f001 be5d 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b5e4:	f001 be5b 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b5e8:	4b3a      	ldr	r3, [pc, #232]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b5ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b5f2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d104      	bne.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b5fa:	f7fc fec3 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800b5fe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b600:	f001 be4d 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800b604:	4b33      	ldr	r3, [pc, #204]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b60c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b610:	d10a      	bne.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	2b40      	cmp	r3, #64	; 0x40
 800b616:	d107      	bne.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b618:	f107 0314 	add.w	r3, r7, #20
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff f81f 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	637b      	str	r3, [r7, #52]	; 0x34
 800b626:	e045      	b.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800b628:	4b2a      	ldr	r3, [pc, #168]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b634:	d10a      	bne.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800b636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b638:	2b80      	cmp	r3, #128	; 0x80
 800b63a:	d107      	bne.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b63c:	f107 0308 	add.w	r3, r7, #8
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff f977 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	637b      	str	r3, [r7, #52]	; 0x34
 800b64a:	e033      	b.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b64c:	4b21      	ldr	r3, [pc, #132]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b02      	cmp	r3, #2
 800b656:	d10c      	bne.n	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800b658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65a:	2bc0      	cmp	r3, #192	; 0xc0
 800b65c:	d109      	bne.n	800b672 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b65e:	4b1d      	ldr	r3, [pc, #116]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	08db      	lsrs	r3, r3, #3
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	4a1b      	ldr	r2, [pc, #108]	; (800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b66a:	fa22 f303 	lsr.w	r3, r2, r3
 800b66e:	637b      	str	r3, [r7, #52]	; 0x34
 800b670:	e020      	b.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800b672:	4b18      	ldr	r3, [pc, #96]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b67a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b67e:	d106      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b686:	d102      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800b688:	4b14      	ldr	r3, [pc, #80]	; (800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b68a:	637b      	str	r3, [r7, #52]	; 0x34
 800b68c:	e012      	b.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b68e:	4b11      	ldr	r3, [pc, #68]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	2b02      	cmp	r3, #2
 800b69a:	d107      	bne.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b6a2:	d103      	bne.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800b6a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b6aa:	e003      	b.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6b0:	f001 bdf5 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6b4:	f001 bdf3 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b6b8:	4b06      	ldr	r3, [pc, #24]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b6ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b6be:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800b6c2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10a      	bne.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b6ca:	f7fc fe5b 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800b6ce:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b6d0:	f001 bde5 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6d4:	44020c00 	.word	0x44020c00
 800b6d8:	03d09000 	.word	0x03d09000
 800b6dc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800b6e0:	4ba0      	ldr	r3, [pc, #640]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6ec:	d10b      	bne.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6f4:	d107      	bne.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6f6:	f107 0314 	add.w	r3, r7, #20
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fe ffb0 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	637b      	str	r3, [r7, #52]	; 0x34
 800b704:	e047      	b.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800b706:	4b97      	ldr	r3, [pc, #604]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b70e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b712:	d10b      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b71a:	d107      	bne.n	800b72c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b71c:	f107 0308 	add.w	r3, r7, #8
 800b720:	4618      	mov	r0, r3
 800b722:	f7ff f907 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	637b      	str	r3, [r7, #52]	; 0x34
 800b72a:	e034      	b.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b72c:	4b8d      	ldr	r3, [pc, #564]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0302 	and.w	r3, r3, #2
 800b734:	2b02      	cmp	r3, #2
 800b736:	d10d      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b73e:	d109      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b740:	4b88      	ldr	r3, [pc, #544]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	08db      	lsrs	r3, r3, #3
 800b746:	f003 0303 	and.w	r3, r3, #3
 800b74a:	4a87      	ldr	r2, [pc, #540]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b74c:	fa22 f303 	lsr.w	r3, r2, r3
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
 800b752:	e020      	b.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800b754:	4b83      	ldr	r3, [pc, #524]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b75c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b760:	d106      	bne.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b768:	d102      	bne.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800b76a:	4b80      	ldr	r3, [pc, #512]	; (800b96c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b76c:	637b      	str	r3, [r7, #52]	; 0x34
 800b76e:	e012      	b.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b770:	4b7c      	ldr	r3, [pc, #496]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b776:	f003 0302 	and.w	r3, r3, #2
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d107      	bne.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b784:	d103      	bne.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800b786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b78a:	637b      	str	r3, [r7, #52]	; 0x34
 800b78c:	e003      	b.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b792:	f001 bd84 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b796:	f001 bd82 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b79a:	4b72      	ldr	r3, [pc, #456]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b79c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b7a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b7a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d104      	bne.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b7ac:	f7fc fdea 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800b7b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800b7b2:	f001 bd74 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800b7b6:	4b6b      	ldr	r3, [pc, #428]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7c2:	d10b      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ca:	d107      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7cc:	f107 0314 	add.w	r3, r7, #20
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe ff45 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b7da:	e047      	b.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800b7dc:	4b61      	ldr	r3, [pc, #388]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7e8:	d10b      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7f0:	d107      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7f2:	f107 0308 	add.w	r3, r7, #8
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff f89c 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	637b      	str	r3, [r7, #52]	; 0x34
 800b800:	e034      	b.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b802:	4b58      	ldr	r3, [pc, #352]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0302 	and.w	r3, r3, #2
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d10d      	bne.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b814:	d109      	bne.n	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b816:	4b53      	ldr	r3, [pc, #332]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	08db      	lsrs	r3, r3, #3
 800b81c:	f003 0303 	and.w	r3, r3, #3
 800b820:	4a51      	ldr	r2, [pc, #324]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b822:	fa22 f303 	lsr.w	r3, r2, r3
 800b826:	637b      	str	r3, [r7, #52]	; 0x34
 800b828:	e020      	b.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800b82a:	4b4e      	ldr	r3, [pc, #312]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b836:	d106      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b83e:	d102      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800b840:	4b4a      	ldr	r3, [pc, #296]	; (800b96c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b842:	637b      	str	r3, [r7, #52]	; 0x34
 800b844:	e012      	b.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b846:	4b47      	ldr	r3, [pc, #284]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b84c:	f003 0302 	and.w	r3, r3, #2
 800b850:	2b02      	cmp	r3, #2
 800b852:	d107      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b856:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b85a:	d103      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800b85c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b860:	637b      	str	r3, [r7, #52]	; 0x34
 800b862:	e003      	b.n	800b86c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b868:	f001 bd19 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b86c:	f001 bd17 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b870:	4b3c      	ldr	r3, [pc, #240]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b876:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800b87a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d104      	bne.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b882:	f7fc fd7f 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800b886:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800b888:	f001 bd09 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800b88c:	4b35      	ldr	r3, [pc, #212]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b898:	d10b      	bne.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8a0:	d107      	bne.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8a2:	f107 0314 	add.w	r3, r7, #20
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe feda 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b0:	e047      	b.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800b8b2:	4b2c      	ldr	r3, [pc, #176]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8be:	d10b      	bne.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8c6:	d107      	bne.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8c8:	f107 0308 	add.w	r3, r7, #8
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7ff f831 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8d6:	e034      	b.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b8d8:	4b22      	ldr	r3, [pc, #136]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f003 0302 	and.w	r3, r3, #2
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d10d      	bne.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800b8ea:	d109      	bne.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b8ec:	4b1d      	ldr	r3, [pc, #116]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	08db      	lsrs	r3, r3, #3
 800b8f2:	f003 0303 	and.w	r3, r3, #3
 800b8f6:	4a1c      	ldr	r2, [pc, #112]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b8fe:	e020      	b.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800b900:	4b18      	ldr	r3, [pc, #96]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b90c:	d106      	bne.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800b90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b914:	d102      	bne.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800b916:	4b15      	ldr	r3, [pc, #84]	; (800b96c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b918:	637b      	str	r3, [r7, #52]	; 0x34
 800b91a:	e012      	b.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b91c:	4b11      	ldr	r3, [pc, #68]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b91e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b922:	f003 0302 	and.w	r3, r3, #2
 800b926:	2b02      	cmp	r3, #2
 800b928:	d107      	bne.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800b930:	d103      	bne.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800b932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b936:	637b      	str	r3, [r7, #52]	; 0x34
 800b938:	e003      	b.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b93e:	f001 bcae 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b942:	f001 bcac 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800b946:	4b07      	ldr	r3, [pc, #28]	; (800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b94c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800b950:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10b      	bne.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b958:	f7fc fd14 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800b95c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800b95e:	f001 bc9e 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b962:	bf00      	nop
 800b964:	44020c00 	.word	0x44020c00
 800b968:	03d09000 	.word	0x03d09000
 800b96c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800b970:	4ba0      	ldr	r3, [pc, #640]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b97c:	d10b      	bne.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b984:	d107      	bne.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b986:	f107 0314 	add.w	r3, r7, #20
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fe fe68 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	637b      	str	r3, [r7, #52]	; 0x34
 800b994:	e047      	b.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800b996:	4b97      	ldr	r3, [pc, #604]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b99e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9a2:	d10b      	bne.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b9aa:	d107      	bne.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9ac:	f107 0308 	add.w	r3, r7, #8
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fe ffbf 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ba:	e034      	b.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800b9bc:	4b8d      	ldr	r3, [pc, #564]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 0302 	and.w	r3, r3, #2
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d10d      	bne.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b9ce:	d109      	bne.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b9d0:	4b88      	ldr	r3, [pc, #544]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	08db      	lsrs	r3, r3, #3
 800b9d6:	f003 0303 	and.w	r3, r3, #3
 800b9da:	4a87      	ldr	r2, [pc, #540]	; (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e2:	e020      	b.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800b9e4:	4b83      	ldr	r3, [pc, #524]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f0:	d106      	bne.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9f8:	d102      	bne.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800b9fa:	4b80      	ldr	r3, [pc, #512]	; (800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b9fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b9fe:	e012      	b.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800ba00:	4b7c      	ldr	r3, [pc, #496]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ba02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba06:	f003 0302 	and.w	r3, r3, #2
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d107      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ba14:	d103      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800ba16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba1c:	e003      	b.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba22:	f001 bc3c 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ba26:	f001 bc3a 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800ba2a:	4b72      	ldr	r3, [pc, #456]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ba2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ba30:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ba34:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d104      	bne.n	800ba46 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ba3c:	f7fc fca2 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800ba40:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800ba42:	f001 bc2c 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800ba46:	4b6b      	ldr	r3, [pc, #428]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba52:	d10b      	bne.n	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba5a:	d107      	bne.n	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba5c:	f107 0314 	add.w	r3, r7, #20
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fe fdfd 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	637b      	str	r3, [r7, #52]	; 0x34
 800ba6a:	e047      	b.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800ba6c:	4b61      	ldr	r3, [pc, #388]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba78:	d10b      	bne.n	800ba92 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba80:	d107      	bne.n	800ba92 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba82:	f107 0308 	add.w	r3, r7, #8
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fe ff54 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba90:	e034      	b.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800ba92:	4b58      	ldr	r3, [pc, #352]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f003 0302 	and.w	r3, r3, #2
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d10d      	bne.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800baa4:	d109      	bne.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800baa6:	4b53      	ldr	r3, [pc, #332]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	08db      	lsrs	r3, r3, #3
 800baac:	f003 0303 	and.w	r3, r3, #3
 800bab0:	4a51      	ldr	r2, [pc, #324]	; (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800bab2:	fa22 f303 	lsr.w	r3, r2, r3
 800bab6:	637b      	str	r3, [r7, #52]	; 0x34
 800bab8:	e020      	b.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800baba:	4b4e      	ldr	r3, [pc, #312]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bac6:	d106      	bne.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800bac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bace:	d102      	bne.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800bad0:	4b4a      	ldr	r3, [pc, #296]	; (800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800bad2:	637b      	str	r3, [r7, #52]	; 0x34
 800bad4:	e012      	b.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800bad6:	4b47      	ldr	r3, [pc, #284]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800badc:	f003 0302 	and.w	r3, r3, #2
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d107      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800bae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800baea:	d103      	bne.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800baec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baf0:	637b      	str	r3, [r7, #52]	; 0x34
 800baf2:	e003      	b.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baf8:	f001 bbd1 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bafc:	f001 bbcf 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800bb00:	4b3c      	ldr	r3, [pc, #240]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bb02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bb06:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bb0a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d104      	bne.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb12:	f7fc fc37 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800bb16:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800bb18:	f001 bbc1 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800bb1c:	4b35      	ldr	r3, [pc, #212]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb28:	d10b      	bne.n	800bb42 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb30:	d107      	bne.n	800bb42 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb32:	f107 0314 	add.w	r3, r7, #20
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fd92 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb40:	e047      	b.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800bb42:	4b2c      	ldr	r3, [pc, #176]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb4e:	d10b      	bne.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb56:	d107      	bne.n	800bb68 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb58:	f107 0308 	add.w	r3, r7, #8
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe fee9 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	637b      	str	r3, [r7, #52]	; 0x34
 800bb66:	e034      	b.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800bb68:	4b22      	ldr	r3, [pc, #136]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0302 	and.w	r3, r3, #2
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d10d      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800bb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb7a:	d109      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bb7c:	4b1d      	ldr	r3, [pc, #116]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	08db      	lsrs	r3, r3, #3
 800bb82:	f003 0303 	and.w	r3, r3, #3
 800bb86:	4a1c      	ldr	r2, [pc, #112]	; (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800bb88:	fa22 f303 	lsr.w	r3, r2, r3
 800bb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb8e:	e020      	b.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800bb90:	4b18      	ldr	r3, [pc, #96]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb9c:	d106      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bba4:	d102      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800bba6:	4b15      	ldr	r3, [pc, #84]	; (800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800bba8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbaa:	e012      	b.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800bbac:	4b11      	ldr	r3, [pc, #68]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bbae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbb2:	f003 0302 	and.w	r3, r3, #2
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d107      	bne.n	800bbca <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bbc0:	d103      	bne.n	800bbca <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800bbc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bbc8:	e003      	b.n	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbce:	f001 bb66 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bbd2:	f001 bb64 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800bbd6:	4b07      	ldr	r3, [pc, #28]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bbd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bbdc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800bbe0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10b      	bne.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bbe8:	f7fc fbcc 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800bbec:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800bbee:	f001 bb56 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bbf2:	bf00      	nop
 800bbf4:	44020c00 	.word	0x44020c00
 800bbf8:	03d09000 	.word	0x03d09000
 800bbfc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800bc00:	4ba1      	ldr	r3, [pc, #644]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc0c:	d10b      	bne.n	800bc26 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc14:	d107      	bne.n	800bc26 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc16:	f107 0314 	add.w	r3, r7, #20
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe fd20 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	637b      	str	r3, [r7, #52]	; 0x34
 800bc24:	e047      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800bc26:	4b98      	ldr	r3, [pc, #608]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc32:	d10b      	bne.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800bc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc3a:	d107      	bne.n	800bc4c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc3c:	f107 0308 	add.w	r3, r7, #8
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fe fe77 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	637b      	str	r3, [r7, #52]	; 0x34
 800bc4a:	e034      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800bc4c:	4b8e      	ldr	r3, [pc, #568]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0302 	and.w	r3, r3, #2
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d10d      	bne.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800bc5e:	d109      	bne.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc60:	4b89      	ldr	r3, [pc, #548]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	08db      	lsrs	r3, r3, #3
 800bc66:	f003 0303 	and.w	r3, r3, #3
 800bc6a:	4a88      	ldr	r2, [pc, #544]	; (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800bc6c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc70:	637b      	str	r3, [r7, #52]	; 0x34
 800bc72:	e020      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800bc74:	4b84      	ldr	r3, [pc, #528]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc80:	d106      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc88:	d102      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800bc8a:	4b81      	ldr	r3, [pc, #516]	; (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800bc8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc8e:	e012      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800bc90:	4b7d      	ldr	r3, [pc, #500]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bc92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bc96:	f003 0302 	and.w	r3, r3, #2
 800bc9a:	2b02      	cmp	r3, #2
 800bc9c:	d107      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800bca4:	d103      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800bca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcaa:	637b      	str	r3, [r7, #52]	; 0x34
 800bcac:	e003      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcb2:	f001 baf4 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bcb6:	f001 baf2 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800bcba:	4b73      	ldr	r3, [pc, #460]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bcbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bcc0:	f003 0307 	and.w	r3, r3, #7
 800bcc4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d104      	bne.n	800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bccc:	f7fc fb5a 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800bcd0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800bcd2:	f001 bae4 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800bcd6:	4b6c      	ldr	r3, [pc, #432]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bce2:	d10a      	bne.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d107      	bne.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcea:	f107 0314 	add.w	r3, r7, #20
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fe fcb6 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf8:	e043      	b.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800bcfa:	4b63      	ldr	r3, [pc, #396]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd06:	d10a      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d107      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd0e:	f107 0308 	add.w	r3, r7, #8
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe fe0e 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd1c:	e031      	b.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800bd1e:	4b5a      	ldr	r3, [pc, #360]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 0302 	and.w	r3, r3, #2
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d10c      	bne.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	d109      	bne.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd30:	4b55      	ldr	r3, [pc, #340]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	08db      	lsrs	r3, r3, #3
 800bd36:	f003 0303 	and.w	r3, r3, #3
 800bd3a:	4a54      	ldr	r2, [pc, #336]	; (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800bd3c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd40:	637b      	str	r3, [r7, #52]	; 0x34
 800bd42:	e01e      	b.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800bd44:	4b50      	ldr	r3, [pc, #320]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd50:	d105      	bne.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	d102      	bne.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800bd58:	4b4d      	ldr	r3, [pc, #308]	; (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800bd5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd5c:	e011      	b.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800bd5e:	4b4a      	ldr	r3, [pc, #296]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bd60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd64:	f003 0302 	and.w	r3, r3, #2
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	d106      	bne.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6e:	2b05      	cmp	r3, #5
 800bd70:	d103      	bne.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800bd72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd76:	637b      	str	r3, [r7, #52]	; 0x34
 800bd78:	e003      	b.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd7e:	f001 ba8e 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bd82:	f001 ba8c 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800bd86:	4b40      	ldr	r3, [pc, #256]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bd88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bd8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd90:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d104      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bd98:	f7fc faf4 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800bd9c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800bd9e:	f001 ba7e 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800bda2:	4b39      	ldr	r3, [pc, #228]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdae:	d10a      	bne.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	2b10      	cmp	r3, #16
 800bdb4:	d107      	bne.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdb6:	f107 0314 	add.w	r3, r7, #20
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe fc50 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	637b      	str	r3, [r7, #52]	; 0x34
 800bdc4:	e043      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800bdc6:	4b30      	ldr	r3, [pc, #192]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdd2:	d10a      	bne.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	2b20      	cmp	r3, #32
 800bdd8:	d107      	bne.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdda:	f107 0308 	add.w	r3, r7, #8
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe fda8 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	637b      	str	r3, [r7, #52]	; 0x34
 800bde8:	e031      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800bdea:	4b27      	ldr	r3, [pc, #156]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 0302 	and.w	r3, r3, #2
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d10c      	bne.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf8:	2b30      	cmp	r3, #48	; 0x30
 800bdfa:	d109      	bne.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bdfc:	4b22      	ldr	r3, [pc, #136]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	08db      	lsrs	r3, r3, #3
 800be02:	f003 0303 	and.w	r3, r3, #3
 800be06:	4a21      	ldr	r2, [pc, #132]	; (800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800be08:	fa22 f303 	lsr.w	r3, r2, r3
 800be0c:	637b      	str	r3, [r7, #52]	; 0x34
 800be0e:	e01e      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800be10:	4b1d      	ldr	r3, [pc, #116]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be1c:	d105      	bne.n	800be2a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	2b40      	cmp	r3, #64	; 0x40
 800be22:	d102      	bne.n	800be2a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800be24:	4b1a      	ldr	r3, [pc, #104]	; (800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800be26:	637b      	str	r3, [r7, #52]	; 0x34
 800be28:	e011      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800be2a:	4b17      	ldr	r3, [pc, #92]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800be2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be30:	f003 0302 	and.w	r3, r3, #2
 800be34:	2b02      	cmp	r3, #2
 800be36:	d106      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	2b50      	cmp	r3, #80	; 0x50
 800be3c:	d103      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800be3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be42:	637b      	str	r3, [r7, #52]	; 0x34
 800be44:	e003      	b.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be4a:	f001 ba28 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800be4e:	f001 ba26 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800be52:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800be54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be58:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800be5c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	2b00      	cmp	r3, #0
 800be62:	d104      	bne.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800be64:	f7fc faba 	bl	80083dc <HAL_RCC_GetPCLK3Freq>
 800be68:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800be6a:	f001 ba18 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800be6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be74:	d10e      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be76:	f107 0314 	add.w	r3, r7, #20
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fe fbf0 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be84:	f001 ba0b 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800be88:	44020c00 	.word	0x44020c00
 800be8c:	03d09000 	.word	0x03d09000
 800be90:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be9a:	d108      	bne.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be9c:	f107 0308 	add.w	r3, r7, #8
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fe fd47 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800beaa:	f001 b9f8 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800beae:	4ba4      	ldr	r3, [pc, #656]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d10d      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bec0:	d109      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bec2:	4b9f      	ldr	r3, [pc, #636]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	08db      	lsrs	r3, r3, #3
 800bec8:	f003 0303 	and.w	r3, r3, #3
 800becc:	4a9d      	ldr	r2, [pc, #628]	; (800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bece:	fa22 f303 	lsr.w	r3, r2, r3
 800bed2:	637b      	str	r3, [r7, #52]	; 0x34
 800bed4:	e020      	b.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800bed6:	4b9a      	ldr	r3, [pc, #616]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bee2:	d106      	bne.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800bee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800beea:	d102      	bne.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800beec:	4b96      	ldr	r3, [pc, #600]	; (800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800beee:	637b      	str	r3, [r7, #52]	; 0x34
 800bef0:	e012      	b.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800bef2:	4b93      	ldr	r3, [pc, #588]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bef8:	f003 0302 	and.w	r3, r3, #2
 800befc:	2b02      	cmp	r3, #2
 800befe:	d107      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bf06:	d103      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800bf08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf0c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf0e:	e003      	b.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800bf10:	2300      	movs	r3, #0
 800bf12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf14:	f001 b9c3 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bf18:	f001 b9c1 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800bf1c:	4b88      	ldr	r3, [pc, #544]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bf1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bf22:	f003 0307 	and.w	r3, r3, #7
 800bf26:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d104      	bne.n	800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800bf2e:	f7fc fa0d 	bl	800834c <HAL_RCC_GetHCLKFreq>
 800bf32:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800bf34:	f001 b9b3 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d104      	bne.n	800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800bf3e:	f7fc f8d9 	bl	80080f4 <HAL_RCC_GetSysClockFreq>
 800bf42:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bf44:	f001 b9ab 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800bf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d108      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf4e:	f107 0314 	add.w	r3, r7, #20
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fe fb84 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf5c:	f001 b99f 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800bf60:	4b77      	ldr	r3, [pc, #476]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf6c:	d105      	bne.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	2b03      	cmp	r3, #3
 800bf72:	d102      	bne.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800bf74:	4b75      	ldr	r3, [pc, #468]	; (800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800bf76:	637b      	str	r3, [r7, #52]	; 0x34
 800bf78:	e023      	b.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800bf7a:	4b71      	ldr	r3, [pc, #452]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f003 0302 	and.w	r3, r3, #2
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d10c      	bne.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	d109      	bne.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf8c:	4b6c      	ldr	r3, [pc, #432]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	08db      	lsrs	r3, r3, #3
 800bf92:	f003 0303 	and.w	r3, r3, #3
 800bf96:	4a6b      	ldr	r2, [pc, #428]	; (800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bf98:	fa22 f303 	lsr.w	r3, r2, r3
 800bf9c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf9e:	e010      	b.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800bfa0:	4b67      	ldr	r3, [pc, #412]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfac:	d105      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb0:	2b05      	cmp	r3, #5
 800bfb2:	d102      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800bfb4:	4b64      	ldr	r3, [pc, #400]	; (800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bfb6:	637b      	str	r3, [r7, #52]	; 0x34
 800bfb8:	e003      	b.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfbe:	f001 b96e 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bfc2:	f001 b96c 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800bfc6:	4b5e      	ldr	r3, [pc, #376]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bfc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bfcc:	f003 0308 	and.w	r3, r3, #8
 800bfd0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800bfd2:	4b5b      	ldr	r3, [pc, #364]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bfd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d106      	bne.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d103      	bne.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800bfe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfea:	637b      	str	r3, [r7, #52]	; 0x34
 800bfec:	e012      	b.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800bfee:	4b54      	ldr	r3, [pc, #336]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bffc:	d106      	bne.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	2b08      	cmp	r3, #8
 800c002:	d103      	bne.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800c004:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c008:	637b      	str	r3, [r7, #52]	; 0x34
 800c00a:	e003      	b.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800c010:	f001 b945 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c014:	f001 b943 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c018:	4b49      	ldr	r3, [pc, #292]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c01a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c01e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c022:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	2b00      	cmp	r3, #0
 800c028:	d104      	bne.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c02a:	f7fc f9ab 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800c02e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c030:	f001 b935 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800c034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c03a:	d108      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c03c:	f107 0308 	add.w	r3, r7, #8
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fc77 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c04a:	f001 b928 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c04e:	4b3c      	ldr	r3, [pc, #240]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f003 0302 	and.w	r3, r3, #2
 800c056:	2b02      	cmp	r3, #2
 800c058:	d10d      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c060:	d109      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c062:	4b37      	ldr	r3, [pc, #220]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	08db      	lsrs	r3, r3, #3
 800c068:	f003 0303 	and.w	r3, r3, #3
 800c06c:	4a35      	ldr	r2, [pc, #212]	; (800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c06e:	fa22 f303 	lsr.w	r3, r2, r3
 800c072:	637b      	str	r3, [r7, #52]	; 0x34
 800c074:	e011      	b.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800c076:	4b32      	ldr	r3, [pc, #200]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c07e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c082:	d106      	bne.n	800c092 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c08a:	d102      	bne.n	800c092 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800c08c:	4b2e      	ldr	r3, [pc, #184]	; (800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c08e:	637b      	str	r3, [r7, #52]	; 0x34
 800c090:	e003      	b.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800c092:	2300      	movs	r3, #0
 800c094:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c096:	f001 b902 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c09a:	f001 b900 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c09e:	4b28      	ldr	r3, [pc, #160]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c0a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c0a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c0a8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c0b0:	f7fc f968 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800c0b4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800c0b6:	f001 b8f2 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0c0:	d108      	bne.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0c2:	f107 0308 	add.w	r3, r7, #8
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe fc34 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0d0:	f001 b8e5 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800c0d4:	4b1a      	ldr	r3, [pc, #104]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 0302 	and.w	r3, r3, #2
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d10d      	bne.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c0e6:	d109      	bne.n	800c0fc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c0e8:	4b15      	ldr	r3, [pc, #84]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	08db      	lsrs	r3, r3, #3
 800c0ee:	f003 0303 	and.w	r3, r3, #3
 800c0f2:	4a14      	ldr	r2, [pc, #80]	; (800c144 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c0f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c0f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c0fa:	e011      	b.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800c0fc:	4b10      	ldr	r3, [pc, #64]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c108:	d106      	bne.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c110:	d102      	bne.n	800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800c112:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c114:	637b      	str	r3, [r7, #52]	; 0x34
 800c116:	e003      	b.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800c118:	2300      	movs	r3, #0
 800c11a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c11c:	f001 b8bf 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c120:	f001 b8bd 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c124:	4b06      	ldr	r3, [pc, #24]	; (800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c126:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c12a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c12e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10c      	bne.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c136:	f7fc f951 	bl	80083dc <HAL_RCC_GetPCLK3Freq>
 800c13a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800c13c:	f001 b8af 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c140:	44020c00 	.word	0x44020c00
 800c144:	03d09000 	.word	0x03d09000
 800c148:	003d0900 	.word	0x003d0900
 800c14c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800c150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c156:	d108      	bne.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c158:	f107 0308 	add.w	r3, r7, #8
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fe fbe9 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c166:	f001 b89a 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800c16a:	4b9f      	ldr	r3, [pc, #636]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 0302 	and.w	r3, r3, #2
 800c172:	2b02      	cmp	r3, #2
 800c174:	d10d      	bne.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c17c:	d109      	bne.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c17e:	4b9a      	ldr	r3, [pc, #616]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	08db      	lsrs	r3, r3, #3
 800c184:	f003 0303 	and.w	r3, r3, #3
 800c188:	4a98      	ldr	r2, [pc, #608]	; (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c18a:	fa22 f303 	lsr.w	r3, r2, r3
 800c18e:	637b      	str	r3, [r7, #52]	; 0x34
 800c190:	e011      	b.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800c192:	4b95      	ldr	r3, [pc, #596]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c19a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c19e:	d106      	bne.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800c1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1a6:	d102      	bne.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800c1a8:	4b91      	ldr	r3, [pc, #580]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c1aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ac:	e003      	b.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1b2:	f001 b874 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c1b6:	f001 b872 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c1ba:	4b8b      	ldr	r3, [pc, #556]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c1bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c1c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c1c4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d104      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c1cc:	f7fc f906 	bl	80083dc <HAL_RCC_GetPCLK3Freq>
 800c1d0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800c1d2:	f001 b864 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1dc:	d108      	bne.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe fba6 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1ec:	f001 b857 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c1f0:	4b7d      	ldr	r3, [pc, #500]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b02      	cmp	r3, #2
 800c1fa:	d10d      	bne.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c202:	d109      	bne.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c204:	4b78      	ldr	r3, [pc, #480]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	08db      	lsrs	r3, r3, #3
 800c20a:	f003 0303 	and.w	r3, r3, #3
 800c20e:	4a77      	ldr	r2, [pc, #476]	; (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c210:	fa22 f303 	lsr.w	r3, r2, r3
 800c214:	637b      	str	r3, [r7, #52]	; 0x34
 800c216:	e011      	b.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800c218:	4b73      	ldr	r3, [pc, #460]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c224:	d106      	bne.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c22c:	d102      	bne.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800c22e:	4b70      	ldr	r3, [pc, #448]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c230:	637b      	str	r3, [r7, #52]	; 0x34
 800c232:	e003      	b.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800c234:	2300      	movs	r3, #0
 800c236:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c238:	f001 b831 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c23c:	f001 b82f 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800c240:	4b69      	ldr	r3, [pc, #420]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c242:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c246:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800c24a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d104      	bne.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c252:	f7fc f897 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800c256:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c258:	f001 b821 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c262:	d108      	bne.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c264:	f107 0308 	add.w	r3, r7, #8
 800c268:	4618      	mov	r0, r3
 800c26a:	f7fe fb63 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c272:	f001 b814 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800c276:	4b5c      	ldr	r3, [pc, #368]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0302 	and.w	r3, r3, #2
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d10e      	bne.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c288:	d10a      	bne.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c28a:	4b57      	ldr	r3, [pc, #348]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	08db      	lsrs	r3, r3, #3
 800c290:	f003 0303 	and.w	r3, r3, #3
 800c294:	4a55      	ldr	r2, [pc, #340]	; (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c296:	fa22 f303 	lsr.w	r3, r2, r3
 800c29a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c29c:	f000 bfff 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2a4:	f000 bffb 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c2a8:	4b4f      	ldr	r3, [pc, #316]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c2aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c2ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c2b2:	633b      	str	r3, [r7, #48]	; 0x30
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c2ba:	d056      	beq.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c2c2:	f200 808b 	bhi.w	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2cc:	d03e      	beq.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2d4:	f200 8082 	bhi.w	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c2de:	d027      	beq.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c2e6:	d879      	bhi.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2ee:	d017      	beq.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2f6:	d871      	bhi.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d004      	beq.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c304:	d004      	beq.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800c306:	e069      	b.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c308:	f7fc f868 	bl	80083dc <HAL_RCC_GetPCLK3Freq>
 800c30c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c30e:	e068      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c310:	f107 0314 	add.w	r3, r7, #20
 800c314:	4618      	mov	r0, r3
 800c316:	f7fe f9a3 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c31e:	e060      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c320:	f107 0308 	add.w	r3, r7, #8
 800c324:	4618      	mov	r0, r3
 800c326:	f7fe fb05 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c32e:	e058      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c330:	4b2d      	ldr	r3, [pc, #180]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c336:	f003 0302 	and.w	r3, r3, #2
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d103      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800c33e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c342:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c344:	e04d      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c34a:	e04a      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c34c:	4b26      	ldr	r3, [pc, #152]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c34e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c352:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c35a:	d103      	bne.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800c35c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c360:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c362:	e03e      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c368:	e03b      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c36a:	4b1f      	ldr	r3, [pc, #124]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c36c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c370:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c374:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c376:	4b1c      	ldr	r3, [pc, #112]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f003 0302 	and.w	r3, r3, #2
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d10c      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	2b00      	cmp	r3, #0
 800c386:	d109      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c388:	4b17      	ldr	r3, [pc, #92]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	08db      	lsrs	r3, r3, #3
 800c38e:	f003 0303 	and.w	r3, r3, #3
 800c392:	4a16      	ldr	r2, [pc, #88]	; (800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c394:	fa22 f303 	lsr.w	r3, r2, r3
 800c398:	637b      	str	r3, [r7, #52]	; 0x34
 800c39a:	e01e      	b.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c39c:	4b12      	ldr	r3, [pc, #72]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3a8:	d106      	bne.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3b0:	d102      	bne.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c3b2:	4b0f      	ldr	r3, [pc, #60]	; (800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c3b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c3b6:	e010      	b.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3b8:	4b0b      	ldr	r3, [pc, #44]	; (800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3c4:	d106      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3cc:	d102      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c3ce:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800c3d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c3d2:	e002      	b.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c3d8:	e003      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800c3da:	e002      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c3e0:	bf00      	nop
          }
        }
        break;
 800c3e2:	f000 bf5c 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c3e6:	bf00      	nop
 800c3e8:	44020c00 	.word	0x44020c00
 800c3ec:	03d09000 	.word	0x03d09000
 800c3f0:	003d0900 	.word	0x003d0900
 800c3f4:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c3f8:	4b9e      	ldr	r3, [pc, #632]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c3fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c3fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c402:	633b      	str	r3, [r7, #48]	; 0x30
 800c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c406:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c40a:	d056      	beq.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800c40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c412:	f200 808b 	bhi.w	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c41c:	d03e      	beq.n	800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c424:	f200 8082 	bhi.w	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c42e:	d027      	beq.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c436:	d879      	bhi.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c43e:	d017      	beq.n	800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800c440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c446:	d871      	bhi.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d004      	beq.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c454:	d004      	beq.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800c456:	e069      	b.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800c458:	f7fb ff94 	bl	8008384 <HAL_RCC_GetPCLK1Freq>
 800c45c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c45e:	e068      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c460:	f107 0314 	add.w	r3, r7, #20
 800c464:	4618      	mov	r0, r3
 800c466:	f7fe f8fb 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c46e:	e060      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c470:	f107 0308 	add.w	r3, r7, #8
 800c474:	4618      	mov	r0, r3
 800c476:	f7fe fa5d 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c47e:	e058      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c480:	4b7c      	ldr	r3, [pc, #496]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c486:	f003 0302 	and.w	r3, r3, #2
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d103      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800c48e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c492:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c494:	e04d      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c49a:	e04a      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c49c:	4b75      	ldr	r3, [pc, #468]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c49e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c4a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4aa:	d103      	bne.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800c4ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c4b0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c4b2:	e03e      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c4b8:	e03b      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4ba:	4b6e      	ldr	r3, [pc, #440]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c4bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c4c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4c6:	4b6b      	ldr	r3, [pc, #428]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0302 	and.w	r3, r3, #2
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d10c      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d109      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c4d8:	4b66      	ldr	r3, [pc, #408]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	08db      	lsrs	r3, r3, #3
 800c4de:	f003 0303 	and.w	r3, r3, #3
 800c4e2:	4a65      	ldr	r2, [pc, #404]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ea:	e01e      	b.n	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4ec:	4b61      	ldr	r3, [pc, #388]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4f8:	d106      	bne.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c500:	d102      	bne.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c502:	4b5e      	ldr	r3, [pc, #376]	; (800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c504:	637b      	str	r3, [r7, #52]	; 0x34
 800c506:	e010      	b.n	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c508:	4b5a      	ldr	r3, [pc, #360]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c514:	d106      	bne.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c51c:	d102      	bne.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c51e:	4b58      	ldr	r3, [pc, #352]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c520:	637b      	str	r3, [r7, #52]	; 0x34
 800c522:	e002      	b.n	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c524:	2300      	movs	r3, #0
 800c526:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c528:	e003      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800c52a:	e002      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800c52c:	2300      	movs	r3, #0
 800c52e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c530:	bf00      	nop
          }
        }
        break;
 800c532:	f000 beb4 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800c536:	4b4f      	ldr	r3, [pc, #316]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c538:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c53c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c540:	633b      	str	r3, [r7, #48]	; 0x30
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c548:	d056      	beq.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c550:	f200 808b 	bhi.w	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c55a:	d03e      	beq.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800c55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c562:	f200 8082 	bhi.w	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c56c:	d027      	beq.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c574:	d879      	bhi.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c57c:	d017      	beq.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c584:	d871      	bhi.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d004      	beq.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800c58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c592:	d004      	beq.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800c594:	e069      	b.n	800c66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c596:	f7fb ff21 	bl	80083dc <HAL_RCC_GetPCLK3Freq>
 800c59a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c59c:	e068      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c59e:	f107 0314 	add.w	r3, r7, #20
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe f85c 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5ac:	e060      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ae:	f107 0308 	add.w	r3, r7, #8
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe f9be 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5bc:	e058      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c5be:	4b2d      	ldr	r3, [pc, #180]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c5c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5c4:	f003 0302 	and.w	r3, r3, #2
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d103      	bne.n	800c5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800c5cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5d0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c5d2:	e04d      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5d8:	e04a      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c5da:	4b26      	ldr	r3, [pc, #152]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c5dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5e8:	d103      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800c5ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c5ee:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c5f0:	e03e      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5f6:	e03b      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5f8:	4b1e      	ldr	r3, [pc, #120]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c5fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c5fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c602:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c604:	4b1b      	ldr	r3, [pc, #108]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d10c      	bne.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800c610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c612:	2b00      	cmp	r3, #0
 800c614:	d109      	bne.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c616:	4b17      	ldr	r3, [pc, #92]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	08db      	lsrs	r3, r3, #3
 800c61c:	f003 0303 	and.w	r3, r3, #3
 800c620:	4a15      	ldr	r2, [pc, #84]	; (800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c622:	fa22 f303 	lsr.w	r3, r2, r3
 800c626:	637b      	str	r3, [r7, #52]	; 0x34
 800c628:	e01e      	b.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c62a:	4b12      	ldr	r3, [pc, #72]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c636:	d106      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c63e:	d102      	bne.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c640:	4b0e      	ldr	r3, [pc, #56]	; (800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c642:	637b      	str	r3, [r7, #52]	; 0x34
 800c644:	e010      	b.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c646:	4b0b      	ldr	r3, [pc, #44]	; (800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c64e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c652:	d106      	bne.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c65a:	d102      	bne.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c65c:	4b08      	ldr	r3, [pc, #32]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c65e:	637b      	str	r3, [r7, #52]	; 0x34
 800c660:	e002      	b.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c666:	e003      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800c668:	e002      	b.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800c66a:	2300      	movs	r3, #0
 800c66c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c66e:	bf00      	nop
          }
        }
        break;
 800c670:	f000 be15 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c674:	44020c00 	.word	0x44020c00
 800c678:	03d09000 	.word	0x03d09000
 800c67c:	003d0900 	.word	0x003d0900
 800c680:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800c684:	4b9e      	ldr	r3, [pc, #632]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c686:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c68a:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800c68e:	633b      	str	r3, [r7, #48]	; 0x30
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c696:	d056      	beq.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c69e:	f200 808b 	bhi.w	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6a8:	d03e      	beq.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6b0:	f200 8082 	bhi.w	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c6ba:	d027      	beq.n	800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c6c2:	d879      	bhi.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6ca:	d017      	beq.n	800c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6d2:	d871      	bhi.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d004      	beq.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6e0:	d004      	beq.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800c6e2:	e069      	b.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c6e4:	f7fb fe7a 	bl	80083dc <HAL_RCC_GetPCLK3Freq>
 800c6e8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c6ea:	e068      	b.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ec:	f107 0314 	add.w	r3, r7, #20
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fd ffb5 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6fa:	e060      	b.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6fc:	f107 0308 	add.w	r3, r7, #8
 800c700:	4618      	mov	r0, r3
 800c702:	f7fe f917 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c70a:	e058      	b.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c70c:	4b7c      	ldr	r3, [pc, #496]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c70e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c712:	f003 0302 	and.w	r3, r3, #2
 800c716:	2b02      	cmp	r3, #2
 800c718:	d103      	bne.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800c71a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c71e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c720:	e04d      	b.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c726:	e04a      	b.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c728:	4b75      	ldr	r3, [pc, #468]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c72a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c72e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c736:	d103      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800c738:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c73c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c73e:	e03e      	b.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c744:	e03b      	b.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c746:	4b6e      	ldr	r3, [pc, #440]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c74c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c750:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c752:	4b6b      	ldr	r3, [pc, #428]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 0302 	and.w	r3, r3, #2
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d10c      	bne.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	2b00      	cmp	r3, #0
 800c762:	d109      	bne.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c764:	4b66      	ldr	r3, [pc, #408]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	08db      	lsrs	r3, r3, #3
 800c76a:	f003 0303 	and.w	r3, r3, #3
 800c76e:	4a65      	ldr	r2, [pc, #404]	; (800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800c770:	fa22 f303 	lsr.w	r3, r2, r3
 800c774:	637b      	str	r3, [r7, #52]	; 0x34
 800c776:	e01e      	b.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c778:	4b61      	ldr	r3, [pc, #388]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c784:	d106      	bne.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c78c:	d102      	bne.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c78e:	4b5e      	ldr	r3, [pc, #376]	; (800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800c790:	637b      	str	r3, [r7, #52]	; 0x34
 800c792:	e010      	b.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c794:	4b5a      	ldr	r3, [pc, #360]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c79c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7a0:	d106      	bne.n	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800c7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7a8:	d102      	bne.n	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c7aa:	4b58      	ldr	r3, [pc, #352]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800c7ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c7ae:	e002      	b.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c7b4:	e003      	b.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800c7b6:	e002      	b.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c7bc:	bf00      	nop
          }
        }
        break;
 800c7be:	f000 bd6e 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800c7c2:	4b4f      	ldr	r3, [pc, #316]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c7c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c7c8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c7cc:	633b      	str	r3, [r7, #48]	; 0x30
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c7d4:	d056      	beq.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c7dc:	f200 808b 	bhi.w	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7e6:	d03e      	beq.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7ee:	f200 8082 	bhi.w	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c7f8:	d027      	beq.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c800:	d879      	bhi.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c808:	d017      	beq.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c810:	d871      	bhi.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	2b00      	cmp	r3, #0
 800c816:	d004      	beq.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c81e:	d004      	beq.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800c820:	e069      	b.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c822:	f7fb fddb 	bl	80083dc <HAL_RCC_GetPCLK3Freq>
 800c826:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c828:	e068      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82a:	f107 0314 	add.w	r3, r7, #20
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fd ff16 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c838:	e060      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c83a:	f107 0308 	add.w	r3, r7, #8
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe f878 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c848:	e058      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c84a:	4b2d      	ldr	r3, [pc, #180]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c84c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c850:	f003 0302 	and.w	r3, r3, #2
 800c854:	2b02      	cmp	r3, #2
 800c856:	d103      	bne.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800c858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c85c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c85e:	e04d      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c864:	e04a      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c866:	4b26      	ldr	r3, [pc, #152]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c86c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c874:	d103      	bne.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800c876:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c87a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c87c:	e03e      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c882:	e03b      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c884:	4b1e      	ldr	r3, [pc, #120]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c88a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c88e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c890:	4b1b      	ldr	r3, [pc, #108]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 0302 	and.w	r3, r3, #2
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d10c      	bne.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800c89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d109      	bne.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c8a2:	4b17      	ldr	r3, [pc, #92]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	08db      	lsrs	r3, r3, #3
 800c8a8:	f003 0303 	and.w	r3, r3, #3
 800c8ac:	4a15      	ldr	r2, [pc, #84]	; (800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800c8ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c8b4:	e01e      	b.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8b6:	4b12      	ldr	r3, [pc, #72]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8c2:	d106      	bne.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8ca:	d102      	bne.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c8cc:	4b0e      	ldr	r3, [pc, #56]	; (800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800c8ce:	637b      	str	r3, [r7, #52]	; 0x34
 800c8d0:	e010      	b.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8d2:	4b0b      	ldr	r3, [pc, #44]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8de:	d106      	bne.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8e6:	d102      	bne.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c8e8:	4b08      	ldr	r3, [pc, #32]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800c8ea:	637b      	str	r3, [r7, #52]	; 0x34
 800c8ec:	e002      	b.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c8f2:	e003      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800c8f4:	e002      	b.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c8fa:	bf00      	nop
          }
        }
        break;
 800c8fc:	f000 bccf 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c900:	44020c00 	.word	0x44020c00
 800c904:	03d09000 	.word	0x03d09000
 800c908:	003d0900 	.word	0x003d0900
 800c90c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800c910:	4b9e      	ldr	r3, [pc, #632]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c912:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c916:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c91a:	633b      	str	r3, [r7, #48]	; 0x30
 800c91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c922:	d056      	beq.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800c924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c92a:	f200 808b 	bhi.w	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c934:	d03e      	beq.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c93c:	f200 8082 	bhi.w	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c946:	d027      	beq.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800c948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c94e:	d879      	bhi.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c956:	d017      	beq.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800c958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c95e:	d871      	bhi.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	2b00      	cmp	r3, #0
 800c964:	d004      	beq.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c96c:	d004      	beq.n	800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800c96e:	e069      	b.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c970:	f7fb fd34 	bl	80083dc <HAL_RCC_GetPCLK3Freq>
 800c974:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c976:	e068      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c978:	f107 0314 	add.w	r3, r7, #20
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7fd fe6f 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c986:	e060      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c988:	f107 0308 	add.w	r3, r7, #8
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fd ffd1 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c996:	e058      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c998:	4b7c      	ldr	r3, [pc, #496]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c99a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c99e:	f003 0302 	and.w	r3, r3, #2
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d103      	bne.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800c9a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9aa:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c9ac:	e04d      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9b2:	e04a      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c9b4:	4b75      	ldr	r3, [pc, #468]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c9b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c9ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9c2:	d103      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800c9c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c9c8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c9ca:	e03e      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9d0:	e03b      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9d2:	4b6e      	ldr	r3, [pc, #440]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c9d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c9d8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c9dc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9de:	4b6b      	ldr	r3, [pc, #428]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 0302 	and.w	r3, r3, #2
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d10c      	bne.n	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800c9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d109      	bne.n	800ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c9f0:	4b66      	ldr	r3, [pc, #408]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	08db      	lsrs	r3, r3, #3
 800c9f6:	f003 0303 	and.w	r3, r3, #3
 800c9fa:	4a65      	ldr	r2, [pc, #404]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800c9fc:	fa22 f303 	lsr.w	r3, r2, r3
 800ca00:	637b      	str	r3, [r7, #52]	; 0x34
 800ca02:	e01e      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca04:	4b61      	ldr	r3, [pc, #388]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca10:	d106      	bne.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca18:	d102      	bne.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ca1a:	4b5e      	ldr	r3, [pc, #376]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800ca1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca1e:	e010      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca20:	4b5a      	ldr	r3, [pc, #360]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca2c:	d106      	bne.n	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca34:	d102      	bne.n	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ca36:	4b58      	ldr	r3, [pc, #352]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ca38:	637b      	str	r3, [r7, #52]	; 0x34
 800ca3a:	e002      	b.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ca40:	e003      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800ca42:	e002      	b.n	800ca4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800ca44:	2300      	movs	r3, #0
 800ca46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ca48:	bf00      	nop
          }
        }
        break;
 800ca4a:	f000 bc28 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ca4e:	4b4f      	ldr	r3, [pc, #316]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ca50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ca54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca58:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800ca5a:	4b4c      	ldr	r3, [pc, #304]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca66:	d106      	bne.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d103      	bne.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800ca6e:	4b4a      	ldr	r3, [pc, #296]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ca70:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800ca72:	f000 bc14 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca7c:	d108      	bne.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca7e:	f107 0320 	add.w	r3, r7, #32
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fd fc82 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ca8c:	f000 bc07 	b.w	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca96:	d107      	bne.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca98:	f107 0314 	add.w	r3, r7, #20
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fd fddf 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800caa6:	e3fa      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800caa8:	2300      	movs	r3, #0
 800caaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800caac:	e3f7      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800caae:	4b37      	ldr	r3, [pc, #220]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cab4:	f003 0307 	and.w	r3, r3, #7
 800cab8:	633b      	str	r3, [r7, #48]	; 0x30
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	2b04      	cmp	r3, #4
 800cabe:	d861      	bhi.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800cac0:	a201      	add	r2, pc, #4	; (adr r2, 800cac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800cac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac6:	bf00      	nop
 800cac8:	0800cadd 	.word	0x0800cadd
 800cacc:	0800caed 	.word	0x0800caed
 800cad0:	0800cafd 	.word	0x0800cafd
 800cad4:	0800cb0d 	.word	0x0800cb0d
 800cad8:	0800cb13 	.word	0x0800cb13
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cadc:	f107 0320 	add.w	r3, r7, #32
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fd fc53 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800caea:	e04e      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caec:	f107 0314 	add.w	r3, r7, #20
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fd fdb5 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cafa:	e046      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cafc:	f107 0308 	add.w	r3, r7, #8
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fd ff17 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb0a:	e03e      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cb0c:	4b23      	ldr	r3, [pc, #140]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800cb0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb10:	e03b      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb12:	4b1e      	ldr	r3, [pc, #120]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cb14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cb18:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cb1c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb1e:	4b1b      	ldr	r3, [pc, #108]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 0302 	and.w	r3, r3, #2
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d10c      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800cb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d109      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cb30:	4b16      	ldr	r3, [pc, #88]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	08db      	lsrs	r3, r3, #3
 800cb36:	f003 0303 	and.w	r3, r3, #3
 800cb3a:	4a15      	ldr	r2, [pc, #84]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800cb3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb40:	637b      	str	r3, [r7, #52]	; 0x34
 800cb42:	e01e      	b.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb44:	4b11      	ldr	r3, [pc, #68]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb50:	d106      	bne.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800cb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb58:	d102      	bne.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cb5a:	4b0e      	ldr	r3, [pc, #56]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800cb5c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb5e:	e010      	b.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb60:	4b0a      	ldr	r3, [pc, #40]	; (800cb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb6c:	d106      	bne.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb74:	d102      	bne.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cb76:	4b08      	ldr	r3, [pc, #32]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800cb78:	637b      	str	r3, [r7, #52]	; 0x34
 800cb7a:	e002      	b.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cb80:	e003      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800cb82:	e002      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb88:	bf00      	nop
          }
        }
        break;
 800cb8a:	e388      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cb8c:	44020c00 	.word	0x44020c00
 800cb90:	03d09000 	.word	0x03d09000
 800cb94:	003d0900 	.word	0x003d0900
 800cb98:	007a1200 	.word	0x007a1200
 800cb9c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800cba0:	4ba9      	ldr	r3, [pc, #676]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbaa:	633b      	str	r3, [r7, #48]	; 0x30
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	2b20      	cmp	r3, #32
 800cbb0:	f200 809a 	bhi.w	800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800cbb4:	a201      	add	r2, pc, #4	; (adr r2, 800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800cbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbba:	bf00      	nop
 800cbbc:	0800cc41 	.word	0x0800cc41
 800cbc0:	0800cce9 	.word	0x0800cce9
 800cbc4:	0800cce9 	.word	0x0800cce9
 800cbc8:	0800cce9 	.word	0x0800cce9
 800cbcc:	0800cce9 	.word	0x0800cce9
 800cbd0:	0800cce9 	.word	0x0800cce9
 800cbd4:	0800cce9 	.word	0x0800cce9
 800cbd8:	0800cce9 	.word	0x0800cce9
 800cbdc:	0800cc51 	.word	0x0800cc51
 800cbe0:	0800cce9 	.word	0x0800cce9
 800cbe4:	0800cce9 	.word	0x0800cce9
 800cbe8:	0800cce9 	.word	0x0800cce9
 800cbec:	0800cce9 	.word	0x0800cce9
 800cbf0:	0800cce9 	.word	0x0800cce9
 800cbf4:	0800cce9 	.word	0x0800cce9
 800cbf8:	0800cce9 	.word	0x0800cce9
 800cbfc:	0800cc61 	.word	0x0800cc61
 800cc00:	0800cce9 	.word	0x0800cce9
 800cc04:	0800cce9 	.word	0x0800cce9
 800cc08:	0800cce9 	.word	0x0800cce9
 800cc0c:	0800cce9 	.word	0x0800cce9
 800cc10:	0800cce9 	.word	0x0800cce9
 800cc14:	0800cce9 	.word	0x0800cce9
 800cc18:	0800cce9 	.word	0x0800cce9
 800cc1c:	0800cc71 	.word	0x0800cc71
 800cc20:	0800cce9 	.word	0x0800cce9
 800cc24:	0800cce9 	.word	0x0800cce9
 800cc28:	0800cce9 	.word	0x0800cce9
 800cc2c:	0800cce9 	.word	0x0800cce9
 800cc30:	0800cce9 	.word	0x0800cce9
 800cc34:	0800cce9 	.word	0x0800cce9
 800cc38:	0800cce9 	.word	0x0800cce9
 800cc3c:	0800cc77 	.word	0x0800cc77
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc40:	f107 0320 	add.w	r3, r7, #32
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7fd fba1 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc4e:	e04e      	b.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc50:	f107 0314 	add.w	r3, r7, #20
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fd fd03 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc5e:	e046      	b.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc60:	f107 0308 	add.w	r3, r7, #8
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fd fe65 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc6e:	e03e      	b.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cc70:	4b76      	ldr	r3, [pc, #472]	; (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800cc72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc74:	e03b      	b.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc76:	4b74      	ldr	r3, [pc, #464]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cc78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cc7c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cc80:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc82:	4b71      	ldr	r3, [pc, #452]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 0302 	and.w	r3, r3, #2
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d10c      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d109      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cc94:	4b6c      	ldr	r3, [pc, #432]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	08db      	lsrs	r3, r3, #3
 800cc9a:	f003 0303 	and.w	r3, r3, #3
 800cc9e:	4a6c      	ldr	r2, [pc, #432]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800cca0:	fa22 f303 	lsr.w	r3, r2, r3
 800cca4:	637b      	str	r3, [r7, #52]	; 0x34
 800cca6:	e01e      	b.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cca8:	4b67      	ldr	r3, [pc, #412]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ccb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccb4:	d106      	bne.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccbc:	d102      	bne.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ccbe:	4b65      	ldr	r3, [pc, #404]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800ccc0:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc2:	e010      	b.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccc4:	4b60      	ldr	r3, [pc, #384]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccd0:	d106      	bne.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccd8:	d102      	bne.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ccda:	4b5f      	ldr	r3, [pc, #380]	; (800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800ccdc:	637b      	str	r3, [r7, #52]	; 0x34
 800ccde:	e002      	b.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cce4:	e003      	b.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800cce6:	e002      	b.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ccec:	bf00      	nop
          }
        }
        break;
 800ccee:	e2d6      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ccf0:	4b55      	ldr	r3, [pc, #340]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ccf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ccf6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ccfa:	633b      	str	r3, [r7, #48]	; 0x30
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd02:	d031      	beq.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800cd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd0a:	d866      	bhi.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0e:	2bc0      	cmp	r3, #192	; 0xc0
 800cd10:	d027      	beq.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd14:	2bc0      	cmp	r3, #192	; 0xc0
 800cd16:	d860      	bhi.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800cd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1a:	2b80      	cmp	r3, #128	; 0x80
 800cd1c:	d019      	beq.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd20:	2b80      	cmp	r3, #128	; 0x80
 800cd22:	d85a      	bhi.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800cd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d003      	beq.n	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	2b40      	cmp	r3, #64	; 0x40
 800cd2e:	d008      	beq.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800cd30:	e053      	b.n	800cdda <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd32:	f107 0320 	add.w	r3, r7, #32
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fd fb28 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd40:	e04e      	b.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd42:	f107 0314 	add.w	r3, r7, #20
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fd fc8a 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd50:	e046      	b.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd52:	f107 0308 	add.w	r3, r7, #8
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fd fdec 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd60:	e03e      	b.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cd62:	4b3a      	ldr	r3, [pc, #232]	; (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800cd64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd66:	e03b      	b.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd68:	4b37      	ldr	r3, [pc, #220]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cd6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd6e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cd72:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd74:	4b34      	ldr	r3, [pc, #208]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0302 	and.w	r3, r3, #2
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d10c      	bne.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d109      	bne.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cd86:	4b30      	ldr	r3, [pc, #192]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	08db      	lsrs	r3, r3, #3
 800cd8c:	f003 0303 	and.w	r3, r3, #3
 800cd90:	4a2f      	ldr	r2, [pc, #188]	; (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800cd92:	fa22 f303 	lsr.w	r3, r2, r3
 800cd96:	637b      	str	r3, [r7, #52]	; 0x34
 800cd98:	e01e      	b.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd9a:	4b2b      	ldr	r3, [pc, #172]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cda2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cda6:	d106      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800cda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdae:	d102      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cdb0:	4b28      	ldr	r3, [pc, #160]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800cdb2:	637b      	str	r3, [r7, #52]	; 0x34
 800cdb4:	e010      	b.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdb6:	4b24      	ldr	r3, [pc, #144]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdc2:	d106      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdca:	d102      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cdcc:	4b22      	ldr	r3, [pc, #136]	; (800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800cdce:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd0:	e002      	b.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cdd6:	e003      	b.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800cdd8:	e002      	b.n	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cdde:	bf00      	nop
          }
        }
        break;
 800cde0:	e25d      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800cde2:	4b19      	ldr	r3, [pc, #100]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cde4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cde8:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800cdec:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d103      	bne.n	800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800cdf4:	f7fb fadc 	bl	80083b0 <HAL_RCC_GetPCLK2Freq>
 800cdf8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800cdfa:	e250      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800cdfc:	4b12      	ldr	r3, [pc, #72]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce08:	d10b      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce10:	d107      	bne.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce12:	f107 0314 	add.w	r3, r7, #20
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fd fc22 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce20:	e04f      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800ce22:	4b09      	ldr	r3, [pc, #36]	; (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce2e:	d115      	bne.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce36:	d111      	bne.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce38:	f107 0308 	add.w	r3, r7, #8
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fd fd79 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	637b      	str	r3, [r7, #52]	; 0x34
 800ce46:	e03c      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800ce48:	44020c00 	.word	0x44020c00
 800ce4c:	00bb8000 	.word	0x00bb8000
 800ce50:	03d09000 	.word	0x03d09000
 800ce54:	003d0900 	.word	0x003d0900
 800ce58:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800ce5c:	4b94      	ldr	r3, [pc, #592]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0302 	and.w	r3, r3, #2
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d10d      	bne.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800ce68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ce6e:	d109      	bne.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ce70:	4b8f      	ldr	r3, [pc, #572]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	08db      	lsrs	r3, r3, #3
 800ce76:	f003 0303 	and.w	r3, r3, #3
 800ce7a:	4a8e      	ldr	r2, [pc, #568]	; (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ce7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ce80:	637b      	str	r3, [r7, #52]	; 0x34
 800ce82:	e01e      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800ce84:	4b8a      	ldr	r3, [pc, #552]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce90:	d106      	bne.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce98:	d102      	bne.n	800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800ce9a:	4b87      	ldr	r3, [pc, #540]	; (800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ce9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce9e:	e010      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800cea0:	4b83      	ldr	r3, [pc, #524]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceac:	d106      	bne.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ceb4:	d102      	bne.n	800cebc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800ceb6:	4b81      	ldr	r3, [pc, #516]	; (800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800ceb8:	637b      	str	r3, [r7, #52]	; 0x34
 800ceba:	e002      	b.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800cebc:	2300      	movs	r3, #0
 800cebe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cec0:	e1ed      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cec2:	e1ec      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800cec4:	4b7a      	ldr	r3, [pc, #488]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ceca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cece:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d103      	bne.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ced6:	f7fb fa81 	bl	80083dc <HAL_RCC_GetPCLK3Freq>
 800ceda:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800cedc:	e1df      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800cede:	4b74      	ldr	r3, [pc, #464]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ceea:	d10b      	bne.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800ceec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cef2:	d107      	bne.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cef4:	f107 0314 	add.w	r3, r7, #20
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fd fbb1 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	637b      	str	r3, [r7, #52]	; 0x34
 800cf02:	e045      	b.n	800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800cf04:	4b6a      	ldr	r3, [pc, #424]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf10:	d10b      	bne.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800cf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf18:	d107      	bne.n	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf1a:	f107 0308 	add.w	r3, r7, #8
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fd fd08 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	637b      	str	r3, [r7, #52]	; 0x34
 800cf28:	e032      	b.n	800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800cf2a:	4b61      	ldr	r3, [pc, #388]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f003 0302 	and.w	r3, r3, #2
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d10d      	bne.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800cf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cf3c:	d109      	bne.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cf3e:	4b5c      	ldr	r3, [pc, #368]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	08db      	lsrs	r3, r3, #3
 800cf44:	f003 0303 	and.w	r3, r3, #3
 800cf48:	4a5a      	ldr	r2, [pc, #360]	; (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800cf4a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf4e:	637b      	str	r3, [r7, #52]	; 0x34
 800cf50:	e01e      	b.n	800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800cf52:	4b57      	ldr	r3, [pc, #348]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf5e:	d106      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800cf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf66:	d102      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800cf68:	4b53      	ldr	r3, [pc, #332]	; (800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800cf6a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf6c:	e010      	b.n	800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800cf6e:	4b50      	ldr	r3, [pc, #320]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf7a:	d106      	bne.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cf82:	d102      	bne.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800cf84:	4b4d      	ldr	r3, [pc, #308]	; (800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800cf86:	637b      	str	r3, [r7, #52]	; 0x34
 800cf88:	e002      	b.n	800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cf8e:	e186      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cf90:	e185      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cf92:	4b47      	ldr	r3, [pc, #284]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cf94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf98:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800cf9c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d103      	bne.n	800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800cfa4:	f7fb fa04 	bl	80083b0 <HAL_RCC_GetPCLK2Freq>
 800cfa8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800cfaa:	e178      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800cfac:	4b40      	ldr	r3, [pc, #256]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfb8:	d10b      	bne.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800cfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfc0:	d107      	bne.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfc2:	f107 0314 	add.w	r3, r7, #20
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fd fb4a 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	637b      	str	r3, [r7, #52]	; 0x34
 800cfd0:	e045      	b.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800cfd2:	4b37      	ldr	r3, [pc, #220]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfde:	d10b      	bne.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfe6:	d107      	bne.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfe8:	f107 0308 	add.w	r3, r7, #8
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fd fca1 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	637b      	str	r3, [r7, #52]	; 0x34
 800cff6:	e032      	b.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800cff8:	4b2d      	ldr	r3, [pc, #180]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f003 0302 	and.w	r3, r3, #2
 800d000:	2b02      	cmp	r3, #2
 800d002:	d10d      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800d00a:	d109      	bne.n	800d020 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d00c:	4b28      	ldr	r3, [pc, #160]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	08db      	lsrs	r3, r3, #3
 800d012:	f003 0303 	and.w	r3, r3, #3
 800d016:	4a27      	ldr	r2, [pc, #156]	; (800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800d018:	fa22 f303 	lsr.w	r3, r2, r3
 800d01c:	637b      	str	r3, [r7, #52]	; 0x34
 800d01e:	e01e      	b.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800d020:	4b23      	ldr	r3, [pc, #140]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d02c:	d106      	bne.n	800d03c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800d02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d034:	d102      	bne.n	800d03c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800d036:	4b20      	ldr	r3, [pc, #128]	; (800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800d038:	637b      	str	r3, [r7, #52]	; 0x34
 800d03a:	e010      	b.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800d03c:	4b1c      	ldr	r3, [pc, #112]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d048:	d106      	bne.n	800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800d050:	d102      	bne.n	800d058 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800d052:	4b1a      	ldr	r3, [pc, #104]	; (800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800d054:	637b      	str	r3, [r7, #52]	; 0x34
 800d056:	e002      	b.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800d058:	2300      	movs	r3, #0
 800d05a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d05c:	e11f      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d05e:	e11e      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d060:	4b13      	ldr	r3, [pc, #76]	; (800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d062:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d066:	f003 0303 	and.w	r3, r3, #3
 800d06a:	633b      	str	r3, [r7, #48]	; 0x30
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06e:	2b03      	cmp	r3, #3
 800d070:	d85f      	bhi.n	800d132 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800d072:	a201      	add	r2, pc, #4	; (adr r2, 800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800d074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d078:	0800d089 	.word	0x0800d089
 800d07c:	0800d091 	.word	0x0800d091
 800d080:	0800d0a1 	.word	0x0800d0a1
 800d084:	0800d0c1 	.word	0x0800d0c1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800d088:	f7fb f960 	bl	800834c <HAL_RCC_GetHCLKFreq>
 800d08c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800d08e:	e053      	b.n	800d138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d090:	f107 0320 	add.w	r3, r7, #32
 800d094:	4618      	mov	r0, r3
 800d096:	f7fd f979 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d09e:	e04b      	b.n	800d138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0a0:	f107 0314 	add.w	r3, r7, #20
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7fd fadb 	bl	800a660 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d0ae:	e043      	b.n	800d138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800d0b0:	44020c00 	.word	0x44020c00
 800d0b4:	03d09000 	.word	0x03d09000
 800d0b8:	003d0900 	.word	0x003d0900
 800d0bc:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d0c0:	4b79      	ldr	r3, [pc, #484]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d0c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d0c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d0cc:	4b76      	ldr	r3, [pc, #472]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f003 0302 	and.w	r3, r3, #2
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d10c      	bne.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d109      	bne.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d0de:	4b72      	ldr	r3, [pc, #456]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	08db      	lsrs	r3, r3, #3
 800d0e4:	f003 0303 	and.w	r3, r3, #3
 800d0e8:	4a70      	ldr	r2, [pc, #448]	; (800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800d0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d0f0:	e01e      	b.n	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d0f2:	4b6d      	ldr	r3, [pc, #436]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0fe:	d106      	bne.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d106:	d102      	bne.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d108:	4b69      	ldr	r3, [pc, #420]	; (800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800d10a:	637b      	str	r3, [r7, #52]	; 0x34
 800d10c:	e010      	b.n	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d10e:	4b66      	ldr	r3, [pc, #408]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d11a:	d106      	bne.n	800d12a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d122:	d102      	bne.n	800d12a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d124:	4b63      	ldr	r3, [pc, #396]	; (800d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800d126:	637b      	str	r3, [r7, #52]	; 0x34
 800d128:	e002      	b.n	800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800d12a:	2300      	movs	r3, #0
 800d12c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d12e:	e003      	b.n	800d138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800d130:	e002      	b.n	800d138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d136:	bf00      	nop
          }
        }
        break;
 800d138:	e0b1      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800d13a:	4b5b      	ldr	r3, [pc, #364]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d13c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d140:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d144:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800d146:	4b58      	ldr	r3, [pc, #352]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b02      	cmp	r3, #2
 800d152:	d106      	bne.n	800d162 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800d154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d156:	2b00      	cmp	r3, #0
 800d158:	d103      	bne.n	800d162 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800d15a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d15e:	637b      	str	r3, [r7, #52]	; 0x34
 800d160:	e01f      	b.n	800d1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800d162:	4b51      	ldr	r3, [pc, #324]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d16c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d170:	d106      	bne.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800d172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d174:	2b40      	cmp	r3, #64	; 0x40
 800d176:	d103      	bne.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800d178:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d17c:	637b      	str	r3, [r7, #52]	; 0x34
 800d17e:	e010      	b.n	800d1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800d180:	4b49      	ldr	r3, [pc, #292]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d18c:	d106      	bne.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d190:	2b80      	cmp	r3, #128	; 0x80
 800d192:	d103      	bne.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800d194:	f248 0312 	movw	r3, #32786	; 0x8012
 800d198:	637b      	str	r3, [r7, #52]	; 0x34
 800d19a:	e002      	b.n	800d1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800d19c:	2300      	movs	r3, #0
 800d19e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800d1a0:	e07d      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d1a2:	e07c      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d1a4:	4b40      	ldr	r3, [pc, #256]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d1a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d1aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d1ae:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d1b0:	4b3d      	ldr	r3, [pc, #244]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d1b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1bc:	d105      	bne.n	800d1ca <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800d1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d102      	bne.n	800d1ca <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800d1c4:	4b3c      	ldr	r3, [pc, #240]	; (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800d1c6:	637b      	str	r3, [r7, #52]	; 0x34
 800d1c8:	e031      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800d1ca:	4b37      	ldr	r3, [pc, #220]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1d6:	d10a      	bne.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	2b10      	cmp	r3, #16
 800d1dc:	d107      	bne.n	800d1ee <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1de:	f107 0320 	add.w	r3, r7, #32
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fd f8d2 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ea:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ec:	e01f      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800d1ee:	4b2e      	ldr	r3, [pc, #184]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d1f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d1f4:	f003 0302 	and.w	r3, r3, #2
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d106      	bne.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fe:	2b20      	cmp	r3, #32
 800d200:	d103      	bne.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800d202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d206:	637b      	str	r3, [r7, #52]	; 0x34
 800d208:	e011      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800d20a:	4b27      	ldr	r3, [pc, #156]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d20c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d218:	d106      	bne.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800d21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21c:	2b30      	cmp	r3, #48	; 0x30
 800d21e:	d103      	bne.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800d220:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d224:	637b      	str	r3, [r7, #52]	; 0x34
 800d226:	e002      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800d228:	2300      	movs	r3, #0
 800d22a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800d22c:	e037      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d22e:	e036      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800d230:	4b1d      	ldr	r3, [pc, #116]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d236:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d23a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	2b10      	cmp	r3, #16
 800d240:	d107      	bne.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d242:	f107 0320 	add.w	r3, r7, #32
 800d246:	4618      	mov	r0, r3
 800d248:	f7fd f8a0 	bl	800a38c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800d250:	e025      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800d252:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d25a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d25e:	d10a      	bne.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800d260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d262:	2b20      	cmp	r3, #32
 800d264:	d107      	bne.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d266:	f107 0308 	add.w	r3, r7, #8
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fd fb62 	bl	800a934 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	637b      	str	r3, [r7, #52]	; 0x34
 800d274:	e00f      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800d276:	4b0c      	ldr	r3, [pc, #48]	; (800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d27e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d282:	d105      	bne.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	2b30      	cmp	r3, #48	; 0x30
 800d288:	d102      	bne.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800d28a:	4b0b      	ldr	r3, [pc, #44]	; (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800d28c:	637b      	str	r3, [r7, #52]	; 0x34
 800d28e:	e002      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800d290:	2300      	movs	r3, #0
 800d292:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800d294:	e003      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d296:	e002      	b.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800d298:	2300      	movs	r3, #0
 800d29a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d29c:	bf00      	nop
    }
  }

  return (frequency);
 800d29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	373c      	adds	r7, #60	; 0x3c
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd90      	pop	{r4, r7, pc}
 800d2a8:	44020c00 	.word	0x44020c00
 800d2ac:	03d09000 	.word	0x03d09000
 800d2b0:	003d0900 	.word	0x003d0900
 800d2b4:	007a1200 	.word	0x007a1200
 800d2b8:	02dc6c00 	.word	0x02dc6c00

0800d2bc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800d2c4:	4b48      	ldr	r3, [pc, #288]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a47      	ldr	r2, [pc, #284]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d2ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d2d0:	f7f6 ff42 	bl	8004158 <HAL_GetTick>
 800d2d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d2d6:	e008      	b.n	800d2ea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2d8:	f7f6 ff3e 	bl	8004158 <HAL_GetTick>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d901      	bls.n	800d2ea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	e07a      	b.n	800d3e0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d2ea:	4b3f      	ldr	r3, [pc, #252]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1f0      	bne.n	800d2d8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d2f6:	4b3c      	ldr	r3, [pc, #240]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d2fe:	f023 0303 	bic.w	r3, r3, #3
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	6811      	ldr	r1, [r2, #0]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	6852      	ldr	r2, [r2, #4]
 800d30a:	0212      	lsls	r2, r2, #8
 800d30c:	430a      	orrs	r2, r1
 800d30e:	4936      	ldr	r1, [pc, #216]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d310:	4313      	orrs	r3, r2
 800d312:	62cb      	str	r3, [r1, #44]	; 0x2c
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	3b01      	subs	r3, #1
 800d31a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	3b01      	subs	r3, #1
 800d324:	025b      	lsls	r3, r3, #9
 800d326:	b29b      	uxth	r3, r3
 800d328:	431a      	orrs	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	691b      	ldr	r3, [r3, #16]
 800d32e:	3b01      	subs	r3, #1
 800d330:	041b      	lsls	r3, r3, #16
 800d332:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d336:	431a      	orrs	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	695b      	ldr	r3, [r3, #20]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	061b      	lsls	r3, r3, #24
 800d340:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d344:	4928      	ldr	r1, [pc, #160]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d346:	4313      	orrs	r3, r2
 800d348:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d34a:	4b27      	ldr	r3, [pc, #156]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34e:	f023 020c 	bic.w	r2, r3, #12
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	4924      	ldr	r1, [pc, #144]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d358:	4313      	orrs	r3, r2
 800d35a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800d35c:	4b22      	ldr	r3, [pc, #136]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d360:	f023 0220 	bic.w	r2, r3, #32
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	69db      	ldr	r3, [r3, #28]
 800d368:	491f      	ldr	r1, [pc, #124]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d36a:	4313      	orrs	r3, r2
 800d36c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d36e:	4b1e      	ldr	r3, [pc, #120]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d376:	491c      	ldr	r1, [pc, #112]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d378:	4313      	orrs	r3, r2
 800d37a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800d37c:	4b1a      	ldr	r3, [pc, #104]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d380:	4a19      	ldr	r2, [pc, #100]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d382:	f023 0310 	bic.w	r3, r3, #16
 800d386:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800d388:	4b17      	ldr	r3, [pc, #92]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d390:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	6a12      	ldr	r2, [r2, #32]
 800d398:	00d2      	lsls	r2, r2, #3
 800d39a:	4913      	ldr	r1, [pc, #76]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d39c:	4313      	orrs	r3, r2
 800d39e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800d3a0:	4b11      	ldr	r3, [pc, #68]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	4a10      	ldr	r2, [pc, #64]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d3a6:	f043 0310 	orr.w	r3, r3, #16
 800d3aa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800d3ac:	4b0e      	ldr	r3, [pc, #56]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a0d      	ldr	r2, [pc, #52]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d3b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d3b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d3b8:	f7f6 fece 	bl	8004158 <HAL_GetTick>
 800d3bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d3be:	e008      	b.n	800d3d2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d3c0:	f7f6 feca 	bl	8004158 <HAL_GetTick>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	1ad3      	subs	r3, r2, r3
 800d3ca:	2b02      	cmp	r3, #2
 800d3cc:	d901      	bls.n	800d3d2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	e006      	b.n	800d3e0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d3d2:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <RCCEx_PLL2_Config+0x12c>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d0f0      	beq.n	800d3c0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800d3de:	2300      	movs	r3, #0

}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	44020c00 	.word	0x44020c00

0800d3ec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800d3f4:	4b48      	ldr	r3, [pc, #288]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a47      	ldr	r2, [pc, #284]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d3fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d400:	f7f6 feaa 	bl	8004158 <HAL_GetTick>
 800d404:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d406:	e008      	b.n	800d41a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d408:	f7f6 fea6 	bl	8004158 <HAL_GetTick>
 800d40c:	4602      	mov	r2, r0
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	2b02      	cmp	r3, #2
 800d414:	d901      	bls.n	800d41a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d416:	2303      	movs	r3, #3
 800d418:	e07a      	b.n	800d510 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d41a:	4b3f      	ldr	r3, [pc, #252]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1f0      	bne.n	800d408 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d426:	4b3c      	ldr	r3, [pc, #240]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d42a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d42e:	f023 0303 	bic.w	r3, r3, #3
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	6811      	ldr	r1, [r2, #0]
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	6852      	ldr	r2, [r2, #4]
 800d43a:	0212      	lsls	r2, r2, #8
 800d43c:	430a      	orrs	r2, r1
 800d43e:	4936      	ldr	r1, [pc, #216]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d440:	4313      	orrs	r3, r2
 800d442:	630b      	str	r3, [r1, #48]	; 0x30
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	3b01      	subs	r3, #1
 800d44a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	3b01      	subs	r3, #1
 800d454:	025b      	lsls	r3, r3, #9
 800d456:	b29b      	uxth	r3, r3
 800d458:	431a      	orrs	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	691b      	ldr	r3, [r3, #16]
 800d45e:	3b01      	subs	r3, #1
 800d460:	041b      	lsls	r3, r3, #16
 800d462:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d466:	431a      	orrs	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	695b      	ldr	r3, [r3, #20]
 800d46c:	3b01      	subs	r3, #1
 800d46e:	061b      	lsls	r3, r3, #24
 800d470:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d474:	4928      	ldr	r1, [pc, #160]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d476:	4313      	orrs	r3, r2
 800d478:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d47a:	4b27      	ldr	r3, [pc, #156]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47e:	f023 020c 	bic.w	r2, r3, #12
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	4924      	ldr	r1, [pc, #144]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d488:	4313      	orrs	r3, r2
 800d48a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800d48c:	4b22      	ldr	r3, [pc, #136]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d490:	f023 0220 	bic.w	r2, r3, #32
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	69db      	ldr	r3, [r3, #28]
 800d498:	491f      	ldr	r1, [pc, #124]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d49a:	4313      	orrs	r3, r2
 800d49c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d49e:	4b1e      	ldr	r3, [pc, #120]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a6:	491c      	ldr	r1, [pc, #112]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800d4ac:	4b1a      	ldr	r3, [pc, #104]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b0:	4a19      	ldr	r2, [pc, #100]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4b2:	f023 0310 	bic.w	r3, r3, #16
 800d4b6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800d4b8:	4b17      	ldr	r3, [pc, #92]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	6a12      	ldr	r2, [r2, #32]
 800d4c8:	00d2      	lsls	r2, r2, #3
 800d4ca:	4913      	ldr	r1, [pc, #76]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800d4d0:	4b11      	ldr	r3, [pc, #68]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d4:	4a10      	ldr	r2, [pc, #64]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4d6:	f043 0310 	orr.w	r3, r3, #16
 800d4da:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800d4dc:	4b0e      	ldr	r3, [pc, #56]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a0d      	ldr	r2, [pc, #52]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d4e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d4e8:	f7f6 fe36 	bl	8004158 <HAL_GetTick>
 800d4ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4ee:	e008      	b.n	800d502 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d4f0:	f7f6 fe32 	bl	8004158 <HAL_GetTick>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d901      	bls.n	800d502 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d4fe:	2303      	movs	r3, #3
 800d500:	e006      	b.n	800d510 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d502:	4b05      	ldr	r3, [pc, #20]	; (800d518 <RCCEx_PLL3_Config+0x12c>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d0f0      	beq.n	800d4f0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	44020c00 	.word	0x44020c00

0800d51c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b087      	sub	sp, #28
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d528:	4b07      	ldr	r3, [pc, #28]	; (800d548 <HAL_RTCEx_BKUPWrite+0x2c>)
 800d52a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	4413      	add	r3, r2
 800d534:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	601a      	str	r2, [r3, #0]
}
 800d53c:	bf00      	nop
 800d53e:	371c      	adds	r7, #28
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	44007d00 	.word	0x44007d00

0800d54c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b085      	sub	sp, #20
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d556:	4b07      	ldr	r3, [pc, #28]	; (800d574 <HAL_RTCEx_BKUPRead+0x28>)
 800d558:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	4413      	add	r3, r2
 800d562:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	44007d00 	.word	0x44007d00

0800d578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e049      	b.n	800d61e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d590:	b2db      	uxtb	r3, r3
 800d592:	2b00      	cmp	r3, #0
 800d594:	d106      	bne.n	800d5a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f841 	bl	800d626 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	f000 fa60 	bl	800da7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d626:	b480      	push	{r7}
 800d628:	b083      	sub	sp, #12
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d62e:	bf00      	nop
 800d630:	370c      	adds	r7, #12
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
	...

0800d63c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d001      	beq.n	800d654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e07c      	b.n	800d74e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68da      	ldr	r2, [r3, #12]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f042 0201 	orr.w	r2, r2, #1
 800d66a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a3a      	ldr	r2, [pc, #232]	; (800d75c <HAL_TIM_Base_Start_IT+0x120>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d04a      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a39      	ldr	r2, [pc, #228]	; (800d760 <HAL_TIM_Base_Start_IT+0x124>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d045      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d688:	d040      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d692:	d03b      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a32      	ldr	r2, [pc, #200]	; (800d764 <HAL_TIM_Base_Start_IT+0x128>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d036      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a31      	ldr	r2, [pc, #196]	; (800d768 <HAL_TIM_Base_Start_IT+0x12c>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d031      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a2f      	ldr	r2, [pc, #188]	; (800d76c <HAL_TIM_Base_Start_IT+0x130>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d02c      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a2e      	ldr	r2, [pc, #184]	; (800d770 <HAL_TIM_Base_Start_IT+0x134>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d027      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a2c      	ldr	r2, [pc, #176]	; (800d774 <HAL_TIM_Base_Start_IT+0x138>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d022      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a2b      	ldr	r2, [pc, #172]	; (800d778 <HAL_TIM_Base_Start_IT+0x13c>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d01d      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a29      	ldr	r2, [pc, #164]	; (800d77c <HAL_TIM_Base_Start_IT+0x140>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d018      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4a28      	ldr	r2, [pc, #160]	; (800d780 <HAL_TIM_Base_Start_IT+0x144>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d013      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a26      	ldr	r2, [pc, #152]	; (800d784 <HAL_TIM_Base_Start_IT+0x148>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d00e      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a25      	ldr	r2, [pc, #148]	; (800d788 <HAL_TIM_Base_Start_IT+0x14c>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d009      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a23      	ldr	r2, [pc, #140]	; (800d78c <HAL_TIM_Base_Start_IT+0x150>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d004      	beq.n	800d70c <HAL_TIM_Base_Start_IT+0xd0>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a22      	ldr	r2, [pc, #136]	; (800d790 <HAL_TIM_Base_Start_IT+0x154>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d115      	bne.n	800d738 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	689a      	ldr	r2, [r3, #8]
 800d712:	4b20      	ldr	r3, [pc, #128]	; (800d794 <HAL_TIM_Base_Start_IT+0x158>)
 800d714:	4013      	ands	r3, r2
 800d716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b06      	cmp	r3, #6
 800d71c:	d015      	beq.n	800d74a <HAL_TIM_Base_Start_IT+0x10e>
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d724:	d011      	beq.n	800d74a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f042 0201 	orr.w	r2, r2, #1
 800d734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d736:	e008      	b.n	800d74a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f042 0201 	orr.w	r2, r2, #1
 800d746:	601a      	str	r2, [r3, #0]
 800d748:	e000      	b.n	800d74c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d74a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	40012c00 	.word	0x40012c00
 800d760:	50012c00 	.word	0x50012c00
 800d764:	40000400 	.word	0x40000400
 800d768:	50000400 	.word	0x50000400
 800d76c:	40000800 	.word	0x40000800
 800d770:	50000800 	.word	0x50000800
 800d774:	40000c00 	.word	0x40000c00
 800d778:	50000c00 	.word	0x50000c00
 800d77c:	40013400 	.word	0x40013400
 800d780:	50013400 	.word	0x50013400
 800d784:	40001800 	.word	0x40001800
 800d788:	50001800 	.word	0x50001800
 800d78c:	40014000 	.word	0x40014000
 800d790:	50014000 	.word	0x50014000
 800d794:	00010007 	.word	0x00010007

0800d798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	691b      	ldr	r3, [r3, #16]
 800d7ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	f003 0302 	and.w	r3, r3, #2
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d020      	beq.n	800d7fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f003 0302 	and.w	r3, r3, #2
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d01b      	beq.n	800d7fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f06f 0202 	mvn.w	r2, #2
 800d7cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	f003 0303 	and.w	r3, r3, #3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f92c 	bl	800da40 <HAL_TIM_IC_CaptureCallback>
 800d7e8:	e005      	b.n	800d7f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f91e 	bl	800da2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 f92f 	bl	800da54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	f003 0304 	and.w	r3, r3, #4
 800d802:	2b00      	cmp	r3, #0
 800d804:	d020      	beq.n	800d848 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f003 0304 	and.w	r3, r3, #4
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d01b      	beq.n	800d848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f06f 0204 	mvn.w	r2, #4
 800d818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2202      	movs	r2, #2
 800d81e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	699b      	ldr	r3, [r3, #24]
 800d826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d003      	beq.n	800d836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f906 	bl	800da40 <HAL_TIM_IC_CaptureCallback>
 800d834:	e005      	b.n	800d842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f8f8 	bl	800da2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 f909 	bl	800da54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	f003 0308 	and.w	r3, r3, #8
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d020      	beq.n	800d894 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f003 0308 	and.w	r3, r3, #8
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d01b      	beq.n	800d894 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f06f 0208 	mvn.w	r2, #8
 800d864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2204      	movs	r2, #4
 800d86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	69db      	ldr	r3, [r3, #28]
 800d872:	f003 0303 	and.w	r3, r3, #3
 800d876:	2b00      	cmp	r3, #0
 800d878:	d003      	beq.n	800d882 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f8e0 	bl	800da40 <HAL_TIM_IC_CaptureCallback>
 800d880:	e005      	b.n	800d88e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 f8d2 	bl	800da2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f8e3 	bl	800da54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	f003 0310 	and.w	r3, r3, #16
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d020      	beq.n	800d8e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f003 0310 	and.w	r3, r3, #16
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d01b      	beq.n	800d8e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f06f 0210 	mvn.w	r2, #16
 800d8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2208      	movs	r2, #8
 800d8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	69db      	ldr	r3, [r3, #28]
 800d8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d003      	beq.n	800d8ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 f8ba 	bl	800da40 <HAL_TIM_IC_CaptureCallback>
 800d8cc:	e005      	b.n	800d8da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f000 f8ac 	bl	800da2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 f8bd 	bl	800da54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	f003 0301 	and.w	r3, r3, #1
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00c      	beq.n	800d904 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d007      	beq.n	800d904 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f06f 0201 	mvn.w	r2, #1
 800d8fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7f3 f908 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00c      	beq.n	800d928 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d914:	2b00      	cmp	r3, #0
 800d916:	d007      	beq.n	800d928 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f9d2 	bl	800dccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00c      	beq.n	800d94c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d007      	beq.n	800d94c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 f9ca 	bl	800dce0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00c      	beq.n	800d970 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d007      	beq.n	800d970 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 f87c 	bl	800da68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	f003 0320 	and.w	r3, r3, #32
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00c      	beq.n	800d994 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	d007      	beq.n	800d994 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f06f 0220 	mvn.w	r2, #32
 800d98c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 f992 	bl	800dcb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00c      	beq.n	800d9b8 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d007      	beq.n	800d9b8 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d9b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f99e 	bl	800dcf4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00c      	beq.n	800d9dc <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d007      	beq.n	800d9dc <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d9d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f996 	bl	800dd08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d00c      	beq.n	800da00 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d007      	beq.n	800da00 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d9f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f98e 	bl	800dd1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00c      	beq.n	800da24 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da10:	2b00      	cmp	r3, #0
 800da12:	d007      	beq.n	800da24 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800da1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 f986 	bl	800dd30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800da24:	bf00      	nop
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da34:	bf00      	nop
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da5c:	bf00      	nop
 800da5e:	370c      	adds	r7, #12
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da70:	bf00      	nop
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a74      	ldr	r2, [pc, #464]	; (800dc60 <TIM_Base_SetConfig+0x1e4>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d02b      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4a73      	ldr	r2, [pc, #460]	; (800dc64 <TIM_Base_SetConfig+0x1e8>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d027      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800daa2:	d023      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800daaa:	d01f      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4a6e      	ldr	r2, [pc, #440]	; (800dc68 <TIM_Base_SetConfig+0x1ec>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d01b      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4a6d      	ldr	r2, [pc, #436]	; (800dc6c <TIM_Base_SetConfig+0x1f0>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d017      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a6c      	ldr	r2, [pc, #432]	; (800dc70 <TIM_Base_SetConfig+0x1f4>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d013      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	4a6b      	ldr	r2, [pc, #428]	; (800dc74 <TIM_Base_SetConfig+0x1f8>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d00f      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	4a6a      	ldr	r2, [pc, #424]	; (800dc78 <TIM_Base_SetConfig+0x1fc>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d00b      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a69      	ldr	r2, [pc, #420]	; (800dc7c <TIM_Base_SetConfig+0x200>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d007      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	4a68      	ldr	r2, [pc, #416]	; (800dc80 <TIM_Base_SetConfig+0x204>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d003      	beq.n	800daec <TIM_Base_SetConfig+0x70>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4a67      	ldr	r2, [pc, #412]	; (800dc84 <TIM_Base_SetConfig+0x208>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d108      	bne.n	800dafe <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a57      	ldr	r2, [pc, #348]	; (800dc60 <TIM_Base_SetConfig+0x1e4>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d05b      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a56      	ldr	r2, [pc, #344]	; (800dc64 <TIM_Base_SetConfig+0x1e8>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d057      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db14:	d053      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800db1c:	d04f      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a51      	ldr	r2, [pc, #324]	; (800dc68 <TIM_Base_SetConfig+0x1ec>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d04b      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a50      	ldr	r2, [pc, #320]	; (800dc6c <TIM_Base_SetConfig+0x1f0>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d047      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a4f      	ldr	r2, [pc, #316]	; (800dc70 <TIM_Base_SetConfig+0x1f4>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d043      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a4e      	ldr	r2, [pc, #312]	; (800dc74 <TIM_Base_SetConfig+0x1f8>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d03f      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4a4d      	ldr	r2, [pc, #308]	; (800dc78 <TIM_Base_SetConfig+0x1fc>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d03b      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a4c      	ldr	r2, [pc, #304]	; (800dc7c <TIM_Base_SetConfig+0x200>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d037      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4a4b      	ldr	r2, [pc, #300]	; (800dc80 <TIM_Base_SetConfig+0x204>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d033      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	4a4a      	ldr	r2, [pc, #296]	; (800dc84 <TIM_Base_SetConfig+0x208>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d02f      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4a49      	ldr	r2, [pc, #292]	; (800dc88 <TIM_Base_SetConfig+0x20c>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d02b      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4a48      	ldr	r2, [pc, #288]	; (800dc8c <TIM_Base_SetConfig+0x210>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d027      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4a47      	ldr	r2, [pc, #284]	; (800dc90 <TIM_Base_SetConfig+0x214>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d023      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4a46      	ldr	r2, [pc, #280]	; (800dc94 <TIM_Base_SetConfig+0x218>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d01f      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4a45      	ldr	r2, [pc, #276]	; (800dc98 <TIM_Base_SetConfig+0x21c>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d01b      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4a44      	ldr	r2, [pc, #272]	; (800dc9c <TIM_Base_SetConfig+0x220>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d017      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4a43      	ldr	r2, [pc, #268]	; (800dca0 <TIM_Base_SetConfig+0x224>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d013      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	4a42      	ldr	r2, [pc, #264]	; (800dca4 <TIM_Base_SetConfig+0x228>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d00f      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	4a41      	ldr	r2, [pc, #260]	; (800dca8 <TIM_Base_SetConfig+0x22c>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d00b      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4a40      	ldr	r2, [pc, #256]	; (800dcac <TIM_Base_SetConfig+0x230>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d007      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4a3f      	ldr	r2, [pc, #252]	; (800dcb0 <TIM_Base_SetConfig+0x234>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d003      	beq.n	800dbbe <TIM_Base_SetConfig+0x142>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a3e      	ldr	r2, [pc, #248]	; (800dcb4 <TIM_Base_SetConfig+0x238>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d108      	bne.n	800dbd0 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	695b      	ldr	r3, [r3, #20]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	689a      	ldr	r2, [r3, #8]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a1a      	ldr	r2, [pc, #104]	; (800dc60 <TIM_Base_SetConfig+0x1e4>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d023      	beq.n	800dc44 <TIM_Base_SetConfig+0x1c8>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a19      	ldr	r2, [pc, #100]	; (800dc64 <TIM_Base_SetConfig+0x1e8>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d01f      	beq.n	800dc44 <TIM_Base_SetConfig+0x1c8>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4a1e      	ldr	r2, [pc, #120]	; (800dc80 <TIM_Base_SetConfig+0x204>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d01b      	beq.n	800dc44 <TIM_Base_SetConfig+0x1c8>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4a1d      	ldr	r2, [pc, #116]	; (800dc84 <TIM_Base_SetConfig+0x208>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d017      	beq.n	800dc44 <TIM_Base_SetConfig+0x1c8>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4a22      	ldr	r2, [pc, #136]	; (800dca0 <TIM_Base_SetConfig+0x224>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d013      	beq.n	800dc44 <TIM_Base_SetConfig+0x1c8>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	4a21      	ldr	r2, [pc, #132]	; (800dca4 <TIM_Base_SetConfig+0x228>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d00f      	beq.n	800dc44 <TIM_Base_SetConfig+0x1c8>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	4a20      	ldr	r2, [pc, #128]	; (800dca8 <TIM_Base_SetConfig+0x22c>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d00b      	beq.n	800dc44 <TIM_Base_SetConfig+0x1c8>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4a1f      	ldr	r2, [pc, #124]	; (800dcac <TIM_Base_SetConfig+0x230>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d007      	beq.n	800dc44 <TIM_Base_SetConfig+0x1c8>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	4a1e      	ldr	r2, [pc, #120]	; (800dcb0 <TIM_Base_SetConfig+0x234>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d003      	beq.n	800dc44 <TIM_Base_SetConfig+0x1c8>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4a1d      	ldr	r2, [pc, #116]	; (800dcb4 <TIM_Base_SetConfig+0x238>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d103      	bne.n	800dc4c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	691a      	ldr	r2, [r3, #16]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	615a      	str	r2, [r3, #20]
}
 800dc52:	bf00      	nop
 800dc54:	3714      	adds	r7, #20
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	40012c00 	.word	0x40012c00
 800dc64:	50012c00 	.word	0x50012c00
 800dc68:	40000400 	.word	0x40000400
 800dc6c:	50000400 	.word	0x50000400
 800dc70:	40000800 	.word	0x40000800
 800dc74:	50000800 	.word	0x50000800
 800dc78:	40000c00 	.word	0x40000c00
 800dc7c:	50000c00 	.word	0x50000c00
 800dc80:	40013400 	.word	0x40013400
 800dc84:	50013400 	.word	0x50013400
 800dc88:	40001800 	.word	0x40001800
 800dc8c:	50001800 	.word	0x50001800
 800dc90:	40001c00 	.word	0x40001c00
 800dc94:	50001c00 	.word	0x50001c00
 800dc98:	40002000 	.word	0x40002000
 800dc9c:	50002000 	.word	0x50002000
 800dca0:	40014000 	.word	0x40014000
 800dca4:	50014000 	.word	0x50014000
 800dca8:	40014400 	.word	0x40014400
 800dcac:	50014400 	.word	0x50014400
 800dcb0:	40014800 	.word	0x40014800
 800dcb4:	50014800 	.word	0x50014800

0800dcb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dcc0:	bf00      	nop
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dcd4:	bf00      	nop
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dcfc:	bf00      	nop
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e042      	b.n	800dddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7f2 ff09 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2224      	movs	r2, #36	; 0x24
 800dd72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f022 0201 	bic.w	r2, r2, #1
 800dd84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d002      	beq.n	800dd94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fe0a 	bl	800e9a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fc19 	bl	800e5cc <UART_SetConfig>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d101      	bne.n	800dda4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dda0:	2301      	movs	r3, #1
 800dda2:	e01b      	b.n	800dddc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	685a      	ldr	r2, [r3, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ddb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ddc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f042 0201 	orr.w	r2, r2, #1
 800ddd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fe89 	bl	800eaec <UART_CheckIdleState>
 800ddda:	4603      	mov	r3, r0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08a      	sub	sp, #40	; 0x28
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	603b      	str	r3, [r7, #0]
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddfa:	2b20      	cmp	r3, #32
 800ddfc:	f040 808b 	bne.w	800df16 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d002      	beq.n	800de0c <HAL_UART_Transmit+0x28>
 800de06:	88fb      	ldrh	r3, [r7, #6]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d101      	bne.n	800de10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800de0c:	2301      	movs	r3, #1
 800de0e:	e083      	b.n	800df18 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de1a:	2b80      	cmp	r3, #128	; 0x80
 800de1c:	d107      	bne.n	800de2e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	689a      	ldr	r2, [r3, #8]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de2c:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2200      	movs	r2, #0
 800de32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2221      	movs	r2, #33	; 0x21
 800de3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de3e:	f7f6 f98b 	bl	8004158 <HAL_GetTick>
 800de42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	88fa      	ldrh	r2, [r7, #6]
 800de48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	88fa      	ldrh	r2, [r7, #6]
 800de50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de5c:	d108      	bne.n	800de70 <HAL_UART_Transmit+0x8c>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d104      	bne.n	800de70 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800de66:	2300      	movs	r3, #0
 800de68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	61bb      	str	r3, [r7, #24]
 800de6e:	e003      	b.n	800de78 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de74:	2300      	movs	r3, #0
 800de76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800de78:	e030      	b.n	800dedc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	2200      	movs	r2, #0
 800de82:	2180      	movs	r1, #128	; 0x80
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f000 fedb 	bl	800ec40 <UART_WaitOnFlagUntilTimeout>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d005      	beq.n	800de9c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2220      	movs	r2, #32
 800de94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800de98:	2303      	movs	r3, #3
 800de9a:	e03d      	b.n	800df18 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d10b      	bne.n	800deba <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	881b      	ldrh	r3, [r3, #0]
 800dea6:	461a      	mov	r2, r3
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800deb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	3302      	adds	r3, #2
 800deb6:	61bb      	str	r3, [r7, #24]
 800deb8:	e007      	b.n	800deca <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	781a      	ldrb	r2, [r3, #0]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	3301      	adds	r3, #1
 800dec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	3b01      	subs	r3, #1
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d1c8      	bne.n	800de7a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	2200      	movs	r2, #0
 800def0:	2140      	movs	r1, #64	; 0x40
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f000 fea4 	bl	800ec40 <UART_WaitOnFlagUntilTimeout>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d005      	beq.n	800df0a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2220      	movs	r2, #32
 800df02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800df06:	2303      	movs	r3, #3
 800df08:	e006      	b.n	800df18 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2220      	movs	r2, #32
 800df0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800df12:	2300      	movs	r3, #0
 800df14:	e000      	b.n	800df18 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800df16:	2302      	movs	r3, #2
  }
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3720      	adds	r7, #32
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b08a      	sub	sp, #40	; 0x28
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	4613      	mov	r3, r2
 800df2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df34:	2b20      	cmp	r3, #32
 800df36:	d14b      	bne.n	800dfd0 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d002      	beq.n	800df44 <HAL_UART_Receive_IT+0x24>
 800df3e:	88fb      	ldrh	r3, [r7, #6]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d101      	bne.n	800df48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800df44:	2301      	movs	r3, #1
 800df46:	e044      	b.n	800dfd2 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2200      	movs	r2, #0
 800df4c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df58:	2b40      	cmp	r3, #64	; 0x40
 800df5a:	d107      	bne.n	800df6c <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	689a      	ldr	r2, [r3, #8]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df6a:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a1a      	ldr	r2, [pc, #104]	; (800dfdc <HAL_UART_Receive_IT+0xbc>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d024      	beq.n	800dfc0 <HAL_UART_Receive_IT+0xa0>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a19      	ldr	r2, [pc, #100]	; (800dfe0 <HAL_UART_Receive_IT+0xc0>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d01f      	beq.n	800dfc0 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d018      	beq.n	800dfc0 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	e853 3f00 	ldrex	r3, [r3]
 800df9a:	613b      	str	r3, [r7, #16]
   return(result);
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dfa2:	627b      	str	r3, [r7, #36]	; 0x24
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfac:	623b      	str	r3, [r7, #32]
 800dfae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb0:	69f9      	ldr	r1, [r7, #28]
 800dfb2:	6a3a      	ldr	r2, [r7, #32]
 800dfb4:	e841 2300 	strex	r3, r2, [r1]
 800dfb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1e6      	bne.n	800df8e <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dfc0:	88fb      	ldrh	r3, [r7, #6]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	68b9      	ldr	r1, [r7, #8]
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f000 fea2 	bl	800ed10 <UART_Start_Receive_IT>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	e000      	b.n	800dfd2 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800dfd0:	2302      	movs	r3, #2
  }
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3728      	adds	r7, #40	; 0x28
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	44002400 	.word	0x44002400
 800dfe0:	54002400 	.word	0x54002400

0800dfe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b0ae      	sub	sp, #184	; 0xb8
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	69db      	ldr	r3, [r3, #28]
 800dff2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e00a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e00e:	f640 030f 	movw	r3, #2063	; 0x80f
 800e012:	4013      	ands	r3, r2
 800e014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800e018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d11b      	bne.n	800e058 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e020:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e024:	f003 0320 	and.w	r3, r3, #32
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d015      	beq.n	800e058 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e02c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e030:	f003 0320 	and.w	r3, r3, #32
 800e034:	2b00      	cmp	r3, #0
 800e036:	d105      	bne.n	800e044 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e03c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e040:	2b00      	cmp	r3, #0
 800e042:	d009      	beq.n	800e058 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f000 8293 	beq.w	800e574 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	4798      	blx	r3
      }
      return;
 800e056:	e28d      	b.n	800e574 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f000 80fd 	beq.w	800e25c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e062:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e066:	4b7a      	ldr	r3, [pc, #488]	; (800e250 <HAL_UART_IRQHandler+0x26c>)
 800e068:	4013      	ands	r3, r2
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d106      	bne.n	800e07c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e06e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e072:	4b78      	ldr	r3, [pc, #480]	; (800e254 <HAL_UART_IRQHandler+0x270>)
 800e074:	4013      	ands	r3, r2
 800e076:	2b00      	cmp	r3, #0
 800e078:	f000 80f0 	beq.w	800e25c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e07c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e080:	f003 0301 	and.w	r3, r3, #1
 800e084:	2b00      	cmp	r3, #0
 800e086:	d011      	beq.n	800e0ac <HAL_UART_IRQHandler+0xc8>
 800e088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e08c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00b      	beq.n	800e0ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	2201      	movs	r2, #1
 800e09a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0a2:	f043 0201 	orr.w	r2, r3, #1
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0b0:	f003 0302 	and.w	r3, r3, #2
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d011      	beq.n	800e0dc <HAL_UART_IRQHandler+0xf8>
 800e0b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0bc:	f003 0301 	and.w	r3, r3, #1
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d00b      	beq.n	800e0dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2202      	movs	r2, #2
 800e0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0d2:	f043 0204 	orr.w	r2, r3, #4
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e0e0:	f003 0304 	and.w	r3, r3, #4
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d011      	beq.n	800e10c <HAL_UART_IRQHandler+0x128>
 800e0e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00b      	beq.n	800e10c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2204      	movs	r2, #4
 800e0fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e102:	f043 0202 	orr.w	r2, r3, #2
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e10c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e110:	f003 0308 	and.w	r3, r3, #8
 800e114:	2b00      	cmp	r3, #0
 800e116:	d017      	beq.n	800e148 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e118:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e11c:	f003 0320 	and.w	r3, r3, #32
 800e120:	2b00      	cmp	r3, #0
 800e122:	d105      	bne.n	800e130 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e124:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e128:	4b49      	ldr	r3, [pc, #292]	; (800e250 <HAL_UART_IRQHandler+0x26c>)
 800e12a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d00b      	beq.n	800e148 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2208      	movs	r2, #8
 800e136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e13e:	f043 0208 	orr.w	r2, r3, #8
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e148:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e14c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e150:	2b00      	cmp	r3, #0
 800e152:	d012      	beq.n	800e17a <HAL_UART_IRQHandler+0x196>
 800e154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00c      	beq.n	800e17a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e168:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e170:	f043 0220 	orr.w	r2, r3, #32
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e180:	2b00      	cmp	r3, #0
 800e182:	f000 81f9 	beq.w	800e578 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e18a:	f003 0320 	and.w	r3, r3, #32
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d013      	beq.n	800e1ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e192:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e196:	f003 0320 	and.w	r3, r3, #32
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d105      	bne.n	800e1aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e19e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e1a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d007      	beq.n	800e1ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d003      	beq.n	800e1ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	689b      	ldr	r3, [r3, #8]
 800e1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ce:	2b40      	cmp	r3, #64	; 0x40
 800e1d0:	d005      	beq.n	800e1de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e1d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e1d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d02e      	beq.n	800e23c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 feb8 	bl	800ef54 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ee:	2b40      	cmp	r3, #64	; 0x40
 800e1f0:	d120      	bne.n	800e234 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d017      	beq.n	800e22c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e202:	4a15      	ldr	r2, [pc, #84]	; (800e258 <HAL_UART_IRQHandler+0x274>)
 800e204:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f6 f945 	bl	800449c <HAL_DMA_Abort_IT>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d019      	beq.n	800e24c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e226:	4610      	mov	r0, r2
 800e228:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e22a:	e00f      	b.n	800e24c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 f9b7 	bl	800e5a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e232:	e00b      	b.n	800e24c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 f9b3 	bl	800e5a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e23a:	e007      	b.n	800e24c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f000 f9af 	bl	800e5a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e24a:	e195      	b.n	800e578 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e24c:	bf00      	nop
    return;
 800e24e:	e193      	b.n	800e578 <HAL_UART_IRQHandler+0x594>
 800e250:	10000001 	.word	0x10000001
 800e254:	04000120 	.word	0x04000120
 800e258:	0800f021 	.word	0x0800f021

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e260:	2b01      	cmp	r3, #1
 800e262:	f040 8129 	bne.w	800e4b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e26a:	f003 0310 	and.w	r3, r3, #16
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f000 8122 	beq.w	800e4b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e274:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e278:	f003 0310 	and.w	r3, r3, #16
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f000 811b 	beq.w	800e4b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2210      	movs	r2, #16
 800e288:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	689b      	ldr	r3, [r3, #8]
 800e290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e294:	2b40      	cmp	r3, #64	; 0x40
 800e296:	f040 8091 	bne.w	800e3bc <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800e2a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f000 8165 	beq.w	800e57c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2b8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	f080 815d 	bcs.w	800e57c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800e2c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2d4:	2b81      	cmp	r3, #129	; 0x81
 800e2d6:	d060      	beq.n	800e39a <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2e0:	e853 3f00 	ldrex	r3, [r3]
 800e2e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e2e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e2fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e2fe:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e306:	e841 2300 	strex	r3, r2, [r1]
 800e30a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e30c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1e2      	bne.n	800e2d8 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	3308      	adds	r3, #8
 800e318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e31a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e31c:	e853 3f00 	ldrex	r3, [r3]
 800e320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e324:	f023 0301 	bic.w	r3, r3, #1
 800e328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	3308      	adds	r3, #8
 800e332:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e336:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e33a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e33c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e33e:	e841 2300 	strex	r3, r2, [r1]
 800e342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1e3      	bne.n	800e312 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2220      	movs	r2, #32
 800e34e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e360:	e853 3f00 	ldrex	r3, [r3]
 800e364:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e368:	f023 0310 	bic.w	r3, r3, #16
 800e36c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	461a      	mov	r2, r3
 800e376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e37a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e37c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e382:	e841 2300 	strex	r3, r2, [r1]
 800e386:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1e4      	bne.n	800e358 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e394:	4618      	mov	r0, r3
 800e396:	f7f6 f805 	bl	80043a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2202      	movs	r2, #2
 800e39e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 f8fd 	bl	800e5b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e3ba:	e0df      	b.n	800e57c <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	f000 80d1 	beq.w	800e580 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800e3de:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 80cc 	beq.w	800e580 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f0:	e853 3f00 	ldrex	r3, [r3]
 800e3f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	461a      	mov	r2, r3
 800e406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e40a:	647b      	str	r3, [r7, #68]	; 0x44
 800e40c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e40e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e412:	e841 2300 	strex	r3, r2, [r1]
 800e416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d1e4      	bne.n	800e3e8 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	3308      	adds	r3, #8
 800e424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	e853 3f00 	ldrex	r3, [r3]
 800e42c:	623b      	str	r3, [r7, #32]
   return(result);
 800e42e:	6a3b      	ldr	r3, [r7, #32]
 800e430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e434:	f023 0301 	bic.w	r3, r3, #1
 800e438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	3308      	adds	r3, #8
 800e442:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e446:	633a      	str	r2, [r7, #48]	; 0x30
 800e448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e44e:	e841 2300 	strex	r3, r2, [r1]
 800e452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1e1      	bne.n	800e41e <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2220      	movs	r2, #32
 800e45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	e853 3f00 	ldrex	r3, [r3]
 800e47a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f023 0310 	bic.w	r3, r3, #16
 800e482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	461a      	mov	r2, r3
 800e48c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e490:	61fb      	str	r3, [r7, #28]
 800e492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e494:	69b9      	ldr	r1, [r7, #24]
 800e496:	69fa      	ldr	r2, [r7, #28]
 800e498:	e841 2300 	strex	r3, r2, [r1]
 800e49c:	617b      	str	r3, [r7, #20]
   return(result);
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1e4      	bne.n	800e46e <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e4aa:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 f87f 	bl	800e5b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4b6:	e063      	b.n	800e580 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e4b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e4bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00e      	beq.n	800e4e2 <HAL_UART_IRQHandler+0x4fe>
 800e4c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e4c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d008      	beq.n	800e4e2 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e4d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f001 fb1a 	bl	800fb14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e4e0:	e051      	b.n	800e586 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e4e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d014      	beq.n	800e518 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e4ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d105      	bne.n	800e506 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e4fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e502:	2b00      	cmp	r3, #0
 800e504:	d008      	beq.n	800e518 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d03a      	beq.n	800e584 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	4798      	blx	r3
    }
    return;
 800e516:	e035      	b.n	800e584 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e518:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e520:	2b00      	cmp	r3, #0
 800e522:	d009      	beq.n	800e538 <HAL_UART_IRQHandler+0x554>
 800e524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d003      	beq.n	800e538 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 fd8b 	bl	800f04c <UART_EndTransmit_IT>
    return;
 800e536:	e026      	b.n	800e586 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e53c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e540:	2b00      	cmp	r3, #0
 800e542:	d009      	beq.n	800e558 <HAL_UART_IRQHandler+0x574>
 800e544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e548:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d003      	beq.n	800e558 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f001 faf3 	bl	800fb3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e556:	e016      	b.n	800e586 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e55c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d010      	beq.n	800e586 <HAL_UART_IRQHandler+0x5a2>
 800e564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	da0c      	bge.n	800e586 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f001 fadb 	bl	800fb28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e572:	e008      	b.n	800e586 <HAL_UART_IRQHandler+0x5a2>
      return;
 800e574:	bf00      	nop
 800e576:	e006      	b.n	800e586 <HAL_UART_IRQHandler+0x5a2>
    return;
 800e578:	bf00      	nop
 800e57a:	e004      	b.n	800e586 <HAL_UART_IRQHandler+0x5a2>
      return;
 800e57c:	bf00      	nop
 800e57e:	e002      	b.n	800e586 <HAL_UART_IRQHandler+0x5a2>
      return;
 800e580:	bf00      	nop
 800e582:	e000      	b.n	800e586 <HAL_UART_IRQHandler+0x5a2>
    return;
 800e584:	bf00      	nop
  }
}
 800e586:	37b8      	adds	r7, #184	; 0xb8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e594:	bf00      	nop
 800e596:	370c      	adds	r7, #12
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr

0800e5a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e5a8:	bf00      	nop
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	460b      	mov	r3, r1
 800e5be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5d0:	b094      	sub	sp, #80	; 0x50
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800e5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	4b78      	ldr	r3, [pc, #480]	; (800e7c4 <UART_SetConfig+0x1f8>)
 800e5e2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e6:	689a      	ldr	r2, [r3, #8]
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	691b      	ldr	r3, [r3, #16]
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	695b      	ldr	r3, [r3, #20]
 800e5f2:	431a      	orrs	r2, r3
 800e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f6:	69db      	ldr	r3, [r3, #28]
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4971      	ldr	r1, [pc, #452]	; (800e7c8 <UART_SetConfig+0x1fc>)
 800e604:	4019      	ands	r1, r3
 800e606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e60c:	430b      	orrs	r3, r1
 800e60e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61c:	68d9      	ldr	r1, [r3, #12]
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	ea40 0301 	orr.w	r3, r0, r1
 800e626:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62a:	699b      	ldr	r3, [r3, #24]
 800e62c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	4b64      	ldr	r3, [pc, #400]	; (800e7c4 <UART_SetConfig+0x1f8>)
 800e634:	429a      	cmp	r2, r3
 800e636:	d009      	beq.n	800e64c <UART_SetConfig+0x80>
 800e638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	4b63      	ldr	r3, [pc, #396]	; (800e7cc <UART_SetConfig+0x200>)
 800e63e:	429a      	cmp	r2, r3
 800e640:	d004      	beq.n	800e64c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	6a1a      	ldr	r2, [r3, #32]
 800e646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e648:	4313      	orrs	r3, r2
 800e64a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800e656:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e660:	430b      	orrs	r3, r1
 800e662:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66a:	f023 000f 	bic.w	r0, r3, #15
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	ea40 0301 	orr.w	r3, r0, r1
 800e67a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	4b53      	ldr	r3, [pc, #332]	; (800e7d0 <UART_SetConfig+0x204>)
 800e682:	429a      	cmp	r2, r3
 800e684:	d102      	bne.n	800e68c <UART_SetConfig+0xc0>
 800e686:	2301      	movs	r3, #1
 800e688:	64bb      	str	r3, [r7, #72]	; 0x48
 800e68a:	e066      	b.n	800e75a <UART_SetConfig+0x18e>
 800e68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	4b50      	ldr	r3, [pc, #320]	; (800e7d4 <UART_SetConfig+0x208>)
 800e692:	429a      	cmp	r2, r3
 800e694:	d102      	bne.n	800e69c <UART_SetConfig+0xd0>
 800e696:	2302      	movs	r3, #2
 800e698:	64bb      	str	r3, [r7, #72]	; 0x48
 800e69a:	e05e      	b.n	800e75a <UART_SetConfig+0x18e>
 800e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	4b4d      	ldr	r3, [pc, #308]	; (800e7d8 <UART_SetConfig+0x20c>)
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d102      	bne.n	800e6ac <UART_SetConfig+0xe0>
 800e6a6:	2304      	movs	r3, #4
 800e6a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6aa:	e056      	b.n	800e75a <UART_SetConfig+0x18e>
 800e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	4b4a      	ldr	r3, [pc, #296]	; (800e7dc <UART_SetConfig+0x210>)
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d102      	bne.n	800e6bc <UART_SetConfig+0xf0>
 800e6b6:	2308      	movs	r3, #8
 800e6b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ba:	e04e      	b.n	800e75a <UART_SetConfig+0x18e>
 800e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	4b47      	ldr	r3, [pc, #284]	; (800e7e0 <UART_SetConfig+0x214>)
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d102      	bne.n	800e6cc <UART_SetConfig+0x100>
 800e6c6:	2310      	movs	r3, #16
 800e6c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ca:	e046      	b.n	800e75a <UART_SetConfig+0x18e>
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	4b44      	ldr	r3, [pc, #272]	; (800e7e4 <UART_SetConfig+0x218>)
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d102      	bne.n	800e6dc <UART_SetConfig+0x110>
 800e6d6:	2320      	movs	r3, #32
 800e6d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6da:	e03e      	b.n	800e75a <UART_SetConfig+0x18e>
 800e6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	4b41      	ldr	r3, [pc, #260]	; (800e7e8 <UART_SetConfig+0x21c>)
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d102      	bne.n	800e6ec <UART_SetConfig+0x120>
 800e6e6:	2340      	movs	r3, #64	; 0x40
 800e6e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ea:	e036      	b.n	800e75a <UART_SetConfig+0x18e>
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	4b3e      	ldr	r3, [pc, #248]	; (800e7ec <UART_SetConfig+0x220>)
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d102      	bne.n	800e6fc <UART_SetConfig+0x130>
 800e6f6:	2380      	movs	r3, #128	; 0x80
 800e6f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6fa:	e02e      	b.n	800e75a <UART_SetConfig+0x18e>
 800e6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	4b3b      	ldr	r3, [pc, #236]	; (800e7f0 <UART_SetConfig+0x224>)
 800e702:	429a      	cmp	r2, r3
 800e704:	d103      	bne.n	800e70e <UART_SetConfig+0x142>
 800e706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e70a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e70c:	e025      	b.n	800e75a <UART_SetConfig+0x18e>
 800e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	4b38      	ldr	r3, [pc, #224]	; (800e7f4 <UART_SetConfig+0x228>)
 800e714:	429a      	cmp	r2, r3
 800e716:	d103      	bne.n	800e720 <UART_SetConfig+0x154>
 800e718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e71c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e71e:	e01c      	b.n	800e75a <UART_SetConfig+0x18e>
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	4b34      	ldr	r3, [pc, #208]	; (800e7f8 <UART_SetConfig+0x22c>)
 800e726:	429a      	cmp	r2, r3
 800e728:	d103      	bne.n	800e732 <UART_SetConfig+0x166>
 800e72a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e72e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e730:	e013      	b.n	800e75a <UART_SetConfig+0x18e>
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	4b31      	ldr	r3, [pc, #196]	; (800e7fc <UART_SetConfig+0x230>)
 800e738:	429a      	cmp	r2, r3
 800e73a:	d103      	bne.n	800e744 <UART_SetConfig+0x178>
 800e73c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e740:	64bb      	str	r3, [r7, #72]	; 0x48
 800e742:	e00a      	b.n	800e75a <UART_SetConfig+0x18e>
 800e744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	4b1e      	ldr	r3, [pc, #120]	; (800e7c4 <UART_SetConfig+0x1f8>)
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d103      	bne.n	800e756 <UART_SetConfig+0x18a>
 800e74e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e752:	64bb      	str	r3, [r7, #72]	; 0x48
 800e754:	e001      	b.n	800e75a <UART_SetConfig+0x18e>
 800e756:	2300      	movs	r3, #0
 800e758:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	4b19      	ldr	r3, [pc, #100]	; (800e7c4 <UART_SetConfig+0x1f8>)
 800e760:	429a      	cmp	r2, r3
 800e762:	d005      	beq.n	800e770 <UART_SetConfig+0x1a4>
 800e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	4b18      	ldr	r3, [pc, #96]	; (800e7cc <UART_SetConfig+0x200>)
 800e76a:	429a      	cmp	r2, r3
 800e76c:	f040 8094 	bne.w	800e898 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e772:	2200      	movs	r2, #0
 800e774:	623b      	str	r3, [r7, #32]
 800e776:	627a      	str	r2, [r7, #36]	; 0x24
 800e778:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e77c:	f7fc fa44 	bl	800ac08 <HAL_RCCEx_GetPeriphCLKFreq>
 800e780:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800e782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e784:	2b00      	cmp	r3, #0
 800e786:	f000 80f7 	beq.w	800e978 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78e:	4a1c      	ldr	r2, [pc, #112]	; (800e800 <UART_SetConfig+0x234>)
 800e790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e794:	461a      	mov	r2, r3
 800e796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e798:	fbb3 f3f2 	udiv	r3, r3, r2
 800e79c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a0:	685a      	ldr	r2, [r3, #4]
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	005b      	lsls	r3, r3, #1
 800e7a6:	4413      	add	r3, r2
 800e7a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d305      	bcc.n	800e7ba <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d924      	bls.n	800e804 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e7c0:	e069      	b.n	800e896 <UART_SetConfig+0x2ca>
 800e7c2:	bf00      	nop
 800e7c4:	44002400 	.word	0x44002400
 800e7c8:	cfff69f3 	.word	0xcfff69f3
 800e7cc:	54002400 	.word	0x54002400
 800e7d0:	40013800 	.word	0x40013800
 800e7d4:	40004400 	.word	0x40004400
 800e7d8:	40004800 	.word	0x40004800
 800e7dc:	40004c00 	.word	0x40004c00
 800e7e0:	40005000 	.word	0x40005000
 800e7e4:	40006400 	.word	0x40006400
 800e7e8:	40007800 	.word	0x40007800
 800e7ec:	40007c00 	.word	0x40007c00
 800e7f0:	40008000 	.word	0x40008000
 800e7f4:	40006800 	.word	0x40006800
 800e7f8:	40006c00 	.word	0x40006c00
 800e7fc:	40008400 	.word	0x40008400
 800e800:	0801ff60 	.word	0x0801ff60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e806:	2200      	movs	r2, #0
 800e808:	61bb      	str	r3, [r7, #24]
 800e80a:	61fa      	str	r2, [r7, #28]
 800e80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e810:	4a64      	ldr	r2, [pc, #400]	; (800e9a4 <UART_SetConfig+0x3d8>)
 800e812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e816:	b29b      	uxth	r3, r3
 800e818:	2200      	movs	r2, #0
 800e81a:	613b      	str	r3, [r7, #16]
 800e81c:	617a      	str	r2, [r7, #20]
 800e81e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e822:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e826:	f7f1 fd43 	bl	80002b0 <__aeabi_uldivmod>
 800e82a:	4602      	mov	r2, r0
 800e82c:	460b      	mov	r3, r1
 800e82e:	4610      	mov	r0, r2
 800e830:	4619      	mov	r1, r3
 800e832:	f04f 0200 	mov.w	r2, #0
 800e836:	f04f 0300 	mov.w	r3, #0
 800e83a:	020b      	lsls	r3, r1, #8
 800e83c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e840:	0202      	lsls	r2, r0, #8
 800e842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e844:	6849      	ldr	r1, [r1, #4]
 800e846:	0849      	lsrs	r1, r1, #1
 800e848:	2000      	movs	r0, #0
 800e84a:	460c      	mov	r4, r1
 800e84c:	4605      	mov	r5, r0
 800e84e:	eb12 0804 	adds.w	r8, r2, r4
 800e852:	eb43 0905 	adc.w	r9, r3, r5
 800e856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	60bb      	str	r3, [r7, #8]
 800e85e:	60fa      	str	r2, [r7, #12]
 800e860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e864:	4640      	mov	r0, r8
 800e866:	4649      	mov	r1, r9
 800e868:	f7f1 fd22 	bl	80002b0 <__aeabi_uldivmod>
 800e86c:	4602      	mov	r2, r0
 800e86e:	460b      	mov	r3, r1
 800e870:	4613      	mov	r3, r2
 800e872:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e87a:	d308      	bcc.n	800e88e <UART_SetConfig+0x2c2>
 800e87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e87e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e882:	d204      	bcs.n	800e88e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e88a:	60da      	str	r2, [r3, #12]
 800e88c:	e003      	b.n	800e896 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800e894:	e070      	b.n	800e978 <UART_SetConfig+0x3ac>
 800e896:	e06f      	b.n	800e978 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	69db      	ldr	r3, [r3, #28]
 800e89c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8a0:	d13c      	bne.n	800e91c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e8a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	603b      	str	r3, [r7, #0]
 800e8a8:	607a      	str	r2, [r7, #4]
 800e8aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e8ae:	f7fc f9ab 	bl	800ac08 <HAL_RCCEx_GetPeriphCLKFreq>
 800e8b2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d05e      	beq.n	800e978 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8be:	4a39      	ldr	r2, [pc, #228]	; (800e9a4 <UART_SetConfig+0x3d8>)
 800e8c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8cc:	005a      	lsls	r2, r3, #1
 800e8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	085b      	lsrs	r3, r3, #1
 800e8d4:	441a      	add	r2, r3
 800e8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8de:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e2:	2b0f      	cmp	r3, #15
 800e8e4:	d916      	bls.n	800e914 <UART_SetConfig+0x348>
 800e8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8ec:	d212      	bcs.n	800e914 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	f023 030f 	bic.w	r3, r3, #15
 800e8f6:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8fa:	085b      	lsrs	r3, r3, #1
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	f003 0307 	and.w	r3, r3, #7
 800e902:	b29a      	uxth	r2, r3
 800e904:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e906:	4313      	orrs	r3, r2
 800e908:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800e90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e910:	60da      	str	r2, [r3, #12]
 800e912:	e031      	b.n	800e978 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e914:	2301      	movs	r3, #1
 800e916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e91a:	e02d      	b.n	800e978 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e91c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e91e:	2200      	movs	r2, #0
 800e920:	469a      	mov	sl, r3
 800e922:	4693      	mov	fp, r2
 800e924:	4650      	mov	r0, sl
 800e926:	4659      	mov	r1, fp
 800e928:	f7fc f96e 	bl	800ac08 <HAL_RCCEx_GetPeriphCLKFreq>
 800e92c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800e92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e930:	2b00      	cmp	r3, #0
 800e932:	d021      	beq.n	800e978 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e938:	4a1a      	ldr	r2, [pc, #104]	; (800e9a4 <UART_SetConfig+0x3d8>)
 800e93a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e93e:	461a      	mov	r2, r3
 800e940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e942:	fbb3 f2f2 	udiv	r2, r3, r2
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	085b      	lsrs	r3, r3, #1
 800e94c:	441a      	add	r2, r3
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	fbb2 f3f3 	udiv	r3, r2, r3
 800e956:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e95a:	2b0f      	cmp	r3, #15
 800e95c:	d909      	bls.n	800e972 <UART_SetConfig+0x3a6>
 800e95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e964:	d205      	bcs.n	800e972 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e968:	b29a      	uxth	r2, r3
 800e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	60da      	str	r2, [r3, #12]
 800e970:	e002      	b.n	800e978 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	2201      	movs	r2, #1
 800e97c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	2201      	movs	r2, #1
 800e984:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98a:	2200      	movs	r2, #0
 800e98c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e990:	2200      	movs	r2, #0
 800e992:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e994:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3750      	adds	r7, #80	; 0x50
 800e99c:	46bd      	mov	sp, r7
 800e99e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9a2:	bf00      	nop
 800e9a4:	0801ff60 	.word	0x0801ff60

0800e9a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b4:	f003 0308 	and.w	r3, r3, #8
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00a      	beq.n	800e9d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	430a      	orrs	r2, r1
 800e9d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9d6:	f003 0301 	and.w	r3, r3, #1
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d00a      	beq.n	800e9f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	430a      	orrs	r2, r1
 800e9f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f8:	f003 0302 	and.w	r3, r3, #2
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d00a      	beq.n	800ea16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	430a      	orrs	r2, r1
 800ea14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea1a:	f003 0304 	and.w	r3, r3, #4
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00a      	beq.n	800ea38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	430a      	orrs	r2, r1
 800ea36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea3c:	f003 0310 	and.w	r3, r3, #16
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00a      	beq.n	800ea5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	430a      	orrs	r2, r1
 800ea58:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea5e:	f003 0320 	and.w	r3, r3, #32
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00a      	beq.n	800ea7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	689b      	ldr	r3, [r3, #8]
 800ea6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	430a      	orrs	r2, r1
 800ea7a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d01a      	beq.n	800eabe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	430a      	orrs	r2, r1
 800ea9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eaa6:	d10a      	bne.n	800eabe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	430a      	orrs	r2, r1
 800eabc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00a      	beq.n	800eae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	430a      	orrs	r2, r1
 800eade:	605a      	str	r2, [r3, #4]
  }
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b098      	sub	sp, #96	; 0x60
 800eaf0:	af02      	add	r7, sp, #8
 800eaf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eafc:	f7f5 fb2c 	bl	8004158 <HAL_GetTick>
 800eb00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f003 0308 	and.w	r3, r3, #8
 800eb0c:	2b08      	cmp	r3, #8
 800eb0e:	d12f      	bne.n	800eb70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb14:	9300      	str	r3, [sp, #0]
 800eb16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f88e 	bl	800ec40 <UART_WaitOnFlagUntilTimeout>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d022      	beq.n	800eb70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	e853 3f00 	ldrex	r3, [r3]
 800eb36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb3e:	653b      	str	r3, [r7, #80]	; 0x50
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	461a      	mov	r2, r3
 800eb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb48:	647b      	str	r3, [r7, #68]	; 0x44
 800eb4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb50:	e841 2300 	strex	r3, r2, [r1]
 800eb54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1e6      	bne.n	800eb2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2220      	movs	r2, #32
 800eb60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb6c:	2303      	movs	r3, #3
 800eb6e:	e063      	b.n	800ec38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f003 0304 	and.w	r3, r3, #4
 800eb7a:	2b04      	cmp	r3, #4
 800eb7c:	d149      	bne.n	800ec12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb82:	9300      	str	r3, [sp, #0]
 800eb84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb86:	2200      	movs	r2, #0
 800eb88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 f857 	bl	800ec40 <UART_WaitOnFlagUntilTimeout>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d03c      	beq.n	800ec12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba0:	e853 3f00 	ldrex	r3, [r3]
 800eba4:	623b      	str	r3, [r7, #32]
   return(result);
 800eba6:	6a3b      	ldr	r3, [r7, #32]
 800eba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebb6:	633b      	str	r3, [r7, #48]	; 0x30
 800ebb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebbe:	e841 2300 	strex	r3, r2, [r1]
 800ebc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ebc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d1e6      	bne.n	800eb98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	3308      	adds	r3, #8
 800ebd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	e853 3f00 	ldrex	r3, [r3]
 800ebd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f023 0301 	bic.w	r3, r3, #1
 800ebe0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	3308      	adds	r3, #8
 800ebe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebea:	61fa      	str	r2, [r7, #28]
 800ebec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebee:	69b9      	ldr	r1, [r7, #24]
 800ebf0:	69fa      	ldr	r2, [r7, #28]
 800ebf2:	e841 2300 	strex	r3, r2, [r1]
 800ebf6:	617b      	str	r3, [r7, #20]
   return(result);
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1e5      	bne.n	800ebca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2220      	movs	r2, #32
 800ec02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	e012      	b.n	800ec38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2220      	movs	r2, #32
 800ec16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2220      	movs	r2, #32
 800ec1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3758      	adds	r7, #88	; 0x58
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	60b9      	str	r1, [r7, #8]
 800ec4a:	603b      	str	r3, [r7, #0]
 800ec4c:	4613      	mov	r3, r2
 800ec4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec50:	e049      	b.n	800ece6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec58:	d045      	beq.n	800ece6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec5a:	f7f5 fa7d 	bl	8004158 <HAL_GetTick>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	69ba      	ldr	r2, [r7, #24]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d302      	bcc.n	800ec70 <UART_WaitOnFlagUntilTimeout+0x30>
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d101      	bne.n	800ec74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ec70:	2303      	movs	r3, #3
 800ec72:	e048      	b.n	800ed06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f003 0304 	and.w	r3, r3, #4
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d031      	beq.n	800ece6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	69db      	ldr	r3, [r3, #28]
 800ec88:	f003 0308 	and.w	r3, r3, #8
 800ec8c:	2b08      	cmp	r3, #8
 800ec8e:	d110      	bne.n	800ecb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2208      	movs	r2, #8
 800ec96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f000 f95b 	bl	800ef54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2208      	movs	r2, #8
 800eca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e029      	b.n	800ed06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	69db      	ldr	r3, [r3, #28]
 800ecb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ecbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ecc0:	d111      	bne.n	800ece6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f000 f941 	bl	800ef54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2220      	movs	r2, #32
 800ecd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ece2:	2303      	movs	r3, #3
 800ece4:	e00f      	b.n	800ed06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	69da      	ldr	r2, [r3, #28]
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	4013      	ands	r3, r2
 800ecf0:	68ba      	ldr	r2, [r7, #8]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	bf0c      	ite	eq
 800ecf6:	2301      	moveq	r3, #1
 800ecf8:	2300      	movne	r3, #0
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	79fb      	ldrb	r3, [r7, #7]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d0a6      	beq.n	800ec52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed04:	2300      	movs	r3, #0
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
	...

0800ed10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed10:	b480      	push	{r7}
 800ed12:	b0a3      	sub	sp, #140	; 0x8c
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	88fa      	ldrh	r2, [r7, #6]
 800ed28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	88fa      	ldrh	r2, [r7, #6]
 800ed30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2200      	movs	r2, #0
 800ed38:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed42:	d10e      	bne.n	800ed62 <UART_Start_Receive_IT+0x52>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d105      	bne.n	800ed58 <UART_Start_Receive_IT+0x48>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ed52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed56:	e02d      	b.n	800edb4 <UART_Start_Receive_IT+0xa4>
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	22ff      	movs	r2, #255	; 0xff
 800ed5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed60:	e028      	b.n	800edb4 <UART_Start_Receive_IT+0xa4>
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	689b      	ldr	r3, [r3, #8]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10d      	bne.n	800ed86 <UART_Start_Receive_IT+0x76>
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	691b      	ldr	r3, [r3, #16]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d104      	bne.n	800ed7c <UART_Start_Receive_IT+0x6c>
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	22ff      	movs	r2, #255	; 0xff
 800ed76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed7a:	e01b      	b.n	800edb4 <UART_Start_Receive_IT+0xa4>
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	227f      	movs	r2, #127	; 0x7f
 800ed80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed84:	e016      	b.n	800edb4 <UART_Start_Receive_IT+0xa4>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed8e:	d10d      	bne.n	800edac <UART_Start_Receive_IT+0x9c>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d104      	bne.n	800eda2 <UART_Start_Receive_IT+0x92>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	227f      	movs	r2, #127	; 0x7f
 800ed9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eda0:	e008      	b.n	800edb4 <UART_Start_Receive_IT+0xa4>
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	223f      	movs	r2, #63	; 0x3f
 800eda6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800edaa:	e003      	b.n	800edb4 <UART_Start_Receive_IT+0xa4>
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2222      	movs	r2, #34	; 0x22
 800edc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	3308      	adds	r3, #8
 800edca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edce:	e853 3f00 	ldrex	r3, [r3]
 800edd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800edd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edd6:	f043 0301 	orr.w	r3, r3, #1
 800edda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	3308      	adds	r3, #8
 800ede4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ede8:	673a      	str	r2, [r7, #112]	; 0x70
 800edea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800edee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800edf0:	e841 2300 	strex	r3, r2, [r1]
 800edf4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800edf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d1e3      	bne.n	800edc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee04:	d14f      	bne.n	800eea6 <UART_Start_Receive_IT+0x196>
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee0c:	88fa      	ldrh	r2, [r7, #6]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d349      	bcc.n	800eea6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	689b      	ldr	r3, [r3, #8]
 800ee16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee1a:	d107      	bne.n	800ee2c <UART_Start_Receive_IT+0x11c>
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d103      	bne.n	800ee2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	4a47      	ldr	r2, [pc, #284]	; (800ef44 <UART_Start_Receive_IT+0x234>)
 800ee28:	675a      	str	r2, [r3, #116]	; 0x74
 800ee2a:	e002      	b.n	800ee32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	4a46      	ldr	r2, [pc, #280]	; (800ef48 <UART_Start_Receive_IT+0x238>)
 800ee30:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d01a      	beq.n	800ee70 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee42:	e853 3f00 	ldrex	r3, [r3]
 800ee46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee5e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee64:	e841 2300 	strex	r3, r2, [r1]
 800ee68:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1e4      	bne.n	800ee3a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	3308      	adds	r3, #8
 800ee76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee7a:	e853 3f00 	ldrex	r3, [r3]
 800ee7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee86:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	3308      	adds	r3, #8
 800ee8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ee90:	64ba      	str	r2, [r7, #72]	; 0x48
 800ee92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee98:	e841 2300 	strex	r3, r2, [r1]
 800ee9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ee9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1e5      	bne.n	800ee70 <UART_Start_Receive_IT+0x160>
 800eea4:	e046      	b.n	800ef34 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	689b      	ldr	r3, [r3, #8]
 800eeaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eeae:	d107      	bne.n	800eec0 <UART_Start_Receive_IT+0x1b0>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d103      	bne.n	800eec0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	4a24      	ldr	r2, [pc, #144]	; (800ef4c <UART_Start_Receive_IT+0x23c>)
 800eebc:	675a      	str	r2, [r3, #116]	; 0x74
 800eebe:	e002      	b.n	800eec6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	4a23      	ldr	r2, [pc, #140]	; (800ef50 <UART_Start_Receive_IT+0x240>)
 800eec4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d019      	beq.n	800ef02 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed6:	e853 3f00 	ldrex	r3, [r3]
 800eeda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eede:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800eee2:	677b      	str	r3, [r7, #116]	; 0x74
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	461a      	mov	r2, r3
 800eeea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eeec:	637b      	str	r3, [r7, #52]	; 0x34
 800eeee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eef4:	e841 2300 	strex	r3, r2, [r1]
 800eef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1e6      	bne.n	800eece <UART_Start_Receive_IT+0x1be>
 800ef00:	e018      	b.n	800ef34 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	e853 3f00 	ldrex	r3, [r3]
 800ef0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	f043 0320 	orr.w	r3, r3, #32
 800ef16:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef20:	623b      	str	r3, [r7, #32]
 800ef22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef24:	69f9      	ldr	r1, [r7, #28]
 800ef26:	6a3a      	ldr	r2, [r7, #32]
 800ef28:	e841 2300 	strex	r3, r2, [r1]
 800ef2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d1e6      	bne.n	800ef02 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	378c      	adds	r7, #140	; 0x8c
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	0800f79d 	.word	0x0800f79d
 800ef48:	0800f42d 	.word	0x0800f42d
 800ef4c:	0800f269 	.word	0x0800f269
 800ef50:	0800f0a5 	.word	0x0800f0a5

0800ef54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b095      	sub	sp, #84	; 0x54
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef64:	e853 3f00 	ldrex	r3, [r3]
 800ef68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	461a      	mov	r2, r3
 800ef78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef7a:	643b      	str	r3, [r7, #64]	; 0x40
 800ef7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef82:	e841 2300 	strex	r3, r2, [r1]
 800ef86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d1e6      	bne.n	800ef5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	3308      	adds	r3, #8
 800ef94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef96:	6a3b      	ldr	r3, [r7, #32]
 800ef98:	e853 3f00 	ldrex	r3, [r3]
 800ef9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800efa4:	f023 0301 	bic.w	r3, r3, #1
 800efa8:	64bb      	str	r3, [r7, #72]	; 0x48
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	3308      	adds	r3, #8
 800efb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800efb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800efb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efba:	e841 2300 	strex	r3, r2, [r1]
 800efbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d1e3      	bne.n	800ef8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d118      	bne.n	800f000 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	e853 3f00 	ldrex	r3, [r3]
 800efda:	60bb      	str	r3, [r7, #8]
   return(result);
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	f023 0310 	bic.w	r3, r3, #16
 800efe2:	647b      	str	r3, [r7, #68]	; 0x44
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efec:	61bb      	str	r3, [r7, #24]
 800efee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff0:	6979      	ldr	r1, [r7, #20]
 800eff2:	69ba      	ldr	r2, [r7, #24]
 800eff4:	e841 2300 	strex	r3, r2, [r1]
 800eff8:	613b      	str	r3, [r7, #16]
   return(result);
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1e6      	bne.n	800efce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2220      	movs	r2, #32
 800f004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f014:	bf00      	nop
 800f016:	3754      	adds	r7, #84	; 0x54
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f02c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2200      	movs	r2, #0
 800f032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2200      	movs	r2, #0
 800f03a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	f7ff faae 	bl	800e5a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f044:	bf00      	nop
 800f046:	3710      	adds	r7, #16
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b088      	sub	sp, #32
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	e853 3f00 	ldrex	r3, [r3]
 800f060:	60bb      	str	r3, [r7, #8]
   return(result);
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f068:	61fb      	str	r3, [r7, #28]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	61bb      	str	r3, [r7, #24]
 800f074:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f076:	6979      	ldr	r1, [r7, #20]
 800f078:	69ba      	ldr	r2, [r7, #24]
 800f07a:	e841 2300 	strex	r3, r2, [r1]
 800f07e:	613b      	str	r3, [r7, #16]
   return(result);
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d1e6      	bne.n	800f054 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2220      	movs	r2, #32
 800f08a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7ff fa79 	bl	800e58c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f09a:	bf00      	nop
 800f09c:	3720      	adds	r7, #32
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
	...

0800f0a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b09c      	sub	sp, #112	; 0x70
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0bc:	2b22      	cmp	r3, #34	; 0x22
 800f0be:	f040 80c3 	bne.w	800f248 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f0cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f0d0:	b2d9      	uxtb	r1, r3
 800f0d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0dc:	400a      	ands	r2, r1
 800f0de:	b2d2      	uxtb	r2, r2
 800f0e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0e6:	1c5a      	adds	r2, r3, #1
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	3b01      	subs	r3, #1
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f104:	b29b      	uxth	r3, r3
 800f106:	2b00      	cmp	r3, #0
 800f108:	f040 80a6 	bne.w	800f258 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f114:	e853 3f00 	ldrex	r3, [r3]
 800f118:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f11a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f11c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f120:	66bb      	str	r3, [r7, #104]	; 0x68
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	461a      	mov	r2, r3
 800f128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f12a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f12c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f130:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f132:	e841 2300 	strex	r3, r2, [r1]
 800f136:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1e6      	bne.n	800f10c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	3308      	adds	r3, #8
 800f144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f148:	e853 3f00 	ldrex	r3, [r3]
 800f14c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f150:	f023 0301 	bic.w	r3, r3, #1
 800f154:	667b      	str	r3, [r7, #100]	; 0x64
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	3308      	adds	r3, #8
 800f15c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f15e:	647a      	str	r2, [r7, #68]	; 0x44
 800f160:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f162:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f166:	e841 2300 	strex	r3, r2, [r1]
 800f16a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1e5      	bne.n	800f13e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2220      	movs	r2, #32
 800f176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2200      	movs	r2, #0
 800f184:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a35      	ldr	r2, [pc, #212]	; (800f260 <UART_RxISR_8BIT+0x1bc>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d024      	beq.n	800f1da <UART_RxISR_8BIT+0x136>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a33      	ldr	r2, [pc, #204]	; (800f264 <UART_RxISR_8BIT+0x1c0>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d01f      	beq.n	800f1da <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d018      	beq.n	800f1da <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b0:	e853 3f00 	ldrex	r3, [r3]
 800f1b4:	623b      	str	r3, [r7, #32]
   return(result);
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f1bc:	663b      	str	r3, [r7, #96]	; 0x60
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1c6:	633b      	str	r3, [r7, #48]	; 0x30
 800f1c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ce:	e841 2300 	strex	r3, r2, [r1]
 800f1d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1e6      	bne.n	800f1a8 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d12e      	bne.n	800f240 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	e853 3f00 	ldrex	r3, [r3]
 800f1f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f023 0310 	bic.w	r3, r3, #16
 800f1fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	461a      	mov	r2, r3
 800f204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f206:	61fb      	str	r3, [r7, #28]
 800f208:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f20a:	69b9      	ldr	r1, [r7, #24]
 800f20c:	69fa      	ldr	r2, [r7, #28]
 800f20e:	e841 2300 	strex	r3, r2, [r1]
 800f212:	617b      	str	r3, [r7, #20]
   return(result);
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d1e6      	bne.n	800f1e8 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	69db      	ldr	r3, [r3, #28]
 800f220:	f003 0310 	and.w	r3, r3, #16
 800f224:	2b10      	cmp	r3, #16
 800f226:	d103      	bne.n	800f230 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2210      	movs	r2, #16
 800f22e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f236:	4619      	mov	r1, r3
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f7ff f9bb 	bl	800e5b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f23e:	e00b      	b.n	800f258 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7f4 fe53 	bl	8003eec <HAL_UART_RxCpltCallback>
}
 800f246:	e007      	b.n	800f258 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	699a      	ldr	r2, [r3, #24]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f042 0208 	orr.w	r2, r2, #8
 800f256:	619a      	str	r2, [r3, #24]
}
 800f258:	bf00      	nop
 800f25a:	3770      	adds	r7, #112	; 0x70
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	44002400 	.word	0x44002400
 800f264:	54002400 	.word	0x54002400

0800f268 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b09c      	sub	sp, #112	; 0x70
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f276:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f280:	2b22      	cmp	r3, #34	; 0x22
 800f282:	f040 80c3 	bne.w	800f40c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f294:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f296:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f29a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f29e:	4013      	ands	r3, r2
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f2a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2aa:	1c9a      	adds	r2, r3, #2
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	b29a      	uxth	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f040 80a6 	bne.w	800f41c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2d8:	e853 3f00 	ldrex	r3, [r3]
 800f2dc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f2de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2e4:	667b      	str	r3, [r7, #100]	; 0x64
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2ee:	657b      	str	r3, [r7, #84]	; 0x54
 800f2f0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f2f6:	e841 2300 	strex	r3, r2, [r1]
 800f2fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1e6      	bne.n	800f2d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	3308      	adds	r3, #8
 800f308:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30c:	e853 3f00 	ldrex	r3, [r3]
 800f310:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f314:	f023 0301 	bic.w	r3, r3, #1
 800f318:	663b      	str	r3, [r7, #96]	; 0x60
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	3308      	adds	r3, #8
 800f320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f322:	643a      	str	r2, [r7, #64]	; 0x40
 800f324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f326:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f32a:	e841 2300 	strex	r3, r2, [r1]
 800f32e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f332:	2b00      	cmp	r3, #0
 800f334:	d1e5      	bne.n	800f302 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2220      	movs	r2, #32
 800f33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2200      	movs	r2, #0
 800f342:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4a35      	ldr	r2, [pc, #212]	; (800f424 <UART_RxISR_16BIT+0x1bc>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d024      	beq.n	800f39e <UART_RxISR_16BIT+0x136>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4a33      	ldr	r2, [pc, #204]	; (800f428 <UART_RxISR_16BIT+0x1c0>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d01f      	beq.n	800f39e <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d018      	beq.n	800f39e <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f372:	6a3b      	ldr	r3, [r7, #32]
 800f374:	e853 3f00 	ldrex	r3, [r3]
 800f378:	61fb      	str	r3, [r7, #28]
   return(result);
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f380:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	461a      	mov	r2, r3
 800f388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f38a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f38c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f38e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f392:	e841 2300 	strex	r3, r2, [r1]
 800f396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d1e6      	bne.n	800f36c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	d12e      	bne.n	800f404 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	e853 3f00 	ldrex	r3, [r3]
 800f3b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	f023 0310 	bic.w	r3, r3, #16
 800f3c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3ca:	61bb      	str	r3, [r7, #24]
 800f3cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ce:	6979      	ldr	r1, [r7, #20]
 800f3d0:	69ba      	ldr	r2, [r7, #24]
 800f3d2:	e841 2300 	strex	r3, r2, [r1]
 800f3d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d1e6      	bne.n	800f3ac <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	69db      	ldr	r3, [r3, #28]
 800f3e4:	f003 0310 	and.w	r3, r3, #16
 800f3e8:	2b10      	cmp	r3, #16
 800f3ea:	d103      	bne.n	800f3f4 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2210      	movs	r2, #16
 800f3f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7ff f8d9 	bl	800e5b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f402:	e00b      	b.n	800f41c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7f4 fd71 	bl	8003eec <HAL_UART_RxCpltCallback>
}
 800f40a:	e007      	b.n	800f41c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	699a      	ldr	r2, [r3, #24]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f042 0208 	orr.w	r2, r2, #8
 800f41a:	619a      	str	r2, [r3, #24]
}
 800f41c:	bf00      	nop
 800f41e:	3770      	adds	r7, #112	; 0x70
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	44002400 	.word	0x44002400
 800f428:	54002400 	.word	0x54002400

0800f42c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b0ac      	sub	sp, #176	; 0xb0
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f43a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	69db      	ldr	r3, [r3, #28]
 800f444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f462:	2b22      	cmp	r3, #34	; 0x22
 800f464:	f040 8187 	bne.w	800f776 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f46e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f472:	e12a      	b.n	800f6ca <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f47a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f47e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f482:	b2d9      	uxtb	r1, r3
 800f484:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f488:	b2da      	uxtb	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f48e:	400a      	ands	r2, r1
 800f490:	b2d2      	uxtb	r2, r2
 800f492:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f498:	1c5a      	adds	r2, r3, #1
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	69db      	ldr	r3, [r3, #28]
 800f4b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f4ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f4be:	f003 0307 	and.w	r3, r3, #7
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d053      	beq.n	800f56e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f4c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f4ca:	f003 0301 	and.w	r3, r3, #1
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d011      	beq.n	800f4f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f4d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00b      	beq.n	800f4f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4ec:	f043 0201 	orr.w	r2, r3, #1
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f4fa:	f003 0302 	and.w	r3, r3, #2
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d011      	beq.n	800f526 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f506:	f003 0301 	and.w	r3, r3, #1
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00b      	beq.n	800f526 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2202      	movs	r2, #2
 800f514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f51c:	f043 0204 	orr.w	r2, r3, #4
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f52a:	f003 0304 	and.w	r3, r3, #4
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d011      	beq.n	800f556 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f536:	f003 0301 	and.w	r3, r3, #1
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00b      	beq.n	800f556 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2204      	movs	r2, #4
 800f544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f54c:	f043 0202 	orr.w	r2, r3, #2
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d006      	beq.n	800f56e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f7ff f81d 	bl	800e5a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f574:	b29b      	uxth	r3, r3
 800f576:	2b00      	cmp	r3, #0
 800f578:	f040 80a7 	bne.w	800f6ca <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f584:	e853 3f00 	ldrex	r3, [r3]
 800f588:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f58c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	461a      	mov	r2, r3
 800f59a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f59e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f5a0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f5a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f5a6:	e841 2300 	strex	r3, r2, [r1]
 800f5aa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f5ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1e4      	bne.n	800f57c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5bc:	e853 3f00 	ldrex	r3, [r3]
 800f5c0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f5c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5c8:	f023 0301 	bic.w	r3, r3, #1
 800f5cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	3308      	adds	r3, #8
 800f5d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f5da:	66ba      	str	r2, [r7, #104]	; 0x68
 800f5dc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5de:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f5e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f5e2:	e841 2300 	strex	r3, r2, [r1]
 800f5e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f5e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d1e1      	bne.n	800f5b2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2220      	movs	r2, #32
 800f5f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a62      	ldr	r2, [pc, #392]	; (800f790 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d026      	beq.n	800f65a <UART_RxISR_8BIT_FIFOEN+0x22e>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a60      	ldr	r2, [pc, #384]	; (800f794 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d021      	beq.n	800f65a <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f620:	2b00      	cmp	r3, #0
 800f622:	d01a      	beq.n	800f65a <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f62c:	e853 3f00 	ldrex	r3, [r3]
 800f630:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f638:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	461a      	mov	r2, r3
 800f642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f646:	657b      	str	r3, [r7, #84]	; 0x54
 800f648:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f64c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f64e:	e841 2300 	strex	r3, r2, [r1]
 800f652:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1e4      	bne.n	800f624 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d130      	bne.n	800f6c4 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f670:	e853 3f00 	ldrex	r3, [r3]
 800f674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	f023 0310 	bic.w	r3, r3, #16
 800f67c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	461a      	mov	r2, r3
 800f686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f68a:	643b      	str	r3, [r7, #64]	; 0x40
 800f68c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f68e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f692:	e841 2300 	strex	r3, r2, [r1]
 800f696:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d1e4      	bne.n	800f668 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	69db      	ldr	r3, [r3, #28]
 800f6a4:	f003 0310 	and.w	r3, r3, #16
 800f6a8:	2b10      	cmp	r3, #16
 800f6aa:	d103      	bne.n	800f6b4 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2210      	movs	r2, #16
 800f6b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7fe ff79 	bl	800e5b4 <HAL_UARTEx_RxEventCallback>
 800f6c2:	e002      	b.n	800f6ca <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f7f4 fc11 	bl	8003eec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f6ca:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d006      	beq.n	800f6e0 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800f6d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f6d6:	f003 0320 	and.w	r3, r3, #32
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f47f aeca 	bne.w	800f474 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f6ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d049      	beq.n	800f786 <UART_RxISR_8BIT_FIFOEN+0x35a>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6f8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d242      	bcs.n	800f786 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3308      	adds	r3, #8
 800f706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f708:	6a3b      	ldr	r3, [r7, #32]
 800f70a:	e853 3f00 	ldrex	r3, [r3]
 800f70e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	3308      	adds	r3, #8
 800f720:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f724:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f72a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f72c:	e841 2300 	strex	r3, r2, [r1]
 800f730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f734:	2b00      	cmp	r3, #0
 800f736:	d1e3      	bne.n	800f700 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4a17      	ldr	r2, [pc, #92]	; (800f798 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800f73c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	e853 3f00 	ldrex	r3, [r3]
 800f74a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	f043 0320 	orr.w	r3, r3, #32
 800f752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	461a      	mov	r2, r3
 800f75c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f760:	61bb      	str	r3, [r7, #24]
 800f762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f764:	6979      	ldr	r1, [r7, #20]
 800f766:	69ba      	ldr	r2, [r7, #24]
 800f768:	e841 2300 	strex	r3, r2, [r1]
 800f76c:	613b      	str	r3, [r7, #16]
   return(result);
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1e4      	bne.n	800f73e <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f774:	e007      	b.n	800f786 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	699a      	ldr	r2, [r3, #24]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	f042 0208 	orr.w	r2, r2, #8
 800f784:	619a      	str	r2, [r3, #24]
}
 800f786:	bf00      	nop
 800f788:	37b0      	adds	r7, #176	; 0xb0
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	44002400 	.word	0x44002400
 800f794:	54002400 	.word	0x54002400
 800f798:	0800f0a5 	.word	0x0800f0a5

0800f79c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b0ae      	sub	sp, #184	; 0xb8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f7aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	69db      	ldr	r3, [r3, #28]
 800f7b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7d2:	2b22      	cmp	r3, #34	; 0x22
 800f7d4:	f040 818b 	bne.w	800faee <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7de:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f7e2:	e12e      	b.n	800fa42 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f7f6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f7fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f7fe:	4013      	ands	r3, r2
 800f800:	b29a      	uxth	r2, r3
 800f802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f806:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f80c:	1c9a      	adds	r2, r3, #2
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f818:	b29b      	uxth	r3, r3
 800f81a:	3b01      	subs	r3, #1
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	69db      	ldr	r3, [r3, #28]
 800f82a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f82e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f832:	f003 0307 	and.w	r3, r3, #7
 800f836:	2b00      	cmp	r3, #0
 800f838:	d053      	beq.n	800f8e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f83a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f83e:	f003 0301 	and.w	r3, r3, #1
 800f842:	2b00      	cmp	r3, #0
 800f844:	d011      	beq.n	800f86a <UART_RxISR_16BIT_FIFOEN+0xce>
 800f846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00b      	beq.n	800f86a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2201      	movs	r2, #1
 800f858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f860:	f043 0201 	orr.w	r2, r3, #1
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f86a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f86e:	f003 0302 	and.w	r3, r3, #2
 800f872:	2b00      	cmp	r3, #0
 800f874:	d011      	beq.n	800f89a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f87a:	f003 0301 	and.w	r3, r3, #1
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d00b      	beq.n	800f89a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2202      	movs	r2, #2
 800f888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f890:	f043 0204 	orr.w	r2, r3, #4
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f89a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f89e:	f003 0304 	and.w	r3, r3, #4
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d011      	beq.n	800f8ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f8a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f8aa:	f003 0301 	and.w	r3, r3, #1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00b      	beq.n	800f8ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2204      	movs	r2, #4
 800f8b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8c0:	f043 0202 	orr.w	r2, r3, #2
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d006      	beq.n	800f8e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7fe fe63 	bl	800e5a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	f040 80a9 	bne.w	800fa42 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8f8:	e853 3f00 	ldrex	r3, [r3]
 800f8fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f8fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	461a      	mov	r2, r3
 800f90e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f916:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f918:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f91a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f91e:	e841 2300 	strex	r3, r2, [r1]
 800f922:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f926:	2b00      	cmp	r3, #0
 800f928:	d1e2      	bne.n	800f8f0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	3308      	adds	r3, #8
 800f930:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f934:	e853 3f00 	ldrex	r3, [r3]
 800f938:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f93a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f93c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f940:	f023 0301 	bic.w	r3, r3, #1
 800f944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	3308      	adds	r3, #8
 800f94e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f952:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f954:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f956:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f958:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f95a:	e841 2300 	strex	r3, r2, [r1]
 800f95e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f962:	2b00      	cmp	r3, #0
 800f964:	d1e1      	bne.n	800f92a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2220      	movs	r2, #32
 800f96a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2200      	movs	r2, #0
 800f978:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	4a62      	ldr	r2, [pc, #392]	; (800fb08 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800f980:	4293      	cmp	r3, r2
 800f982:	d026      	beq.n	800f9d2 <UART_RxISR_16BIT_FIFOEN+0x236>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a60      	ldr	r2, [pc, #384]	; (800fb0c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d021      	beq.n	800f9d2 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d01a      	beq.n	800f9d2 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a4:	e853 3f00 	ldrex	r3, [r3]
 800f9a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f9b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f9be:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f9c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9c6:	e841 2300 	strex	r3, r2, [r1]
 800f9ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1e4      	bne.n	800f99c <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d130      	bne.n	800fa3c <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e8:	e853 3f00 	ldrex	r3, [r3]
 800f9ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f0:	f023 0310 	bic.w	r3, r3, #16
 800f9f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa02:	647b      	str	r3, [r7, #68]	; 0x44
 800fa04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa0a:	e841 2300 	strex	r3, r2, [r1]
 800fa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1e4      	bne.n	800f9e0 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	69db      	ldr	r3, [r3, #28]
 800fa1c:	f003 0310 	and.w	r3, r3, #16
 800fa20:	2b10      	cmp	r3, #16
 800fa22:	d103      	bne.n	800fa2c <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2210      	movs	r2, #16
 800fa2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa32:	4619      	mov	r1, r3
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f7fe fdbd 	bl	800e5b4 <HAL_UARTEx_RxEventCallback>
 800fa3a:	e002      	b.n	800fa42 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f7f4 fa55 	bl	8003eec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fa42:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d006      	beq.n	800fa58 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800fa4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fa4e:	f003 0320 	and.w	r3, r3, #32
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f47f aec6 	bne.w	800f7e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa5e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fa62:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d049      	beq.n	800fafe <UART_RxISR_16BIT_FIFOEN+0x362>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fa70:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d242      	bcs.n	800fafe <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	3308      	adds	r3, #8
 800fa7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	e853 3f00 	ldrex	r3, [r3]
 800fa86:	623b      	str	r3, [r7, #32]
   return(result);
 800fa88:	6a3b      	ldr	r3, [r7, #32]
 800fa8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fa8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3308      	adds	r3, #8
 800fa98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fa9c:	633a      	str	r2, [r7, #48]	; 0x30
 800fa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800faa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faa4:	e841 2300 	strex	r3, r2, [r1]
 800faa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800faaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1e3      	bne.n	800fa78 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4a17      	ldr	r2, [pc, #92]	; (800fb10 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800fab4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	e853 3f00 	ldrex	r3, [r3]
 800fac2:	60fb      	str	r3, [r7, #12]
   return(result);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f043 0320 	orr.w	r3, r3, #32
 800faca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	461a      	mov	r2, r3
 800fad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fad8:	61fb      	str	r3, [r7, #28]
 800fada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fadc:	69b9      	ldr	r1, [r7, #24]
 800fade:	69fa      	ldr	r2, [r7, #28]
 800fae0:	e841 2300 	strex	r3, r2, [r1]
 800fae4:	617b      	str	r3, [r7, #20]
   return(result);
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1e4      	bne.n	800fab6 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800faec:	e007      	b.n	800fafe <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	699a      	ldr	r2, [r3, #24]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f042 0208 	orr.w	r2, r2, #8
 800fafc:	619a      	str	r2, [r3, #24]
}
 800fafe:	bf00      	nop
 800fb00:	37b8      	adds	r7, #184	; 0xb8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	44002400 	.word	0x44002400
 800fb0c:	54002400 	.word	0x54002400
 800fb10:	0800f269 	.word	0x0800f269

0800fb14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb1c:	bf00      	nop
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb30:	bf00      	nop
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb44:	bf00      	nop
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b085      	sub	sp, #20
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d101      	bne.n	800fb66 <HAL_UARTEx_DisableFifoMode+0x16>
 800fb62:	2302      	movs	r3, #2
 800fb64:	e027      	b.n	800fbb6 <HAL_UARTEx_DisableFifoMode+0x66>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2224      	movs	r2, #36	; 0x24
 800fb72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f022 0201 	bic.w	r2, r2, #1
 800fb8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fb94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2220      	movs	r2, #32
 800fba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fbb4:	2300      	movs	r3, #0
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3714      	adds	r7, #20
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr

0800fbc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b084      	sub	sp, #16
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
 800fbca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d101      	bne.n	800fbda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fbd6:	2302      	movs	r3, #2
 800fbd8:	e02d      	b.n	800fc36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2224      	movs	r2, #36	; 0x24
 800fbe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f022 0201 	bic.w	r2, r2, #1
 800fc00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	689b      	ldr	r3, [r3, #8]
 800fc08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	683a      	ldr	r2, [r7, #0]
 800fc12:	430a      	orrs	r2, r1
 800fc14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f000 f850 	bl	800fcbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2220      	movs	r2, #32
 800fc28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b084      	sub	sp, #16
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
 800fc46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fc4e:	2b01      	cmp	r3, #1
 800fc50:	d101      	bne.n	800fc56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc52:	2302      	movs	r3, #2
 800fc54:	e02d      	b.n	800fcb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2224      	movs	r2, #36	; 0x24
 800fc62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f022 0201 	bic.w	r2, r2, #1
 800fc7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	689b      	ldr	r3, [r3, #8]
 800fc84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	683a      	ldr	r2, [r7, #0]
 800fc8e:	430a      	orrs	r2, r1
 800fc90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 f812 	bl	800fcbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2220      	movs	r2, #32
 800fca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fcb0:	2300      	movs	r3, #0
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
	...

0800fcbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b085      	sub	sp, #20
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d108      	bne.n	800fcde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2201      	movs	r2, #1
 800fcd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fcdc:	e031      	b.n	800fd42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fcde:	2308      	movs	r3, #8
 800fce0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fce2:	2308      	movs	r3, #8
 800fce4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	0e5b      	lsrs	r3, r3, #25
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	f003 0307 	and.w	r3, r3, #7
 800fcf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	689b      	ldr	r3, [r3, #8]
 800fcfc:	0f5b      	lsrs	r3, r3, #29
 800fcfe:	b2db      	uxtb	r3, r3
 800fd00:	f003 0307 	and.w	r3, r3, #7
 800fd04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd06:	7bbb      	ldrb	r3, [r7, #14]
 800fd08:	7b3a      	ldrb	r2, [r7, #12]
 800fd0a:	4911      	ldr	r1, [pc, #68]	; (800fd50 <UARTEx_SetNbDataToProcess+0x94>)
 800fd0c:	5c8a      	ldrb	r2, [r1, r2]
 800fd0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd12:	7b3a      	ldrb	r2, [r7, #12]
 800fd14:	490f      	ldr	r1, [pc, #60]	; (800fd54 <UARTEx_SetNbDataToProcess+0x98>)
 800fd16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd18:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd24:	7bfb      	ldrb	r3, [r7, #15]
 800fd26:	7b7a      	ldrb	r2, [r7, #13]
 800fd28:	4909      	ldr	r1, [pc, #36]	; (800fd50 <UARTEx_SetNbDataToProcess+0x94>)
 800fd2a:	5c8a      	ldrb	r2, [r1, r2]
 800fd2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd30:	7b7a      	ldrb	r2, [r7, #13]
 800fd32:	4908      	ldr	r1, [pc, #32]	; (800fd54 <UARTEx_SetNbDataToProcess+0x98>)
 800fd34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd36:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd42:	bf00      	nop
 800fd44:	3714      	adds	r7, #20
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	0801ff78 	.word	0x0801ff78
 800fd54:	0801ff80 	.word	0x0801ff80

0800fd58 <qbufferCreateBySize>:

  return ret;
}

BOOL qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b087      	sub	sp, #28
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
 800fd64:	603b      	str	r3, [r7, #0]
  BOOL ret = TRUE;
 800fd66:	2301      	movs	r3, #1
 800fd68:	617b      	str	r3, [r7, #20]

  p_node->in    = 0;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2200      	movs	r2, #0
 800fd74:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	683a      	ldr	r2, [r7, #0]
 800fd7a:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	68ba      	ldr	r2, [r7, #8]
 800fd86:	611a      	str	r2, [r3, #16]

  return ret;
 800fd88:	697b      	ldr	r3, [r7, #20]
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	371c      	adds	r7, #28
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr

0800fd96 <qbufferWrite>:

BOOL qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800fd96:	b480      	push	{r7}
 800fd98:	b08b      	sub	sp, #44	; 0x2c
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	60b9      	str	r1, [r7, #8]
 800fda0:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800fda2:	2301      	movs	r3, #1
 800fda4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800fda6:	2300      	movs	r3, #0
 800fda8:	623b      	str	r3, [r7, #32]
 800fdaa:	e042      	b.n	800fe32 <qbufferWrite+0x9c>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	68fa      	ldr	r2, [r7, #12]
 800fdb4:	6892      	ldr	r2, [r2, #8]
 800fdb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdba:	fb01 f202 	mul.w	r2, r1, r2
 800fdbe:	1a9b      	subs	r3, r3, r2
 800fdc0:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	685b      	ldr	r3, [r3, #4]
 800fdc6:	69ba      	ldr	r2, [r7, #24]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d02c      	beq.n	800fe26 <qbufferWrite+0x90>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	691b      	ldr	r3, [r3, #16]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d024      	beq.n	800fe1e <qbufferWrite+0x88>
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d021      	beq.n	800fe1e <qbufferWrite+0x88>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	691a      	ldr	r2, [r3, #16]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	68f9      	ldr	r1, [r7, #12]
 800fde4:	68c9      	ldr	r1, [r1, #12]
 800fde6:	fb01 f303 	mul.w	r3, r1, r3
 800fdea:	4413      	add	r3, r2
 800fdec:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 800fdee:	2300      	movs	r3, #0
 800fdf0:	61fb      	str	r3, [r7, #28]
 800fdf2:	e00a      	b.n	800fe0a <qbufferWrite+0x74>
        {
          p_buf[i] = p_data[i];
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	68ba      	ldr	r2, [r7, #8]
 800fdf8:	441a      	add	r2, r3
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	6979      	ldr	r1, [r7, #20]
 800fdfe:	440b      	add	r3, r1
 800fe00:	7812      	ldrb	r2, [r2, #0]
 800fe02:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	3301      	adds	r3, #1
 800fe08:	61fb      	str	r3, [r7, #28]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	68da      	ldr	r2, [r3, #12]
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	d8ef      	bhi.n	800fdf4 <qbufferWrite+0x5e>
        }
        p_data += p_node->size;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	68ba      	ldr	r2, [r7, #8]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	69ba      	ldr	r2, [r7, #24]
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	e002      	b.n	800fe2c <qbufferWrite+0x96>
    }
    else
    {
      ret = FALSE;
 800fe26:	2300      	movs	r3, #0
 800fe28:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800fe2a:	e006      	b.n	800fe3a <qbufferWrite+0xa4>
  for (int i=0; i<length; i++)
 800fe2c:	6a3b      	ldr	r3, [r7, #32]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	623b      	str	r3, [r7, #32]
 800fe32:	6a3b      	ldr	r3, [r7, #32]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d8b8      	bhi.n	800fdac <qbufferWrite+0x16>
    }
  }

  return ret;
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	372c      	adds	r7, #44	; 0x2c
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr

0800fe48 <qbufferRead>:

BOOL qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b089      	sub	sp, #36	; 0x24
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800fe54:	2301      	movs	r3, #1
 800fe56:	61fb      	str	r3, [r7, #28]


  for (int i=0; i<length; i++)
 800fe58:	2300      	movs	r3, #0
 800fe5a:	61bb      	str	r3, [r7, #24]
 800fe5c:	e041      	b.n	800fee2 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	691b      	ldr	r3, [r3, #16]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d024      	beq.n	800feb0 <qbufferRead+0x68>
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d021      	beq.n	800feb0 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	691a      	ldr	r2, [r3, #16]
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	68f9      	ldr	r1, [r7, #12]
 800fe76:	68c9      	ldr	r1, [r1, #12]
 800fe78:	fb01 f303 	mul.w	r3, r1, r3
 800fe7c:	4413      	add	r3, r2
 800fe7e:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 800fe80:	2300      	movs	r3, #0
 800fe82:	617b      	str	r3, [r7, #20]
 800fe84:	e00a      	b.n	800fe9c <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	693a      	ldr	r2, [r7, #16]
 800fe8a:	441a      	add	r2, r3
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	68b9      	ldr	r1, [r7, #8]
 800fe90:	440b      	add	r3, r1
 800fe92:	7812      	ldrb	r2, [r2, #0]
 800fe94:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	617b      	str	r3, [r7, #20]
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	68da      	ldr	r2, [r3, #12]
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d8ef      	bhi.n	800fe86 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	68ba      	ldr	r2, [r7, #8]
 800feac:	4413      	add	r3, r2
 800feae:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	685a      	ldr	r2, [r3, #4]
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d00c      	beq.n	800fed6 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	3301      	adds	r3, #1
 800fec2:	68fa      	ldr	r2, [r7, #12]
 800fec4:	6892      	ldr	r2, [r2, #8]
 800fec6:	fbb3 f1f2 	udiv	r1, r3, r2
 800feca:	fb01 f202 	mul.w	r2, r1, r2
 800fece:	1a9a      	subs	r2, r3, r2
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	605a      	str	r2, [r3, #4]
 800fed4:	e002      	b.n	800fedc <qbufferRead+0x94>
    }
    else
    {
      ret = FALSE;
 800fed6:	2300      	movs	r3, #0
 800fed8:	61fb      	str	r3, [r7, #28]
      break;
 800feda:	e006      	b.n	800feea <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	3301      	adds	r3, #1
 800fee0:	61bb      	str	r3, [r7, #24]
 800fee2:	69bb      	ldr	r3, [r7, #24]
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d8b9      	bhi.n	800fe5e <qbufferRead+0x16>
    }
  }

  return ret;
 800feea:	69fb      	ldr	r3, [r7, #28]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3724      	adds	r7, #36	; 0x24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	691a      	ldr	r2, [r3, #16]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	6879      	ldr	r1, [r7, #4]
 800ff0a:	68c9      	ldr	r1, [r1, #12]
 800ff0c:	fb01 f303 	mul.w	r3, r1, r3
 800ff10:	4413      	add	r3, r2
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	370c      	adds	r7, #12
 800ff16:	46bd      	mov	sp, r7
 800ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1c:	4770      	bx	lr

0800ff1e <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800ff1e:	b480      	push	{r7}
 800ff20:	b085      	sub	sp, #20
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681a      	ldr	r2, [r3, #0]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	1ad3      	subs	r3, r2, r3
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	6892      	ldr	r2, [r2, #8]
 800ff34:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff38:	fb01 f202 	mul.w	r2, r1, r2
 800ff3c:	1a9b      	subs	r3, r3, r2
 800ff3e:	60fb      	str	r3, [r7, #12]

  return ret;
 800ff40:	68fb      	ldr	r3, [r7, #12]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3714      	adds	r7, #20
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
	...

0800ff50 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
  svGetChar = funcGetChar;
 800ff5c:	4a18      	ldr	r2, [pc, #96]	; (800ffc0 <svCLI_Init+0x70>)
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6013      	str	r3, [r2, #0]
  svPutChar = funcPutChar;
 800ff62:	4a18      	ldr	r2, [pc, #96]	; (800ffc4 <svCLI_Init+0x74>)
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	6013      	str	r3, [r2, #0]
  svCommit = funcCommit;
 800ff68:	4a17      	ldr	r2, [pc, #92]	; (800ffc8 <svCLI_Init+0x78>)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6013      	str	r3, [r2, #0]
  szCLIString[0] = 0;
 800ff6e:	4b17      	ldr	r3, [pc, #92]	; (800ffcc <svCLI_Init+0x7c>)
 800ff70:	2200      	movs	r2, #0
 800ff72:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800ff74:	4b16      	ldr	r3, [pc, #88]	; (800ffd0 <svCLI_Init+0x80>)
 800ff76:	4a17      	ldr	r2, [pc, #92]	; (800ffd4 <svCLI_Init+0x84>)
 800ff78:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800ff7a:	4b17      	ldr	r3, [pc, #92]	; (800ffd8 <svCLI_Init+0x88>)
 800ff7c:	4a17      	ldr	r2, [pc, #92]	; (800ffdc <svCLI_Init+0x8c>)
 800ff7e:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800ff80:	4b17      	ldr	r3, [pc, #92]	; (800ffe0 <svCLI_Init+0x90>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00d      	beq.n	800ffa4 <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800ff88:	4b16      	ldr	r3, [pc, #88]	; (800ffe4 <svCLI_Init+0x94>)
 800ff8a:	4a17      	ldr	r2, [pc, #92]	; (800ffe8 <svCLI_Init+0x98>)
 800ff8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff90:	6018      	str	r0, [r3, #0]
 800ff92:	3304      	adds	r3, #4
 800ff94:	8019      	strh	r1, [r3, #0]
 800ff96:	3302      	adds	r3, #2
 800ff98:	0c0a      	lsrs	r2, r1, #16
 800ff9a:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800ff9c:	4b13      	ldr	r3, [pc, #76]	; (800ffec <svCLI_Init+0x9c>)
 800ff9e:	2206      	movs	r2, #6
 800ffa0:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800ffa2:	e007      	b.n	800ffb4 <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800ffa4:	4b0f      	ldr	r3, [pc, #60]	; (800ffe4 <svCLI_Init+0x94>)
 800ffa6:	4a12      	ldr	r2, [pc, #72]	; (800fff0 <svCLI_Init+0xa0>)
 800ffa8:	ca07      	ldmia	r2, {r0, r1, r2}
 800ffaa:	c303      	stmia	r3!, {r0, r1}
 800ffac:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800ffae:	4b0f      	ldr	r3, [pc, #60]	; (800ffec <svCLI_Init+0x9c>)
 800ffb0:	2209      	movs	r2, #9
 800ffb2:	601a      	str	r2, [r3, #0]
}
 800ffb4:	bf00      	nop
 800ffb6:	3714      	adds	r7, #20
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr
 800ffc0:	200041a0 	.word	0x200041a0
 800ffc4:	200041a4 	.word	0x200041a4
 800ffc8:	200041a8 	.word	0x200041a8
 800ffcc:	20003f8c 	.word	0x20003f8c
 800ffd0:	20004198 	.word	0x20004198
 800ffd4:	0801cf68 	.word	0x0801cf68
 800ffd8:	2000419c 	.word	0x2000419c
 800ffdc:	0801cf98 	.word	0x0801cf98
 800ffe0:	20000064 	.word	0x20000064
 800ffe4:	20000068 	.word	0x20000068
 800ffe8:	0801d324 	.word	0x0801d324
 800ffec:	20000074 	.word	0x20000074
 800fff0:	0801d32c 	.word	0x0801d32c

0800fff4 <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800fff4:	b40f      	push	{r0, r1, r2, r3}
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b084      	sub	sp, #16
 800fffa:	af00      	add	r7, sp, #0
static char msg[256];
  va_list ap;
  int len;

  va_start(ap, fmt);
 800fffc:	f107 031c 	add.w	r3, r7, #28
 8010000:	607b      	str	r3, [r7, #4]
  len = vsprintf(msg, fmt, ap);
 8010002:	687a      	ldr	r2, [r7, #4]
 8010004:	69b9      	ldr	r1, [r7, #24]
 8010006:	480f      	ldr	r0, [pc, #60]	; (8010044 <svCLI_Printf+0x50>)
 8010008:	f00b ffc8 	bl	801bf9c <vsiprintf>
 801000c:	60b8      	str	r0, [r7, #8]
  va_end(ap);
  for (int i=0;i<len;i++) {
 801000e:	2300      	movs	r3, #0
 8010010:	60fb      	str	r3, [r7, #12]
 8010012:	e00a      	b.n	801002a <svCLI_Printf+0x36>
    svPutChar(msg[i]);
 8010014:	4b0c      	ldr	r3, [pc, #48]	; (8010048 <svCLI_Printf+0x54>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	490a      	ldr	r1, [pc, #40]	; (8010044 <svCLI_Printf+0x50>)
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	440a      	add	r2, r1
 801001e:	7812      	ldrb	r2, [r2, #0]
 8010020:	4610      	mov	r0, r2
 8010022:	4798      	blx	r3
  for (int i=0;i<len;i++) {
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	3301      	adds	r3, #1
 8010028:	60fb      	str	r3, [r7, #12]
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	429a      	cmp	r2, r3
 8010030:	dbf0      	blt.n	8010014 <svCLI_Printf+0x20>
  }
  return len;
 8010032:	68bb      	ldr	r3, [r7, #8]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3710      	adds	r7, #16
 8010038:	46bd      	mov	sp, r7
 801003a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801003e:	b004      	add	sp, #16
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	200041b8 	.word	0x200041b8
 8010048:	200041a4 	.word	0x200041a4

0801004c <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
  if (svPutChar) {
 8010052:	4b2d      	ldr	r3, [pc, #180]	; (8010108 <svCLI_ShowHelp+0xbc>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d04a      	beq.n	80100f0 <svCLI_ShowHelp+0xa4>
    if (sCLITableBegin != sCLITablEnd) {
 801005a:	4b2c      	ldr	r3, [pc, #176]	; (801010c <svCLI_ShowHelp+0xc0>)
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	4b2c      	ldr	r3, [pc, #176]	; (8010110 <svCLI_ShowHelp+0xc4>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	429a      	cmp	r2, r3
 8010064:	d03e      	beq.n	80100e4 <svCLI_ShowHelp+0x98>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 8010066:	2300      	movs	r3, #0
 8010068:	60fb      	str	r3, [r7, #12]
 801006a:	e006      	b.n	801007a <svCLI_ShowHelp+0x2e>
 801006c:	4b26      	ldr	r3, [pc, #152]	; (8010108 <svCLI_ShowHelp+0xbc>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	203d      	movs	r0, #61	; 0x3d
 8010072:	4798      	blx	r3
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	3301      	adds	r3, #1
 8010078:	60fb      	str	r3, [r7, #12]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	2b4f      	cmp	r3, #79	; 0x4f
 801007e:	d9f5      	bls.n	801006c <svCLI_ShowHelp+0x20>
      svCLI_Printf("\r\n");
 8010080:	4824      	ldr	r0, [pc, #144]	; (8010114 <svCLI_ShowHelp+0xc8>)
 8010082:	f7ff ffb7 	bl	800fff4 <svCLI_Printf>
      SVCLI_t* pCLIEntry;
      int nCount = 1;
 8010086:	2301      	movs	r3, #1
 8010088:	607b      	str	r3, [r7, #4]
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 801008a:	4b20      	ldr	r3, [pc, #128]	; (801010c <svCLI_ShowHelp+0xc0>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	60bb      	str	r3, [r7, #8]
 8010090:	e012      	b.n	80100b8 <svCLI_ShowHelp+0x6c>
        svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 8010092:	6879      	ldr	r1, [r7, #4]
 8010094:	1c4b      	adds	r3, r1, #1
 8010096:	607b      	str	r3, [r7, #4]
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d002      	beq.n	80100aa <svCLI_ShowHelp+0x5e>
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	e000      	b.n	80100ac <svCLI_ShowHelp+0x60>
 80100aa:	4b1b      	ldr	r3, [pc, #108]	; (8010118 <svCLI_ShowHelp+0xcc>)
 80100ac:	481b      	ldr	r0, [pc, #108]	; (801011c <svCLI_ShowHelp+0xd0>)
 80100ae:	f7ff ffa1 	bl	800fff4 <svCLI_Printf>
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	330c      	adds	r3, #12
 80100b6:	60bb      	str	r3, [r7, #8]
 80100b8:	4b15      	ldr	r3, [pc, #84]	; (8010110 <svCLI_ShowHelp+0xc4>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	68ba      	ldr	r2, [r7, #8]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d3e7      	bcc.n	8010092 <svCLI_ShowHelp+0x46>
      }
      svCLI_Printf(AES_RESET);
 80100c2:	4817      	ldr	r0, [pc, #92]	; (8010120 <svCLI_ShowHelp+0xd4>)
 80100c4:	f7ff ff96 	bl	800fff4 <svCLI_Printf>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 80100c8:	2300      	movs	r3, #0
 80100ca:	603b      	str	r3, [r7, #0]
 80100cc:	e006      	b.n	80100dc <svCLI_ShowHelp+0x90>
 80100ce:	4b0e      	ldr	r3, [pc, #56]	; (8010108 <svCLI_ShowHelp+0xbc>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	203d      	movs	r0, #61	; 0x3d
 80100d4:	4798      	blx	r3
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	3301      	adds	r3, #1
 80100da:	603b      	str	r3, [r7, #0]
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	2b4f      	cmp	r3, #79	; 0x4f
 80100e0:	d9f5      	bls.n	80100ce <svCLI_ShowHelp+0x82>
 80100e2:	e002      	b.n	80100ea <svCLI_ShowHelp+0x9e>
    }
    else {  // No CLI Entry
      svCLI_Printf("No CLI Entries !!!");
 80100e4:	480f      	ldr	r0, [pc, #60]	; (8010124 <svCLI_ShowHelp+0xd8>)
 80100e6:	f7ff ff85 	bl	800fff4 <svCLI_Printf>
    }
    svCLI_Printf("\r\n");
 80100ea:	480a      	ldr	r0, [pc, #40]	; (8010114 <svCLI_ShowHelp+0xc8>)
 80100ec:	f7ff ff82 	bl	800fff4 <svCLI_Printf>
  }
  if (svCommit) {
 80100f0:	4b0d      	ldr	r3, [pc, #52]	; (8010128 <svCLI_ShowHelp+0xdc>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <svCLI_ShowHelp+0xb2>
    svCommit();
 80100f8:	4b0b      	ldr	r3, [pc, #44]	; (8010128 <svCLI_ShowHelp+0xdc>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4798      	blx	r3
  }
}
 80100fe:	bf00      	nop
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	200041a4 	.word	0x200041a4
 801010c:	20004198 	.word	0x20004198
 8010110:	2000419c 	.word	0x2000419c
 8010114:	0801d338 	.word	0x0801d338
 8010118:	0801d33c 	.word	0x0801d33c
 801011c:	0801d340 	.word	0x0801d340
 8010120:	0801d360 	.word	0x0801d360
 8010124:	0801d368 	.word	0x0801d368
 8010128:	200041a8 	.word	0x200041a8

0801012c <svCLI_KeepLoop>:

// FOR CAN SVCLI
BOOL svCLI_KeepLoop(void)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	af00      	add	r7, sp, #0
  if (Uart_Available(_DEF_UART1) == 0)
 8010130:	2000      	movs	r0, #0
 8010132:	f7f3 fec5 	bl	8003ec0 <Uart_Available>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	d101      	bne.n	8010140 <svCLI_KeepLoop+0x14>
  {
    return TRUE;
 801013c:	2301      	movs	r3, #1
 801013e:	e000      	b.n	8010142 <svCLI_KeepLoop+0x16>
  }
  else
  {
    return FALSE;
 8010140:	2300      	movs	r3, #0
  }
}
 8010142:	4618      	mov	r0, r3
 8010144:	bd80      	pop	{r7, pc}

08010146 <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 8010146:	b480      	push	{r7}
 8010148:	b085      	sub	sp, #20
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
  int nCount = 0;
 801014e:	2300      	movs	r3, #0
 8010150:	60fb      	str	r3, [r7, #12]
  if ((szString == NULL) || (*szString == 0))
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d003      	beq.n	8010160 <_strlenOffspace+0x1a>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d104      	bne.n	801016a <_strlenOffspace+0x24>
    return 0;
 8010160:	2300      	movs	r3, #0
 8010162:	e017      	b.n	8010194 <_strlenOffspace+0x4e>
  // Strip off first spaces
  while (*szString == ' ') szString++;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	3301      	adds	r3, #1
 8010168:	607b      	str	r3, [r7, #4]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	2b20      	cmp	r3, #32
 8010170:	d0f8      	beq.n	8010164 <_strlenOffspace+0x1e>
  // Count
  while (*szString) {
 8010172:	e008      	b.n	8010186 <_strlenOffspace+0x40>
    if (*szString++ != ' ') {
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	1c5a      	adds	r2, r3, #1
 8010178:	607a      	str	r2, [r7, #4]
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	2b20      	cmp	r3, #32
 801017e:	d007      	beq.n	8010190 <_strlenOffspace+0x4a>
      nCount++;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	3301      	adds	r3, #1
 8010184:	60fb      	str	r3, [r7, #12]
  while (*szString) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1f2      	bne.n	8010174 <_strlenOffspace+0x2e>
 801018e:	e000      	b.n	8010192 <_strlenOffspace+0x4c>
    }
    else
      break;
 8010190:	bf00      	nop
  }
  return nCount;
 8010192:	68fb      	ldr	r3, [r7, #12]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr

080101a0 <_toLower>:

static char _toLower(char c)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	4603      	mov	r3, r0
 80101a8:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 80101aa:	79fb      	ldrb	r3, [r7, #7]
 80101ac:	2b40      	cmp	r3, #64	; 0x40
 80101ae:	d905      	bls.n	80101bc <_toLower+0x1c>
 80101b0:	79fb      	ldrb	r3, [r7, #7]
 80101b2:	2b5a      	cmp	r3, #90	; 0x5a
 80101b4:	d802      	bhi.n	80101bc <_toLower+0x1c>
    c = (c - 'A') + 'a';
 80101b6:	79fb      	ldrb	r3, [r7, #7]
 80101b8:	3320      	adds	r3, #32
 80101ba:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 80101bc:	79fb      	ldrb	r3, [r7, #7]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <_isPrintable>:

static int _isPrintable(char c)
{
 80101ca:	b480      	push	{r7}
 80101cc:	b083      	sub	sp, #12
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	4603      	mov	r3, r0
 80101d2:	71fb      	strb	r3, [r7, #7]
  if ((' ' <= c) && (c <= '~'))
 80101d4:	79fb      	ldrb	r3, [r7, #7]
 80101d6:	2b1f      	cmp	r3, #31
 80101d8:	d904      	bls.n	80101e4 <_isPrintable+0x1a>
 80101da:	79fb      	ldrb	r3, [r7, #7]
 80101dc:	2b7e      	cmp	r3, #126	; 0x7e
 80101de:	d801      	bhi.n	80101e4 <_isPrintable+0x1a>
    return 1;
 80101e0:	2301      	movs	r3, #1
 80101e2:	e000      	b.n	80101e6 <_isPrintable+0x1c>
  return 0;
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	370c      	adds	r7, #12
 80101ea:	46bd      	mov	sp, r7
 80101ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f0:	4770      	bx	lr

080101f2 <_isHex>:

static int _isHex(char c)
{
 80101f2:	b480      	push	{r7}
 80101f4:	b083      	sub	sp, #12
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	4603      	mov	r3, r0
 80101fa:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||       \
 80101fc:	79fb      	ldrb	r3, [r7, #7]
 80101fe:	2b2f      	cmp	r3, #47	; 0x2f
 8010200:	d902      	bls.n	8010208 <_isHex+0x16>
 8010202:	79fb      	ldrb	r3, [r7, #7]
 8010204:	2b39      	cmp	r3, #57	; 0x39
 8010206:	d90b      	bls.n	8010220 <_isHex+0x2e>
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	2b40      	cmp	r3, #64	; 0x40
 801020c:	d902      	bls.n	8010214 <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||   \
 801020e:	79fb      	ldrb	r3, [r7, #7]
 8010210:	2b46      	cmp	r3, #70	; 0x46
 8010212:	d905      	bls.n	8010220 <_isHex+0x2e>
 8010214:	79fb      	ldrb	r3, [r7, #7]
 8010216:	2b60      	cmp	r3, #96	; 0x60
 8010218:	d904      	bls.n	8010224 <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 801021a:	79fb      	ldrb	r3, [r7, #7]
 801021c:	2b66      	cmp	r3, #102	; 0x66
 801021e:	d801      	bhi.n	8010224 <_isHex+0x32>
    return 1;
 8010220:	2301      	movs	r3, #1
 8010222:	e000      	b.n	8010226 <_isHex+0x34>
  return 0;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	370c      	adds	r7, #12
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr

08010232 <_fromHex>:

static int _fromHex(char c) 
{
 8010232:	b480      	push	{r7}
 8010234:	b085      	sub	sp, #20
 8010236:	af00      	add	r7, sp, #0
 8010238:	4603      	mov	r3, r0
 801023a:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 801023c:	2300      	movs	r3, #0
 801023e:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 8010240:	79fb      	ldrb	r3, [r7, #7]
 8010242:	2b2f      	cmp	r3, #47	; 0x2f
 8010244:	d906      	bls.n	8010254 <_fromHex+0x22>
 8010246:	79fb      	ldrb	r3, [r7, #7]
 8010248:	2b39      	cmp	r3, #57	; 0x39
 801024a:	d803      	bhi.n	8010254 <_fromHex+0x22>
    ret = (c - '0');
 801024c:	79fb      	ldrb	r3, [r7, #7]
 801024e:	3b30      	subs	r3, #48	; 0x30
 8010250:	60fb      	str	r3, [r7, #12]
 8010252:	e012      	b.n	801027a <_fromHex+0x48>
  } 
  else if ((c >= 'a') && (c <= 'f')) {
 8010254:	79fb      	ldrb	r3, [r7, #7]
 8010256:	2b60      	cmp	r3, #96	; 0x60
 8010258:	d906      	bls.n	8010268 <_fromHex+0x36>
 801025a:	79fb      	ldrb	r3, [r7, #7]
 801025c:	2b66      	cmp	r3, #102	; 0x66
 801025e:	d803      	bhi.n	8010268 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 8010260:	79fb      	ldrb	r3, [r7, #7]
 8010262:	3b57      	subs	r3, #87	; 0x57
 8010264:	60fb      	str	r3, [r7, #12]
 8010266:	e008      	b.n	801027a <_fromHex+0x48>
  } 
  else if ((c >= 'A') && (c <= 'F')) {
 8010268:	79fb      	ldrb	r3, [r7, #7]
 801026a:	2b40      	cmp	r3, #64	; 0x40
 801026c:	d905      	bls.n	801027a <_fromHex+0x48>
 801026e:	79fb      	ldrb	r3, [r7, #7]
 8010270:	2b46      	cmp	r3, #70	; 0x46
 8010272:	d802      	bhi.n	801027a <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 8010274:	79fb      	ldrb	r3, [r7, #7]
 8010276:	3b37      	subs	r3, #55	; 0x37
 8010278:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801027a:	68fb      	ldr	r3, [r7, #12]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3714      	adds	r7, #20
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b086      	sub	sp, #24
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d101      	bne.n	801029e <_strNoCaseCmp+0x16>
    return 0;
 801029a:	2300      	movs	r3, #0
 801029c:	e026      	b.n	80102ec <_strNoCaseCmp+0x64>
  do {
    if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	1c5a      	adds	r2, r3, #1
 80102a2:	60fa      	str	r2, [r7, #12]
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7ff ff7a 	bl	80101a0 <_toLower>
 80102ac:	4603      	mov	r3, r0
 80102ae:	75fb      	strb	r3, [r7, #23]
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	1c5a      	adds	r2, r3, #1
 80102b4:	60ba      	str	r2, [r7, #8]
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff ff71 	bl	80101a0 <_toLower>
 80102be:	4603      	mov	r3, r0
 80102c0:	75bb      	strb	r3, [r7, #22]
 80102c2:	7dfa      	ldrb	r2, [r7, #23]
 80102c4:	7dbb      	ldrb	r3, [r7, #22]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d009      	beq.n	80102de <_strNoCaseCmp+0x56>
      if ((c1 == 0) || (c2 == 0))
 80102ca:	7dfb      	ldrb	r3, [r7, #23]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d00c      	beq.n	80102ea <_strNoCaseCmp+0x62>
 80102d0:	7dbb      	ldrb	r3, [r7, #22]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d009      	beq.n	80102ea <_strNoCaseCmp+0x62>
          break;
      return ((unsigned char)c1 - (unsigned char)c2);
 80102d6:	7dfa      	ldrb	r2, [r7, #23]
 80102d8:	7dbb      	ldrb	r3, [r7, #22]
 80102da:	1ad3      	subs	r3, r2, r3
 80102dc:	e006      	b.n	80102ec <_strNoCaseCmp+0x64>
    }
  } while (--nLenghth != 0);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	3b01      	subs	r3, #1
 80102e2:	607b      	str	r3, [r7, #4]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d1d9      	bne.n	801029e <_strNoCaseCmp+0x16>
  return 0;
 80102ea:	2300      	movs	r3, #0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3718      	adds	r7, #24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	607a      	str	r2, [r7, #4]
  while (nLength--) {
 8010300:	e007      	b.n	8010312 <_svMemCpy+0x1e>
    *dst++=*src++;
 8010302:	68ba      	ldr	r2, [r7, #8]
 8010304:	1c53      	adds	r3, r2, #1
 8010306:	60bb      	str	r3, [r7, #8]
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	1c59      	adds	r1, r3, #1
 801030c:	60f9      	str	r1, [r7, #12]
 801030e:	7812      	ldrb	r2, [r2, #0]
 8010310:	701a      	strb	r2, [r3, #0]
  while (nLength--) {
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	1e5a      	subs	r2, r3, #1
 8010316:	607a      	str	r2, [r7, #4]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1f2      	bne.n	8010302 <_svMemCpy+0xe>
  }
}
 801031c:	bf00      	nop
 801031e:	bf00      	nop
 8010320:	3714      	adds	r7, #20
 8010322:	46bd      	mov	sp, r7
 8010324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010328:	4770      	bx	lr
	...

0801032c <_svClearLine>:

static void _svClearLine(void)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
  svPutChar('\r');
 8010332:	4b16      	ldr	r3, [pc, #88]	; (801038c <_svClearLine+0x60>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	200d      	movs	r0, #13
 8010338:	4798      	blx	r3
  // Remove Strings
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 801033a:	2300      	movs	r3, #0
 801033c:	607b      	str	r3, [r7, #4]
 801033e:	e006      	b.n	801034e <_svClearLine+0x22>
    svPutChar(' ');
 8010340:	4b12      	ldr	r3, [pc, #72]	; (801038c <_svClearLine+0x60>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2020      	movs	r0, #32
 8010346:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	3301      	adds	r3, #1
 801034c:	607b      	str	r3, [r7, #4]
 801034e:	4b10      	ldr	r3, [pc, #64]	; (8010390 <_svClearLine+0x64>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4a10      	ldr	r2, [pc, #64]	; (8010394 <_svClearLine+0x68>)
 8010354:	6812      	ldr	r2, [r2, #0]
 8010356:	441a      	add	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	429a      	cmp	r2, r3
 801035c:	d8f0      	bhi.n	8010340 <_svClearLine+0x14>
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 801035e:	2300      	movs	r3, #0
 8010360:	603b      	str	r3, [r7, #0]
 8010362:	e006      	b.n	8010372 <_svClearLine+0x46>
    svPutChar('\b');
 8010364:	4b09      	ldr	r3, [pc, #36]	; (801038c <_svClearLine+0x60>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	2008      	movs	r0, #8
 801036a:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	3301      	adds	r3, #1
 8010370:	603b      	str	r3, [r7, #0]
 8010372:	4b07      	ldr	r3, [pc, #28]	; (8010390 <_svClearLine+0x64>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4a07      	ldr	r2, [pc, #28]	; (8010394 <_svClearLine+0x68>)
 8010378:	6812      	ldr	r2, [r2, #0]
 801037a:	441a      	add	r2, r3
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	429a      	cmp	r2, r3
 8010380:	d8f0      	bhi.n	8010364 <_svClearLine+0x38>
}
 8010382:	bf00      	nop
 8010384:	bf00      	nop
 8010386:	3708      	adds	r7, #8
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	200041a4 	.word	0x200041a4
 8010390:	20004194 	.word	0x20004194
 8010394:	20000074 	.word	0x20000074

08010398 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	4603      	mov	r3, r0
 80103a0:	71fb      	strb	r3, [r7, #7]
  switch (eHistoryCmd) {
 80103a2:	79fb      	ldrb	r3, [r7, #7]
 80103a4:	2b02      	cmp	r3, #2
 80103a6:	d03f      	beq.n	8010428 <svCLIHandleHistory+0x90>
 80103a8:	2b02      	cmp	r3, #2
 80103aa:	dc6f      	bgt.n	801048c <svCLIHandleHistory+0xf4>
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d002      	beq.n	80103b6 <svCLIHandleHistory+0x1e>
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d052      	beq.n	801045a <svCLIHandleHistory+0xc2>
      if (snCLIHistoryPos >= snCLIHistoryCount)
        snCLIHistoryPos = 0;
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
      break;
    default:
      break;
 80103b4:	e06a      	b.n	801048c <svCLIHandleHistory+0xf4>
      if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {  // Full
 80103b6:	4b38      	ldr	r3, [pc, #224]	; (8010498 <svCLIHandleHistory+0x100>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	2b03      	cmp	r3, #3
 80103bc:	d11c      	bne.n	80103f8 <svCLIHandleHistory+0x60>
        for (int i=1;i<snCLIHistoryCount;i++) {
 80103be:	2301      	movs	r3, #1
 80103c0:	60fb      	str	r3, [r7, #12]
 80103c2:	e00f      	b.n	80103e4 <svCLIHandleHistory+0x4c>
          _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	3b01      	subs	r3, #1
 80103c8:	01db      	lsls	r3, r3, #7
 80103ca:	4a34      	ldr	r2, [pc, #208]	; (801049c <svCLIHandleHistory+0x104>)
 80103cc:	1898      	adds	r0, r3, r2
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	01db      	lsls	r3, r3, #7
 80103d2:	4a32      	ldr	r2, [pc, #200]	; (801049c <svCLIHandleHistory+0x104>)
 80103d4:	4413      	add	r3, r2
 80103d6:	2280      	movs	r2, #128	; 0x80
 80103d8:	4619      	mov	r1, r3
 80103da:	f7ff ff8b 	bl	80102f4 <_svMemCpy>
        for (int i=1;i<snCLIHistoryCount;i++) {
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	3301      	adds	r3, #1
 80103e2:	60fb      	str	r3, [r7, #12]
 80103e4:	4b2c      	ldr	r3, [pc, #176]	; (8010498 <svCLIHandleHistory+0x100>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	68fa      	ldr	r2, [r7, #12]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	dbea      	blt.n	80103c4 <svCLIHandleHistory+0x2c>
        snCLIHistoryCount--;
 80103ee:	4b2a      	ldr	r3, [pc, #168]	; (8010498 <svCLIHandleHistory+0x100>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	3b01      	subs	r3, #1
 80103f4:	4a28      	ldr	r2, [pc, #160]	; (8010498 <svCLIHandleHistory+0x100>)
 80103f6:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 80103f8:	4b27      	ldr	r3, [pc, #156]	; (8010498 <svCLIHandleHistory+0x100>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	01db      	lsls	r3, r3, #7
 80103fe:	4a27      	ldr	r2, [pc, #156]	; (801049c <svCLIHandleHistory+0x104>)
 8010400:	4413      	add	r3, r2
 8010402:	2280      	movs	r2, #128	; 0x80
 8010404:	4926      	ldr	r1, [pc, #152]	; (80104a0 <svCLIHandleHistory+0x108>)
 8010406:	4618      	mov	r0, r3
 8010408:	f7ff ff74 	bl	80102f4 <_svMemCpy>
      if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 801040c:	4b22      	ldr	r3, [pc, #136]	; (8010498 <svCLIHandleHistory+0x100>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	2b02      	cmp	r3, #2
 8010412:	dc04      	bgt.n	801041e <svCLIHandleHistory+0x86>
        snCLIHistoryCount++;
 8010414:	4b20      	ldr	r3, [pc, #128]	; (8010498 <svCLIHandleHistory+0x100>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	3301      	adds	r3, #1
 801041a:	4a1f      	ldr	r2, [pc, #124]	; (8010498 <svCLIHandleHistory+0x100>)
 801041c:	6013      	str	r3, [r2, #0]
      snCLIHistoryPos = snCLIHistoryCount;
 801041e:	4b1e      	ldr	r3, [pc, #120]	; (8010498 <svCLIHandleHistory+0x100>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4a20      	ldr	r2, [pc, #128]	; (80104a4 <svCLIHandleHistory+0x10c>)
 8010424:	6013      	str	r3, [r2, #0]
      break;
 8010426:	e032      	b.n	801048e <svCLIHandleHistory+0xf6>
      snCLIHistoryPos--;
 8010428:	4b1e      	ldr	r3, [pc, #120]	; (80104a4 <svCLIHandleHistory+0x10c>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	3b01      	subs	r3, #1
 801042e:	4a1d      	ldr	r2, [pc, #116]	; (80104a4 <svCLIHandleHistory+0x10c>)
 8010430:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos < 0)
 8010432:	4b1c      	ldr	r3, [pc, #112]	; (80104a4 <svCLIHandleHistory+0x10c>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	da04      	bge.n	8010444 <svCLIHandleHistory+0xac>
        snCLIHistoryPos = snCLIHistoryCount - 1;
 801043a:	4b17      	ldr	r3, [pc, #92]	; (8010498 <svCLIHandleHistory+0x100>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	3b01      	subs	r3, #1
 8010440:	4a18      	ldr	r2, [pc, #96]	; (80104a4 <svCLIHandleHistory+0x10c>)
 8010442:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 8010444:	4b17      	ldr	r3, [pc, #92]	; (80104a4 <svCLIHandleHistory+0x10c>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	01db      	lsls	r3, r3, #7
 801044a:	4a14      	ldr	r2, [pc, #80]	; (801049c <svCLIHandleHistory+0x104>)
 801044c:	4413      	add	r3, r2
 801044e:	2280      	movs	r2, #128	; 0x80
 8010450:	4619      	mov	r1, r3
 8010452:	4813      	ldr	r0, [pc, #76]	; (80104a0 <svCLIHandleHistory+0x108>)
 8010454:	f7ff ff4e 	bl	80102f4 <_svMemCpy>
      break;
 8010458:	e019      	b.n	801048e <svCLIHandleHistory+0xf6>
      snCLIHistoryPos++;
 801045a:	4b12      	ldr	r3, [pc, #72]	; (80104a4 <svCLIHandleHistory+0x10c>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	3301      	adds	r3, #1
 8010460:	4a10      	ldr	r2, [pc, #64]	; (80104a4 <svCLIHandleHistory+0x10c>)
 8010462:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos >= snCLIHistoryCount)
 8010464:	4b0f      	ldr	r3, [pc, #60]	; (80104a4 <svCLIHandleHistory+0x10c>)
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	4b0b      	ldr	r3, [pc, #44]	; (8010498 <svCLIHandleHistory+0x100>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	429a      	cmp	r2, r3
 801046e:	db02      	blt.n	8010476 <svCLIHandleHistory+0xde>
        snCLIHistoryPos = 0;
 8010470:	4b0c      	ldr	r3, [pc, #48]	; (80104a4 <svCLIHandleHistory+0x10c>)
 8010472:	2200      	movs	r2, #0
 8010474:	601a      	str	r2, [r3, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 8010476:	4b0b      	ldr	r3, [pc, #44]	; (80104a4 <svCLIHandleHistory+0x10c>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	01db      	lsls	r3, r3, #7
 801047c:	4a07      	ldr	r2, [pc, #28]	; (801049c <svCLIHandleHistory+0x104>)
 801047e:	4413      	add	r3, r2
 8010480:	2280      	movs	r2, #128	; 0x80
 8010482:	4619      	mov	r1, r3
 8010484:	4806      	ldr	r0, [pc, #24]	; (80104a0 <svCLIHandleHistory+0x108>)
 8010486:	f7ff ff35 	bl	80102f4 <_svMemCpy>
      break;
 801048a:	e000      	b.n	801048e <svCLIHandleHistory+0xf6>
      break;
 801048c:	bf00      	nop
  }
}
 801048e:	bf00      	nop
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	2000418c 	.word	0x2000418c
 801049c:	2000400c 	.word	0x2000400c
 80104a0:	20003f8c 	.word	0x20003f8c
 80104a4:	20004190 	.word	0x20004190

080104a8 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  SVCLI_t* pCLIEntry;
  char* pCurrent = *line;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 80104b6:	e002      	b.n	80104be <svCLI_Search+0x16>
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	3301      	adds	r3, #1
 80104bc:	613b      	str	r3, [r7, #16]
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d003      	beq.n	80104ce <svCLI_Search+0x26>
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	2b20      	cmp	r3, #32
 80104cc:	d0f4      	beq.n	80104b8 <svCLI_Search+0x10>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 80104ce:	4b22      	ldr	r3, [pc, #136]	; (8010558 <svCLI_Search+0xb0>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	617b      	str	r3, [r7, #20]
 80104d4:	e035      	b.n	8010542 <svCLI_Search+0x9a>
    int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4618      	mov	r0, r3
 80104dc:	f7ff fe33 	bl	8010146 <_strlenOffspace>
 80104e0:	60f8      	str	r0, [r7, #12]
    int nArgLength = _strlenOffspace(pCurrent);
 80104e2:	6938      	ldr	r0, [r7, #16]
 80104e4:	f7ff fe2f 	bl	8010146 <_strlenOffspace>
 80104e8:	60b8      	str	r0, [r7, #8]
    pCurrent[nArgLength] = 0; // NULL termination just after command for comparing
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	693a      	ldr	r2, [r7, #16]
 80104ee:	4413      	add	r3, r2
 80104f0:	2200      	movs	r2, #0
 80104f2:	701a      	strb	r2, [r3, #0]
    if (nCmdLength >= nArgLength) {
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	db1f      	blt.n	801053c <svCLI_Search+0x94>
      if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) { // Partial Command OK !!
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	68fa      	ldr	r2, [r7, #12]
 8010502:	4619      	mov	r1, r3
 8010504:	6938      	ldr	r0, [r7, #16]
 8010506:	f7ff febf 	bl	8010288 <_strNoCaseCmp>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d115      	bne.n	801053c <svCLI_Search+0x94>
        pCurrent += (nArgLength + 1);
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	3301      	adds	r3, #1
 8010514:	693a      	ldr	r2, [r7, #16]
 8010516:	4413      	add	r3, r2
 8010518:	613b      	str	r3, [r7, #16]
        // strip off trailing spaces
        while (*pCurrent && *pCurrent == ' ') pCurrent++;
 801051a:	e002      	b.n	8010522 <svCLI_Search+0x7a>
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	3301      	adds	r3, #1
 8010520:	613b      	str	r3, [r7, #16]
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d003      	beq.n	8010532 <svCLI_Search+0x8a>
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	2b20      	cmp	r3, #32
 8010530:	d0f4      	beq.n	801051c <svCLI_Search+0x74>
        *line = pCurrent;   // remove command & return
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	693a      	ldr	r2, [r7, #16]
 8010536:	601a      	str	r2, [r3, #0]

        return pCLIEntry;
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	e008      	b.n	801054e <svCLI_Search+0xa6>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	330c      	adds	r3, #12
 8010540:	617b      	str	r3, [r7, #20]
 8010542:	4b06      	ldr	r3, [pc, #24]	; (801055c <svCLI_Search+0xb4>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	697a      	ldr	r2, [r7, #20]
 8010548:	429a      	cmp	r2, r3
 801054a:	d3c4      	bcc.n	80104d6 <svCLI_Search+0x2e>
      }
    }
  }
  return NULL;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3718      	adds	r7, #24
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	20004198 	.word	0x20004198
 801055c:	2000419c 	.word	0x2000419c

08010560 <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b08a      	sub	sp, #40	; 0x28
 8010564:	af00      	add	r7, sp, #0
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
 801056c:	603b      	str	r3, [r7, #0]
  int first = 1;
 801056e:	2301      	movs	r3, #1
 8010570:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 8010572:	230a      	movs	r3, #10
 8010574:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 8010576:	2300      	movs	r3, #0
 8010578:	61fb      	str	r3, [r7, #28]
  int digit;
    // strip off leading spaces
    while (*s == ' ') s++;
 801057a:	e002      	b.n	8010582 <svCLI_ParseNumber+0x22>
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3301      	adds	r3, #1
 8010580:	60fb      	str	r3, [r7, #12]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	2b20      	cmp	r3, #32
 8010588:	d0f8      	beq.n	801057c <svCLI_ParseNumber+0x1c>
    if (*s == 0)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d14d      	bne.n	801062e <svCLI_ParseNumber+0xce>
      return 0;
 8010592:	2300      	movs	r3, #0
 8010594:	e05b      	b.n	801064e <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 8010596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010598:	2b00      	cmp	r3, #0
 801059a:	d011      	beq.n	80105c0 <svCLI_ParseNumber+0x60>
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	2b30      	cmp	r3, #48	; 0x30
 80105a2:	d10d      	bne.n	80105c0 <svCLI_ParseNumber+0x60>
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	3301      	adds	r3, #1
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff fdf8 	bl	80101a0 <_toLower>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b78      	cmp	r3, #120	; 0x78
 80105b4:	d104      	bne.n	80105c0 <svCLI_ParseNumber+0x60>
        radix = 16;
 80105b6:	2310      	movs	r3, #16
 80105b8:	623b      	str	r3, [r7, #32]
        s += 2;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	3302      	adds	r3, #2
 80105be:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 80105c0:	2300      	movs	r3, #0
 80105c2:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	1c5a      	adds	r2, r3, #1
 80105c8:	60fa      	str	r2, [r7, #12]
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 80105ce:	7dfb      	ldrb	r3, [r7, #23]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7ff fe0e 	bl	80101f2 <_isHex>
 80105d6:	4603      	mov	r3, r0
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d010      	beq.n	80105fe <svCLI_ParseNumber+0x9e>
 80105dc:	7dfb      	ldrb	r3, [r7, #23]
 80105de:	4618      	mov	r0, r3
 80105e0:	f7ff fe27 	bl	8010232 <_fromHex>
 80105e4:	6138      	str	r0, [r7, #16]
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	6a3b      	ldr	r3, [r7, #32]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	da07      	bge.n	80105fe <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 80105ee:	6a3b      	ldr	r3, [r7, #32]
 80105f0:	69fa      	ldr	r2, [r7, #28]
 80105f2:	fb03 f202 	mul.w	r2, r3, r2
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	4413      	add	r3, r2
 80105fa:	61fb      	str	r3, [r7, #28]
 80105fc:	e017      	b.n	801062e <svCLI_ParseNumber+0xce>
      } 
      else {
        if (delimiter != (char *)0) {
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d012      	beq.n	801062a <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 8010608:	e002      	b.n	8010610 <svCLI_ParseNumber+0xb0>
 801060a:	69bb      	ldr	r3, [r7, #24]
 801060c:	3301      	adds	r3, #1
 801060e:	61bb      	str	r3, [r7, #24]
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d004      	beq.n	8010622 <svCLI_ParseNumber+0xc2>
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	7dfa      	ldrb	r2, [r7, #23]
 801061e:	429a      	cmp	r2, r3
 8010620:	d1f3      	bne.n	801060a <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d106      	bne.n	8010638 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 801062a:	2300      	movs	r3, #0
 801062c:	e00f      	b.n	801064e <svCLI_ParseNumber+0xee>
    while (*s) {
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d1af      	bne.n	8010596 <svCLI_ParseNumber+0x36>
 8010636:	e000      	b.n	801063a <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 8010638:	bf00      	nop
      }
    }
    *val = result;
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	69fa      	ldr	r2, [r7, #28]
 801063e:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d002      	beq.n	801064c <svCLI_ParseNumber+0xec>
      *res = s;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	68fa      	ldr	r2, [r7, #12]
 801064a:	601a      	str	r2, [r3, #0]
    }
    return 1;
 801064c:	2301      	movs	r3, #1
}
 801064e:	4618      	mov	r0, r3
 8010650:	3728      	adds	r7, #40	; 0x28
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
	...

08010658 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 8010658:	b590      	push	{r4, r7, lr}
 801065a:	b089      	sub	sp, #36	; 0x24
 801065c:	af00      	add	r7, sp, #0
  if (s_bPwdOK == FALSE) {  // Input Password
 801065e:	4b3a      	ldr	r3, [pc, #232]	; (8010748 <svCLI_ParsenExecute+0xf0>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d120      	bne.n	80106a8 <svCLI_ParsenExecute+0x50>
    if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 8010666:	4939      	ldr	r1, [pc, #228]	; (801074c <svCLI_ParsenExecute+0xf4>)
 8010668:	4839      	ldr	r0, [pc, #228]	; (8010750 <svCLI_ParsenExecute+0xf8>)
 801066a:	f7ef fe0f 	bl	800028c <strcmp>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d115      	bne.n	80106a0 <svCLI_ParsenExecute+0x48>
      s_bPwdOK = TRUE;
 8010674:	4b34      	ldr	r3, [pc, #208]	; (8010748 <svCLI_ParsenExecute+0xf0>)
 8010676:	2201      	movs	r2, #1
 8010678:	601a      	str	r2, [r3, #0]
      svCLI_Printf("Welcome !!\r\n");
 801067a:	4836      	ldr	r0, [pc, #216]	; (8010754 <svCLI_ParsenExecute+0xfc>)
 801067c:	f7ff fcba 	bl	800fff4 <svCLI_Printf>
      strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 8010680:	4b35      	ldr	r3, [pc, #212]	; (8010758 <svCLI_ParsenExecute+0x100>)
 8010682:	4a36      	ldr	r2, [pc, #216]	; (801075c <svCLI_ParsenExecute+0x104>)
 8010684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010688:	6018      	str	r0, [r3, #0]
 801068a:	3304      	adds	r3, #4
 801068c:	8019      	strh	r1, [r3, #0]
 801068e:	3302      	adds	r3, #2
 8010690:	0c0a      	lsrs	r2, r1, #16
 8010692:	701a      	strb	r2, [r3, #0]
      snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 8010694:	4b32      	ldr	r3, [pc, #200]	; (8010760 <svCLI_ParsenExecute+0x108>)
 8010696:	2206      	movs	r2, #6
 8010698:	601a      	str	r2, [r3, #0]
      svCLI_ShowHelp();
 801069a:	f7ff fcd7 	bl	801004c <svCLI_ShowHelp>
    }
    else {
      svCLI_Printf("Invalid Password !!\r\n");
    }
    return;
 801069e:	e04f      	b.n	8010740 <svCLI_ParsenExecute+0xe8>
      svCLI_Printf("Invalid Password !!\r\n");
 80106a0:	4830      	ldr	r0, [pc, #192]	; (8010764 <svCLI_ParsenExecute+0x10c>)
 80106a2:	f7ff fca7 	bl	800fff4 <svCLI_Printf>
    return;
 80106a6:	e04b      	b.n	8010740 <svCLI_ParsenExecute+0xe8>
  }
  SVCLI_t* pCLIEntry;
  if (sCLITableBegin == sCLITablEnd) {
 80106a8:	4b2f      	ldr	r3, [pc, #188]	; (8010768 <svCLI_ParsenExecute+0x110>)
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	4b2f      	ldr	r3, [pc, #188]	; (801076c <svCLI_ParsenExecute+0x114>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d103      	bne.n	80106bc <svCLI_ParsenExecute+0x64>
    svCLI_Printf("No CLI Entries !!!\r\n");
 80106b4:	482e      	ldr	r0, [pc, #184]	; (8010770 <svCLI_ParsenExecute+0x118>)
 80106b6:	f7ff fc9d 	bl	800fff4 <svCLI_Printf>
    return;
 80106ba:	e041      	b.n	8010740 <svCLI_ParsenExecute+0xe8>
  }
  char* pLine = szCLIString;
 80106bc:	4b24      	ldr	r3, [pc, #144]	; (8010750 <svCLI_ParsenExecute+0xf8>)
 80106be:	613b      	str	r3, [r7, #16]
  pCLIEntry = svCLI_Search(&pLine);
 80106c0:	f107 0310 	add.w	r3, r7, #16
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7ff feef 	bl	80104a8 <svCLI_Search>
 80106ca:	61b8      	str	r0, [r7, #24]
  if (pCLIEntry) {
 80106cc:	69bb      	ldr	r3, [r7, #24]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d033      	beq.n	801073a <svCLI_ParsenExecute+0xe2>
    // Parse more for CLI function
    unsigned int nFirst, nSecond, nCount;
    nCount = 0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	61fb      	str	r3, [r7, #28]
    nFirst = 0;
 80106d6:	2300      	movs	r3, #0
 80106d8:	60fb      	str	r3, [r7, #12]
    nSecond = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	60bb      	str	r3, [r7, #8]
    char* pParseLine = pLine;
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	617b      	str	r3, [r7, #20]
    char delim[3] = ", ";
 80106e2:	4a24      	ldr	r2, [pc, #144]	; (8010774 <svCLI_ParsenExecute+0x11c>)
 80106e4:	1d3b      	adds	r3, r7, #4
 80106e6:	6812      	ldr	r2, [r2, #0]
 80106e8:	4611      	mov	r1, r2
 80106ea:	8019      	strh	r1, [r3, #0]
 80106ec:	3302      	adds	r3, #2
 80106ee:	0c12      	lsrs	r2, r2, #16
 80106f0:	701a      	strb	r2, [r3, #0]
    if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 80106f2:	6938      	ldr	r0, [r7, #16]
 80106f4:	1d3b      	adds	r3, r7, #4
 80106f6:	f107 0210 	add.w	r2, r7, #16
 80106fa:	f107 010c 	add.w	r1, r7, #12
 80106fe:	f7ff ff2f 	bl	8010560 <svCLI_ParseNumber>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d010      	beq.n	801072a <svCLI_ParsenExecute+0xd2>
      nCount++;
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	3301      	adds	r3, #1
 801070c:	61fb      	str	r3, [r7, #28]
      if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 801070e:	6938      	ldr	r0, [r7, #16]
 8010710:	1d3b      	adds	r3, r7, #4
 8010712:	f107 0210 	add.w	r2, r7, #16
 8010716:	f107 0108 	add.w	r1, r7, #8
 801071a:	f7ff ff21 	bl	8010560 <svCLI_ParseNumber>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d002      	beq.n	801072a <svCLI_ParsenExecute+0xd2>
        nCount++;
 8010724:	69fb      	ldr	r3, [r7, #28]
 8010726:	3301      	adds	r3, #1
 8010728:	61fb      	str	r3, [r7, #28]
      }
    }
    pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	689c      	ldr	r4, [r3, #8]
 801072e:	68fa      	ldr	r2, [r7, #12]
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	69f9      	ldr	r1, [r7, #28]
 8010734:	6978      	ldr	r0, [r7, #20]
 8010736:	47a0      	blx	r4
 8010738:	e002      	b.n	8010740 <svCLI_ParsenExecute+0xe8>
  }
  else {
    svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 801073a:	480f      	ldr	r0, [pc, #60]	; (8010778 <svCLI_ParsenExecute+0x120>)
 801073c:	f7ff fc5a 	bl	800fff4 <svCLI_Printf>
  }
}
 8010740:	3724      	adds	r7, #36	; 0x24
 8010742:	46bd      	mov	sp, r7
 8010744:	bd90      	pop	{r4, r7, pc}
 8010746:	bf00      	nop
 8010748:	20000064 	.word	0x20000064
 801074c:	0801d37c 	.word	0x0801d37c
 8010750:	20003f8c 	.word	0x20003f8c
 8010754:	0801d388 	.word	0x0801d388
 8010758:	20000068 	.word	0x20000068
 801075c:	0801d324 	.word	0x0801d324
 8010760:	20000074 	.word	0x20000074
 8010764:	0801d398 	.word	0x0801d398
 8010768:	20004198 	.word	0x20004198
 801076c:	2000419c 	.word	0x2000419c
 8010770:	0801d3b0 	.word	0x0801d3b0
 8010774:	0801d3f0 	.word	0x0801d3f0
 8010778:	0801d3c8 	.word	0x0801d3c8

0801077c <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	603b      	str	r3, [r7, #0]
 8010788:	4613      	mov	r3, r2
 801078a:	71fb      	strb	r3, [r7, #7]
  if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d005      	beq.n	801079e <svCLI_SetBypassFtn+0x22>
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d002      	beq.n	801079e <svCLI_SetBypassFtn+0x22>
 8010798:	79fb      	ldrb	r3, [r7, #7]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d136      	bne.n	801080c <svCLI_SetBypassFtn+0x90>
    if (svBypass == NULL) {
 801079e:	4b28      	ldr	r3, [pc, #160]	; (8010840 <svCLI_SetBypassFtn+0xc4>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d048      	beq.n	8010838 <svCLI_SetBypassFtn+0xbc>
      // Nothing to do..
      return;
    }
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 80107a6:	4b27      	ldr	r3, [pc, #156]	; (8010844 <svCLI_SetBypassFtn+0xc8>)
 80107a8:	4a27      	ldr	r2, [pc, #156]	; (8010848 <svCLI_SetBypassFtn+0xcc>)
 80107aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107ae:	6018      	str	r0, [r3, #0]
 80107b0:	3304      	adds	r3, #4
 80107b2:	8019      	strh	r1, [r3, #0]
 80107b4:	3302      	adds	r3, #2
 80107b6:	0c0a      	lsrs	r2, r1, #16
 80107b8:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 80107ba:	4b24      	ldr	r3, [pc, #144]	; (801084c <svCLI_SetBypassFtn+0xd0>)
 80107bc:	2206      	movs	r2, #6
 80107be:	601a      	str	r2, [r3, #0]
    svBypass = NULL;
 80107c0:	4b1f      	ldr	r3, [pc, #124]	; (8010840 <svCLI_SetBypassFtn+0xc4>)
 80107c2:	2200      	movs	r2, #0
 80107c4:	601a      	str	r2, [r3, #0]

    svExit = NULL;
 80107c6:	4b22      	ldr	r3, [pc, #136]	; (8010850 <svCLI_SetBypassFtn+0xd4>)
 80107c8:	2200      	movs	r2, #0
 80107ca:	701a      	strb	r2, [r3, #0]
    sbEnter = FALSE;
 80107cc:	4b21      	ldr	r3, [pc, #132]	; (8010854 <svCLI_SetBypassFtn+0xd8>)
 80107ce:	2200      	movs	r2, #0
 80107d0:	601a      	str	r2, [r3, #0]

    scntCLIString = 0;  // Clean Up Char
 80107d2:	4b21      	ldr	r3, [pc, #132]	; (8010858 <svCLI_SetBypassFtn+0xdc>)
 80107d4:	2200      	movs	r2, #0
 80107d6:	601a      	str	r2, [r3, #0]
    // clean up line string
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 80107d8:	2300      	movs	r3, #0
 80107da:	617b      	str	r3, [r7, #20]
 80107dc:	e007      	b.n	80107ee <svCLI_SetBypassFtn+0x72>
      szCLIString[i] = '\0';
 80107de:	4a1f      	ldr	r2, [pc, #124]	; (801085c <svCLI_SetBypassFtn+0xe0>)
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	4413      	add	r3, r2
 80107e4:	2200      	movs	r2, #0
 80107e6:	701a      	strb	r2, [r3, #0]
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	3301      	adds	r3, #1
 80107ec:	617b      	str	r3, [r7, #20]
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	2b7f      	cmp	r3, #127	; 0x7f
 80107f2:	ddf4      	ble.n	80107de <svCLI_SetBypassFtn+0x62>
    }
    svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 80107f4:	4913      	ldr	r1, [pc, #76]	; (8010844 <svCLI_SetBypassFtn+0xc8>)
 80107f6:	481a      	ldr	r0, [pc, #104]	; (8010860 <svCLI_SetBypassFtn+0xe4>)
 80107f8:	f7ff fbfc 	bl	800fff4 <svCLI_Printf>

    if (svCommit) {
 80107fc:	4b19      	ldr	r3, [pc, #100]	; (8010864 <svCLI_SetBypassFtn+0xe8>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d01a      	beq.n	801083a <svCLI_SetBypassFtn+0xbe>
      svCommit();
 8010804:	4b17      	ldr	r3, [pc, #92]	; (8010864 <svCLI_SetBypassFtn+0xe8>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4798      	blx	r3
    if (svCommit) {
 801080a:	e016      	b.n	801083a <svCLI_SetBypassFtn+0xbe>
    }
  }
  else {
    strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 801080c:	2209      	movs	r2, #9
 801080e:	68b9      	ldr	r1, [r7, #8]
 8010810:	480c      	ldr	r0, [pc, #48]	; (8010844 <svCLI_SetBypassFtn+0xc8>)
 8010812:	f00b fbff 	bl	801c014 <strncpy>
    snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 8010816:	480b      	ldr	r0, [pc, #44]	; (8010844 <svCLI_SetBypassFtn+0xc8>)
 8010818:	f7ef fd42 	bl	80002a0 <strlen>
 801081c:	4603      	mov	r3, r0
 801081e:	461a      	mov	r2, r3
 8010820:	4b0a      	ldr	r3, [pc, #40]	; (801084c <svCLI_SetBypassFtn+0xd0>)
 8010822:	601a      	str	r2, [r3, #0]
    svBypass = pfnBypass;
 8010824:	4a06      	ldr	r2, [pc, #24]	; (8010840 <svCLI_SetBypassFtn+0xc4>)
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	6013      	str	r3, [r2, #0]
    svExit = szExit;
 801082a:	4a09      	ldr	r2, [pc, #36]	; (8010850 <svCLI_SetBypassFtn+0xd4>)
 801082c:	79fb      	ldrb	r3, [r7, #7]
 801082e:	7013      	strb	r3, [r2, #0]
    sbEnter = bEnter;
 8010830:	4a08      	ldr	r2, [pc, #32]	; (8010854 <svCLI_SetBypassFtn+0xd8>)
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	6013      	str	r3, [r2, #0]
 8010836:	e000      	b.n	801083a <svCLI_SetBypassFtn+0xbe>
      return;
 8010838:	bf00      	nop
  }
}
 801083a:	3718      	adds	r7, #24
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	200041ac 	.word	0x200041ac
 8010844:	20000068 	.word	0x20000068
 8010848:	0801d324 	.word	0x0801d324
 801084c:	20000074 	.word	0x20000074
 8010850:	200041b0 	.word	0x200041b0
 8010854:	200041b4 	.word	0x200041b4
 8010858:	20004194 	.word	0x20004194
 801085c:	20003f8c 	.word	0x20003f8c
 8010860:	0801d3f4 	.word	0x0801d3f4
 8010864:	200041a8 	.word	0x200041a8

08010868 <svCLI_Handler>:

void svCLI_Handler(void)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
  if (sbFirst) {
    svCLI_Printf("\r\n%s", szCLI_PROMPT);
    sbFirst = 0;
  }
#endif
  if (svGetChar) {
 801086e:	4b92      	ldr	r3, [pc, #584]	; (8010ab8 <svCLI_Handler+0x250>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	f000 8114 	beq.w	8010aa0 <svCLI_Handler+0x238>
    char bSkipPrompt = 0;
 8010878:	2300      	movs	r3, #0
 801087a:	73fb      	strb	r3, [r7, #15]
    char szChar = svGetChar();
 801087c:	4b8e      	ldr	r3, [pc, #568]	; (8010ab8 <svCLI_Handler+0x250>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4798      	blx	r3
 8010882:	4603      	mov	r3, r0
 8010884:	71fb      	strb	r3, [r7, #7]
    if ((szChar != 0) && (szChar != '\n')) {
 8010886:	79fb      	ldrb	r3, [r7, #7]
 8010888:	2b00      	cmp	r3, #0
 801088a:	f000 8109 	beq.w	8010aa0 <svCLI_Handler+0x238>
 801088e:	79fb      	ldrb	r3, [r7, #7]
 8010890:	2b0a      	cmp	r3, #10
 8010892:	f000 8105 	beq.w	8010aa0 <svCLI_Handler+0x238>
      if (szChar == '\r') {
 8010896:	79fb      	ldrb	r3, [r7, #7]
 8010898:	2b0d      	cmp	r3, #13
 801089a:	d154      	bne.n	8010946 <svCLI_Handler+0xde>
        sbInEsc = 0;
 801089c:	4b87      	ldr	r3, [pc, #540]	; (8010abc <svCLI_Handler+0x254>)
 801089e:	2200      	movs	r2, #0
 80108a0:	701a      	strb	r2, [r3, #0]
        svCLI_Printf("\r\n");
 80108a2:	4887      	ldr	r0, [pc, #540]	; (8010ac0 <svCLI_Handler+0x258>)
 80108a4:	f7ff fba6 	bl	800fff4 <svCLI_Printf>
        if (scntCLIString > 0) {
 80108a8:	4b86      	ldr	r3, [pc, #536]	; (8010ac4 <svCLI_Handler+0x25c>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d031      	beq.n	8010914 <svCLI_Handler+0xac>
          // Parse and Execute
          szCLIString[scntCLIString] = '\0';  // NULL Termination
 80108b0:	4b84      	ldr	r3, [pc, #528]	; (8010ac4 <svCLI_Handler+0x25c>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4a84      	ldr	r2, [pc, #528]	; (8010ac8 <svCLI_Handler+0x260>)
 80108b6:	2100      	movs	r1, #0
 80108b8:	54d1      	strb	r1, [r2, r3]
          // Save to history Buffer
          svCLIHandleHistory(CLI_HISTORY_ADD);
 80108ba:	2000      	movs	r0, #0
 80108bc:	f7ff fd6c 	bl	8010398 <svCLIHandleHistory>
          // Call Parser
          if (svBypass) { // hellosmk 210225 added
 80108c0:	4b82      	ldr	r3, [pc, #520]	; (8010acc <svCLI_Handler+0x264>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d011      	beq.n	80108ec <svCLI_Handler+0x84>
            bSkipPrompt = 1;
 80108c8:	2301      	movs	r3, #1
 80108ca:	73fb      	strb	r3, [r7, #15]
            szCLIString[scntCLIString] = '\r';
 80108cc:	4b7d      	ldr	r3, [pc, #500]	; (8010ac4 <svCLI_Handler+0x25c>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a7d      	ldr	r2, [pc, #500]	; (8010ac8 <svCLI_Handler+0x260>)
 80108d2:	210d      	movs	r1, #13
 80108d4:	54d1      	strb	r1, [r2, r3]
            szCLIString[scntCLIString+1] = '\0';
 80108d6:	4b7b      	ldr	r3, [pc, #492]	; (8010ac4 <svCLI_Handler+0x25c>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	3301      	adds	r3, #1
 80108dc:	4a7a      	ldr	r2, [pc, #488]	; (8010ac8 <svCLI_Handler+0x260>)
 80108de:	2100      	movs	r1, #0
 80108e0:	54d1      	strb	r1, [r2, r3]
            svBypass(szCLIString);
 80108e2:	4b7a      	ldr	r3, [pc, #488]	; (8010acc <svCLI_Handler+0x264>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4878      	ldr	r0, [pc, #480]	; (8010ac8 <svCLI_Handler+0x260>)
 80108e8:	4798      	blx	r3
 80108ea:	e001      	b.n	80108f0 <svCLI_Handler+0x88>
          }
          else {
            svCLI_ParsenExecute();
 80108ec:	f7ff feb4 	bl	8010658 <svCLI_ParsenExecute>
          }
          scntCLIString = 0;  // Clean Up Char
 80108f0:	4b74      	ldr	r3, [pc, #464]	; (8010ac4 <svCLI_Handler+0x25c>)
 80108f2:	2200      	movs	r2, #0
 80108f4:	601a      	str	r2, [r3, #0]
          // clean up line string
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 80108f6:	2300      	movs	r3, #0
 80108f8:	60bb      	str	r3, [r7, #8]
 80108fa:	e007      	b.n	801090c <svCLI_Handler+0xa4>
            szCLIString[i] = '\0';
 80108fc:	4a72      	ldr	r2, [pc, #456]	; (8010ac8 <svCLI_Handler+0x260>)
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	4413      	add	r3, r2
 8010902:	2200      	movs	r2, #0
 8010904:	701a      	strb	r2, [r3, #0]
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	3301      	adds	r3, #1
 801090a:	60bb      	str	r3, [r7, #8]
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	2b7f      	cmp	r3, #127	; 0x7f
 8010910:	ddf4      	ble.n	80108fc <svCLI_Handler+0x94>
 8010912:	e010      	b.n	8010936 <svCLI_Handler+0xce>
          }
        }
        else if (sbEnter && svBypass) {
 8010914:	4b6e      	ldr	r3, [pc, #440]	; (8010ad0 <svCLI_Handler+0x268>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00c      	beq.n	8010936 <svCLI_Handler+0xce>
 801091c:	4b6b      	ldr	r3, [pc, #428]	; (8010acc <svCLI_Handler+0x264>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d008      	beq.n	8010936 <svCLI_Handler+0xce>
          const char cszRet[2] = {'\n',0};
 8010924:	230a      	movs	r3, #10
 8010926:	80bb      	strh	r3, [r7, #4]
          svBypass((char*)cszRet);
 8010928:	4b68      	ldr	r3, [pc, #416]	; (8010acc <svCLI_Handler+0x264>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	1d3a      	adds	r2, r7, #4
 801092e:	4610      	mov	r0, r2
 8010930:	4798      	blx	r3
          bSkipPrompt = 1;
 8010932:	2301      	movs	r3, #1
 8010934:	73fb      	strb	r3, [r7, #15]
        }

        if (bSkipPrompt == 0) {
 8010936:	7bfb      	ldrb	r3, [r7, #15]
 8010938:	2b00      	cmp	r3, #0
 801093a:	f040 80b1 	bne.w	8010aa0 <svCLI_Handler+0x238>
          svCLI_Printf(szCLI_PROMPT);
 801093e:	4865      	ldr	r0, [pc, #404]	; (8010ad4 <svCLI_Handler+0x26c>)
 8010940:	f7ff fb58 	bl	800fff4 <svCLI_Printf>
 8010944:	e0ac      	b.n	8010aa0 <svCLI_Handler+0x238>
        }
      }
      else if (svBypass && (szChar == svExit)) {
 8010946:	4b61      	ldr	r3, [pc, #388]	; (8010acc <svCLI_Handler+0x264>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d019      	beq.n	8010982 <svCLI_Handler+0x11a>
 801094e:	4b62      	ldr	r3, [pc, #392]	; (8010ad8 <svCLI_Handler+0x270>)
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	79fa      	ldrb	r2, [r7, #7]
 8010954:	429a      	cmp	r2, r3
 8010956:	d114      	bne.n	8010982 <svCLI_Handler+0x11a>
        // Exit Bypass mode
        if (0x11 == svExit) {
 8010958:	4b5f      	ldr	r3, [pc, #380]	; (8010ad8 <svCLI_Handler+0x270>)
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	2b11      	cmp	r3, #17
 801095e:	d102      	bne.n	8010966 <svCLI_Handler+0xfe>
          svCLI_Printf("^Q");
 8010960:	485e      	ldr	r0, [pc, #376]	; (8010adc <svCLI_Handler+0x274>)
 8010962:	f7ff fb47 	bl	800fff4 <svCLI_Printf>
        }
        svBypass(NULL); // Notify Exit !!
 8010966:	4b59      	ldr	r3, [pc, #356]	; (8010acc <svCLI_Handler+0x264>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	2000      	movs	r0, #0
 801096c:	4798      	blx	r3
        svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 801096e:	2300      	movs	r3, #0
 8010970:	2200      	movs	r2, #0
 8010972:	2100      	movs	r1, #0
 8010974:	2000      	movs	r0, #0
 8010976:	f7ff ff01 	bl	801077c <svCLI_SetBypassFtn>
        sbInEsc = 0;
 801097a:	4b50      	ldr	r3, [pc, #320]	; (8010abc <svCLI_Handler+0x254>)
 801097c:	2200      	movs	r2, #0
 801097e:	701a      	strb	r2, [r3, #0]
 8010980:	e08e      	b.n	8010aa0 <svCLI_Handler+0x238>
      }
      else if (svBypass && (szChar == 0X1A)) {    // Ctrl+Z
 8010982:	4b52      	ldr	r3, [pc, #328]	; (8010acc <svCLI_Handler+0x264>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d014      	beq.n	80109b4 <svCLI_Handler+0x14c>
 801098a:	79fb      	ldrb	r3, [r7, #7]
 801098c:	2b1a      	cmp	r3, #26
 801098e:	d111      	bne.n	80109b4 <svCLI_Handler+0x14c>
        bSkipPrompt = 1;
 8010990:	2301      	movs	r3, #1
 8010992:	73fb      	strb	r3, [r7, #15]
        szCLIString[scntCLIString] = 0X1A;  //Ctrl+z
 8010994:	4b4b      	ldr	r3, [pc, #300]	; (8010ac4 <svCLI_Handler+0x25c>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4a4b      	ldr	r2, [pc, #300]	; (8010ac8 <svCLI_Handler+0x260>)
 801099a:	211a      	movs	r1, #26
 801099c:	54d1      	strb	r1, [r2, r3]
        szCLIString[scntCLIString+1] = '\0';  // NULL Termination
 801099e:	4b49      	ldr	r3, [pc, #292]	; (8010ac4 <svCLI_Handler+0x25c>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	3301      	adds	r3, #1
 80109a4:	4a48      	ldr	r2, [pc, #288]	; (8010ac8 <svCLI_Handler+0x260>)
 80109a6:	2100      	movs	r1, #0
 80109a8:	54d1      	strb	r1, [r2, r3]
        svBypass(szCLIString);
 80109aa:	4b48      	ldr	r3, [pc, #288]	; (8010acc <svCLI_Handler+0x264>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4846      	ldr	r0, [pc, #280]	; (8010ac8 <svCLI_Handler+0x260>)
 80109b0:	4798      	blx	r3
 80109b2:	e075      	b.n	8010aa0 <svCLI_Handler+0x238>
      }
      else {
        if (szChar == '\b') { // Back space
 80109b4:	79fb      	ldrb	r3, [r7, #7]
 80109b6:	2b08      	cmp	r3, #8
 80109b8:	d118      	bne.n	80109ec <svCLI_Handler+0x184>
          sbInEsc = 0;
 80109ba:	4b40      	ldr	r3, [pc, #256]	; (8010abc <svCLI_Handler+0x254>)
 80109bc:	2200      	movs	r2, #0
 80109be:	701a      	strb	r2, [r3, #0]
          if (scntCLIString > 0) {
 80109c0:	4b40      	ldr	r3, [pc, #256]	; (8010ac4 <svCLI_Handler+0x25c>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d06b      	beq.n	8010aa0 <svCLI_Handler+0x238>
            _svClearLine();
 80109c8:	f7ff fcb0 	bl	801032c <_svClearLine>
            scntCLIString--;
 80109cc:	4b3d      	ldr	r3, [pc, #244]	; (8010ac4 <svCLI_Handler+0x25c>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	3b01      	subs	r3, #1
 80109d2:	4a3c      	ldr	r2, [pc, #240]	; (8010ac4 <svCLI_Handler+0x25c>)
 80109d4:	6013      	str	r3, [r2, #0]
            szCLIString[scntCLIString] = '\0';  // NULL Termination
 80109d6:	4b3b      	ldr	r3, [pc, #236]	; (8010ac4 <svCLI_Handler+0x25c>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	4a3b      	ldr	r2, [pc, #236]	; (8010ac8 <svCLI_Handler+0x260>)
 80109dc:	2100      	movs	r1, #0
 80109de:	54d1      	strb	r1, [r2, r3]
            svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 80109e0:	4a39      	ldr	r2, [pc, #228]	; (8010ac8 <svCLI_Handler+0x260>)
 80109e2:	493c      	ldr	r1, [pc, #240]	; (8010ad4 <svCLI_Handler+0x26c>)
 80109e4:	483e      	ldr	r0, [pc, #248]	; (8010ae0 <svCLI_Handler+0x278>)
 80109e6:	f7ff fb05 	bl	800fff4 <svCLI_Printf>
 80109ea:	e059      	b.n	8010aa0 <svCLI_Handler+0x238>
          }
        }
        else if (szChar == '[') { // ESC sequence started
 80109ec:	79fb      	ldrb	r3, [r7, #7]
 80109ee:	2b5b      	cmp	r3, #91	; 0x5b
 80109f0:	d103      	bne.n	80109fa <svCLI_Handler+0x192>
          sbInEsc = 1;
 80109f2:	4b32      	ldr	r3, [pc, #200]	; (8010abc <svCLI_Handler+0x254>)
 80109f4:	2201      	movs	r2, #1
 80109f6:	701a      	strb	r2, [r3, #0]
 80109f8:	e052      	b.n	8010aa0 <svCLI_Handler+0x238>
        }
        else if (_isPrintable(szChar)) {
 80109fa:	79fb      	ldrb	r3, [r7, #7]
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7ff fbe4 	bl	80101ca <_isPrintable>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d04b      	beq.n	8010aa0 <svCLI_Handler+0x238>
          if (sbInEsc) {
 8010a08:	4b2c      	ldr	r3, [pc, #176]	; (8010abc <svCLI_Handler+0x254>)
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d036      	beq.n	8010a7e <svCLI_Handler+0x216>
            sbInEsc = 0;
 8010a10:	4b2a      	ldr	r3, [pc, #168]	; (8010abc <svCLI_Handler+0x254>)
 8010a12:	2200      	movs	r2, #0
 8010a14:	701a      	strb	r2, [r3, #0]
            if (snCLIHistoryCount > 0) {
 8010a16:	4b33      	ldr	r3, [pc, #204]	; (8010ae4 <svCLI_Handler+0x27c>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	dd27      	ble.n	8010a6e <svCLI_Handler+0x206>
              switch (szChar) {
 8010a1e:	79fb      	ldrb	r3, [r7, #7]
 8010a20:	2b41      	cmp	r3, #65	; 0x41
 8010a22:	d002      	beq.n	8010a2a <svCLI_Handler+0x1c2>
 8010a24:	2b42      	cmp	r3, #66	; 0x42
 8010a26:	d011      	beq.n	8010a4c <svCLI_Handler+0x1e4>
                  // echo back
                  scntCLIString = svCLI_Printf("%s", szCLIString);
                  // echo back
                  break;
                default:  // Do Nothing
                  break;
 8010a28:	e021      	b.n	8010a6e <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_PREV);
 8010a2a:	2002      	movs	r0, #2
 8010a2c:	f7ff fcb4 	bl	8010398 <svCLIHandleHistory>
                  _svClearLine();
 8010a30:	f7ff fc7c 	bl	801032c <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 8010a34:	4827      	ldr	r0, [pc, #156]	; (8010ad4 <svCLI_Handler+0x26c>)
 8010a36:	f7ff fadd 	bl	800fff4 <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 8010a3a:	4923      	ldr	r1, [pc, #140]	; (8010ac8 <svCLI_Handler+0x260>)
 8010a3c:	482a      	ldr	r0, [pc, #168]	; (8010ae8 <svCLI_Handler+0x280>)
 8010a3e:	f7ff fad9 	bl	800fff4 <svCLI_Printf>
 8010a42:	4603      	mov	r3, r0
 8010a44:	461a      	mov	r2, r3
 8010a46:	4b1f      	ldr	r3, [pc, #124]	; (8010ac4 <svCLI_Handler+0x25c>)
 8010a48:	601a      	str	r2, [r3, #0]
                  break;
 8010a4a:	e010      	b.n	8010a6e <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_NEXT);
 8010a4c:	2001      	movs	r0, #1
 8010a4e:	f7ff fca3 	bl	8010398 <svCLIHandleHistory>
                  _svClearLine();
 8010a52:	f7ff fc6b 	bl	801032c <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 8010a56:	481f      	ldr	r0, [pc, #124]	; (8010ad4 <svCLI_Handler+0x26c>)
 8010a58:	f7ff facc 	bl	800fff4 <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 8010a5c:	491a      	ldr	r1, [pc, #104]	; (8010ac8 <svCLI_Handler+0x260>)
 8010a5e:	4822      	ldr	r0, [pc, #136]	; (8010ae8 <svCLI_Handler+0x280>)
 8010a60:	f7ff fac8 	bl	800fff4 <svCLI_Printf>
 8010a64:	4603      	mov	r3, r0
 8010a66:	461a      	mov	r2, r3
 8010a68:	4b16      	ldr	r3, [pc, #88]	; (8010ac4 <svCLI_Handler+0x25c>)
 8010a6a:	601a      	str	r2, [r3, #0]
                  break;
 8010a6c:	bf00      	nop
              }
            }
            if (svCommit) {
 8010a6e:	4b1f      	ldr	r3, [pc, #124]	; (8010aec <svCLI_Handler+0x284>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d01c      	beq.n	8010ab0 <svCLI_Handler+0x248>
              svCommit();
 8010a76:	4b1d      	ldr	r3, [pc, #116]	; (8010aec <svCLI_Handler+0x284>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4798      	blx	r3
            }
            return;
 8010a7c:	e018      	b.n	8010ab0 <svCLI_Handler+0x248>
          }
          if (scntCLIString < (MAX_CLI_CHARS-1)) {
 8010a7e:	4b11      	ldr	r3, [pc, #68]	; (8010ac4 <svCLI_Handler+0x25c>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2b7e      	cmp	r3, #126	; 0x7e
 8010a84:	d80c      	bhi.n	8010aa0 <svCLI_Handler+0x238>
            // echo back
            svPutChar(szChar);
 8010a86:	4b1a      	ldr	r3, [pc, #104]	; (8010af0 <svCLI_Handler+0x288>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	79fa      	ldrb	r2, [r7, #7]
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	4798      	blx	r3
            szCLIString[scntCLIString++] = szChar;
 8010a90:	4b0c      	ldr	r3, [pc, #48]	; (8010ac4 <svCLI_Handler+0x25c>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	1c5a      	adds	r2, r3, #1
 8010a96:	490b      	ldr	r1, [pc, #44]	; (8010ac4 <svCLI_Handler+0x25c>)
 8010a98:	600a      	str	r2, [r1, #0]
 8010a9a:	490b      	ldr	r1, [pc, #44]	; (8010ac8 <svCLI_Handler+0x260>)
 8010a9c:	79fa      	ldrb	r2, [r7, #7]
 8010a9e:	54ca      	strb	r2, [r1, r3]
          }
        }
      }
    }
  }
  if (svCommit) {
 8010aa0:	4b12      	ldr	r3, [pc, #72]	; (8010aec <svCLI_Handler+0x284>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d004      	beq.n	8010ab2 <svCLI_Handler+0x24a>
    svCommit();
 8010aa8:	4b10      	ldr	r3, [pc, #64]	; (8010aec <svCLI_Handler+0x284>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4798      	blx	r3
 8010aae:	e000      	b.n	8010ab2 <svCLI_Handler+0x24a>
            return;
 8010ab0:	bf00      	nop
  }
}
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	200041a0 	.word	0x200041a0
 8010abc:	200042b8 	.word	0x200042b8
 8010ac0:	0801d338 	.word	0x0801d338
 8010ac4:	20004194 	.word	0x20004194
 8010ac8:	20003f8c 	.word	0x20003f8c
 8010acc:	200041ac 	.word	0x200041ac
 8010ad0:	200041b4 	.word	0x200041b4
 8010ad4:	20000068 	.word	0x20000068
 8010ad8:	200041b0 	.word	0x200041b0
 8010adc:	0801d40c 	.word	0x0801d40c
 8010ae0:	0801d410 	.word	0x0801d410
 8010ae4:	2000418c 	.word	0x2000418c
 8010ae8:	0801d418 	.word	0x0801d418
 8010aec:	200041a8 	.word	0x200041a8
 8010af0:	200041a4 	.word	0x200041a4

08010af4 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
 8010b00:	603b      	str	r3, [r7, #0]
  svCLI_ShowHelp();
 8010b02:	f7ff faa3 	bl	801004c <svCLI_ShowHelp>
}
 8010b06:	bf00      	nop
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 8010b0e:	b480      	push	{r7}
 8010b10:	b085      	sub	sp, #20
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	685b      	ldr	r3, [r3, #4]
 8010b1a:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	689b      	ldr	r3, [r3, #8]
 8010b20:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d303      	bcc.n	8010b32 <svRingBuffer_GetCount+0x24>
	  return (h - t);
 8010b2a:	68fa      	ldr	r2, [r7, #12]
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	e009      	b.n	8010b46 <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	68da      	ldr	r2, [r3, #12]
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	1ad3      	subs	r3, r2, r3
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	441a      	add	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	1ad3      	subs	r3, r2, r3
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3714      	adds	r7, #20
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr

08010b52 <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 8010b52:	b480      	push	{r7}
 8010b54:	b083      	sub	sp, #12
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681a      	ldr	r2, [r3, #0]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	609a      	str	r2, [r3, #8]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	689a      	ldr	r2, [r3, #8]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	619a      	str	r2, [r3, #24]
}
 8010b76:	bf00      	nop
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 8010b82:	b480      	push	{r7}
 8010b84:	b085      	sub	sp, #20
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
 8010b8a:	460b      	mov	r3, r1
 8010b8c:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	78fa      	ldrb	r2, [r7, #3]
 8010b98:	701a      	strb	r2, [r3, #0]
	rb->head++;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	1c5a      	adds	r2, r3, #1
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	685a      	ldr	r2, [r3, #4]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d109      	bne.n	8010bc4 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	619a      	str	r2, [r3, #24]
		nRet = -1;
 8010bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc2:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	685a      	ldr	r2, [r3, #4]
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	689b      	ldr	r3, [r3, #8]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d105      	bne.n	8010bdc <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	615a      	str	r2, [r3, #20]
		nRet = -2;
 8010bd6:	f06f 0301 	mvn.w	r3, #1
 8010bda:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3714      	adds	r7, #20
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr

08010bea <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 8010bea:	b480      	push	{r7}
 8010bec:	b085      	sub	sp, #20
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	689b      	ldr	r3, [r3, #8]
 8010bfe:	1c5a      	adds	r2, r3, #1
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	689a      	ldr	r2, [r3, #8]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d103      	bne.n	8010c18 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	609a      	str	r2, [r3, #8]
	return byData;
 8010c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3714      	adds	r7, #20
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr

08010c26 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010c26:	b480      	push	{r7}
 8010c28:	b083      	sub	sp, #12
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010c30:	88fb      	ldrh	r3, [r7, #6]
 8010c32:	021b      	lsls	r3, r3, #8
 8010c34:	b21a      	sxth	r2, r3
 8010c36:	88fb      	ldrh	r3, [r7, #6]
 8010c38:	0a1b      	lsrs	r3, r3, #8
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	b21b      	sxth	r3, r3
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	b21b      	sxth	r3, r3
 8010c42:	b29b      	uxth	r3, r3
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	370c      	adds	r7, #12
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4e:	4770      	bx	lr

08010c50 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	061a      	lsls	r2, r3, #24
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	021b      	lsls	r3, r3, #8
 8010c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010c64:	431a      	orrs	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	0a1b      	lsrs	r3, r3, #8
 8010c6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010c6e:	431a      	orrs	r2, r3
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	0e1b      	lsrs	r3, r3, #24
 8010c74:	4313      	orrs	r3, r2
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	370c      	adds	r7, #12
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8010c82:	b480      	push	{r7}
 8010c84:	b089      	sub	sp, #36	; 0x24
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
 8010c8a:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8010c90:	2300      	movs	r3, #0
 8010c92:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8010c94:	2300      	movs	r3, #0
 8010c96:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	f003 0301 	and.w	r3, r3, #1
 8010c9e:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00d      	beq.n	8010cc2 <lwip_standard_chksum+0x40>
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dd0a      	ble.n	8010cc2 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8010cac:	69fa      	ldr	r2, [r7, #28]
 8010cae:	1c53      	adds	r3, r2, #1
 8010cb0:	61fb      	str	r3, [r7, #28]
 8010cb2:	f107 030e 	add.w	r3, r7, #14
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	7812      	ldrb	r2, [r2, #0]
 8010cba:	701a      	strb	r2, [r3, #0]
    len--;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	3b01      	subs	r3, #1
 8010cc0:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8010cc6:	e00a      	b.n	8010cde <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8010cc8:	69bb      	ldr	r3, [r7, #24]
 8010cca:	1c9a      	adds	r2, r3, #2
 8010ccc:	61ba      	str	r2, [r7, #24]
 8010cce:	881b      	ldrh	r3, [r3, #0]
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	4413      	add	r3, r2
 8010cd6:	617b      	str	r3, [r7, #20]
    len -= 2;
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	3b02      	subs	r3, #2
 8010cdc:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	dcf1      	bgt.n	8010cc8 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	dd04      	ble.n	8010cf4 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010cea:	f107 030e 	add.w	r3, r7, #14
 8010cee:	69ba      	ldr	r2, [r7, #24]
 8010cf0:	7812      	ldrb	r2, [r2, #0]
 8010cf2:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8010cf4:	89fb      	ldrh	r3, [r7, #14]
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	4413      	add	r3, r2
 8010cfc:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	0c1a      	lsrs	r2, r3, #16
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	4413      	add	r3, r2
 8010d08:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	0c1a      	lsrs	r2, r3, #16
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	4413      	add	r3, r2
 8010d14:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d007      	beq.n	8010d2c <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	021b      	lsls	r3, r3, #8
 8010d20:	b29a      	uxth	r2, r3
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	0a1b      	lsrs	r3, r3, #8
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	b29b      	uxth	r3, r3
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3724      	adds	r7, #36	; 0x24
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	460b      	mov	r3, r1
 8010d46:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8010d48:	887b      	ldrh	r3, [r7, #2]
 8010d4a:	4619      	mov	r1, r3
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f7ff ff98 	bl	8010c82 <lwip_standard_chksum>
 8010d52:	4603      	mov	r3, r0
 8010d54:	43db      	mvns	r3, r3
 8010d56:	b29b      	uxth	r3, r3
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3708      	adds	r7, #8
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8010d6a:	f000 f8d5 	bl	8010f18 <mem_init>
  memp_init();
 8010d6e:	f000 fbd7 	bl	8011520 <memp_init>
  pbuf_init();
  netif_init();
 8010d72:	f000 fcd5 	bl	8011720 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010d76:	f008 f877 	bl	8018e68 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010d7a:	f001 fdbb 	bl	80128f4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010d7e:	f007 ffe9 	bl	8018d54 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010d82:	bf00      	nop
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
	...

08010d8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	4603      	mov	r3, r0
 8010d94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010d96:	4b05      	ldr	r3, [pc, #20]	; (8010dac <ptr_to_mem+0x20>)
 8010d98:	681a      	ldr	r2, [r3, #0]
 8010d9a:	88fb      	ldrh	r3, [r7, #6]
 8010d9c:	4413      	add	r3, r2
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	370c      	adds	r7, #12
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop
 8010dac:	200042d4 	.word	0x200042d4

08010db0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010db8:	4b05      	ldr	r3, [pc, #20]	; (8010dd0 <mem_to_ptr+0x20>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	1ad3      	subs	r3, r2, r3
 8010dc0:	b29b      	uxth	r3, r3
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr
 8010dce:	bf00      	nop
 8010dd0:	200042d4 	.word	0x200042d4

08010dd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010dd4:	b590      	push	{r4, r7, lr}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010ddc:	4b45      	ldr	r3, [pc, #276]	; (8010ef4 <plug_holes+0x120>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d206      	bcs.n	8010df4 <plug_holes+0x20>
 8010de6:	4b44      	ldr	r3, [pc, #272]	; (8010ef8 <plug_holes+0x124>)
 8010de8:	f240 12df 	movw	r2, #479	; 0x1df
 8010dec:	4943      	ldr	r1, [pc, #268]	; (8010efc <plug_holes+0x128>)
 8010dee:	4844      	ldr	r0, [pc, #272]	; (8010f00 <plug_holes+0x12c>)
 8010df0:	f00b f830 	bl	801be54 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010df4:	4b43      	ldr	r3, [pc, #268]	; (8010f04 <plug_holes+0x130>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d306      	bcc.n	8010e0c <plug_holes+0x38>
 8010dfe:	4b3e      	ldr	r3, [pc, #248]	; (8010ef8 <plug_holes+0x124>)
 8010e00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010e04:	4940      	ldr	r1, [pc, #256]	; (8010f08 <plug_holes+0x134>)
 8010e06:	483e      	ldr	r0, [pc, #248]	; (8010f00 <plug_holes+0x12c>)
 8010e08:	f00b f824 	bl	801be54 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	791b      	ldrb	r3, [r3, #4]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d006      	beq.n	8010e22 <plug_holes+0x4e>
 8010e14:	4b38      	ldr	r3, [pc, #224]	; (8010ef8 <plug_holes+0x124>)
 8010e16:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010e1a:	493c      	ldr	r1, [pc, #240]	; (8010f0c <plug_holes+0x138>)
 8010e1c:	4838      	ldr	r0, [pc, #224]	; (8010f00 <plug_holes+0x12c>)
 8010e1e:	f00b f819 	bl	801be54 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	881b      	ldrh	r3, [r3, #0]
 8010e26:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010e2a:	d906      	bls.n	8010e3a <plug_holes+0x66>
 8010e2c:	4b32      	ldr	r3, [pc, #200]	; (8010ef8 <plug_holes+0x124>)
 8010e2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010e32:	4937      	ldr	r1, [pc, #220]	; (8010f10 <plug_holes+0x13c>)
 8010e34:	4832      	ldr	r0, [pc, #200]	; (8010f00 <plug_holes+0x12c>)
 8010e36:	f00b f80d 	bl	801be54 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	881b      	ldrh	r3, [r3, #0]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7ff ffa4 	bl	8010d8c <ptr_to_mem>
 8010e44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d024      	beq.n	8010e98 <plug_holes+0xc4>
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	791b      	ldrb	r3, [r3, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d120      	bne.n	8010e98 <plug_holes+0xc4>
 8010e56:	4b2b      	ldr	r3, [pc, #172]	; (8010f04 <plug_holes+0x130>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	68fa      	ldr	r2, [r7, #12]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d01b      	beq.n	8010e98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010e60:	4b2c      	ldr	r3, [pc, #176]	; (8010f14 <plug_holes+0x140>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d102      	bne.n	8010e70 <plug_holes+0x9c>
      lfree = mem;
 8010e6a:	4a2a      	ldr	r2, [pc, #168]	; (8010f14 <plug_holes+0x140>)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	881a      	ldrh	r2, [r3, #0]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	881b      	ldrh	r3, [r3, #0]
 8010e7c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010e80:	d00a      	beq.n	8010e98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	881b      	ldrh	r3, [r3, #0]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7ff ff80 	bl	8010d8c <ptr_to_mem>
 8010e8c:	4604      	mov	r4, r0
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f7ff ff8e 	bl	8010db0 <mem_to_ptr>
 8010e94:	4603      	mov	r3, r0
 8010e96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	885b      	ldrh	r3, [r3, #2]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7ff ff75 	bl	8010d8c <ptr_to_mem>
 8010ea2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010ea4:	68ba      	ldr	r2, [r7, #8]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d01f      	beq.n	8010eec <plug_holes+0x118>
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	791b      	ldrb	r3, [r3, #4]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d11b      	bne.n	8010eec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010eb4:	4b17      	ldr	r3, [pc, #92]	; (8010f14 <plug_holes+0x140>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d102      	bne.n	8010ec4 <plug_holes+0xf0>
      lfree = pmem;
 8010ebe:	4a15      	ldr	r2, [pc, #84]	; (8010f14 <plug_holes+0x140>)
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	881a      	ldrh	r2, [r3, #0]
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	881b      	ldrh	r3, [r3, #0]
 8010ed0:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010ed4:	d00a      	beq.n	8010eec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	881b      	ldrh	r3, [r3, #0]
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7ff ff56 	bl	8010d8c <ptr_to_mem>
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	68b8      	ldr	r0, [r7, #8]
 8010ee4:	f7ff ff64 	bl	8010db0 <mem_to_ptr>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010eec:	bf00      	nop
 8010eee:	3714      	adds	r7, #20
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd90      	pop	{r4, r7, pc}
 8010ef4:	200042d4 	.word	0x200042d4
 8010ef8:	0801d438 	.word	0x0801d438
 8010efc:	0801d468 	.word	0x0801d468
 8010f00:	0801d480 	.word	0x0801d480
 8010f04:	200042d8 	.word	0x200042d8
 8010f08:	0801d4a8 	.word	0x0801d4a8
 8010f0c:	0801d4c4 	.word	0x0801d4c4
 8010f10:	0801d4e0 	.word	0x0801d4e0
 8010f14:	200042dc 	.word	0x200042dc

08010f18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010f1e:	4b16      	ldr	r3, [pc, #88]	; (8010f78 <mem_init+0x60>)
 8010f20:	4a16      	ldr	r2, [pc, #88]	; (8010f7c <mem_init+0x64>)
 8010f22:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010f24:	4b14      	ldr	r3, [pc, #80]	; (8010f78 <mem_init+0x60>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8010f30:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010f3e:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8010f42:	f7ff ff23 	bl	8010d8c <ptr_to_mem>
 8010f46:	4603      	mov	r3, r0
 8010f48:	4a0d      	ldr	r2, [pc, #52]	; (8010f80 <mem_init+0x68>)
 8010f4a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010f4c:	4b0c      	ldr	r3, [pc, #48]	; (8010f80 <mem_init+0x68>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	2201      	movs	r2, #1
 8010f52:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010f54:	4b0a      	ldr	r3, [pc, #40]	; (8010f80 <mem_init+0x68>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8010f5c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010f5e:	4b08      	ldr	r3, [pc, #32]	; (8010f80 <mem_init+0x68>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8010f66:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010f68:	4b03      	ldr	r3, [pc, #12]	; (8010f78 <mem_init+0x60>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4a05      	ldr	r2, [pc, #20]	; (8010f84 <mem_init+0x6c>)
 8010f6e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8010f70:	bf00      	nop
 8010f72:	3708      	adds	r7, #8
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	200042d4 	.word	0x200042d4
 8010f7c:	20084000 	.word	0x20084000
 8010f80:	200042d8 	.word	0x200042d8
 8010f84:	200042dc 	.word	0x200042dc

08010f88 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f7ff ff0d 	bl	8010db0 <mem_to_ptr>
 8010f96:	4603      	mov	r3, r0
 8010f98:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7ff fef4 	bl	8010d8c <ptr_to_mem>
 8010fa4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	885b      	ldrh	r3, [r3, #2]
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7ff feee 	bl	8010d8c <ptr_to_mem>
 8010fb0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	881b      	ldrh	r3, [r3, #0]
 8010fb6:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010fba:	d818      	bhi.n	8010fee <mem_link_valid+0x66>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	885b      	ldrh	r3, [r3, #2]
 8010fc0:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8010fc4:	d813      	bhi.n	8010fee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010fca:	8afa      	ldrh	r2, [r7, #22]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d004      	beq.n	8010fda <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	881b      	ldrh	r3, [r3, #0]
 8010fd4:	8afa      	ldrh	r2, [r7, #22]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d109      	bne.n	8010fee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010fda:	4b08      	ldr	r3, [pc, #32]	; (8010ffc <mem_link_valid+0x74>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010fde:	693a      	ldr	r2, [r7, #16]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d006      	beq.n	8010ff2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	885b      	ldrh	r3, [r3, #2]
 8010fe8:	8afa      	ldrh	r2, [r7, #22]
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d001      	beq.n	8010ff2 <mem_link_valid+0x6a>
    return 0;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	e000      	b.n	8010ff4 <mem_link_valid+0x6c>
  }
  return 1;
 8010ff2:	2301      	movs	r3, #1
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3718      	adds	r7, #24
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	200042d8 	.word	0x200042d8

08011000 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d04c      	beq.n	80110a8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f003 0303 	and.w	r3, r3, #3
 8011014:	2b00      	cmp	r3, #0
 8011016:	d007      	beq.n	8011028 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011018:	4b25      	ldr	r3, [pc, #148]	; (80110b0 <mem_free+0xb0>)
 801101a:	f240 2273 	movw	r2, #627	; 0x273
 801101e:	4925      	ldr	r1, [pc, #148]	; (80110b4 <mem_free+0xb4>)
 8011020:	4825      	ldr	r0, [pc, #148]	; (80110b8 <mem_free+0xb8>)
 8011022:	f00a ff17 	bl	801be54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011026:	e040      	b.n	80110aa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	3b08      	subs	r3, #8
 801102c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801102e:	4b23      	ldr	r3, [pc, #140]	; (80110bc <mem_free+0xbc>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	429a      	cmp	r2, r3
 8011036:	d306      	bcc.n	8011046 <mem_free+0x46>
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f103 020c 	add.w	r2, r3, #12
 801103e:	4b20      	ldr	r3, [pc, #128]	; (80110c0 <mem_free+0xc0>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	429a      	cmp	r2, r3
 8011044:	d907      	bls.n	8011056 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011046:	4b1a      	ldr	r3, [pc, #104]	; (80110b0 <mem_free+0xb0>)
 8011048:	f240 227f 	movw	r2, #639	; 0x27f
 801104c:	491d      	ldr	r1, [pc, #116]	; (80110c4 <mem_free+0xc4>)
 801104e:	481a      	ldr	r0, [pc, #104]	; (80110b8 <mem_free+0xb8>)
 8011050:	f00a ff00 	bl	801be54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011054:	e029      	b.n	80110aa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	791b      	ldrb	r3, [r3, #4]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d107      	bne.n	801106e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801105e:	4b14      	ldr	r3, [pc, #80]	; (80110b0 <mem_free+0xb0>)
 8011060:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011064:	4918      	ldr	r1, [pc, #96]	; (80110c8 <mem_free+0xc8>)
 8011066:	4814      	ldr	r0, [pc, #80]	; (80110b8 <mem_free+0xb8>)
 8011068:	f00a fef4 	bl	801be54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801106c:	e01d      	b.n	80110aa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	f7ff ff8a 	bl	8010f88 <mem_link_valid>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d107      	bne.n	801108a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801107a:	4b0d      	ldr	r3, [pc, #52]	; (80110b0 <mem_free+0xb0>)
 801107c:	f240 2295 	movw	r2, #661	; 0x295
 8011080:	4912      	ldr	r1, [pc, #72]	; (80110cc <mem_free+0xcc>)
 8011082:	480d      	ldr	r0, [pc, #52]	; (80110b8 <mem_free+0xb8>)
 8011084:	f00a fee6 	bl	801be54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011088:	e00f      	b.n	80110aa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2200      	movs	r2, #0
 801108e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011090:	4b0f      	ldr	r3, [pc, #60]	; (80110d0 <mem_free+0xd0>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	68fa      	ldr	r2, [r7, #12]
 8011096:	429a      	cmp	r2, r3
 8011098:	d202      	bcs.n	80110a0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801109a:	4a0d      	ldr	r2, [pc, #52]	; (80110d0 <mem_free+0xd0>)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80110a0:	68f8      	ldr	r0, [r7, #12]
 80110a2:	f7ff fe97 	bl	8010dd4 <plug_holes>
 80110a6:	e000      	b.n	80110aa <mem_free+0xaa>
    return;
 80110a8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80110aa:	3710      	adds	r7, #16
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	0801d438 	.word	0x0801d438
 80110b4:	0801d50c 	.word	0x0801d50c
 80110b8:	0801d480 	.word	0x0801d480
 80110bc:	200042d4 	.word	0x200042d4
 80110c0:	200042d8 	.word	0x200042d8
 80110c4:	0801d530 	.word	0x0801d530
 80110c8:	0801d54c 	.word	0x0801d54c
 80110cc:	0801d574 	.word	0x0801d574
 80110d0:	200042dc 	.word	0x200042dc

080110d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b088      	sub	sp, #32
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	460b      	mov	r3, r1
 80110de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80110e0:	887b      	ldrh	r3, [r7, #2]
 80110e2:	3303      	adds	r3, #3
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	f023 0303 	bic.w	r3, r3, #3
 80110ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80110ec:	8bfb      	ldrh	r3, [r7, #30]
 80110ee:	2b0b      	cmp	r3, #11
 80110f0:	d801      	bhi.n	80110f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80110f2:	230c      	movs	r3, #12
 80110f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80110f6:	8bfb      	ldrh	r3, [r7, #30]
 80110f8:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80110fc:	d803      	bhi.n	8011106 <mem_trim+0x32>
 80110fe:	8bfa      	ldrh	r2, [r7, #30]
 8011100:	887b      	ldrh	r3, [r7, #2]
 8011102:	429a      	cmp	r2, r3
 8011104:	d201      	bcs.n	801110a <mem_trim+0x36>
    return NULL;
 8011106:	2300      	movs	r3, #0
 8011108:	e0cc      	b.n	80112a4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801110a:	4b68      	ldr	r3, [pc, #416]	; (80112ac <mem_trim+0x1d8>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	429a      	cmp	r2, r3
 8011112:	d304      	bcc.n	801111e <mem_trim+0x4a>
 8011114:	4b66      	ldr	r3, [pc, #408]	; (80112b0 <mem_trim+0x1dc>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	687a      	ldr	r2, [r7, #4]
 801111a:	429a      	cmp	r2, r3
 801111c:	d306      	bcc.n	801112c <mem_trim+0x58>
 801111e:	4b65      	ldr	r3, [pc, #404]	; (80112b4 <mem_trim+0x1e0>)
 8011120:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011124:	4964      	ldr	r1, [pc, #400]	; (80112b8 <mem_trim+0x1e4>)
 8011126:	4865      	ldr	r0, [pc, #404]	; (80112bc <mem_trim+0x1e8>)
 8011128:	f00a fe94 	bl	801be54 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801112c:	4b5f      	ldr	r3, [pc, #380]	; (80112ac <mem_trim+0x1d8>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	429a      	cmp	r2, r3
 8011134:	d304      	bcc.n	8011140 <mem_trim+0x6c>
 8011136:	4b5e      	ldr	r3, [pc, #376]	; (80112b0 <mem_trim+0x1dc>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	429a      	cmp	r2, r3
 801113e:	d301      	bcc.n	8011144 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	e0af      	b.n	80112a4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	3b08      	subs	r3, #8
 8011148:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801114a:	69b8      	ldr	r0, [r7, #24]
 801114c:	f7ff fe30 	bl	8010db0 <mem_to_ptr>
 8011150:	4603      	mov	r3, r0
 8011152:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	881a      	ldrh	r2, [r3, #0]
 8011158:	8afb      	ldrh	r3, [r7, #22]
 801115a:	1ad3      	subs	r3, r2, r3
 801115c:	b29b      	uxth	r3, r3
 801115e:	3b08      	subs	r3, #8
 8011160:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011162:	8bfa      	ldrh	r2, [r7, #30]
 8011164:	8abb      	ldrh	r3, [r7, #20]
 8011166:	429a      	cmp	r2, r3
 8011168:	d906      	bls.n	8011178 <mem_trim+0xa4>
 801116a:	4b52      	ldr	r3, [pc, #328]	; (80112b4 <mem_trim+0x1e0>)
 801116c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011170:	4953      	ldr	r1, [pc, #332]	; (80112c0 <mem_trim+0x1ec>)
 8011172:	4852      	ldr	r0, [pc, #328]	; (80112bc <mem_trim+0x1e8>)
 8011174:	f00a fe6e 	bl	801be54 <iprintf>
  if (newsize > size) {
 8011178:	8bfa      	ldrh	r2, [r7, #30]
 801117a:	8abb      	ldrh	r3, [r7, #20]
 801117c:	429a      	cmp	r2, r3
 801117e:	d901      	bls.n	8011184 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8011180:	2300      	movs	r3, #0
 8011182:	e08f      	b.n	80112a4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8011184:	8bfa      	ldrh	r2, [r7, #30]
 8011186:	8abb      	ldrh	r3, [r7, #20]
 8011188:	429a      	cmp	r2, r3
 801118a:	d101      	bne.n	8011190 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	e089      	b.n	80112a4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	881b      	ldrh	r3, [r3, #0]
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff fdf9 	bl	8010d8c <ptr_to_mem>
 801119a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	791b      	ldrb	r3, [r3, #4]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d13f      	bne.n	8011224 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80111ac:	d106      	bne.n	80111bc <mem_trim+0xe8>
 80111ae:	4b41      	ldr	r3, [pc, #260]	; (80112b4 <mem_trim+0x1e0>)
 80111b0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80111b4:	4943      	ldr	r1, [pc, #268]	; (80112c4 <mem_trim+0x1f0>)
 80111b6:	4841      	ldr	r0, [pc, #260]	; (80112bc <mem_trim+0x1e8>)
 80111b8:	f00a fe4c 	bl	801be54 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	881b      	ldrh	r3, [r3, #0]
 80111c0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80111c2:	8afa      	ldrh	r2, [r7, #22]
 80111c4:	8bfb      	ldrh	r3, [r7, #30]
 80111c6:	4413      	add	r3, r2
 80111c8:	b29b      	uxth	r3, r3
 80111ca:	3308      	adds	r3, #8
 80111cc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80111ce:	4b3e      	ldr	r3, [pc, #248]	; (80112c8 <mem_trim+0x1f4>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	693a      	ldr	r2, [r7, #16]
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d106      	bne.n	80111e6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80111d8:	89fb      	ldrh	r3, [r7, #14]
 80111da:	4618      	mov	r0, r3
 80111dc:	f7ff fdd6 	bl	8010d8c <ptr_to_mem>
 80111e0:	4603      	mov	r3, r0
 80111e2:	4a39      	ldr	r2, [pc, #228]	; (80112c8 <mem_trim+0x1f4>)
 80111e4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80111e6:	89fb      	ldrh	r3, [r7, #14]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff fdcf 	bl	8010d8c <ptr_to_mem>
 80111ee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	2200      	movs	r2, #0
 80111f4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	89ba      	ldrh	r2, [r7, #12]
 80111fa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	8afa      	ldrh	r2, [r7, #22]
 8011200:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	89fa      	ldrh	r2, [r7, #14]
 8011206:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	881b      	ldrh	r3, [r3, #0]
 801120c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8011210:	d047      	beq.n	80112a2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	881b      	ldrh	r3, [r3, #0]
 8011216:	4618      	mov	r0, r3
 8011218:	f7ff fdb8 	bl	8010d8c <ptr_to_mem>
 801121c:	4602      	mov	r2, r0
 801121e:	89fb      	ldrh	r3, [r7, #14]
 8011220:	8053      	strh	r3, [r2, #2]
 8011222:	e03e      	b.n	80112a2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011224:	8bfb      	ldrh	r3, [r7, #30]
 8011226:	f103 0214 	add.w	r2, r3, #20
 801122a:	8abb      	ldrh	r3, [r7, #20]
 801122c:	429a      	cmp	r2, r3
 801122e:	d838      	bhi.n	80112a2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011230:	8afa      	ldrh	r2, [r7, #22]
 8011232:	8bfb      	ldrh	r3, [r7, #30]
 8011234:	4413      	add	r3, r2
 8011236:	b29b      	uxth	r3, r3
 8011238:	3308      	adds	r3, #8
 801123a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	881b      	ldrh	r3, [r3, #0]
 8011240:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8011244:	d106      	bne.n	8011254 <mem_trim+0x180>
 8011246:	4b1b      	ldr	r3, [pc, #108]	; (80112b4 <mem_trim+0x1e0>)
 8011248:	f240 3216 	movw	r2, #790	; 0x316
 801124c:	491d      	ldr	r1, [pc, #116]	; (80112c4 <mem_trim+0x1f0>)
 801124e:	481b      	ldr	r0, [pc, #108]	; (80112bc <mem_trim+0x1e8>)
 8011250:	f00a fe00 	bl	801be54 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011254:	89fb      	ldrh	r3, [r7, #14]
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff fd98 	bl	8010d8c <ptr_to_mem>
 801125c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801125e:	4b1a      	ldr	r3, [pc, #104]	; (80112c8 <mem_trim+0x1f4>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	693a      	ldr	r2, [r7, #16]
 8011264:	429a      	cmp	r2, r3
 8011266:	d202      	bcs.n	801126e <mem_trim+0x19a>
      lfree = mem2;
 8011268:	4a17      	ldr	r2, [pc, #92]	; (80112c8 <mem_trim+0x1f4>)
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	2200      	movs	r2, #0
 8011272:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011274:	69bb      	ldr	r3, [r7, #24]
 8011276:	881a      	ldrh	r2, [r3, #0]
 8011278:	693b      	ldr	r3, [r7, #16]
 801127a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	8afa      	ldrh	r2, [r7, #22]
 8011280:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	89fa      	ldrh	r2, [r7, #14]
 8011286:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	881b      	ldrh	r3, [r3, #0]
 801128c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8011290:	d007      	beq.n	80112a2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	4618      	mov	r0, r3
 8011298:	f7ff fd78 	bl	8010d8c <ptr_to_mem>
 801129c:	4602      	mov	r2, r0
 801129e:	89fb      	ldrh	r3, [r7, #14]
 80112a0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80112a2:	687b      	ldr	r3, [r7, #4]
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3720      	adds	r7, #32
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	200042d4 	.word	0x200042d4
 80112b0:	200042d8 	.word	0x200042d8
 80112b4:	0801d438 	.word	0x0801d438
 80112b8:	0801d5a8 	.word	0x0801d5a8
 80112bc:	0801d480 	.word	0x0801d480
 80112c0:	0801d5c0 	.word	0x0801d5c0
 80112c4:	0801d5e0 	.word	0x0801d5e0
 80112c8:	200042dc 	.word	0x200042dc

080112cc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b088      	sub	sp, #32
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	4603      	mov	r3, r0
 80112d4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80112d6:	88fb      	ldrh	r3, [r7, #6]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d101      	bne.n	80112e0 <mem_malloc+0x14>
    return NULL;
 80112dc:	2300      	movs	r3, #0
 80112de:	e0d9      	b.n	8011494 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80112e0:	88fb      	ldrh	r3, [r7, #6]
 80112e2:	3303      	adds	r3, #3
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	f023 0303 	bic.w	r3, r3, #3
 80112ea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80112ec:	8bbb      	ldrh	r3, [r7, #28]
 80112ee:	2b0b      	cmp	r3, #11
 80112f0:	d801      	bhi.n	80112f6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80112f2:	230c      	movs	r3, #12
 80112f4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80112f6:	8bbb      	ldrh	r3, [r7, #28]
 80112f8:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80112fc:	d803      	bhi.n	8011306 <mem_malloc+0x3a>
 80112fe:	8bba      	ldrh	r2, [r7, #28]
 8011300:	88fb      	ldrh	r3, [r7, #6]
 8011302:	429a      	cmp	r2, r3
 8011304:	d201      	bcs.n	801130a <mem_malloc+0x3e>
    return NULL;
 8011306:	2300      	movs	r3, #0
 8011308:	e0c4      	b.n	8011494 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801130a:	4b64      	ldr	r3, [pc, #400]	; (801149c <mem_malloc+0x1d0>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	4618      	mov	r0, r3
 8011310:	f7ff fd4e 	bl	8010db0 <mem_to_ptr>
 8011314:	4603      	mov	r3, r0
 8011316:	83fb      	strh	r3, [r7, #30]
 8011318:	e0b4      	b.n	8011484 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801131a:	8bfb      	ldrh	r3, [r7, #30]
 801131c:	4618      	mov	r0, r3
 801131e:	f7ff fd35 	bl	8010d8c <ptr_to_mem>
 8011322:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	791b      	ldrb	r3, [r3, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	f040 80a4 	bne.w	8011476 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	881b      	ldrh	r3, [r3, #0]
 8011332:	461a      	mov	r2, r3
 8011334:	8bfb      	ldrh	r3, [r7, #30]
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	f1a3 0208 	sub.w	r2, r3, #8
 801133c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801133e:	429a      	cmp	r2, r3
 8011340:	f0c0 8099 	bcc.w	8011476 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	881b      	ldrh	r3, [r3, #0]
 8011348:	461a      	mov	r2, r3
 801134a:	8bfb      	ldrh	r3, [r7, #30]
 801134c:	1ad3      	subs	r3, r2, r3
 801134e:	f1a3 0208 	sub.w	r2, r3, #8
 8011352:	8bbb      	ldrh	r3, [r7, #28]
 8011354:	3314      	adds	r3, #20
 8011356:	429a      	cmp	r2, r3
 8011358:	d333      	bcc.n	80113c2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801135a:	8bfa      	ldrh	r2, [r7, #30]
 801135c:	8bbb      	ldrh	r3, [r7, #28]
 801135e:	4413      	add	r3, r2
 8011360:	b29b      	uxth	r3, r3
 8011362:	3308      	adds	r3, #8
 8011364:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011366:	8a7b      	ldrh	r3, [r7, #18]
 8011368:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 801136c:	d106      	bne.n	801137c <mem_malloc+0xb0>
 801136e:	4b4c      	ldr	r3, [pc, #304]	; (80114a0 <mem_malloc+0x1d4>)
 8011370:	f240 3287 	movw	r2, #903	; 0x387
 8011374:	494b      	ldr	r1, [pc, #300]	; (80114a4 <mem_malloc+0x1d8>)
 8011376:	484c      	ldr	r0, [pc, #304]	; (80114a8 <mem_malloc+0x1dc>)
 8011378:	f00a fd6c 	bl	801be54 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801137c:	8a7b      	ldrh	r3, [r7, #18]
 801137e:	4618      	mov	r0, r3
 8011380:	f7ff fd04 	bl	8010d8c <ptr_to_mem>
 8011384:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2200      	movs	r2, #0
 801138a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	881a      	ldrh	r2, [r3, #0]
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	8bfa      	ldrh	r2, [r7, #30]
 8011398:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	8a7a      	ldrh	r2, [r7, #18]
 801139e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	2201      	movs	r2, #1
 80113a4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	881b      	ldrh	r3, [r3, #0]
 80113aa:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80113ae:	d00b      	beq.n	80113c8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff fce9 	bl	8010d8c <ptr_to_mem>
 80113ba:	4602      	mov	r2, r0
 80113bc:	8a7b      	ldrh	r3, [r7, #18]
 80113be:	8053      	strh	r3, [r2, #2]
 80113c0:	e002      	b.n	80113c8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	2201      	movs	r2, #1
 80113c6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80113c8:	4b34      	ldr	r3, [pc, #208]	; (801149c <mem_malloc+0x1d0>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	697a      	ldr	r2, [r7, #20]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d127      	bne.n	8011422 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80113d2:	4b32      	ldr	r3, [pc, #200]	; (801149c <mem_malloc+0x1d0>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80113d8:	e005      	b.n	80113e6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80113da:	69bb      	ldr	r3, [r7, #24]
 80113dc:	881b      	ldrh	r3, [r3, #0]
 80113de:	4618      	mov	r0, r3
 80113e0:	f7ff fcd4 	bl	8010d8c <ptr_to_mem>
 80113e4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	791b      	ldrb	r3, [r3, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d004      	beq.n	80113f8 <mem_malloc+0x12c>
 80113ee:	4b2f      	ldr	r3, [pc, #188]	; (80114ac <mem_malloc+0x1e0>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	69ba      	ldr	r2, [r7, #24]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d1f0      	bne.n	80113da <mem_malloc+0x10e>
          }
          lfree = cur;
 80113f8:	4a28      	ldr	r2, [pc, #160]	; (801149c <mem_malloc+0x1d0>)
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80113fe:	4b27      	ldr	r3, [pc, #156]	; (801149c <mem_malloc+0x1d0>)
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	4b2a      	ldr	r3, [pc, #168]	; (80114ac <mem_malloc+0x1e0>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	429a      	cmp	r2, r3
 8011408:	d00b      	beq.n	8011422 <mem_malloc+0x156>
 801140a:	4b24      	ldr	r3, [pc, #144]	; (801149c <mem_malloc+0x1d0>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	791b      	ldrb	r3, [r3, #4]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d006      	beq.n	8011422 <mem_malloc+0x156>
 8011414:	4b22      	ldr	r3, [pc, #136]	; (80114a0 <mem_malloc+0x1d4>)
 8011416:	f240 32b5 	movw	r2, #949	; 0x3b5
 801141a:	4925      	ldr	r1, [pc, #148]	; (80114b0 <mem_malloc+0x1e4>)
 801141c:	4822      	ldr	r0, [pc, #136]	; (80114a8 <mem_malloc+0x1dc>)
 801141e:	f00a fd19 	bl	801be54 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011422:	8bba      	ldrh	r2, [r7, #28]
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	4413      	add	r3, r2
 8011428:	3308      	adds	r3, #8
 801142a:	4a20      	ldr	r2, [pc, #128]	; (80114ac <mem_malloc+0x1e0>)
 801142c:	6812      	ldr	r2, [r2, #0]
 801142e:	4293      	cmp	r3, r2
 8011430:	d906      	bls.n	8011440 <mem_malloc+0x174>
 8011432:	4b1b      	ldr	r3, [pc, #108]	; (80114a0 <mem_malloc+0x1d4>)
 8011434:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011438:	491e      	ldr	r1, [pc, #120]	; (80114b4 <mem_malloc+0x1e8>)
 801143a:	481b      	ldr	r0, [pc, #108]	; (80114a8 <mem_malloc+0x1dc>)
 801143c:	f00a fd0a 	bl	801be54 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	f003 0303 	and.w	r3, r3, #3
 8011446:	2b00      	cmp	r3, #0
 8011448:	d006      	beq.n	8011458 <mem_malloc+0x18c>
 801144a:	4b15      	ldr	r3, [pc, #84]	; (80114a0 <mem_malloc+0x1d4>)
 801144c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011450:	4919      	ldr	r1, [pc, #100]	; (80114b8 <mem_malloc+0x1ec>)
 8011452:	4815      	ldr	r0, [pc, #84]	; (80114a8 <mem_malloc+0x1dc>)
 8011454:	f00a fcfe 	bl	801be54 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	f003 0303 	and.w	r3, r3, #3
 801145e:	2b00      	cmp	r3, #0
 8011460:	d006      	beq.n	8011470 <mem_malloc+0x1a4>
 8011462:	4b0f      	ldr	r3, [pc, #60]	; (80114a0 <mem_malloc+0x1d4>)
 8011464:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011468:	4914      	ldr	r1, [pc, #80]	; (80114bc <mem_malloc+0x1f0>)
 801146a:	480f      	ldr	r0, [pc, #60]	; (80114a8 <mem_malloc+0x1dc>)
 801146c:	f00a fcf2 	bl	801be54 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	3308      	adds	r3, #8
 8011474:	e00e      	b.n	8011494 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8011476:	8bfb      	ldrh	r3, [r7, #30]
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff fc87 	bl	8010d8c <ptr_to_mem>
 801147e:	4603      	mov	r3, r0
 8011480:	881b      	ldrh	r3, [r3, #0]
 8011482:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011484:	8bfa      	ldrh	r2, [r7, #30]
 8011486:	8bbb      	ldrh	r3, [r7, #28]
 8011488:	f5c3 5360 	rsb	r3, r3, #14336	; 0x3800
 801148c:	429a      	cmp	r2, r3
 801148e:	f4ff af44 	bcc.w	801131a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011492:	2300      	movs	r3, #0
}
 8011494:	4618      	mov	r0, r3
 8011496:	3720      	adds	r7, #32
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	200042dc 	.word	0x200042dc
 80114a0:	0801d438 	.word	0x0801d438
 80114a4:	0801d5e0 	.word	0x0801d5e0
 80114a8:	0801d480 	.word	0x0801d480
 80114ac:	200042d8 	.word	0x200042d8
 80114b0:	0801d5f4 	.word	0x0801d5f4
 80114b4:	0801d610 	.word	0x0801d610
 80114b8:	0801d640 	.word	0x0801d640
 80114bc:	0801d670 	.word	0x0801d670

080114c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b085      	sub	sp, #20
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	689b      	ldr	r3, [r3, #8]
 80114cc:	2200      	movs	r2, #0
 80114ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	3303      	adds	r3, #3
 80114d6:	f023 0303 	bic.w	r3, r3, #3
 80114da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80114dc:	2300      	movs	r3, #0
 80114de:	60fb      	str	r3, [r7, #12]
 80114e0:	e011      	b.n	8011506 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	689b      	ldr	r3, [r3, #8]
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	68ba      	ldr	r2, [r7, #8]
 80114f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	881b      	ldrh	r3, [r3, #0]
 80114f8:	461a      	mov	r2, r3
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	4413      	add	r3, r2
 80114fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	3301      	adds	r3, #1
 8011504:	60fb      	str	r3, [r7, #12]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	885b      	ldrh	r3, [r3, #2]
 801150a:	461a      	mov	r2, r3
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	4293      	cmp	r3, r2
 8011510:	dbe7      	blt.n	80114e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011512:	bf00      	nop
 8011514:	bf00      	nop
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr

08011520 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b082      	sub	sp, #8
 8011524:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011526:	2300      	movs	r3, #0
 8011528:	80fb      	strh	r3, [r7, #6]
 801152a:	e009      	b.n	8011540 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801152c:	88fb      	ldrh	r3, [r7, #6]
 801152e:	4a08      	ldr	r2, [pc, #32]	; (8011550 <memp_init+0x30>)
 8011530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011534:	4618      	mov	r0, r3
 8011536:	f7ff ffc3 	bl	80114c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801153a:	88fb      	ldrh	r3, [r7, #6]
 801153c:	3301      	adds	r3, #1
 801153e:	80fb      	strh	r3, [r7, #6]
 8011540:	88fb      	ldrh	r3, [r7, #6]
 8011542:	2b08      	cmp	r3, #8
 8011544:	d9f2      	bls.n	801152c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011546:	bf00      	nop
 8011548:	bf00      	nop
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	0801fff4 	.word	0x0801fff4

08011554 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	689b      	ldr	r3, [r3, #8]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d012      	beq.n	8011590 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	68fa      	ldr	r2, [r7, #12]
 8011570:	6812      	ldr	r2, [r2, #0]
 8011572:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f003 0303 	and.w	r3, r3, #3
 801157a:	2b00      	cmp	r3, #0
 801157c:	d006      	beq.n	801158c <do_memp_malloc_pool+0x38>
 801157e:	4b07      	ldr	r3, [pc, #28]	; (801159c <do_memp_malloc_pool+0x48>)
 8011580:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011584:	4906      	ldr	r1, [pc, #24]	; (80115a0 <do_memp_malloc_pool+0x4c>)
 8011586:	4807      	ldr	r0, [pc, #28]	; (80115a4 <do_memp_malloc_pool+0x50>)
 8011588:	f00a fc64 	bl	801be54 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	e000      	b.n	8011592 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	3710      	adds	r7, #16
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	0801d694 	.word	0x0801d694
 80115a0:	0801d6c4 	.word	0x0801d6c4
 80115a4:	0801d6e8 	.word	0x0801d6e8

080115a8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d106      	bne.n	80115c4 <memp_malloc_pool+0x1c>
 80115b6:	4b0a      	ldr	r3, [pc, #40]	; (80115e0 <memp_malloc_pool+0x38>)
 80115b8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80115bc:	4909      	ldr	r1, [pc, #36]	; (80115e4 <memp_malloc_pool+0x3c>)
 80115be:	480a      	ldr	r0, [pc, #40]	; (80115e8 <memp_malloc_pool+0x40>)
 80115c0:	f00a fc48 	bl	801be54 <iprintf>
  if (desc == NULL) {
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d101      	bne.n	80115ce <memp_malloc_pool+0x26>
    return NULL;
 80115ca:	2300      	movs	r3, #0
 80115cc:	e003      	b.n	80115d6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f7ff ffc0 	bl	8011554 <do_memp_malloc_pool>
 80115d4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3708      	adds	r7, #8
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	0801d694 	.word	0x0801d694
 80115e4:	0801d710 	.word	0x0801d710
 80115e8:	0801d6e8 	.word	0x0801d6e8

080115ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	4603      	mov	r3, r0
 80115f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80115f6:	79fb      	ldrb	r3, [r7, #7]
 80115f8:	2b08      	cmp	r3, #8
 80115fa:	d908      	bls.n	801160e <memp_malloc+0x22>
 80115fc:	4b0a      	ldr	r3, [pc, #40]	; (8011628 <memp_malloc+0x3c>)
 80115fe:	f240 1257 	movw	r2, #343	; 0x157
 8011602:	490a      	ldr	r1, [pc, #40]	; (801162c <memp_malloc+0x40>)
 8011604:	480a      	ldr	r0, [pc, #40]	; (8011630 <memp_malloc+0x44>)
 8011606:	f00a fc25 	bl	801be54 <iprintf>
 801160a:	2300      	movs	r3, #0
 801160c:	e008      	b.n	8011620 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801160e:	79fb      	ldrb	r3, [r7, #7]
 8011610:	4a08      	ldr	r2, [pc, #32]	; (8011634 <memp_malloc+0x48>)
 8011612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011616:	4618      	mov	r0, r3
 8011618:	f7ff ff9c 	bl	8011554 <do_memp_malloc_pool>
 801161c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801161e:	68fb      	ldr	r3, [r7, #12]
}
 8011620:	4618      	mov	r0, r3
 8011622:	3710      	adds	r7, #16
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}
 8011628:	0801d694 	.word	0x0801d694
 801162c:	0801d724 	.word	0x0801d724
 8011630:	0801d6e8 	.word	0x0801d6e8
 8011634:	0801fff4 	.word	0x0801fff4

08011638 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	f003 0303 	and.w	r3, r3, #3
 8011648:	2b00      	cmp	r3, #0
 801164a:	d006      	beq.n	801165a <do_memp_free_pool+0x22>
 801164c:	4b0a      	ldr	r3, [pc, #40]	; (8011678 <do_memp_free_pool+0x40>)
 801164e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011652:	490a      	ldr	r1, [pc, #40]	; (801167c <do_memp_free_pool+0x44>)
 8011654:	480a      	ldr	r0, [pc, #40]	; (8011680 <do_memp_free_pool+0x48>)
 8011656:	f00a fbfd 	bl	801be54 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	689b      	ldr	r3, [r3, #8]
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	689b      	ldr	r3, [r3, #8]
 801166c:	68fa      	ldr	r2, [r7, #12]
 801166e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8011670:	bf00      	nop
 8011672:	3710      	adds	r7, #16
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	0801d694 	.word	0x0801d694
 801167c:	0801d744 	.word	0x0801d744
 8011680:	0801d6e8 	.word	0x0801d6e8

08011684 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d106      	bne.n	80116a2 <memp_free_pool+0x1e>
 8011694:	4b0a      	ldr	r3, [pc, #40]	; (80116c0 <memp_free_pool+0x3c>)
 8011696:	f240 1295 	movw	r2, #405	; 0x195
 801169a:	490a      	ldr	r1, [pc, #40]	; (80116c4 <memp_free_pool+0x40>)
 801169c:	480a      	ldr	r0, [pc, #40]	; (80116c8 <memp_free_pool+0x44>)
 801169e:	f00a fbd9 	bl	801be54 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d007      	beq.n	80116b8 <memp_free_pool+0x34>
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d004      	beq.n	80116b8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80116ae:	6839      	ldr	r1, [r7, #0]
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7ff ffc1 	bl	8011638 <do_memp_free_pool>
 80116b6:	e000      	b.n	80116ba <memp_free_pool+0x36>
    return;
 80116b8:	bf00      	nop
}
 80116ba:	3708      	adds	r7, #8
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	0801d694 	.word	0x0801d694
 80116c4:	0801d710 	.word	0x0801d710
 80116c8:	0801d6e8 	.word	0x0801d6e8

080116cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	4603      	mov	r3, r0
 80116d4:	6039      	str	r1, [r7, #0]
 80116d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80116d8:	79fb      	ldrb	r3, [r7, #7]
 80116da:	2b08      	cmp	r3, #8
 80116dc:	d907      	bls.n	80116ee <memp_free+0x22>
 80116de:	4b0c      	ldr	r3, [pc, #48]	; (8011710 <memp_free+0x44>)
 80116e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80116e4:	490b      	ldr	r1, [pc, #44]	; (8011714 <memp_free+0x48>)
 80116e6:	480c      	ldr	r0, [pc, #48]	; (8011718 <memp_free+0x4c>)
 80116e8:	f00a fbb4 	bl	801be54 <iprintf>
 80116ec:	e00c      	b.n	8011708 <memp_free+0x3c>

  if (mem == NULL) {
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d008      	beq.n	8011706 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80116f4:	79fb      	ldrb	r3, [r7, #7]
 80116f6:	4a09      	ldr	r2, [pc, #36]	; (801171c <memp_free+0x50>)
 80116f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	4618      	mov	r0, r3
 8011700:	f7ff ff9a 	bl	8011638 <do_memp_free_pool>
 8011704:	e000      	b.n	8011708 <memp_free+0x3c>
    return;
 8011706:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011708:	3708      	adds	r7, #8
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	0801d694 	.word	0x0801d694
 8011714:	0801d764 	.word	0x0801d764
 8011718:	0801d6e8 	.word	0x0801d6e8
 801171c:	0801fff4 	.word	0x0801fff4

08011720 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011720:	b480      	push	{r7}
 8011722:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011724:	bf00      	nop
 8011726:	46bd      	mov	sp, r7
 8011728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172c:	4770      	bx	lr
	...

08011730 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
 801173c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d108      	bne.n	8011756 <netif_add+0x26>
 8011744:	4b57      	ldr	r3, [pc, #348]	; (80118a4 <netif_add+0x174>)
 8011746:	f240 1227 	movw	r2, #295	; 0x127
 801174a:	4957      	ldr	r1, [pc, #348]	; (80118a8 <netif_add+0x178>)
 801174c:	4857      	ldr	r0, [pc, #348]	; (80118ac <netif_add+0x17c>)
 801174e:	f00a fb81 	bl	801be54 <iprintf>
 8011752:	2300      	movs	r3, #0
 8011754:	e0a2      	b.n	801189c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011758:	2b00      	cmp	r3, #0
 801175a:	d108      	bne.n	801176e <netif_add+0x3e>
 801175c:	4b51      	ldr	r3, [pc, #324]	; (80118a4 <netif_add+0x174>)
 801175e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011762:	4953      	ldr	r1, [pc, #332]	; (80118b0 <netif_add+0x180>)
 8011764:	4851      	ldr	r0, [pc, #324]	; (80118ac <netif_add+0x17c>)
 8011766:	f00a fb75 	bl	801be54 <iprintf>
 801176a:	2300      	movs	r3, #0
 801176c:	e096      	b.n	801189c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d101      	bne.n	8011778 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011774:	4b4f      	ldr	r3, [pc, #316]	; (80118b4 <netif_add+0x184>)
 8011776:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d101      	bne.n	8011782 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801177e:	4b4d      	ldr	r3, [pc, #308]	; (80118b4 <netif_add+0x184>)
 8011780:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d101      	bne.n	801178c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011788:	4b4a      	ldr	r3, [pc, #296]	; (80118b4 <netif_add+0x184>)
 801178a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2200      	movs	r2, #0
 8011790:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2200      	movs	r2, #0
 8011796:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2200      	movs	r2, #0
 801179c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	4a45      	ldr	r2, [pc, #276]	; (80118b8 <netif_add+0x188>)
 80117a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2200      	movs	r2, #0
 80117a8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	2200      	movs	r2, #0
 80117ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2200      	movs	r2, #0
 80117b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	6a3a      	ldr	r2, [r7, #32]
 80117bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80117be:	4b3f      	ldr	r3, [pc, #252]	; (80118bc <netif_add+0x18c>)
 80117c0:	781a      	ldrb	r2, [r3, #0]
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	68b9      	ldr	r1, [r7, #8]
 80117d4:	68f8      	ldr	r0, [r7, #12]
 80117d6:	f000 f913 	bl	8011a00 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80117da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117dc:	68f8      	ldr	r0, [r7, #12]
 80117de:	4798      	blx	r3
 80117e0:	4603      	mov	r3, r0
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d001      	beq.n	80117ea <netif_add+0xba>
    return NULL;
 80117e6:	2300      	movs	r3, #0
 80117e8:	e058      	b.n	801189c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80117f0:	2bff      	cmp	r3, #255	; 0xff
 80117f2:	d103      	bne.n	80117fc <netif_add+0xcc>
        netif->num = 0;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2200      	movs	r2, #0
 80117f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80117fc:	2300      	movs	r3, #0
 80117fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011800:	4b2f      	ldr	r3, [pc, #188]	; (80118c0 <netif_add+0x190>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	617b      	str	r3, [r7, #20]
 8011806:	e02b      	b.n	8011860 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011808:	697a      	ldr	r2, [r7, #20]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	429a      	cmp	r2, r3
 801180e:	d106      	bne.n	801181e <netif_add+0xee>
 8011810:	4b24      	ldr	r3, [pc, #144]	; (80118a4 <netif_add+0x174>)
 8011812:	f240 128b 	movw	r2, #395	; 0x18b
 8011816:	492b      	ldr	r1, [pc, #172]	; (80118c4 <netif_add+0x194>)
 8011818:	4824      	ldr	r0, [pc, #144]	; (80118ac <netif_add+0x17c>)
 801181a:	f00a fb1b 	bl	801be54 <iprintf>
        num_netifs++;
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	3301      	adds	r3, #1
 8011822:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	2bff      	cmp	r3, #255	; 0xff
 8011828:	dd06      	ble.n	8011838 <netif_add+0x108>
 801182a:	4b1e      	ldr	r3, [pc, #120]	; (80118a4 <netif_add+0x174>)
 801182c:	f240 128d 	movw	r2, #397	; 0x18d
 8011830:	4925      	ldr	r1, [pc, #148]	; (80118c8 <netif_add+0x198>)
 8011832:	481e      	ldr	r0, [pc, #120]	; (80118ac <netif_add+0x17c>)
 8011834:	f00a fb0e 	bl	801be54 <iprintf>
        if (netif2->num == netif->num) {
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011844:	429a      	cmp	r2, r3
 8011846:	d108      	bne.n	801185a <netif_add+0x12a>
          netif->num++;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801184e:	3301      	adds	r3, #1
 8011850:	b2da      	uxtb	r2, r3
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8011858:	e005      	b.n	8011866 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	617b      	str	r3, [r7, #20]
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1d0      	bne.n	8011808 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1be      	bne.n	80117ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011872:	2bfe      	cmp	r3, #254	; 0xfe
 8011874:	d103      	bne.n	801187e <netif_add+0x14e>
    netif_num = 0;
 8011876:	4b11      	ldr	r3, [pc, #68]	; (80118bc <netif_add+0x18c>)
 8011878:	2200      	movs	r2, #0
 801187a:	701a      	strb	r2, [r3, #0]
 801187c:	e006      	b.n	801188c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011884:	3301      	adds	r3, #1
 8011886:	b2da      	uxtb	r2, r3
 8011888:	4b0c      	ldr	r3, [pc, #48]	; (80118bc <netif_add+0x18c>)
 801188a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801188c:	4b0c      	ldr	r3, [pc, #48]	; (80118c0 <netif_add+0x190>)
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011894:	4a0a      	ldr	r2, [pc, #40]	; (80118c0 <netif_add+0x190>)
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801189a:	68fb      	ldr	r3, [r7, #12]
}
 801189c:	4618      	mov	r0, r3
 801189e:	3718      	adds	r7, #24
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	0801d780 	.word	0x0801d780
 80118a8:	0801d814 	.word	0x0801d814
 80118ac:	0801d7d0 	.word	0x0801d7d0
 80118b0:	0801d830 	.word	0x0801d830
 80118b4:	08020058 	.word	0x08020058
 80118b8:	08011cdb 	.word	0x08011cdb
 80118bc:	2000afe0 	.word	0x2000afe0
 80118c0:	2000afd8 	.word	0x2000afd8
 80118c4:	0801d854 	.word	0x0801d854
 80118c8:	0801d868 	.word	0x0801d868

080118cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80118d6:	6839      	ldr	r1, [r7, #0]
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f002 ff0f 	bl	80146fc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80118de:	6839      	ldr	r1, [r7, #0]
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f007 fc4b 	bl	801917c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80118e6:	bf00      	nop
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
	...

080118f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b086      	sub	sp, #24
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	60f8      	str	r0, [r7, #12]
 80118f8:	60b9      	str	r1, [r7, #8]
 80118fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d106      	bne.n	8011910 <netif_do_set_ipaddr+0x20>
 8011902:	4b1d      	ldr	r3, [pc, #116]	; (8011978 <netif_do_set_ipaddr+0x88>)
 8011904:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011908:	491c      	ldr	r1, [pc, #112]	; (801197c <netif_do_set_ipaddr+0x8c>)
 801190a:	481d      	ldr	r0, [pc, #116]	; (8011980 <netif_do_set_ipaddr+0x90>)
 801190c:	f00a faa2 	bl	801be54 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d106      	bne.n	8011924 <netif_do_set_ipaddr+0x34>
 8011916:	4b18      	ldr	r3, [pc, #96]	; (8011978 <netif_do_set_ipaddr+0x88>)
 8011918:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801191c:	4917      	ldr	r1, [pc, #92]	; (801197c <netif_do_set_ipaddr+0x8c>)
 801191e:	4818      	ldr	r0, [pc, #96]	; (8011980 <netif_do_set_ipaddr+0x90>)
 8011920:	f00a fa98 	bl	801be54 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	681a      	ldr	r2, [r3, #0]
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	3304      	adds	r3, #4
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	429a      	cmp	r2, r3
 8011930:	d01c      	beq.n	801196c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	3304      	adds	r3, #4
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011942:	f107 0314 	add.w	r3, r7, #20
 8011946:	4619      	mov	r1, r3
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f7ff ffbf 	bl	80118cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d002      	beq.n	801195a <netif_do_set_ipaddr+0x6a>
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	e000      	b.n	801195c <netif_do_set_ipaddr+0x6c>
 801195a:	2300      	movs	r3, #0
 801195c:	68fa      	ldr	r2, [r7, #12]
 801195e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011960:	2101      	movs	r1, #1
 8011962:	68f8      	ldr	r0, [r7, #12]
 8011964:	f000 f8d2 	bl	8011b0c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011968:	2301      	movs	r3, #1
 801196a:	e000      	b.n	801196e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801196c:	2300      	movs	r3, #0
}
 801196e:	4618      	mov	r0, r3
 8011970:	3718      	adds	r7, #24
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	0801d780 	.word	0x0801d780
 801197c:	0801d898 	.word	0x0801d898
 8011980:	0801d7d0 	.word	0x0801d7d0

08011984 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011984:	b480      	push	{r7}
 8011986:	b085      	sub	sp, #20
 8011988:	af00      	add	r7, sp, #0
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	60b9      	str	r1, [r7, #8]
 801198e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	681a      	ldr	r2, [r3, #0]
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	3308      	adds	r3, #8
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	429a      	cmp	r2, r3
 801199c:	d00a      	beq.n	80119b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d002      	beq.n	80119aa <netif_do_set_netmask+0x26>
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	e000      	b.n	80119ac <netif_do_set_netmask+0x28>
 80119aa:	2300      	movs	r3, #0
 80119ac:	68fa      	ldr	r2, [r7, #12]
 80119ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80119b0:	2301      	movs	r3, #1
 80119b2:	e000      	b.n	80119b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3714      	adds	r7, #20
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr

080119c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80119c2:	b480      	push	{r7}
 80119c4:	b085      	sub	sp, #20
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	60f8      	str	r0, [r7, #12]
 80119ca:	60b9      	str	r1, [r7, #8]
 80119cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	330c      	adds	r3, #12
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d00a      	beq.n	80119f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d002      	beq.n	80119e8 <netif_do_set_gw+0x26>
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	e000      	b.n	80119ea <netif_do_set_gw+0x28>
 80119e8:	2300      	movs	r3, #0
 80119ea:	68fa      	ldr	r2, [r7, #12]
 80119ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80119ee:	2301      	movs	r3, #1
 80119f0:	e000      	b.n	80119f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80119f2:	2300      	movs	r3, #0
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3714      	adds	r7, #20
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b088      	sub	sp, #32
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	60f8      	str	r0, [r7, #12]
 8011a08:	60b9      	str	r1, [r7, #8]
 8011a0a:	607a      	str	r2, [r7, #4]
 8011a0c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011a12:	2300      	movs	r3, #0
 8011a14:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d101      	bne.n	8011a20 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011a1c:	4b1c      	ldr	r3, [pc, #112]	; (8011a90 <netif_set_addr+0x90>)
 8011a1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d101      	bne.n	8011a2a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011a26:	4b1a      	ldr	r3, [pc, #104]	; (8011a90 <netif_set_addr+0x90>)
 8011a28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d101      	bne.n	8011a34 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011a30:	4b17      	ldr	r3, [pc, #92]	; (8011a90 <netif_set_addr+0x90>)
 8011a32:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d003      	beq.n	8011a42 <netif_set_addr+0x42>
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d101      	bne.n	8011a46 <netif_set_addr+0x46>
 8011a42:	2301      	movs	r3, #1
 8011a44:	e000      	b.n	8011a48 <netif_set_addr+0x48>
 8011a46:	2300      	movs	r3, #0
 8011a48:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d006      	beq.n	8011a5e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011a50:	f107 0310 	add.w	r3, r7, #16
 8011a54:	461a      	mov	r2, r3
 8011a56:	68b9      	ldr	r1, [r7, #8]
 8011a58:	68f8      	ldr	r0, [r7, #12]
 8011a5a:	f7ff ff49 	bl	80118f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011a5e:	69fa      	ldr	r2, [r7, #28]
 8011a60:	6879      	ldr	r1, [r7, #4]
 8011a62:	68f8      	ldr	r0, [r7, #12]
 8011a64:	f7ff ff8e 	bl	8011984 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011a68:	69ba      	ldr	r2, [r7, #24]
 8011a6a:	6839      	ldr	r1, [r7, #0]
 8011a6c:	68f8      	ldr	r0, [r7, #12]
 8011a6e:	f7ff ffa8 	bl	80119c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d106      	bne.n	8011a86 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011a78:	f107 0310 	add.w	r3, r7, #16
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	68b9      	ldr	r1, [r7, #8]
 8011a80:	68f8      	ldr	r0, [r7, #12]
 8011a82:	f7ff ff35 	bl	80118f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011a86:	bf00      	nop
 8011a88:	3720      	adds	r7, #32
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop
 8011a90:	08020058 	.word	0x08020058

08011a94 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011a94:	b480      	push	{r7}
 8011a96:	b083      	sub	sp, #12
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011a9c:	4a04      	ldr	r2, [pc, #16]	; (8011ab0 <netif_set_default+0x1c>)
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011aa2:	bf00      	nop
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop
 8011ab0:	2000afdc 	.word	0x2000afdc

08011ab4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d107      	bne.n	8011ad2 <netif_set_up+0x1e>
 8011ac2:	4b0f      	ldr	r3, [pc, #60]	; (8011b00 <netif_set_up+0x4c>)
 8011ac4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011ac8:	490e      	ldr	r1, [pc, #56]	; (8011b04 <netif_set_up+0x50>)
 8011aca:	480f      	ldr	r0, [pc, #60]	; (8011b08 <netif_set_up+0x54>)
 8011acc:	f00a f9c2 	bl	801be54 <iprintf>
 8011ad0:	e013      	b.n	8011afa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ad8:	f003 0301 	and.w	r3, r3, #1
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d10c      	bne.n	8011afa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ae6:	f043 0301 	orr.w	r3, r3, #1
 8011aea:	b2da      	uxtb	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011af2:	2103      	movs	r1, #3
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f000 f809 	bl	8011b0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	0801d780 	.word	0x0801d780
 8011b04:	0801d908 	.word	0x0801d908
 8011b08:	0801d7d0 	.word	0x0801d7d0

08011b0c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	460b      	mov	r3, r1
 8011b16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d106      	bne.n	8011b2c <netif_issue_reports+0x20>
 8011b1e:	4b18      	ldr	r3, [pc, #96]	; (8011b80 <netif_issue_reports+0x74>)
 8011b20:	f240 326d 	movw	r2, #877	; 0x36d
 8011b24:	4917      	ldr	r1, [pc, #92]	; (8011b84 <netif_issue_reports+0x78>)
 8011b26:	4818      	ldr	r0, [pc, #96]	; (8011b88 <netif_issue_reports+0x7c>)
 8011b28:	f00a f994 	bl	801be54 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b32:	f003 0304 	and.w	r3, r3, #4
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d01e      	beq.n	8011b78 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b40:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d017      	beq.n	8011b78 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011b48:	78fb      	ldrb	r3, [r7, #3]
 8011b4a:	f003 0301 	and.w	r3, r3, #1
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d013      	beq.n	8011b7a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	3304      	adds	r3, #4
 8011b56:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d00e      	beq.n	8011b7a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b62:	f003 0308 	and.w	r3, r3, #8
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d007      	beq.n	8011b7a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	3304      	adds	r3, #4
 8011b6e:	4619      	mov	r1, r3
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f008 fa6d 	bl	801a050 <etharp_request>
 8011b76:	e000      	b.n	8011b7a <netif_issue_reports+0x6e>
    return;
 8011b78:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011b7a:	3708      	adds	r7, #8
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	0801d780 	.word	0x0801d780
 8011b84:	0801d924 	.word	0x0801d924
 8011b88:	0801d7d0 	.word	0x0801d7d0

08011b8c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d107      	bne.n	8011baa <netif_set_down+0x1e>
 8011b9a:	4b12      	ldr	r3, [pc, #72]	; (8011be4 <netif_set_down+0x58>)
 8011b9c:	f240 329b 	movw	r2, #923	; 0x39b
 8011ba0:	4911      	ldr	r1, [pc, #68]	; (8011be8 <netif_set_down+0x5c>)
 8011ba2:	4812      	ldr	r0, [pc, #72]	; (8011bec <netif_set_down+0x60>)
 8011ba4:	f00a f956 	bl	801be54 <iprintf>
 8011ba8:	e019      	b.n	8011bde <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bb0:	f003 0301 	and.w	r3, r3, #1
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d012      	beq.n	8011bde <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bbe:	f023 0301 	bic.w	r3, r3, #1
 8011bc2:	b2da      	uxtb	r2, r3
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bd0:	f003 0308 	and.w	r3, r3, #8
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d002      	beq.n	8011bde <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f007 fdf7 	bl	80197cc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}
 8011be4:	0801d780 	.word	0x0801d780
 8011be8:	0801d948 	.word	0x0801d948
 8011bec:	0801d7d0 	.word	0x0801d7d0

08011bf0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d107      	bne.n	8011c0e <netif_set_link_up+0x1e>
 8011bfe:	4b13      	ldr	r3, [pc, #76]	; (8011c4c <netif_set_link_up+0x5c>)
 8011c00:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011c04:	4912      	ldr	r1, [pc, #72]	; (8011c50 <netif_set_link_up+0x60>)
 8011c06:	4813      	ldr	r0, [pc, #76]	; (8011c54 <netif_set_link_up+0x64>)
 8011c08:	f00a f924 	bl	801be54 <iprintf>
 8011c0c:	e01b      	b.n	8011c46 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c14:	f003 0304 	and.w	r3, r3, #4
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d114      	bne.n	8011c46 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c22:	f043 0304 	orr.w	r3, r3, #4
 8011c26:	b2da      	uxtb	r2, r3
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011c2e:	2103      	movs	r1, #3
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7ff ff6b 	bl	8011b0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	69db      	ldr	r3, [r3, #28]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d003      	beq.n	8011c46 <netif_set_link_up+0x56>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	69db      	ldr	r3, [r3, #28]
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011c46:	3708      	adds	r7, #8
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	0801d780 	.word	0x0801d780
 8011c50:	0801d968 	.word	0x0801d968
 8011c54:	0801d7d0 	.word	0x0801d7d0

08011c58 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d107      	bne.n	8011c76 <netif_set_link_down+0x1e>
 8011c66:	4b11      	ldr	r3, [pc, #68]	; (8011cac <netif_set_link_down+0x54>)
 8011c68:	f240 4206 	movw	r2, #1030	; 0x406
 8011c6c:	4910      	ldr	r1, [pc, #64]	; (8011cb0 <netif_set_link_down+0x58>)
 8011c6e:	4811      	ldr	r0, [pc, #68]	; (8011cb4 <netif_set_link_down+0x5c>)
 8011c70:	f00a f8f0 	bl	801be54 <iprintf>
 8011c74:	e017      	b.n	8011ca6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c7c:	f003 0304 	and.w	r3, r3, #4
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d010      	beq.n	8011ca6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c8a:	f023 0304 	bic.w	r3, r3, #4
 8011c8e:	b2da      	uxtb	r2, r3
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	69db      	ldr	r3, [r3, #28]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d003      	beq.n	8011ca6 <netif_set_link_down+0x4e>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	69db      	ldr	r3, [r3, #28]
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011ca6:	3708      	adds	r7, #8
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	0801d780 	.word	0x0801d780
 8011cb0:	0801d98c 	.word	0x0801d98c
 8011cb4:	0801d7d0 	.word	0x0801d7d0

08011cb8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d002      	beq.n	8011cce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	683a      	ldr	r2, [r7, #0]
 8011ccc:	61da      	str	r2, [r3, #28]
  }
}
 8011cce:	bf00      	nop
 8011cd0:	370c      	adds	r7, #12
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr

08011cda <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011cda:	b480      	push	{r7}
 8011cdc:	b085      	sub	sp, #20
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	60f8      	str	r0, [r7, #12]
 8011ce2:	60b9      	str	r1, [r7, #8]
 8011ce4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011ce6:	f06f 030b 	mvn.w	r3, #11
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3714      	adds	r7, #20
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr
	...

08011cf8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	4603      	mov	r3, r0
 8011d00:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011d02:	79fb      	ldrb	r3, [r7, #7]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d013      	beq.n	8011d30 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011d08:	4b0d      	ldr	r3, [pc, #52]	; (8011d40 <netif_get_by_index+0x48>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	60fb      	str	r3, [r7, #12]
 8011d0e:	e00c      	b.n	8011d2a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011d16:	3301      	adds	r3, #1
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	79fa      	ldrb	r2, [r7, #7]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d101      	bne.n	8011d24 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	e006      	b.n	8011d32 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	60fb      	str	r3, [r7, #12]
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d1ef      	bne.n	8011d10 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3714      	adds	r7, #20
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	2000afd8 	.word	0x2000afd8

08011d44 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011d4a:	4b0c      	ldr	r3, [pc, #48]	; (8011d7c <pbuf_free_ooseq+0x38>)
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011d50:	4b0b      	ldr	r3, [pc, #44]	; (8011d80 <pbuf_free_ooseq+0x3c>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	607b      	str	r3, [r7, #4]
 8011d56:	e00a      	b.n	8011d6e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d003      	beq.n	8011d68 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f002 fd09 	bl	8014778 <tcp_free_ooseq>
      return;
 8011d66:	e005      	b.n	8011d74 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	68db      	ldr	r3, [r3, #12]
 8011d6c:	607b      	str	r3, [r7, #4]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d1f1      	bne.n	8011d58 <pbuf_free_ooseq+0x14>
    }
  }
}
 8011d74:	3708      	adds	r7, #8
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	2000afe1 	.word	0x2000afe1
 8011d80:	2000aff0 	.word	0x2000aff0

08011d84 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011d84:	b480      	push	{r7}
 8011d86:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8011d88:	4b03      	ldr	r3, [pc, #12]	; (8011d98 <pbuf_pool_is_empty+0x14>)
 8011d8a:	2201      	movs	r2, #1
 8011d8c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011d8e:	bf00      	nop
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr
 8011d98:	2000afe1 	.word	0x2000afe1

08011d9c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b085      	sub	sp, #20
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	60b9      	str	r1, [r7, #8]
 8011da6:	4611      	mov	r1, r2
 8011da8:	461a      	mov	r2, r3
 8011daa:	460b      	mov	r3, r1
 8011dac:	80fb      	strh	r3, [r7, #6]
 8011dae:	4613      	mov	r3, r2
 8011db0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2200      	movs	r2, #0
 8011db6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	68ba      	ldr	r2, [r7, #8]
 8011dbc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	88fa      	ldrh	r2, [r7, #6]
 8011dc2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	88ba      	ldrh	r2, [r7, #4]
 8011dc8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011dca:	8b3b      	ldrh	r3, [r7, #24]
 8011dcc:	b2da      	uxtb	r2, r3
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	7f3a      	ldrb	r2, [r7, #28]
 8011dd6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2201      	movs	r2, #1
 8011ddc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	2200      	movs	r2, #0
 8011de2:	73da      	strb	r2, [r3, #15]
}
 8011de4:	bf00      	nop
 8011de6:	3714      	adds	r7, #20
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr

08011df0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b08c      	sub	sp, #48	; 0x30
 8011df4:	af02      	add	r7, sp, #8
 8011df6:	4603      	mov	r3, r0
 8011df8:	71fb      	strb	r3, [r7, #7]
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	80bb      	strh	r3, [r7, #4]
 8011dfe:	4613      	mov	r3, r2
 8011e00:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011e02:	79fb      	ldrb	r3, [r7, #7]
 8011e04:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011e06:	887b      	ldrh	r3, [r7, #2]
 8011e08:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011e0c:	d07f      	beq.n	8011f0e <pbuf_alloc+0x11e>
 8011e0e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011e12:	f300 80c8 	bgt.w	8011fa6 <pbuf_alloc+0x1b6>
 8011e16:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011e1a:	d010      	beq.n	8011e3e <pbuf_alloc+0x4e>
 8011e1c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011e20:	f300 80c1 	bgt.w	8011fa6 <pbuf_alloc+0x1b6>
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d002      	beq.n	8011e2e <pbuf_alloc+0x3e>
 8011e28:	2b41      	cmp	r3, #65	; 0x41
 8011e2a:	f040 80bc 	bne.w	8011fa6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011e2e:	887a      	ldrh	r2, [r7, #2]
 8011e30:	88bb      	ldrh	r3, [r7, #4]
 8011e32:	4619      	mov	r1, r3
 8011e34:	2000      	movs	r0, #0
 8011e36:	f000 f8d1 	bl	8011fdc <pbuf_alloc_reference>
 8011e3a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8011e3c:	e0bd      	b.n	8011fba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011e42:	2300      	movs	r3, #0
 8011e44:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011e46:	88bb      	ldrh	r3, [r7, #4]
 8011e48:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011e4a:	2008      	movs	r0, #8
 8011e4c:	f7ff fbce 	bl	80115ec <memp_malloc>
 8011e50:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d109      	bne.n	8011e6c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011e58:	f7ff ff94 	bl	8011d84 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d002      	beq.n	8011e68 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e64:	f000 faa8 	bl	80123b8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	e0a7      	b.n	8011fbc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011e6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e6e:	3303      	adds	r3, #3
 8011e70:	b29b      	uxth	r3, r3
 8011e72:	f023 0303 	bic.w	r3, r3, #3
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8011e7c:	b29b      	uxth	r3, r3
 8011e7e:	8b7a      	ldrh	r2, [r7, #26]
 8011e80:	4293      	cmp	r3, r2
 8011e82:	bf28      	it	cs
 8011e84:	4613      	movcs	r3, r2
 8011e86:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011e88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e8a:	3310      	adds	r3, #16
 8011e8c:	693a      	ldr	r2, [r7, #16]
 8011e8e:	4413      	add	r3, r2
 8011e90:	3303      	adds	r3, #3
 8011e92:	f023 0303 	bic.w	r3, r3, #3
 8011e96:	4618      	mov	r0, r3
 8011e98:	89f9      	ldrh	r1, [r7, #14]
 8011e9a:	8b7a      	ldrh	r2, [r7, #26]
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	9301      	str	r3, [sp, #4]
 8011ea0:	887b      	ldrh	r3, [r7, #2]
 8011ea2:	9300      	str	r3, [sp, #0]
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	4601      	mov	r1, r0
 8011ea8:	6938      	ldr	r0, [r7, #16]
 8011eaa:	f7ff ff77 	bl	8011d9c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	f003 0303 	and.w	r3, r3, #3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d006      	beq.n	8011ec8 <pbuf_alloc+0xd8>
 8011eba:	4b42      	ldr	r3, [pc, #264]	; (8011fc4 <pbuf_alloc+0x1d4>)
 8011ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ec0:	4941      	ldr	r1, [pc, #260]	; (8011fc8 <pbuf_alloc+0x1d8>)
 8011ec2:	4842      	ldr	r0, [pc, #264]	; (8011fcc <pbuf_alloc+0x1dc>)
 8011ec4:	f009 ffc6 	bl	801be54 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011eca:	3303      	adds	r3, #3
 8011ecc:	f023 0303 	bic.w	r3, r3, #3
 8011ed0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011ed4:	d106      	bne.n	8011ee4 <pbuf_alloc+0xf4>
 8011ed6:	4b3b      	ldr	r3, [pc, #236]	; (8011fc4 <pbuf_alloc+0x1d4>)
 8011ed8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011edc:	493c      	ldr	r1, [pc, #240]	; (8011fd0 <pbuf_alloc+0x1e0>)
 8011ede:	483b      	ldr	r0, [pc, #236]	; (8011fcc <pbuf_alloc+0x1dc>)
 8011ee0:	f009 ffb8 	bl	801be54 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d102      	bne.n	8011ef0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	627b      	str	r3, [r7, #36]	; 0x24
 8011eee:	e002      	b.n	8011ef6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	693a      	ldr	r2, [r7, #16]
 8011ef4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011efa:	8b7a      	ldrh	r2, [r7, #26]
 8011efc:	89fb      	ldrh	r3, [r7, #14]
 8011efe:	1ad3      	subs	r3, r2, r3
 8011f00:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011f02:	2300      	movs	r3, #0
 8011f04:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011f06:	8b7b      	ldrh	r3, [r7, #26]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d19e      	bne.n	8011e4a <pbuf_alloc+0x5a>
      break;
 8011f0c:	e055      	b.n	8011fba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f10:	3303      	adds	r3, #3
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	f023 0303 	bic.w	r3, r3, #3
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	88bb      	ldrh	r3, [r7, #4]
 8011f1c:	3303      	adds	r3, #3
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	f023 0303 	bic.w	r3, r3, #3
 8011f24:	b29b      	uxth	r3, r3
 8011f26:	4413      	add	r3, r2
 8011f28:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011f2a:	8b3b      	ldrh	r3, [r7, #24]
 8011f2c:	3310      	adds	r3, #16
 8011f2e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011f30:	8b3a      	ldrh	r2, [r7, #24]
 8011f32:	88bb      	ldrh	r3, [r7, #4]
 8011f34:	3303      	adds	r3, #3
 8011f36:	f023 0303 	bic.w	r3, r3, #3
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d306      	bcc.n	8011f4c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011f3e:	8afa      	ldrh	r2, [r7, #22]
 8011f40:	88bb      	ldrh	r3, [r7, #4]
 8011f42:	3303      	adds	r3, #3
 8011f44:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d201      	bcs.n	8011f50 <pbuf_alloc+0x160>
        return NULL;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	e035      	b.n	8011fbc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011f50:	8afb      	ldrh	r3, [r7, #22]
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7ff f9ba 	bl	80112cc <mem_malloc>
 8011f58:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d101      	bne.n	8011f64 <pbuf_alloc+0x174>
        return NULL;
 8011f60:	2300      	movs	r3, #0
 8011f62:	e02b      	b.n	8011fbc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f66:	3310      	adds	r3, #16
 8011f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f6a:	4413      	add	r3, r2
 8011f6c:	3303      	adds	r3, #3
 8011f6e:	f023 0303 	bic.w	r3, r3, #3
 8011f72:	4618      	mov	r0, r3
 8011f74:	88b9      	ldrh	r1, [r7, #4]
 8011f76:	88ba      	ldrh	r2, [r7, #4]
 8011f78:	2300      	movs	r3, #0
 8011f7a:	9301      	str	r3, [sp, #4]
 8011f7c:	887b      	ldrh	r3, [r7, #2]
 8011f7e:	9300      	str	r3, [sp, #0]
 8011f80:	460b      	mov	r3, r1
 8011f82:	4601      	mov	r1, r0
 8011f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f86:	f7ff ff09 	bl	8011d9c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	f003 0303 	and.w	r3, r3, #3
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d010      	beq.n	8011fb8 <pbuf_alloc+0x1c8>
 8011f96:	4b0b      	ldr	r3, [pc, #44]	; (8011fc4 <pbuf_alloc+0x1d4>)
 8011f98:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011f9c:	490d      	ldr	r1, [pc, #52]	; (8011fd4 <pbuf_alloc+0x1e4>)
 8011f9e:	480b      	ldr	r0, [pc, #44]	; (8011fcc <pbuf_alloc+0x1dc>)
 8011fa0:	f009 ff58 	bl	801be54 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011fa4:	e008      	b.n	8011fb8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011fa6:	4b07      	ldr	r3, [pc, #28]	; (8011fc4 <pbuf_alloc+0x1d4>)
 8011fa8:	f240 1227 	movw	r2, #295	; 0x127
 8011fac:	490a      	ldr	r1, [pc, #40]	; (8011fd8 <pbuf_alloc+0x1e8>)
 8011fae:	4807      	ldr	r0, [pc, #28]	; (8011fcc <pbuf_alloc+0x1dc>)
 8011fb0:	f009 ff50 	bl	801be54 <iprintf>
      return NULL;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	e001      	b.n	8011fbc <pbuf_alloc+0x1cc>
      break;
 8011fb8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3728      	adds	r7, #40	; 0x28
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	0801d9b0 	.word	0x0801d9b0
 8011fc8:	0801d9e0 	.word	0x0801d9e0
 8011fcc:	0801da10 	.word	0x0801da10
 8011fd0:	0801da38 	.word	0x0801da38
 8011fd4:	0801da6c 	.word	0x0801da6c
 8011fd8:	0801da98 	.word	0x0801da98

08011fdc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b086      	sub	sp, #24
 8011fe0:	af02      	add	r7, sp, #8
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	460b      	mov	r3, r1
 8011fe6:	807b      	strh	r3, [r7, #2]
 8011fe8:	4613      	mov	r3, r2
 8011fea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011fec:	883b      	ldrh	r3, [r7, #0]
 8011fee:	2b41      	cmp	r3, #65	; 0x41
 8011ff0:	d009      	beq.n	8012006 <pbuf_alloc_reference+0x2a>
 8011ff2:	883b      	ldrh	r3, [r7, #0]
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d006      	beq.n	8012006 <pbuf_alloc_reference+0x2a>
 8011ff8:	4b0f      	ldr	r3, [pc, #60]	; (8012038 <pbuf_alloc_reference+0x5c>)
 8011ffa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011ffe:	490f      	ldr	r1, [pc, #60]	; (801203c <pbuf_alloc_reference+0x60>)
 8012000:	480f      	ldr	r0, [pc, #60]	; (8012040 <pbuf_alloc_reference+0x64>)
 8012002:	f009 ff27 	bl	801be54 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012006:	2007      	movs	r0, #7
 8012008:	f7ff faf0 	bl	80115ec <memp_malloc>
 801200c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d101      	bne.n	8012018 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012014:	2300      	movs	r3, #0
 8012016:	e00b      	b.n	8012030 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012018:	8879      	ldrh	r1, [r7, #2]
 801201a:	887a      	ldrh	r2, [r7, #2]
 801201c:	2300      	movs	r3, #0
 801201e:	9301      	str	r3, [sp, #4]
 8012020:	883b      	ldrh	r3, [r7, #0]
 8012022:	9300      	str	r3, [sp, #0]
 8012024:	460b      	mov	r3, r1
 8012026:	6879      	ldr	r1, [r7, #4]
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f7ff feb7 	bl	8011d9c <pbuf_init_alloced_pbuf>
  return p;
 801202e:	68fb      	ldr	r3, [r7, #12]
}
 8012030:	4618      	mov	r0, r3
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	0801d9b0 	.word	0x0801d9b0
 801203c:	0801dab4 	.word	0x0801dab4
 8012040:	0801da10 	.word	0x0801da10

08012044 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b088      	sub	sp, #32
 8012048:	af02      	add	r7, sp, #8
 801204a:	607b      	str	r3, [r7, #4]
 801204c:	4603      	mov	r3, r0
 801204e:	73fb      	strb	r3, [r7, #15]
 8012050:	460b      	mov	r3, r1
 8012052:	81bb      	strh	r3, [r7, #12]
 8012054:	4613      	mov	r3, r2
 8012056:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012058:	7bfb      	ldrb	r3, [r7, #15]
 801205a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801205c:	8a7b      	ldrh	r3, [r7, #18]
 801205e:	3303      	adds	r3, #3
 8012060:	f023 0203 	bic.w	r2, r3, #3
 8012064:	89bb      	ldrh	r3, [r7, #12]
 8012066:	441a      	add	r2, r3
 8012068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801206a:	429a      	cmp	r2, r3
 801206c:	d901      	bls.n	8012072 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801206e:	2300      	movs	r3, #0
 8012070:	e018      	b.n	80120a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012072:	6a3b      	ldr	r3, [r7, #32]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d007      	beq.n	8012088 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012078:	8a7b      	ldrh	r3, [r7, #18]
 801207a:	3303      	adds	r3, #3
 801207c:	f023 0303 	bic.w	r3, r3, #3
 8012080:	6a3a      	ldr	r2, [r7, #32]
 8012082:	4413      	add	r3, r2
 8012084:	617b      	str	r3, [r7, #20]
 8012086:	e001      	b.n	801208c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012088:	2300      	movs	r3, #0
 801208a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	89b9      	ldrh	r1, [r7, #12]
 8012090:	89ba      	ldrh	r2, [r7, #12]
 8012092:	2302      	movs	r3, #2
 8012094:	9301      	str	r3, [sp, #4]
 8012096:	897b      	ldrh	r3, [r7, #10]
 8012098:	9300      	str	r3, [sp, #0]
 801209a:	460b      	mov	r3, r1
 801209c:	6979      	ldr	r1, [r7, #20]
 801209e:	f7ff fe7d 	bl	8011d9c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80120a2:	687b      	ldr	r3, [r7, #4]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3718      	adds	r7, #24
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b084      	sub	sp, #16
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	460b      	mov	r3, r1
 80120b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d106      	bne.n	80120cc <pbuf_realloc+0x20>
 80120be:	4b3a      	ldr	r3, [pc, #232]	; (80121a8 <pbuf_realloc+0xfc>)
 80120c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80120c4:	4939      	ldr	r1, [pc, #228]	; (80121ac <pbuf_realloc+0x100>)
 80120c6:	483a      	ldr	r0, [pc, #232]	; (80121b0 <pbuf_realloc+0x104>)
 80120c8:	f009 fec4 	bl	801be54 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	891b      	ldrh	r3, [r3, #8]
 80120d0:	887a      	ldrh	r2, [r7, #2]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d263      	bcs.n	801219e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	891a      	ldrh	r2, [r3, #8]
 80120da:	887b      	ldrh	r3, [r7, #2]
 80120dc:	1ad3      	subs	r3, r2, r3
 80120de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80120e0:	887b      	ldrh	r3, [r7, #2]
 80120e2:	817b      	strh	r3, [r7, #10]
  q = p;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80120e8:	e018      	b.n	801211c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	895b      	ldrh	r3, [r3, #10]
 80120ee:	897a      	ldrh	r2, [r7, #10]
 80120f0:	1ad3      	subs	r3, r2, r3
 80120f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	891a      	ldrh	r2, [r3, #8]
 80120f8:	893b      	ldrh	r3, [r7, #8]
 80120fa:	1ad3      	subs	r3, r2, r3
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d106      	bne.n	801211c <pbuf_realloc+0x70>
 801210e:	4b26      	ldr	r3, [pc, #152]	; (80121a8 <pbuf_realloc+0xfc>)
 8012110:	f240 12af 	movw	r2, #431	; 0x1af
 8012114:	4927      	ldr	r1, [pc, #156]	; (80121b4 <pbuf_realloc+0x108>)
 8012116:	4826      	ldr	r0, [pc, #152]	; (80121b0 <pbuf_realloc+0x104>)
 8012118:	f009 fe9c 	bl	801be54 <iprintf>
  while (rem_len > q->len) {
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	895b      	ldrh	r3, [r3, #10]
 8012120:	897a      	ldrh	r2, [r7, #10]
 8012122:	429a      	cmp	r2, r3
 8012124:	d8e1      	bhi.n	80120ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	7b1b      	ldrb	r3, [r3, #12]
 801212a:	f003 030f 	and.w	r3, r3, #15
 801212e:	2b00      	cmp	r3, #0
 8012130:	d121      	bne.n	8012176 <pbuf_realloc+0xca>
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	895b      	ldrh	r3, [r3, #10]
 8012136:	897a      	ldrh	r2, [r7, #10]
 8012138:	429a      	cmp	r2, r3
 801213a:	d01c      	beq.n	8012176 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	7b5b      	ldrb	r3, [r3, #13]
 8012140:	f003 0302 	and.w	r3, r3, #2
 8012144:	2b00      	cmp	r3, #0
 8012146:	d116      	bne.n	8012176 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	685a      	ldr	r2, [r3, #4]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	1ad3      	subs	r3, r2, r3
 8012150:	b29a      	uxth	r2, r3
 8012152:	897b      	ldrh	r3, [r7, #10]
 8012154:	4413      	add	r3, r2
 8012156:	b29b      	uxth	r3, r3
 8012158:	4619      	mov	r1, r3
 801215a:	68f8      	ldr	r0, [r7, #12]
 801215c:	f7fe ffba 	bl	80110d4 <mem_trim>
 8012160:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d106      	bne.n	8012176 <pbuf_realloc+0xca>
 8012168:	4b0f      	ldr	r3, [pc, #60]	; (80121a8 <pbuf_realloc+0xfc>)
 801216a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801216e:	4912      	ldr	r1, [pc, #72]	; (80121b8 <pbuf_realloc+0x10c>)
 8012170:	480f      	ldr	r0, [pc, #60]	; (80121b0 <pbuf_realloc+0x104>)
 8012172:	f009 fe6f 	bl	801be54 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	897a      	ldrh	r2, [r7, #10]
 801217a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	895a      	ldrh	r2, [r3, #10]
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d004      	beq.n	8012196 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4618      	mov	r0, r3
 8012192:	f000 f911 	bl	80123b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2200      	movs	r2, #0
 801219a:	601a      	str	r2, [r3, #0]
 801219c:	e000      	b.n	80121a0 <pbuf_realloc+0xf4>
    return;
 801219e:	bf00      	nop

}
 80121a0:	3710      	adds	r7, #16
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	0801d9b0 	.word	0x0801d9b0
 80121ac:	0801dac8 	.word	0x0801dac8
 80121b0:	0801da10 	.word	0x0801da10
 80121b4:	0801dae0 	.word	0x0801dae0
 80121b8:	0801daf8 	.word	0x0801daf8

080121bc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b086      	sub	sp, #24
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	60f8      	str	r0, [r7, #12]
 80121c4:	60b9      	str	r1, [r7, #8]
 80121c6:	4613      	mov	r3, r2
 80121c8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d106      	bne.n	80121de <pbuf_add_header_impl+0x22>
 80121d0:	4b2b      	ldr	r3, [pc, #172]	; (8012280 <pbuf_add_header_impl+0xc4>)
 80121d2:	f240 12df 	movw	r2, #479	; 0x1df
 80121d6:	492b      	ldr	r1, [pc, #172]	; (8012284 <pbuf_add_header_impl+0xc8>)
 80121d8:	482b      	ldr	r0, [pc, #172]	; (8012288 <pbuf_add_header_impl+0xcc>)
 80121da:	f009 fe3b 	bl	801be54 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d003      	beq.n	80121ec <pbuf_add_header_impl+0x30>
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121ea:	d301      	bcc.n	80121f0 <pbuf_add_header_impl+0x34>
    return 1;
 80121ec:	2301      	movs	r3, #1
 80121ee:	e043      	b.n	8012278 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d101      	bne.n	80121fa <pbuf_add_header_impl+0x3e>
    return 0;
 80121f6:	2300      	movs	r3, #0
 80121f8:	e03e      	b.n	8012278 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	891a      	ldrh	r2, [r3, #8]
 8012202:	8a7b      	ldrh	r3, [r7, #18]
 8012204:	4413      	add	r3, r2
 8012206:	b29b      	uxth	r3, r3
 8012208:	8a7a      	ldrh	r2, [r7, #18]
 801220a:	429a      	cmp	r2, r3
 801220c:	d901      	bls.n	8012212 <pbuf_add_header_impl+0x56>
    return 1;
 801220e:	2301      	movs	r3, #1
 8012210:	e032      	b.n	8012278 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	7b1b      	ldrb	r3, [r3, #12]
 8012216:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012218:	8a3b      	ldrh	r3, [r7, #16]
 801221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801221e:	2b00      	cmp	r3, #0
 8012220:	d00c      	beq.n	801223c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	685a      	ldr	r2, [r3, #4]
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	425b      	negs	r3, r3
 801222a:	4413      	add	r3, r2
 801222c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	3310      	adds	r3, #16
 8012232:	697a      	ldr	r2, [r7, #20]
 8012234:	429a      	cmp	r2, r3
 8012236:	d20d      	bcs.n	8012254 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012238:	2301      	movs	r3, #1
 801223a:	e01d      	b.n	8012278 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801223c:	79fb      	ldrb	r3, [r7, #7]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d006      	beq.n	8012250 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	685a      	ldr	r2, [r3, #4]
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	425b      	negs	r3, r3
 801224a:	4413      	add	r3, r2
 801224c:	617b      	str	r3, [r7, #20]
 801224e:	e001      	b.n	8012254 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012250:	2301      	movs	r3, #1
 8012252:	e011      	b.n	8012278 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	697a      	ldr	r2, [r7, #20]
 8012258:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	895a      	ldrh	r2, [r3, #10]
 801225e:	8a7b      	ldrh	r3, [r7, #18]
 8012260:	4413      	add	r3, r2
 8012262:	b29a      	uxth	r2, r3
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	891a      	ldrh	r2, [r3, #8]
 801226c:	8a7b      	ldrh	r3, [r7, #18]
 801226e:	4413      	add	r3, r2
 8012270:	b29a      	uxth	r2, r3
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	811a      	strh	r2, [r3, #8]


  return 0;
 8012276:	2300      	movs	r3, #0
}
 8012278:	4618      	mov	r0, r3
 801227a:	3718      	adds	r7, #24
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	0801d9b0 	.word	0x0801d9b0
 8012284:	0801db14 	.word	0x0801db14
 8012288:	0801da10 	.word	0x0801da10

0801228c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012296:	2200      	movs	r2, #0
 8012298:	6839      	ldr	r1, [r7, #0]
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f7ff ff8e 	bl	80121bc <pbuf_add_header_impl>
 80122a0:	4603      	mov	r3, r0
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3708      	adds	r7, #8
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
	...

080122ac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b084      	sub	sp, #16
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d106      	bne.n	80122ca <pbuf_remove_header+0x1e>
 80122bc:	4b20      	ldr	r3, [pc, #128]	; (8012340 <pbuf_remove_header+0x94>)
 80122be:	f240 224b 	movw	r2, #587	; 0x24b
 80122c2:	4920      	ldr	r1, [pc, #128]	; (8012344 <pbuf_remove_header+0x98>)
 80122c4:	4820      	ldr	r0, [pc, #128]	; (8012348 <pbuf_remove_header+0x9c>)
 80122c6:	f009 fdc5 	bl	801be54 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d003      	beq.n	80122d8 <pbuf_remove_header+0x2c>
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122d6:	d301      	bcc.n	80122dc <pbuf_remove_header+0x30>
    return 1;
 80122d8:	2301      	movs	r3, #1
 80122da:	e02c      	b.n	8012336 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d101      	bne.n	80122e6 <pbuf_remove_header+0x3a>
    return 0;
 80122e2:	2300      	movs	r3, #0
 80122e4:	e027      	b.n	8012336 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	895b      	ldrh	r3, [r3, #10]
 80122ee:	89fa      	ldrh	r2, [r7, #14]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d908      	bls.n	8012306 <pbuf_remove_header+0x5a>
 80122f4:	4b12      	ldr	r3, [pc, #72]	; (8012340 <pbuf_remove_header+0x94>)
 80122f6:	f240 2255 	movw	r2, #597	; 0x255
 80122fa:	4914      	ldr	r1, [pc, #80]	; (801234c <pbuf_remove_header+0xa0>)
 80122fc:	4812      	ldr	r0, [pc, #72]	; (8012348 <pbuf_remove_header+0x9c>)
 80122fe:	f009 fda9 	bl	801be54 <iprintf>
 8012302:	2301      	movs	r3, #1
 8012304:	e017      	b.n	8012336 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	685a      	ldr	r2, [r3, #4]
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	441a      	add	r2, r3
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	895a      	ldrh	r2, [r3, #10]
 801231c:	89fb      	ldrh	r3, [r7, #14]
 801231e:	1ad3      	subs	r3, r2, r3
 8012320:	b29a      	uxth	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	891a      	ldrh	r2, [r3, #8]
 801232a:	89fb      	ldrh	r3, [r7, #14]
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	b29a      	uxth	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012334:	2300      	movs	r3, #0
}
 8012336:	4618      	mov	r0, r3
 8012338:	3710      	adds	r7, #16
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	0801d9b0 	.word	0x0801d9b0
 8012344:	0801db14 	.word	0x0801db14
 8012348:	0801da10 	.word	0x0801da10
 801234c:	0801db20 	.word	0x0801db20

08012350 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	460b      	mov	r3, r1
 801235a:	807b      	strh	r3, [r7, #2]
 801235c:	4613      	mov	r3, r2
 801235e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012364:	2b00      	cmp	r3, #0
 8012366:	da08      	bge.n	801237a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012368:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801236c:	425b      	negs	r3, r3
 801236e:	4619      	mov	r1, r3
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7ff ff9b 	bl	80122ac <pbuf_remove_header>
 8012376:	4603      	mov	r3, r0
 8012378:	e007      	b.n	801238a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801237a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801237e:	787a      	ldrb	r2, [r7, #1]
 8012380:	4619      	mov	r1, r3
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f7ff ff1a 	bl	80121bc <pbuf_add_header_impl>
 8012388:	4603      	mov	r3, r0
  }
}
 801238a:	4618      	mov	r0, r3
 801238c:	3708      	adds	r7, #8
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}

08012392 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012392:	b580      	push	{r7, lr}
 8012394:	b082      	sub	sp, #8
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
 801239a:	460b      	mov	r3, r1
 801239c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801239e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80123a2:	2201      	movs	r2, #1
 80123a4:	4619      	mov	r1, r3
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f7ff ffd2 	bl	8012350 <pbuf_header_impl>
 80123ac:	4603      	mov	r3, r0
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3708      	adds	r7, #8
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
	...

080123b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d10b      	bne.n	80123de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d106      	bne.n	80123da <pbuf_free+0x22>
 80123cc:	4b38      	ldr	r3, [pc, #224]	; (80124b0 <pbuf_free+0xf8>)
 80123ce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80123d2:	4938      	ldr	r1, [pc, #224]	; (80124b4 <pbuf_free+0xfc>)
 80123d4:	4838      	ldr	r0, [pc, #224]	; (80124b8 <pbuf_free+0x100>)
 80123d6:	f009 fd3d 	bl	801be54 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80123da:	2300      	movs	r3, #0
 80123dc:	e063      	b.n	80124a6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80123de:	2300      	movs	r3, #0
 80123e0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80123e2:	e05c      	b.n	801249e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	7b9b      	ldrb	r3, [r3, #14]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d106      	bne.n	80123fa <pbuf_free+0x42>
 80123ec:	4b30      	ldr	r3, [pc, #192]	; (80124b0 <pbuf_free+0xf8>)
 80123ee:	f240 22f1 	movw	r2, #753	; 0x2f1
 80123f2:	4932      	ldr	r1, [pc, #200]	; (80124bc <pbuf_free+0x104>)
 80123f4:	4830      	ldr	r0, [pc, #192]	; (80124b8 <pbuf_free+0x100>)
 80123f6:	f009 fd2d 	bl	801be54 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	7b9b      	ldrb	r3, [r3, #14]
 80123fe:	3b01      	subs	r3, #1
 8012400:	b2da      	uxtb	r2, r3
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	739a      	strb	r2, [r3, #14]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	7b9b      	ldrb	r3, [r3, #14]
 801240a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801240c:	7dbb      	ldrb	r3, [r7, #22]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d143      	bne.n	801249a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	7b1b      	ldrb	r3, [r3, #12]
 801241c:	f003 030f 	and.w	r3, r3, #15
 8012420:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	7b5b      	ldrb	r3, [r3, #13]
 8012426:	f003 0302 	and.w	r3, r3, #2
 801242a:	2b00      	cmp	r3, #0
 801242c:	d011      	beq.n	8012452 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	691b      	ldr	r3, [r3, #16]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d106      	bne.n	8012448 <pbuf_free+0x90>
 801243a:	4b1d      	ldr	r3, [pc, #116]	; (80124b0 <pbuf_free+0xf8>)
 801243c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012440:	491f      	ldr	r1, [pc, #124]	; (80124c0 <pbuf_free+0x108>)
 8012442:	481d      	ldr	r0, [pc, #116]	; (80124b8 <pbuf_free+0x100>)
 8012444:	f009 fd06 	bl	801be54 <iprintf>
        pc->custom_free_function(p);
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	691b      	ldr	r3, [r3, #16]
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	4798      	blx	r3
 8012450:	e01d      	b.n	801248e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012452:	7bfb      	ldrb	r3, [r7, #15]
 8012454:	2b02      	cmp	r3, #2
 8012456:	d104      	bne.n	8012462 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8012458:	6879      	ldr	r1, [r7, #4]
 801245a:	2008      	movs	r0, #8
 801245c:	f7ff f936 	bl	80116cc <memp_free>
 8012460:	e015      	b.n	801248e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012462:	7bfb      	ldrb	r3, [r7, #15]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d104      	bne.n	8012472 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8012468:	6879      	ldr	r1, [r7, #4]
 801246a:	2007      	movs	r0, #7
 801246c:	f7ff f92e 	bl	80116cc <memp_free>
 8012470:	e00d      	b.n	801248e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012472:	7bfb      	ldrb	r3, [r7, #15]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d103      	bne.n	8012480 <pbuf_free+0xc8>
          mem_free(p);
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f7fe fdc1 	bl	8011000 <mem_free>
 801247e:	e006      	b.n	801248e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012480:	4b0b      	ldr	r3, [pc, #44]	; (80124b0 <pbuf_free+0xf8>)
 8012482:	f240 320f 	movw	r2, #783	; 0x30f
 8012486:	490f      	ldr	r1, [pc, #60]	; (80124c4 <pbuf_free+0x10c>)
 8012488:	480b      	ldr	r0, [pc, #44]	; (80124b8 <pbuf_free+0x100>)
 801248a:	f009 fce3 	bl	801be54 <iprintf>
        }
      }
      count++;
 801248e:	7dfb      	ldrb	r3, [r7, #23]
 8012490:	3301      	adds	r3, #1
 8012492:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	607b      	str	r3, [r7, #4]
 8012498:	e001      	b.n	801249e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801249a:	2300      	movs	r3, #0
 801249c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d19f      	bne.n	80123e4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80124a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3718      	adds	r7, #24
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	0801d9b0 	.word	0x0801d9b0
 80124b4:	0801db14 	.word	0x0801db14
 80124b8:	0801da10 	.word	0x0801da10
 80124bc:	0801db40 	.word	0x0801db40
 80124c0:	0801db58 	.word	0x0801db58
 80124c4:	0801db7c 	.word	0x0801db7c

080124c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b085      	sub	sp, #20
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80124d0:	2300      	movs	r3, #0
 80124d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80124d4:	e005      	b.n	80124e2 <pbuf_clen+0x1a>
    ++len;
 80124d6:	89fb      	ldrh	r3, [r7, #14]
 80124d8:	3301      	adds	r3, #1
 80124da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d1f6      	bne.n	80124d6 <pbuf_clen+0xe>
  }
  return len;
 80124e8:	89fb      	ldrh	r3, [r7, #14]
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3714      	adds	r7, #20
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr
	...

080124f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d010      	beq.n	8012528 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	7b9b      	ldrb	r3, [r3, #14]
 801250a:	3301      	adds	r3, #1
 801250c:	b2da      	uxtb	r2, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	7b9b      	ldrb	r3, [r3, #14]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <pbuf_ref+0x30>
 801251a:	4b05      	ldr	r3, [pc, #20]	; (8012530 <pbuf_ref+0x38>)
 801251c:	f240 3242 	movw	r2, #834	; 0x342
 8012520:	4904      	ldr	r1, [pc, #16]	; (8012534 <pbuf_ref+0x3c>)
 8012522:	4805      	ldr	r0, [pc, #20]	; (8012538 <pbuf_ref+0x40>)
 8012524:	f009 fc96 	bl	801be54 <iprintf>
  }
}
 8012528:	bf00      	nop
 801252a:	3708      	adds	r7, #8
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}
 8012530:	0801d9b0 	.word	0x0801d9b0
 8012534:	0801db90 	.word	0x0801db90
 8012538:	0801da10 	.word	0x0801da10

0801253c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <pbuf_cat+0x16>
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d107      	bne.n	8012562 <pbuf_cat+0x26>
 8012552:	4b20      	ldr	r3, [pc, #128]	; (80125d4 <pbuf_cat+0x98>)
 8012554:	f240 3259 	movw	r2, #857	; 0x359
 8012558:	491f      	ldr	r1, [pc, #124]	; (80125d8 <pbuf_cat+0x9c>)
 801255a:	4820      	ldr	r0, [pc, #128]	; (80125dc <pbuf_cat+0xa0>)
 801255c:	f009 fc7a 	bl	801be54 <iprintf>
 8012560:	e034      	b.n	80125cc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	60fb      	str	r3, [r7, #12]
 8012566:	e00a      	b.n	801257e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	891a      	ldrh	r2, [r3, #8]
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	891b      	ldrh	r3, [r3, #8]
 8012570:	4413      	add	r3, r2
 8012572:	b29a      	uxth	r2, r3
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	60fb      	str	r3, [r7, #12]
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d1f0      	bne.n	8012568 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	891a      	ldrh	r2, [r3, #8]
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	895b      	ldrh	r3, [r3, #10]
 801258e:	429a      	cmp	r2, r3
 8012590:	d006      	beq.n	80125a0 <pbuf_cat+0x64>
 8012592:	4b10      	ldr	r3, [pc, #64]	; (80125d4 <pbuf_cat+0x98>)
 8012594:	f240 3262 	movw	r2, #866	; 0x362
 8012598:	4911      	ldr	r1, [pc, #68]	; (80125e0 <pbuf_cat+0xa4>)
 801259a:	4810      	ldr	r0, [pc, #64]	; (80125dc <pbuf_cat+0xa0>)
 801259c:	f009 fc5a 	bl	801be54 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d006      	beq.n	80125b6 <pbuf_cat+0x7a>
 80125a8:	4b0a      	ldr	r3, [pc, #40]	; (80125d4 <pbuf_cat+0x98>)
 80125aa:	f240 3263 	movw	r2, #867	; 0x363
 80125ae:	490d      	ldr	r1, [pc, #52]	; (80125e4 <pbuf_cat+0xa8>)
 80125b0:	480a      	ldr	r0, [pc, #40]	; (80125dc <pbuf_cat+0xa0>)
 80125b2:	f009 fc4f 	bl	801be54 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	891a      	ldrh	r2, [r3, #8]
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	891b      	ldrh	r3, [r3, #8]
 80125be:	4413      	add	r3, r2
 80125c0:	b29a      	uxth	r2, r3
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	683a      	ldr	r2, [r7, #0]
 80125ca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80125cc:	3710      	adds	r7, #16
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	0801d9b0 	.word	0x0801d9b0
 80125d8:	0801dba4 	.word	0x0801dba4
 80125dc:	0801da10 	.word	0x0801da10
 80125e0:	0801dbdc 	.word	0x0801dbdc
 80125e4:	0801dc0c 	.word	0x0801dc0c

080125e8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80125f2:	6839      	ldr	r1, [r7, #0]
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f7ff ffa1 	bl	801253c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80125fa:	6838      	ldr	r0, [r7, #0]
 80125fc:	f7ff ff7c 	bl	80124f8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012600:	bf00      	nop
 8012602:	3708      	adds	r7, #8
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012612:	2300      	movs	r3, #0
 8012614:	617b      	str	r3, [r7, #20]
 8012616:	2300      	movs	r3, #0
 8012618:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d008      	beq.n	8012632 <pbuf_copy+0x2a>
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d005      	beq.n	8012632 <pbuf_copy+0x2a>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	891a      	ldrh	r2, [r3, #8]
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	891b      	ldrh	r3, [r3, #8]
 801262e:	429a      	cmp	r2, r3
 8012630:	d209      	bcs.n	8012646 <pbuf_copy+0x3e>
 8012632:	4b57      	ldr	r3, [pc, #348]	; (8012790 <pbuf_copy+0x188>)
 8012634:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012638:	4956      	ldr	r1, [pc, #344]	; (8012794 <pbuf_copy+0x18c>)
 801263a:	4857      	ldr	r0, [pc, #348]	; (8012798 <pbuf_copy+0x190>)
 801263c:	f009 fc0a 	bl	801be54 <iprintf>
 8012640:	f06f 030f 	mvn.w	r3, #15
 8012644:	e09f      	b.n	8012786 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	895b      	ldrh	r3, [r3, #10]
 801264a:	461a      	mov	r2, r3
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	1ad2      	subs	r2, r2, r3
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	895b      	ldrh	r3, [r3, #10]
 8012654:	4619      	mov	r1, r3
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	1acb      	subs	r3, r1, r3
 801265a:	429a      	cmp	r2, r3
 801265c:	d306      	bcc.n	801266c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	895b      	ldrh	r3, [r3, #10]
 8012662:	461a      	mov	r2, r3
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	1ad3      	subs	r3, r2, r3
 8012668:	60fb      	str	r3, [r7, #12]
 801266a:	e005      	b.n	8012678 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	895b      	ldrh	r3, [r3, #10]
 8012670:	461a      	mov	r2, r3
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	1ad3      	subs	r3, r2, r3
 8012676:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	685a      	ldr	r2, [r3, #4]
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	18d0      	adds	r0, r2, r3
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	685a      	ldr	r2, [r3, #4]
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	4413      	add	r3, r2
 8012688:	68fa      	ldr	r2, [r7, #12]
 801268a:	4619      	mov	r1, r3
 801268c:	f009 fd53 	bl	801c136 <memcpy>
    offset_to += len;
 8012690:	697a      	ldr	r2, [r7, #20]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	4413      	add	r3, r2
 8012696:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012698:	693a      	ldr	r2, [r7, #16]
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	4413      	add	r3, r2
 801269e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	895b      	ldrh	r3, [r3, #10]
 80126a4:	461a      	mov	r2, r3
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	4293      	cmp	r3, r2
 80126aa:	d906      	bls.n	80126ba <pbuf_copy+0xb2>
 80126ac:	4b38      	ldr	r3, [pc, #224]	; (8012790 <pbuf_copy+0x188>)
 80126ae:	f240 32d9 	movw	r2, #985	; 0x3d9
 80126b2:	493a      	ldr	r1, [pc, #232]	; (801279c <pbuf_copy+0x194>)
 80126b4:	4838      	ldr	r0, [pc, #224]	; (8012798 <pbuf_copy+0x190>)
 80126b6:	f009 fbcd 	bl	801be54 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	895b      	ldrh	r3, [r3, #10]
 80126be:	461a      	mov	r2, r3
 80126c0:	693b      	ldr	r3, [r7, #16]
 80126c2:	4293      	cmp	r3, r2
 80126c4:	d906      	bls.n	80126d4 <pbuf_copy+0xcc>
 80126c6:	4b32      	ldr	r3, [pc, #200]	; (8012790 <pbuf_copy+0x188>)
 80126c8:	f240 32da 	movw	r2, #986	; 0x3da
 80126cc:	4934      	ldr	r1, [pc, #208]	; (80127a0 <pbuf_copy+0x198>)
 80126ce:	4832      	ldr	r0, [pc, #200]	; (8012798 <pbuf_copy+0x190>)
 80126d0:	f009 fbc0 	bl	801be54 <iprintf>
    if (offset_from >= p_from->len) {
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	895b      	ldrh	r3, [r3, #10]
 80126d8:	461a      	mov	r2, r3
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	4293      	cmp	r3, r2
 80126de:	d304      	bcc.n	80126ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80126e0:	2300      	movs	r3, #0
 80126e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	895b      	ldrh	r3, [r3, #10]
 80126ee:	461a      	mov	r2, r3
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	4293      	cmp	r3, r2
 80126f4:	d114      	bne.n	8012720 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80126f6:	2300      	movs	r3, #0
 80126f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d10c      	bne.n	8012720 <pbuf_copy+0x118>
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d009      	beq.n	8012720 <pbuf_copy+0x118>
 801270c:	4b20      	ldr	r3, [pc, #128]	; (8012790 <pbuf_copy+0x188>)
 801270e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012712:	4924      	ldr	r1, [pc, #144]	; (80127a4 <pbuf_copy+0x19c>)
 8012714:	4820      	ldr	r0, [pc, #128]	; (8012798 <pbuf_copy+0x190>)
 8012716:	f009 fb9d 	bl	801be54 <iprintf>
 801271a:	f06f 030f 	mvn.w	r3, #15
 801271e:	e032      	b.n	8012786 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d013      	beq.n	801274e <pbuf_copy+0x146>
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	895a      	ldrh	r2, [r3, #10]
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	891b      	ldrh	r3, [r3, #8]
 801272e:	429a      	cmp	r2, r3
 8012730:	d10d      	bne.n	801274e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d009      	beq.n	801274e <pbuf_copy+0x146>
 801273a:	4b15      	ldr	r3, [pc, #84]	; (8012790 <pbuf_copy+0x188>)
 801273c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012740:	4919      	ldr	r1, [pc, #100]	; (80127a8 <pbuf_copy+0x1a0>)
 8012742:	4815      	ldr	r0, [pc, #84]	; (8012798 <pbuf_copy+0x190>)
 8012744:	f009 fb86 	bl	801be54 <iprintf>
 8012748:	f06f 0305 	mvn.w	r3, #5
 801274c:	e01b      	b.n	8012786 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d013      	beq.n	801277c <pbuf_copy+0x174>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	895a      	ldrh	r2, [r3, #10]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	891b      	ldrh	r3, [r3, #8]
 801275c:	429a      	cmp	r2, r3
 801275e:	d10d      	bne.n	801277c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d009      	beq.n	801277c <pbuf_copy+0x174>
 8012768:	4b09      	ldr	r3, [pc, #36]	; (8012790 <pbuf_copy+0x188>)
 801276a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801276e:	490e      	ldr	r1, [pc, #56]	; (80127a8 <pbuf_copy+0x1a0>)
 8012770:	4809      	ldr	r0, [pc, #36]	; (8012798 <pbuf_copy+0x190>)
 8012772:	f009 fb6f 	bl	801be54 <iprintf>
 8012776:	f06f 0305 	mvn.w	r3, #5
 801277a:	e004      	b.n	8012786 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	f47f af61 	bne.w	8012646 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012784:	2300      	movs	r3, #0
}
 8012786:	4618      	mov	r0, r3
 8012788:	3718      	adds	r7, #24
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	0801d9b0 	.word	0x0801d9b0
 8012794:	0801dc58 	.word	0x0801dc58
 8012798:	0801da10 	.word	0x0801da10
 801279c:	0801dc88 	.word	0x0801dc88
 80127a0:	0801dca0 	.word	0x0801dca0
 80127a4:	0801dcbc 	.word	0x0801dcbc
 80127a8:	0801dccc 	.word	0x0801dccc

080127ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b088      	sub	sp, #32
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	60b9      	str	r1, [r7, #8]
 80127b6:	4611      	mov	r1, r2
 80127b8:	461a      	mov	r2, r3
 80127ba:	460b      	mov	r3, r1
 80127bc:	80fb      	strh	r3, [r7, #6]
 80127be:	4613      	mov	r3, r2
 80127c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80127c2:	2300      	movs	r3, #0
 80127c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80127c6:	2300      	movs	r3, #0
 80127c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d108      	bne.n	80127e2 <pbuf_copy_partial+0x36>
 80127d0:	4b2b      	ldr	r3, [pc, #172]	; (8012880 <pbuf_copy_partial+0xd4>)
 80127d2:	f240 420a 	movw	r2, #1034	; 0x40a
 80127d6:	492b      	ldr	r1, [pc, #172]	; (8012884 <pbuf_copy_partial+0xd8>)
 80127d8:	482b      	ldr	r0, [pc, #172]	; (8012888 <pbuf_copy_partial+0xdc>)
 80127da:	f009 fb3b 	bl	801be54 <iprintf>
 80127de:	2300      	movs	r3, #0
 80127e0:	e04a      	b.n	8012878 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d108      	bne.n	80127fa <pbuf_copy_partial+0x4e>
 80127e8:	4b25      	ldr	r3, [pc, #148]	; (8012880 <pbuf_copy_partial+0xd4>)
 80127ea:	f240 420b 	movw	r2, #1035	; 0x40b
 80127ee:	4927      	ldr	r1, [pc, #156]	; (801288c <pbuf_copy_partial+0xe0>)
 80127f0:	4825      	ldr	r0, [pc, #148]	; (8012888 <pbuf_copy_partial+0xdc>)
 80127f2:	f009 fb2f 	bl	801be54 <iprintf>
 80127f6:	2300      	movs	r3, #0
 80127f8:	e03e      	b.n	8012878 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	61fb      	str	r3, [r7, #28]
 80127fe:	e034      	b.n	801286a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012800:	88bb      	ldrh	r3, [r7, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d00a      	beq.n	801281c <pbuf_copy_partial+0x70>
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	895b      	ldrh	r3, [r3, #10]
 801280a:	88ba      	ldrh	r2, [r7, #4]
 801280c:	429a      	cmp	r2, r3
 801280e:	d305      	bcc.n	801281c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	895b      	ldrh	r3, [r3, #10]
 8012814:	88ba      	ldrh	r2, [r7, #4]
 8012816:	1ad3      	subs	r3, r2, r3
 8012818:	80bb      	strh	r3, [r7, #4]
 801281a:	e023      	b.n	8012864 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	895a      	ldrh	r2, [r3, #10]
 8012820:	88bb      	ldrh	r3, [r7, #4]
 8012822:	1ad3      	subs	r3, r2, r3
 8012824:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012826:	8b3a      	ldrh	r2, [r7, #24]
 8012828:	88fb      	ldrh	r3, [r7, #6]
 801282a:	429a      	cmp	r2, r3
 801282c:	d901      	bls.n	8012832 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801282e:	88fb      	ldrh	r3, [r7, #6]
 8012830:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012832:	8b7b      	ldrh	r3, [r7, #26]
 8012834:	68ba      	ldr	r2, [r7, #8]
 8012836:	18d0      	adds	r0, r2, r3
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	685a      	ldr	r2, [r3, #4]
 801283c:	88bb      	ldrh	r3, [r7, #4]
 801283e:	4413      	add	r3, r2
 8012840:	8b3a      	ldrh	r2, [r7, #24]
 8012842:	4619      	mov	r1, r3
 8012844:	f009 fc77 	bl	801c136 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012848:	8afa      	ldrh	r2, [r7, #22]
 801284a:	8b3b      	ldrh	r3, [r7, #24]
 801284c:	4413      	add	r3, r2
 801284e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012850:	8b7a      	ldrh	r2, [r7, #26]
 8012852:	8b3b      	ldrh	r3, [r7, #24]
 8012854:	4413      	add	r3, r2
 8012856:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012858:	88fa      	ldrh	r2, [r7, #6]
 801285a:	8b3b      	ldrh	r3, [r7, #24]
 801285c:	1ad3      	subs	r3, r2, r3
 801285e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012860:	2300      	movs	r3, #0
 8012862:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012864:	69fb      	ldr	r3, [r7, #28]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	61fb      	str	r3, [r7, #28]
 801286a:	88fb      	ldrh	r3, [r7, #6]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d002      	beq.n	8012876 <pbuf_copy_partial+0xca>
 8012870:	69fb      	ldr	r3, [r7, #28]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1c4      	bne.n	8012800 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012876:	8afb      	ldrh	r3, [r7, #22]
}
 8012878:	4618      	mov	r0, r3
 801287a:	3720      	adds	r7, #32
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	0801d9b0 	.word	0x0801d9b0
 8012884:	0801dcf8 	.word	0x0801dcf8
 8012888:	0801da10 	.word	0x0801da10
 801288c:	0801dd18 	.word	0x0801dd18

08012890 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	4603      	mov	r3, r0
 8012898:	603a      	str	r2, [r7, #0]
 801289a:	71fb      	strb	r3, [r7, #7]
 801289c:	460b      	mov	r3, r1
 801289e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	8919      	ldrh	r1, [r3, #8]
 80128a4:	88ba      	ldrh	r2, [r7, #4]
 80128a6:	79fb      	ldrb	r3, [r7, #7]
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7ff faa1 	bl	8011df0 <pbuf_alloc>
 80128ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d101      	bne.n	80128ba <pbuf_clone+0x2a>
    return NULL;
 80128b6:	2300      	movs	r3, #0
 80128b8:	e011      	b.n	80128de <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80128ba:	6839      	ldr	r1, [r7, #0]
 80128bc:	68f8      	ldr	r0, [r7, #12]
 80128be:	f7ff fea3 	bl	8012608 <pbuf_copy>
 80128c2:	4603      	mov	r3, r0
 80128c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80128c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d006      	beq.n	80128dc <pbuf_clone+0x4c>
 80128ce:	4b06      	ldr	r3, [pc, #24]	; (80128e8 <pbuf_clone+0x58>)
 80128d0:	f240 5224 	movw	r2, #1316	; 0x524
 80128d4:	4905      	ldr	r1, [pc, #20]	; (80128ec <pbuf_clone+0x5c>)
 80128d6:	4806      	ldr	r0, [pc, #24]	; (80128f0 <pbuf_clone+0x60>)
 80128d8:	f009 fabc 	bl	801be54 <iprintf>
  return q;
 80128dc:	68fb      	ldr	r3, [r7, #12]
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	0801d9b0 	.word	0x0801d9b0
 80128ec:	0801de24 	.word	0x0801de24
 80128f0:	0801da10 	.word	0x0801da10

080128f4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80128f8:	f009 f9ac 	bl	801bc54 <rand>
 80128fc:	4603      	mov	r3, r0
 80128fe:	b29b      	uxth	r3, r3
 8012900:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012904:	b29b      	uxth	r3, r3
 8012906:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801290a:	b29a      	uxth	r2, r3
 801290c:	4b01      	ldr	r3, [pc, #4]	; (8012914 <tcp_init+0x20>)
 801290e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012910:	bf00      	nop
 8012912:	bd80      	pop	{r7, pc}
 8012914:	20000078 	.word	0x20000078

08012918 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b082      	sub	sp, #8
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	7d1b      	ldrb	r3, [r3, #20]
 8012924:	2b01      	cmp	r3, #1
 8012926:	d105      	bne.n	8012934 <tcp_free+0x1c>
 8012928:	4b06      	ldr	r3, [pc, #24]	; (8012944 <tcp_free+0x2c>)
 801292a:	22d4      	movs	r2, #212	; 0xd4
 801292c:	4906      	ldr	r1, [pc, #24]	; (8012948 <tcp_free+0x30>)
 801292e:	4807      	ldr	r0, [pc, #28]	; (801294c <tcp_free+0x34>)
 8012930:	f009 fa90 	bl	801be54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012934:	6879      	ldr	r1, [r7, #4]
 8012936:	2001      	movs	r0, #1
 8012938:	f7fe fec8 	bl	80116cc <memp_free>
}
 801293c:	bf00      	nop
 801293e:	3708      	adds	r7, #8
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	0801deb0 	.word	0x0801deb0
 8012948:	0801dee0 	.word	0x0801dee0
 801294c:	0801def4 	.word	0x0801def4

08012950 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	7d1b      	ldrb	r3, [r3, #20]
 801295c:	2b01      	cmp	r3, #1
 801295e:	d105      	bne.n	801296c <tcp_free_listen+0x1c>
 8012960:	4b06      	ldr	r3, [pc, #24]	; (801297c <tcp_free_listen+0x2c>)
 8012962:	22df      	movs	r2, #223	; 0xdf
 8012964:	4906      	ldr	r1, [pc, #24]	; (8012980 <tcp_free_listen+0x30>)
 8012966:	4807      	ldr	r0, [pc, #28]	; (8012984 <tcp_free_listen+0x34>)
 8012968:	f009 fa74 	bl	801be54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801296c:	6879      	ldr	r1, [r7, #4]
 801296e:	2002      	movs	r0, #2
 8012970:	f7fe feac 	bl	80116cc <memp_free>
}
 8012974:	bf00      	nop
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	0801deb0 	.word	0x0801deb0
 8012980:	0801df1c 	.word	0x0801df1c
 8012984:	0801def4 	.word	0x0801def4

08012988 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801298c:	f001 f976 	bl	8013c7c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012990:	4b07      	ldr	r3, [pc, #28]	; (80129b0 <tcp_tmr+0x28>)
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	3301      	adds	r3, #1
 8012996:	b2da      	uxtb	r2, r3
 8012998:	4b05      	ldr	r3, [pc, #20]	; (80129b0 <tcp_tmr+0x28>)
 801299a:	701a      	strb	r2, [r3, #0]
 801299c:	4b04      	ldr	r3, [pc, #16]	; (80129b0 <tcp_tmr+0x28>)
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	f003 0301 	and.w	r3, r3, #1
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d001      	beq.n	80129ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80129a8:	f000 fe28 	bl	80135fc <tcp_slowtmr>
  }
}
 80129ac:	bf00      	nop
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	2000aff9 	.word	0x2000aff9

080129b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d105      	bne.n	80129d0 <tcp_remove_listener+0x1c>
 80129c4:	4b0d      	ldr	r3, [pc, #52]	; (80129fc <tcp_remove_listener+0x48>)
 80129c6:	22ff      	movs	r2, #255	; 0xff
 80129c8:	490d      	ldr	r1, [pc, #52]	; (8012a00 <tcp_remove_listener+0x4c>)
 80129ca:	480e      	ldr	r0, [pc, #56]	; (8012a04 <tcp_remove_listener+0x50>)
 80129cc:	f009 fa42 	bl	801be54 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	60fb      	str	r3, [r7, #12]
 80129d4:	e00a      	b.n	80129ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129da:	683a      	ldr	r2, [r7, #0]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d102      	bne.n	80129e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	2200      	movs	r2, #0
 80129e4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	60fb      	str	r3, [r7, #12]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1f1      	bne.n	80129d6 <tcp_remove_listener+0x22>
    }
  }
}
 80129f2:	bf00      	nop
 80129f4:	bf00      	nop
 80129f6:	3710      	adds	r7, #16
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	0801deb0 	.word	0x0801deb0
 8012a00:	0801df38 	.word	0x0801df38
 8012a04:	0801def4 	.word	0x0801def4

08012a08 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b084      	sub	sp, #16
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d106      	bne.n	8012a24 <tcp_listen_closed+0x1c>
 8012a16:	4b14      	ldr	r3, [pc, #80]	; (8012a68 <tcp_listen_closed+0x60>)
 8012a18:	f240 1211 	movw	r2, #273	; 0x111
 8012a1c:	4913      	ldr	r1, [pc, #76]	; (8012a6c <tcp_listen_closed+0x64>)
 8012a1e:	4814      	ldr	r0, [pc, #80]	; (8012a70 <tcp_listen_closed+0x68>)
 8012a20:	f009 fa18 	bl	801be54 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	7d1b      	ldrb	r3, [r3, #20]
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	d006      	beq.n	8012a3a <tcp_listen_closed+0x32>
 8012a2c:	4b0e      	ldr	r3, [pc, #56]	; (8012a68 <tcp_listen_closed+0x60>)
 8012a2e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012a32:	4910      	ldr	r1, [pc, #64]	; (8012a74 <tcp_listen_closed+0x6c>)
 8012a34:	480e      	ldr	r0, [pc, #56]	; (8012a70 <tcp_listen_closed+0x68>)
 8012a36:	f009 fa0d 	bl	801be54 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	60fb      	str	r3, [r7, #12]
 8012a3e:	e00b      	b.n	8012a58 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012a40:	4a0d      	ldr	r2, [pc, #52]	; (8012a78 <tcp_listen_closed+0x70>)
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	6879      	ldr	r1, [r7, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7ff ffb1 	bl	80129b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	3301      	adds	r3, #1
 8012a56:	60fb      	str	r3, [r7, #12]
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2b03      	cmp	r3, #3
 8012a5c:	d9f0      	bls.n	8012a40 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012a5e:	bf00      	nop
 8012a60:	bf00      	nop
 8012a62:	3710      	adds	r7, #16
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}
 8012a68:	0801deb0 	.word	0x0801deb0
 8012a6c:	0801df60 	.word	0x0801df60
 8012a70:	0801def4 	.word	0x0801def4
 8012a74:	0801df6c 	.word	0x0801df6c
 8012a78:	08020030 	.word	0x08020030

08012a7c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012a7c:	b5b0      	push	{r4, r5, r7, lr}
 8012a7e:	b088      	sub	sp, #32
 8012a80:	af04      	add	r7, sp, #16
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	460b      	mov	r3, r1
 8012a86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d106      	bne.n	8012a9c <tcp_close_shutdown+0x20>
 8012a8e:	4b63      	ldr	r3, [pc, #396]	; (8012c1c <tcp_close_shutdown+0x1a0>)
 8012a90:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012a94:	4962      	ldr	r1, [pc, #392]	; (8012c20 <tcp_close_shutdown+0x1a4>)
 8012a96:	4863      	ldr	r0, [pc, #396]	; (8012c24 <tcp_close_shutdown+0x1a8>)
 8012a98:	f009 f9dc 	bl	801be54 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012a9c:	78fb      	ldrb	r3, [r7, #3]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d067      	beq.n	8012b72 <tcp_close_shutdown+0xf6>
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	7d1b      	ldrb	r3, [r3, #20]
 8012aa6:	2b04      	cmp	r3, #4
 8012aa8:	d003      	beq.n	8012ab2 <tcp_close_shutdown+0x36>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	7d1b      	ldrb	r3, [r3, #20]
 8012aae:	2b07      	cmp	r3, #7
 8012ab0:	d15f      	bne.n	8012b72 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d105      	bne.n	8012ac6 <tcp_close_shutdown+0x4a>
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012abe:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d055      	beq.n	8012b72 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	8b5b      	ldrh	r3, [r3, #26]
 8012aca:	f003 0310 	and.w	r3, r3, #16
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d106      	bne.n	8012ae0 <tcp_close_shutdown+0x64>
 8012ad2:	4b52      	ldr	r3, [pc, #328]	; (8012c1c <tcp_close_shutdown+0x1a0>)
 8012ad4:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012ad8:	4953      	ldr	r1, [pc, #332]	; (8012c28 <tcp_close_shutdown+0x1ac>)
 8012ada:	4852      	ldr	r0, [pc, #328]	; (8012c24 <tcp_close_shutdown+0x1a8>)
 8012adc:	f009 f9ba 	bl	801be54 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012ae8:	687d      	ldr	r5, [r7, #4]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	3304      	adds	r3, #4
 8012aee:	687a      	ldr	r2, [r7, #4]
 8012af0:	8ad2      	ldrh	r2, [r2, #22]
 8012af2:	6879      	ldr	r1, [r7, #4]
 8012af4:	8b09      	ldrh	r1, [r1, #24]
 8012af6:	9102      	str	r1, [sp, #8]
 8012af8:	9201      	str	r2, [sp, #4]
 8012afa:	9300      	str	r3, [sp, #0]
 8012afc:	462b      	mov	r3, r5
 8012afe:	4622      	mov	r2, r4
 8012b00:	4601      	mov	r1, r0
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f005 fea4 	bl	8018850 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f001 fc81 	bl	8014410 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012b0e:	4b47      	ldr	r3, [pc, #284]	; (8012c2c <tcp_close_shutdown+0x1b0>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d105      	bne.n	8012b24 <tcp_close_shutdown+0xa8>
 8012b18:	4b44      	ldr	r3, [pc, #272]	; (8012c2c <tcp_close_shutdown+0x1b0>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	68db      	ldr	r3, [r3, #12]
 8012b1e:	4a43      	ldr	r2, [pc, #268]	; (8012c2c <tcp_close_shutdown+0x1b0>)
 8012b20:	6013      	str	r3, [r2, #0]
 8012b22:	e013      	b.n	8012b4c <tcp_close_shutdown+0xd0>
 8012b24:	4b41      	ldr	r3, [pc, #260]	; (8012c2c <tcp_close_shutdown+0x1b0>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	60fb      	str	r3, [r7, #12]
 8012b2a:	e00c      	b.n	8012b46 <tcp_close_shutdown+0xca>
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d104      	bne.n	8012b40 <tcp_close_shutdown+0xc4>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	68da      	ldr	r2, [r3, #12]
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	60da      	str	r2, [r3, #12]
 8012b3e:	e005      	b.n	8012b4c <tcp_close_shutdown+0xd0>
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	60fb      	str	r3, [r7, #12]
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d1ef      	bne.n	8012b2c <tcp_close_shutdown+0xb0>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	60da      	str	r2, [r3, #12]
 8012b52:	4b37      	ldr	r3, [pc, #220]	; (8012c30 <tcp_close_shutdown+0x1b4>)
 8012b54:	2201      	movs	r2, #1
 8012b56:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012b58:	4b36      	ldr	r3, [pc, #216]	; (8012c34 <tcp_close_shutdown+0x1b8>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d102      	bne.n	8012b68 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012b62:	f004 f919 	bl	8016d98 <tcp_trigger_input_pcb_close>
 8012b66:	e002      	b.n	8012b6e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff fed5 	bl	8012918 <tcp_free>
      }
      return ERR_OK;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	e050      	b.n	8012c14 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	7d1b      	ldrb	r3, [r3, #20]
 8012b76:	2b02      	cmp	r3, #2
 8012b78:	d03b      	beq.n	8012bf2 <tcp_close_shutdown+0x176>
 8012b7a:	2b02      	cmp	r3, #2
 8012b7c:	dc44      	bgt.n	8012c08 <tcp_close_shutdown+0x18c>
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d002      	beq.n	8012b88 <tcp_close_shutdown+0x10c>
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d02a      	beq.n	8012bdc <tcp_close_shutdown+0x160>
 8012b86:	e03f      	b.n	8012c08 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	8adb      	ldrh	r3, [r3, #22]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d021      	beq.n	8012bd4 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012b90:	4b29      	ldr	r3, [pc, #164]	; (8012c38 <tcp_close_shutdown+0x1bc>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	687a      	ldr	r2, [r7, #4]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d105      	bne.n	8012ba6 <tcp_close_shutdown+0x12a>
 8012b9a:	4b27      	ldr	r3, [pc, #156]	; (8012c38 <tcp_close_shutdown+0x1bc>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	4a25      	ldr	r2, [pc, #148]	; (8012c38 <tcp_close_shutdown+0x1bc>)
 8012ba2:	6013      	str	r3, [r2, #0]
 8012ba4:	e013      	b.n	8012bce <tcp_close_shutdown+0x152>
 8012ba6:	4b24      	ldr	r3, [pc, #144]	; (8012c38 <tcp_close_shutdown+0x1bc>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	60bb      	str	r3, [r7, #8]
 8012bac:	e00c      	b.n	8012bc8 <tcp_close_shutdown+0x14c>
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	68db      	ldr	r3, [r3, #12]
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d104      	bne.n	8012bc2 <tcp_close_shutdown+0x146>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	68da      	ldr	r2, [r3, #12]
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	60da      	str	r2, [r3, #12]
 8012bc0:	e005      	b.n	8012bce <tcp_close_shutdown+0x152>
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	68db      	ldr	r3, [r3, #12]
 8012bc6:	60bb      	str	r3, [r7, #8]
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d1ef      	bne.n	8012bae <tcp_close_shutdown+0x132>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f7ff fe9f 	bl	8012918 <tcp_free>
      break;
 8012bda:	e01a      	b.n	8012c12 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7ff ff13 	bl	8012a08 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012be2:	6879      	ldr	r1, [r7, #4]
 8012be4:	4815      	ldr	r0, [pc, #84]	; (8012c3c <tcp_close_shutdown+0x1c0>)
 8012be6:	f001 fc63 	bl	80144b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f7ff feb0 	bl	8012950 <tcp_free_listen>
      break;
 8012bf0:	e00f      	b.n	8012c12 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012bf2:	6879      	ldr	r1, [r7, #4]
 8012bf4:	480d      	ldr	r0, [pc, #52]	; (8012c2c <tcp_close_shutdown+0x1b0>)
 8012bf6:	f001 fc5b 	bl	80144b0 <tcp_pcb_remove>
 8012bfa:	4b0d      	ldr	r3, [pc, #52]	; (8012c30 <tcp_close_shutdown+0x1b4>)
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f7ff fe89 	bl	8012918 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012c06:	e004      	b.n	8012c12 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f000 f819 	bl	8012c40 <tcp_close_shutdown_fin>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	e000      	b.n	8012c14 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8012c12:	2300      	movs	r3, #0
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3710      	adds	r7, #16
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8012c1c:	0801deb0 	.word	0x0801deb0
 8012c20:	0801df84 	.word	0x0801df84
 8012c24:	0801def4 	.word	0x0801def4
 8012c28:	0801dfa4 	.word	0x0801dfa4
 8012c2c:	2000aff0 	.word	0x2000aff0
 8012c30:	2000aff8 	.word	0x2000aff8
 8012c34:	2000b030 	.word	0x2000b030
 8012c38:	2000afe8 	.word	0x2000afe8
 8012c3c:	2000afec 	.word	0x2000afec

08012c40 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b084      	sub	sp, #16
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d106      	bne.n	8012c5c <tcp_close_shutdown_fin+0x1c>
 8012c4e:	4b2e      	ldr	r3, [pc, #184]	; (8012d08 <tcp_close_shutdown_fin+0xc8>)
 8012c50:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012c54:	492d      	ldr	r1, [pc, #180]	; (8012d0c <tcp_close_shutdown_fin+0xcc>)
 8012c56:	482e      	ldr	r0, [pc, #184]	; (8012d10 <tcp_close_shutdown_fin+0xd0>)
 8012c58:	f009 f8fc 	bl	801be54 <iprintf>

  switch (pcb->state) {
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	7d1b      	ldrb	r3, [r3, #20]
 8012c60:	2b07      	cmp	r3, #7
 8012c62:	d020      	beq.n	8012ca6 <tcp_close_shutdown_fin+0x66>
 8012c64:	2b07      	cmp	r3, #7
 8012c66:	dc2b      	bgt.n	8012cc0 <tcp_close_shutdown_fin+0x80>
 8012c68:	2b03      	cmp	r3, #3
 8012c6a:	d002      	beq.n	8012c72 <tcp_close_shutdown_fin+0x32>
 8012c6c:	2b04      	cmp	r3, #4
 8012c6e:	d00d      	beq.n	8012c8c <tcp_close_shutdown_fin+0x4c>
 8012c70:	e026      	b.n	8012cc0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f004 fefa 	bl	8017a6c <tcp_send_fin>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d11f      	bne.n	8012cc4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2205      	movs	r2, #5
 8012c88:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012c8a:	e01b      	b.n	8012cc4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f004 feed 	bl	8017a6c <tcp_send_fin>
 8012c92:	4603      	mov	r3, r0
 8012c94:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d114      	bne.n	8012cc8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2205      	movs	r2, #5
 8012ca2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012ca4:	e010      	b.n	8012cc8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f004 fee0 	bl	8017a6c <tcp_send_fin>
 8012cac:	4603      	mov	r3, r0
 8012cae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d109      	bne.n	8012ccc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2209      	movs	r2, #9
 8012cbc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012cbe:	e005      	b.n	8012ccc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	e01c      	b.n	8012cfe <tcp_close_shutdown_fin+0xbe>
      break;
 8012cc4:	bf00      	nop
 8012cc6:	e002      	b.n	8012cce <tcp_close_shutdown_fin+0x8e>
      break;
 8012cc8:	bf00      	nop
 8012cca:	e000      	b.n	8012cce <tcp_close_shutdown_fin+0x8e>
      break;
 8012ccc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d103      	bne.n	8012cde <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f005 f806 	bl	8017ce8 <tcp_output>
 8012cdc:	e00d      	b.n	8012cfa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ce6:	d108      	bne.n	8012cfa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	8b5b      	ldrh	r3, [r3, #26]
 8012cec:	f043 0308 	orr.w	r3, r3, #8
 8012cf0:	b29a      	uxth	r2, r3
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	e001      	b.n	8012cfe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3710      	adds	r7, #16
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	0801deb0 	.word	0x0801deb0
 8012d0c:	0801df60 	.word	0x0801df60
 8012d10:	0801def4 	.word	0x0801def4

08012d14 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d109      	bne.n	8012d36 <tcp_close+0x22>
 8012d22:	4b0f      	ldr	r3, [pc, #60]	; (8012d60 <tcp_close+0x4c>)
 8012d24:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012d28:	490e      	ldr	r1, [pc, #56]	; (8012d64 <tcp_close+0x50>)
 8012d2a:	480f      	ldr	r0, [pc, #60]	; (8012d68 <tcp_close+0x54>)
 8012d2c:	f009 f892 	bl	801be54 <iprintf>
 8012d30:	f06f 030f 	mvn.w	r3, #15
 8012d34:	e00f      	b.n	8012d56 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	7d1b      	ldrb	r3, [r3, #20]
 8012d3a:	2b01      	cmp	r3, #1
 8012d3c:	d006      	beq.n	8012d4c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	8b5b      	ldrh	r3, [r3, #26]
 8012d42:	f043 0310 	orr.w	r3, r3, #16
 8012d46:	b29a      	uxth	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012d4c:	2101      	movs	r1, #1
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f7ff fe94 	bl	8012a7c <tcp_close_shutdown>
 8012d54:	4603      	mov	r3, r0
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3708      	adds	r7, #8
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	0801deb0 	.word	0x0801deb0
 8012d64:	0801dfc0 	.word	0x0801dfc0
 8012d68:	0801def4 	.word	0x0801def4

08012d6c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b08e      	sub	sp, #56	; 0x38
 8012d70:	af04      	add	r7, sp, #16
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d107      	bne.n	8012d8c <tcp_abandon+0x20>
 8012d7c:	4b52      	ldr	r3, [pc, #328]	; (8012ec8 <tcp_abandon+0x15c>)
 8012d7e:	f240 223d 	movw	r2, #573	; 0x23d
 8012d82:	4952      	ldr	r1, [pc, #328]	; (8012ecc <tcp_abandon+0x160>)
 8012d84:	4852      	ldr	r0, [pc, #328]	; (8012ed0 <tcp_abandon+0x164>)
 8012d86:	f009 f865 	bl	801be54 <iprintf>
 8012d8a:	e099      	b.n	8012ec0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	7d1b      	ldrb	r3, [r3, #20]
 8012d90:	2b01      	cmp	r3, #1
 8012d92:	d106      	bne.n	8012da2 <tcp_abandon+0x36>
 8012d94:	4b4c      	ldr	r3, [pc, #304]	; (8012ec8 <tcp_abandon+0x15c>)
 8012d96:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012d9a:	494e      	ldr	r1, [pc, #312]	; (8012ed4 <tcp_abandon+0x168>)
 8012d9c:	484c      	ldr	r0, [pc, #304]	; (8012ed0 <tcp_abandon+0x164>)
 8012d9e:	f009 f859 	bl	801be54 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	7d1b      	ldrb	r3, [r3, #20]
 8012da6:	2b0a      	cmp	r3, #10
 8012da8:	d107      	bne.n	8012dba <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012daa:	6879      	ldr	r1, [r7, #4]
 8012dac:	484a      	ldr	r0, [pc, #296]	; (8012ed8 <tcp_abandon+0x16c>)
 8012dae:	f001 fb7f 	bl	80144b0 <tcp_pcb_remove>
    tcp_free(pcb);
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f7ff fdb0 	bl	8012918 <tcp_free>
 8012db8:	e082      	b.n	8012ec0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dc6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dcc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dd4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	691b      	ldr	r3, [r3, #16]
 8012dda:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	7d1b      	ldrb	r3, [r3, #20]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d126      	bne.n	8012e32 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	8adb      	ldrh	r3, [r3, #22]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d02e      	beq.n	8012e4a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012dec:	4b3b      	ldr	r3, [pc, #236]	; (8012edc <tcp_abandon+0x170>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	687a      	ldr	r2, [r7, #4]
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d105      	bne.n	8012e02 <tcp_abandon+0x96>
 8012df6:	4b39      	ldr	r3, [pc, #228]	; (8012edc <tcp_abandon+0x170>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	4a37      	ldr	r2, [pc, #220]	; (8012edc <tcp_abandon+0x170>)
 8012dfe:	6013      	str	r3, [r2, #0]
 8012e00:	e013      	b.n	8012e2a <tcp_abandon+0xbe>
 8012e02:	4b36      	ldr	r3, [pc, #216]	; (8012edc <tcp_abandon+0x170>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	61fb      	str	r3, [r7, #28]
 8012e08:	e00c      	b.n	8012e24 <tcp_abandon+0xb8>
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	68db      	ldr	r3, [r3, #12]
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d104      	bne.n	8012e1e <tcp_abandon+0xb2>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	68da      	ldr	r2, [r3, #12]
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	60da      	str	r2, [r3, #12]
 8012e1c:	e005      	b.n	8012e2a <tcp_abandon+0xbe>
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	68db      	ldr	r3, [r3, #12]
 8012e22:	61fb      	str	r3, [r7, #28]
 8012e24:	69fb      	ldr	r3, [r7, #28]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d1ef      	bne.n	8012e0a <tcp_abandon+0x9e>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	60da      	str	r2, [r3, #12]
 8012e30:	e00b      	b.n	8012e4a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	8adb      	ldrh	r3, [r3, #22]
 8012e3a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012e3c:	6879      	ldr	r1, [r7, #4]
 8012e3e:	4828      	ldr	r0, [pc, #160]	; (8012ee0 <tcp_abandon+0x174>)
 8012e40:	f001 fb36 	bl	80144b0 <tcp_pcb_remove>
 8012e44:	4b27      	ldr	r3, [pc, #156]	; (8012ee4 <tcp_abandon+0x178>)
 8012e46:	2201      	movs	r2, #1
 8012e48:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d004      	beq.n	8012e5c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e56:	4618      	mov	r0, r3
 8012e58:	f000 fff2 	bl	8013e40 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d004      	beq.n	8012e6e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f000 ffe9 	bl	8013e40 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d004      	beq.n	8012e80 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f000 ffe0 	bl	8013e40 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d00e      	beq.n	8012ea4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012e86:	6879      	ldr	r1, [r7, #4]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	3304      	adds	r3, #4
 8012e8c:	687a      	ldr	r2, [r7, #4]
 8012e8e:	8b12      	ldrh	r2, [r2, #24]
 8012e90:	9202      	str	r2, [sp, #8]
 8012e92:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e94:	9201      	str	r2, [sp, #4]
 8012e96:	9300      	str	r3, [sp, #0]
 8012e98:	460b      	mov	r3, r1
 8012e9a:	697a      	ldr	r2, [r7, #20]
 8012e9c:	69b9      	ldr	r1, [r7, #24]
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f005 fcd6 	bl	8018850 <tcp_rst>
    }
    last_state = pcb->state;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	7d1b      	ldrb	r3, [r3, #20]
 8012ea8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff fd34 	bl	8012918 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d004      	beq.n	8012ec0 <tcp_abandon+0x154>
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	f06f 010c 	mvn.w	r1, #12
 8012ebc:	68f8      	ldr	r0, [r7, #12]
 8012ebe:	4798      	blx	r3
  }
}
 8012ec0:	3728      	adds	r7, #40	; 0x28
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	0801deb0 	.word	0x0801deb0
 8012ecc:	0801dff4 	.word	0x0801dff4
 8012ed0:	0801def4 	.word	0x0801def4
 8012ed4:	0801e010 	.word	0x0801e010
 8012ed8:	2000aff4 	.word	0x2000aff4
 8012edc:	2000afe8 	.word	0x2000afe8
 8012ee0:	2000aff0 	.word	0x2000aff0
 8012ee4:	2000aff8 	.word	0x2000aff8

08012ee8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012ef0:	2101      	movs	r1, #1
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f7ff ff3a 	bl	8012d6c <tcp_abandon>
}
 8012ef8:	bf00      	nop
 8012efa:	3708      	adds	r7, #8
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}

08012f00 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b088      	sub	sp, #32
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	60b9      	str	r1, [r7, #8]
 8012f0a:	4613      	mov	r3, r2
 8012f0c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8012f0e:	2304      	movs	r3, #4
 8012f10:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d101      	bne.n	8012f1c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012f18:	4b3e      	ldr	r3, [pc, #248]	; (8013014 <tcp_bind+0x114>)
 8012f1a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d109      	bne.n	8012f36 <tcp_bind+0x36>
 8012f22:	4b3d      	ldr	r3, [pc, #244]	; (8013018 <tcp_bind+0x118>)
 8012f24:	f240 22a9 	movw	r2, #681	; 0x2a9
 8012f28:	493c      	ldr	r1, [pc, #240]	; (801301c <tcp_bind+0x11c>)
 8012f2a:	483d      	ldr	r0, [pc, #244]	; (8013020 <tcp_bind+0x120>)
 8012f2c:	f008 ff92 	bl	801be54 <iprintf>
 8012f30:	f06f 030f 	mvn.w	r3, #15
 8012f34:	e06a      	b.n	801300c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	7d1b      	ldrb	r3, [r3, #20]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d009      	beq.n	8012f52 <tcp_bind+0x52>
 8012f3e:	4b36      	ldr	r3, [pc, #216]	; (8013018 <tcp_bind+0x118>)
 8012f40:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012f44:	4937      	ldr	r1, [pc, #220]	; (8013024 <tcp_bind+0x124>)
 8012f46:	4836      	ldr	r0, [pc, #216]	; (8013020 <tcp_bind+0x120>)
 8012f48:	f008 ff84 	bl	801be54 <iprintf>
 8012f4c:	f06f 0305 	mvn.w	r3, #5
 8012f50:	e05c      	b.n	801300c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012f52:	88fb      	ldrh	r3, [r7, #6]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d109      	bne.n	8012f6c <tcp_bind+0x6c>
    port = tcp_new_port();
 8012f58:	f000 f9f2 	bl	8013340 <tcp_new_port>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012f60:	88fb      	ldrh	r3, [r7, #6]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d135      	bne.n	8012fd2 <tcp_bind+0xd2>
      return ERR_BUF;
 8012f66:	f06f 0301 	mvn.w	r3, #1
 8012f6a:	e04f      	b.n	801300c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	61fb      	str	r3, [r7, #28]
 8012f70:	e02b      	b.n	8012fca <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012f72:	4a2d      	ldr	r2, [pc, #180]	; (8013028 <tcp_bind+0x128>)
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	61bb      	str	r3, [r7, #24]
 8012f7e:	e01e      	b.n	8012fbe <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012f80:	69bb      	ldr	r3, [r7, #24]
 8012f82:	8adb      	ldrh	r3, [r3, #22]
 8012f84:	88fa      	ldrh	r2, [r7, #6]
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d116      	bne.n	8012fb8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8012f8a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d010      	beq.n	8012fb2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012f90:	69bb      	ldr	r3, [r7, #24]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00c      	beq.n	8012fb2 <tcp_bind+0xb2>
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d009      	beq.n	8012fb2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d005      	beq.n	8012fb2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d102      	bne.n	8012fb8 <tcp_bind+0xb8>
              return ERR_USE;
 8012fb2:	f06f 0307 	mvn.w	r3, #7
 8012fb6:	e029      	b.n	801300c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012fb8:	69bb      	ldr	r3, [r7, #24]
 8012fba:	68db      	ldr	r3, [r3, #12]
 8012fbc:	61bb      	str	r3, [r7, #24]
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d1dd      	bne.n	8012f80 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012fc4:	69fb      	ldr	r3, [r7, #28]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	61fb      	str	r3, [r7, #28]
 8012fca:	69fa      	ldr	r2, [r7, #28]
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	dbcf      	blt.n	8012f72 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d00c      	beq.n	8012ff2 <tcp_bind+0xf2>
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d008      	beq.n	8012ff2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d002      	beq.n	8012fec <tcp_bind+0xec>
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	e000      	b.n	8012fee <tcp_bind+0xee>
 8012fec:	2300      	movs	r3, #0
 8012fee:	68fa      	ldr	r2, [r7, #12]
 8012ff0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	88fa      	ldrh	r2, [r7, #6]
 8012ff6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8012ff8:	4b0c      	ldr	r3, [pc, #48]	; (801302c <tcp_bind+0x12c>)
 8012ffa:	681a      	ldr	r2, [r3, #0]
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	60da      	str	r2, [r3, #12]
 8013000:	4a0a      	ldr	r2, [pc, #40]	; (801302c <tcp_bind+0x12c>)
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	6013      	str	r3, [r2, #0]
 8013006:	f005 fde5 	bl	8018bd4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801300a:	2300      	movs	r3, #0
}
 801300c:	4618      	mov	r0, r3
 801300e:	3720      	adds	r7, #32
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}
 8013014:	08020058 	.word	0x08020058
 8013018:	0801deb0 	.word	0x0801deb0
 801301c:	0801e044 	.word	0x0801e044
 8013020:	0801def4 	.word	0x0801def4
 8013024:	0801e05c 	.word	0x0801e05c
 8013028:	08020030 	.word	0x08020030
 801302c:	2000afe8 	.word	0x2000afe8

08013030 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	4613      	mov	r3, r2
 801303c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d106      	bne.n	8013052 <tcp_accept_null+0x22>
 8013044:	4b07      	ldr	r3, [pc, #28]	; (8013064 <tcp_accept_null+0x34>)
 8013046:	f240 320f 	movw	r2, #783	; 0x30f
 801304a:	4907      	ldr	r1, [pc, #28]	; (8013068 <tcp_accept_null+0x38>)
 801304c:	4807      	ldr	r0, [pc, #28]	; (801306c <tcp_accept_null+0x3c>)
 801304e:	f008 ff01 	bl	801be54 <iprintf>

  tcp_abort(pcb);
 8013052:	68b8      	ldr	r0, [r7, #8]
 8013054:	f7ff ff48 	bl	8012ee8 <tcp_abort>

  return ERR_ABRT;
 8013058:	f06f 030c 	mvn.w	r3, #12
}
 801305c:	4618      	mov	r0, r3
 801305e:	3710      	adds	r7, #16
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	0801deb0 	.word	0x0801deb0
 8013068:	0801e084 	.word	0x0801e084
 801306c:	0801def4 	.word	0x0801def4

08013070 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	460b      	mov	r3, r1
 801307a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801307c:	78fb      	ldrb	r3, [r7, #3]
 801307e:	2200      	movs	r2, #0
 8013080:	4619      	mov	r1, r3
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f000 f806 	bl	8013094 <tcp_listen_with_backlog_and_err>
 8013088:	4603      	mov	r3, r0
}
 801308a:	4618      	mov	r0, r3
 801308c:	3708      	adds	r7, #8
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
	...

08013094 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b088      	sub	sp, #32
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	460b      	mov	r3, r1
 801309e:	607a      	str	r2, [r7, #4]
 80130a0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80130a2:	2300      	movs	r3, #0
 80130a4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d109      	bne.n	80130c0 <tcp_listen_with_backlog_and_err+0x2c>
 80130ac:	4b47      	ldr	r3, [pc, #284]	; (80131cc <tcp_listen_with_backlog_and_err+0x138>)
 80130ae:	f240 3259 	movw	r2, #857	; 0x359
 80130b2:	4947      	ldr	r1, [pc, #284]	; (80131d0 <tcp_listen_with_backlog_and_err+0x13c>)
 80130b4:	4847      	ldr	r0, [pc, #284]	; (80131d4 <tcp_listen_with_backlog_and_err+0x140>)
 80130b6:	f008 fecd 	bl	801be54 <iprintf>
 80130ba:	23f0      	movs	r3, #240	; 0xf0
 80130bc:	76fb      	strb	r3, [r7, #27]
 80130be:	e079      	b.n	80131b4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	7d1b      	ldrb	r3, [r3, #20]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d009      	beq.n	80130dc <tcp_listen_with_backlog_and_err+0x48>
 80130c8:	4b40      	ldr	r3, [pc, #256]	; (80131cc <tcp_listen_with_backlog_and_err+0x138>)
 80130ca:	f240 325a 	movw	r2, #858	; 0x35a
 80130ce:	4942      	ldr	r1, [pc, #264]	; (80131d8 <tcp_listen_with_backlog_and_err+0x144>)
 80130d0:	4840      	ldr	r0, [pc, #256]	; (80131d4 <tcp_listen_with_backlog_and_err+0x140>)
 80130d2:	f008 febf 	bl	801be54 <iprintf>
 80130d6:	23f1      	movs	r3, #241	; 0xf1
 80130d8:	76fb      	strb	r3, [r7, #27]
 80130da:	e06b      	b.n	80131b4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	7d1b      	ldrb	r3, [r3, #20]
 80130e0:	2b01      	cmp	r3, #1
 80130e2:	d104      	bne.n	80130ee <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80130e8:	23f7      	movs	r3, #247	; 0xf7
 80130ea:	76fb      	strb	r3, [r7, #27]
    goto done;
 80130ec:	e062      	b.n	80131b4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80130ee:	2002      	movs	r0, #2
 80130f0:	f7fe fa7c 	bl	80115ec <memp_malloc>
 80130f4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d102      	bne.n	8013102 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80130fc:	23ff      	movs	r3, #255	; 0xff
 80130fe:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013100:	e058      	b.n	80131b4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	691a      	ldr	r2, [r3, #16]
 8013106:	69fb      	ldr	r3, [r7, #28]
 8013108:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	8ada      	ldrh	r2, [r3, #22]
 801310e:	69fb      	ldr	r3, [r7, #28]
 8013110:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013112:	69fb      	ldr	r3, [r7, #28]
 8013114:	2201      	movs	r2, #1
 8013116:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	7d5a      	ldrb	r2, [r3, #21]
 801311c:	69fb      	ldr	r3, [r7, #28]
 801311e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	7a5a      	ldrb	r2, [r3, #9]
 8013124:	69fb      	ldr	r3, [r7, #28]
 8013126:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013128:	69fb      	ldr	r3, [r7, #28]
 801312a:	2200      	movs	r2, #0
 801312c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	7ada      	ldrb	r2, [r3, #11]
 8013132:	69fb      	ldr	r3, [r7, #28]
 8013134:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	7a9a      	ldrb	r2, [r3, #10]
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	69fb      	ldr	r3, [r7, #28]
 8013144:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	8adb      	ldrh	r3, [r3, #22]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d021      	beq.n	8013192 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801314e:	4b23      	ldr	r3, [pc, #140]	; (80131dc <tcp_listen_with_backlog_and_err+0x148>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	68fa      	ldr	r2, [r7, #12]
 8013154:	429a      	cmp	r2, r3
 8013156:	d105      	bne.n	8013164 <tcp_listen_with_backlog_and_err+0xd0>
 8013158:	4b20      	ldr	r3, [pc, #128]	; (80131dc <tcp_listen_with_backlog_and_err+0x148>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68db      	ldr	r3, [r3, #12]
 801315e:	4a1f      	ldr	r2, [pc, #124]	; (80131dc <tcp_listen_with_backlog_and_err+0x148>)
 8013160:	6013      	str	r3, [r2, #0]
 8013162:	e013      	b.n	801318c <tcp_listen_with_backlog_and_err+0xf8>
 8013164:	4b1d      	ldr	r3, [pc, #116]	; (80131dc <tcp_listen_with_backlog_and_err+0x148>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	617b      	str	r3, [r7, #20]
 801316a:	e00c      	b.n	8013186 <tcp_listen_with_backlog_and_err+0xf2>
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	68fa      	ldr	r2, [r7, #12]
 8013172:	429a      	cmp	r2, r3
 8013174:	d104      	bne.n	8013180 <tcp_listen_with_backlog_and_err+0xec>
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	68da      	ldr	r2, [r3, #12]
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	60da      	str	r2, [r3, #12]
 801317e:	e005      	b.n	801318c <tcp_listen_with_backlog_and_err+0xf8>
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	617b      	str	r3, [r7, #20]
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d1ef      	bne.n	801316c <tcp_listen_with_backlog_and_err+0xd8>
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2200      	movs	r2, #0
 8013190:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013192:	68f8      	ldr	r0, [r7, #12]
 8013194:	f7ff fbc0 	bl	8012918 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	4a11      	ldr	r2, [pc, #68]	; (80131e0 <tcp_listen_with_backlog_and_err+0x14c>)
 801319c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801319e:	4b11      	ldr	r3, [pc, #68]	; (80131e4 <tcp_listen_with_backlog_and_err+0x150>)
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	69fb      	ldr	r3, [r7, #28]
 80131a4:	60da      	str	r2, [r3, #12]
 80131a6:	4a0f      	ldr	r2, [pc, #60]	; (80131e4 <tcp_listen_with_backlog_and_err+0x150>)
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	6013      	str	r3, [r2, #0]
 80131ac:	f005 fd12 	bl	8018bd4 <tcp_timer_needed>
  res = ERR_OK;
 80131b0:	2300      	movs	r3, #0
 80131b2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d002      	beq.n	80131c0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	7efa      	ldrb	r2, [r7, #27]
 80131be:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80131c0:	69fb      	ldr	r3, [r7, #28]
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	3720      	adds	r7, #32
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	0801deb0 	.word	0x0801deb0
 80131d0:	0801e0a4 	.word	0x0801e0a4
 80131d4:	0801def4 	.word	0x0801def4
 80131d8:	0801e0d4 	.word	0x0801e0d4
 80131dc:	2000afe8 	.word	0x2000afe8
 80131e0:	08013031 	.word	0x08013031
 80131e4:	2000afec 	.word	0x2000afec

080131e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b084      	sub	sp, #16
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d106      	bne.n	8013204 <tcp_update_rcv_ann_wnd+0x1c>
 80131f6:	4b25      	ldr	r3, [pc, #148]	; (801328c <tcp_update_rcv_ann_wnd+0xa4>)
 80131f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80131fc:	4924      	ldr	r1, [pc, #144]	; (8013290 <tcp_update_rcv_ann_wnd+0xa8>)
 80131fe:	4825      	ldr	r0, [pc, #148]	; (8013294 <tcp_update_rcv_ann_wnd+0xac>)
 8013200:	f008 fe28 	bl	801be54 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801320c:	4413      	add	r3, r2
 801320e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013218:	f640 3168 	movw	r1, #2920	; 0xb68
 801321c:	428a      	cmp	r2, r1
 801321e:	bf28      	it	cs
 8013220:	460a      	movcs	r2, r1
 8013222:	b292      	uxth	r2, r2
 8013224:	4413      	add	r3, r2
 8013226:	68fa      	ldr	r2, [r7, #12]
 8013228:	1ad3      	subs	r3, r2, r3
 801322a:	2b00      	cmp	r3, #0
 801322c:	db08      	blt.n	8013240 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801323a:	68fa      	ldr	r2, [r7, #12]
 801323c:	1ad3      	subs	r3, r2, r3
 801323e:	e020      	b.n	8013282 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013248:	1ad3      	subs	r3, r2, r3
 801324a:	2b00      	cmp	r3, #0
 801324c:	dd03      	ble.n	8013256 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2200      	movs	r2, #0
 8013252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013254:	e014      	b.n	8013280 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801325e:	1ad3      	subs	r3, r2, r3
 8013260:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013268:	d306      	bcc.n	8013278 <tcp_update_rcv_ann_wnd+0x90>
 801326a:	4b08      	ldr	r3, [pc, #32]	; (801328c <tcp_update_rcv_ann_wnd+0xa4>)
 801326c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013270:	4909      	ldr	r1, [pc, #36]	; (8013298 <tcp_update_rcv_ann_wnd+0xb0>)
 8013272:	4808      	ldr	r0, [pc, #32]	; (8013294 <tcp_update_rcv_ann_wnd+0xac>)
 8013274:	f008 fdee 	bl	801be54 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	b29a      	uxth	r2, r3
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013280:	2300      	movs	r3, #0
  }
}
 8013282:	4618      	mov	r0, r3
 8013284:	3710      	adds	r7, #16
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	0801deb0 	.word	0x0801deb0
 8013290:	0801e10c 	.word	0x0801e10c
 8013294:	0801def4 	.word	0x0801def4
 8013298:	0801e130 	.word	0x0801e130

0801329c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	460b      	mov	r3, r1
 80132a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d107      	bne.n	80132be <tcp_recved+0x22>
 80132ae:	4b20      	ldr	r3, [pc, #128]	; (8013330 <tcp_recved+0x94>)
 80132b0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80132b4:	491f      	ldr	r1, [pc, #124]	; (8013334 <tcp_recved+0x98>)
 80132b6:	4820      	ldr	r0, [pc, #128]	; (8013338 <tcp_recved+0x9c>)
 80132b8:	f008 fdcc 	bl	801be54 <iprintf>
 80132bc:	e034      	b.n	8013328 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	7d1b      	ldrb	r3, [r3, #20]
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	d106      	bne.n	80132d4 <tcp_recved+0x38>
 80132c6:	4b1a      	ldr	r3, [pc, #104]	; (8013330 <tcp_recved+0x94>)
 80132c8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80132cc:	491b      	ldr	r1, [pc, #108]	; (801333c <tcp_recved+0xa0>)
 80132ce:	481a      	ldr	r0, [pc, #104]	; (8013338 <tcp_recved+0x9c>)
 80132d0:	f008 fdc0 	bl	801be54 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80132d8:	887b      	ldrh	r3, [r7, #2]
 80132da:	4413      	add	r3, r2
 80132dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80132de:	89fb      	ldrh	r3, [r7, #14]
 80132e0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80132e4:	4293      	cmp	r3, r2
 80132e6:	d804      	bhi.n	80132f2 <tcp_recved+0x56>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132ec:	89fa      	ldrh	r2, [r7, #14]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d204      	bcs.n	80132fc <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80132f8:	851a      	strh	r2, [r3, #40]	; 0x28
 80132fa:	e002      	b.n	8013302 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	89fa      	ldrh	r2, [r7, #14]
 8013300:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f7ff ff70 	bl	80131e8 <tcp_update_rcv_ann_wnd>
 8013308:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013310:	4293      	cmp	r3, r2
 8013312:	d909      	bls.n	8013328 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	8b5b      	ldrh	r3, [r3, #26]
 8013318:	f043 0302 	orr.w	r3, r3, #2
 801331c:	b29a      	uxth	r2, r3
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f004 fce0 	bl	8017ce8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013328:	3710      	adds	r7, #16
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
 801332e:	bf00      	nop
 8013330:	0801deb0 	.word	0x0801deb0
 8013334:	0801e14c 	.word	0x0801e14c
 8013338:	0801def4 	.word	0x0801def4
 801333c:	0801e164 	.word	0x0801e164

08013340 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013340:	b480      	push	{r7}
 8013342:	b083      	sub	sp, #12
 8013344:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013346:	2300      	movs	r3, #0
 8013348:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801334a:	4b1e      	ldr	r3, [pc, #120]	; (80133c4 <tcp_new_port+0x84>)
 801334c:	881b      	ldrh	r3, [r3, #0]
 801334e:	3301      	adds	r3, #1
 8013350:	b29a      	uxth	r2, r3
 8013352:	4b1c      	ldr	r3, [pc, #112]	; (80133c4 <tcp_new_port+0x84>)
 8013354:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013356:	4b1b      	ldr	r3, [pc, #108]	; (80133c4 <tcp_new_port+0x84>)
 8013358:	881b      	ldrh	r3, [r3, #0]
 801335a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801335e:	4293      	cmp	r3, r2
 8013360:	d103      	bne.n	801336a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013362:	4b18      	ldr	r3, [pc, #96]	; (80133c4 <tcp_new_port+0x84>)
 8013364:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013368:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801336a:	2300      	movs	r3, #0
 801336c:	71fb      	strb	r3, [r7, #7]
 801336e:	e01e      	b.n	80133ae <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013370:	79fb      	ldrb	r3, [r7, #7]
 8013372:	4a15      	ldr	r2, [pc, #84]	; (80133c8 <tcp_new_port+0x88>)
 8013374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	603b      	str	r3, [r7, #0]
 801337c:	e011      	b.n	80133a2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	8ada      	ldrh	r2, [r3, #22]
 8013382:	4b10      	ldr	r3, [pc, #64]	; (80133c4 <tcp_new_port+0x84>)
 8013384:	881b      	ldrh	r3, [r3, #0]
 8013386:	429a      	cmp	r2, r3
 8013388:	d108      	bne.n	801339c <tcp_new_port+0x5c>
        n++;
 801338a:	88bb      	ldrh	r3, [r7, #4]
 801338c:	3301      	adds	r3, #1
 801338e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013390:	88bb      	ldrh	r3, [r7, #4]
 8013392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013396:	d3d8      	bcc.n	801334a <tcp_new_port+0xa>
          return 0;
 8013398:	2300      	movs	r3, #0
 801339a:	e00d      	b.n	80133b8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	603b      	str	r3, [r7, #0]
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d1ea      	bne.n	801337e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80133a8:	79fb      	ldrb	r3, [r7, #7]
 80133aa:	3301      	adds	r3, #1
 80133ac:	71fb      	strb	r3, [r7, #7]
 80133ae:	79fb      	ldrb	r3, [r7, #7]
 80133b0:	2b03      	cmp	r3, #3
 80133b2:	d9dd      	bls.n	8013370 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80133b4:	4b03      	ldr	r3, [pc, #12]	; (80133c4 <tcp_new_port+0x84>)
 80133b6:	881b      	ldrh	r3, [r3, #0]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	370c      	adds	r7, #12
 80133bc:	46bd      	mov	sp, r7
 80133be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c2:	4770      	bx	lr
 80133c4:	20000078 	.word	0x20000078
 80133c8:	08020030 	.word	0x08020030

080133cc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b08a      	sub	sp, #40	; 0x28
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	603b      	str	r3, [r7, #0]
 80133d8:	4613      	mov	r3, r2
 80133da:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80133dc:	2300      	movs	r3, #0
 80133de:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d109      	bne.n	80133fa <tcp_connect+0x2e>
 80133e6:	4b7d      	ldr	r3, [pc, #500]	; (80135dc <tcp_connect+0x210>)
 80133e8:	f240 4235 	movw	r2, #1077	; 0x435
 80133ec:	497c      	ldr	r1, [pc, #496]	; (80135e0 <tcp_connect+0x214>)
 80133ee:	487d      	ldr	r0, [pc, #500]	; (80135e4 <tcp_connect+0x218>)
 80133f0:	f008 fd30 	bl	801be54 <iprintf>
 80133f4:	f06f 030f 	mvn.w	r3, #15
 80133f8:	e0ec      	b.n	80135d4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d109      	bne.n	8013414 <tcp_connect+0x48>
 8013400:	4b76      	ldr	r3, [pc, #472]	; (80135dc <tcp_connect+0x210>)
 8013402:	f240 4236 	movw	r2, #1078	; 0x436
 8013406:	4978      	ldr	r1, [pc, #480]	; (80135e8 <tcp_connect+0x21c>)
 8013408:	4876      	ldr	r0, [pc, #472]	; (80135e4 <tcp_connect+0x218>)
 801340a:	f008 fd23 	bl	801be54 <iprintf>
 801340e:	f06f 030f 	mvn.w	r3, #15
 8013412:	e0df      	b.n	80135d4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	7d1b      	ldrb	r3, [r3, #20]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d009      	beq.n	8013430 <tcp_connect+0x64>
 801341c:	4b6f      	ldr	r3, [pc, #444]	; (80135dc <tcp_connect+0x210>)
 801341e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8013422:	4972      	ldr	r1, [pc, #456]	; (80135ec <tcp_connect+0x220>)
 8013424:	486f      	ldr	r0, [pc, #444]	; (80135e4 <tcp_connect+0x218>)
 8013426:	f008 fd15 	bl	801be54 <iprintf>
 801342a:	f06f 0309 	mvn.w	r3, #9
 801342e:	e0d1      	b.n	80135d4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d002      	beq.n	801343c <tcp_connect+0x70>
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	e000      	b.n	801343e <tcp_connect+0x72>
 801343c:	2300      	movs	r3, #0
 801343e:	68fa      	ldr	r2, [r7, #12]
 8013440:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	88fa      	ldrh	r2, [r7, #6]
 8013446:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	7a1b      	ldrb	r3, [r3, #8]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d006      	beq.n	801345e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	7a1b      	ldrb	r3, [r3, #8]
 8013454:	4618      	mov	r0, r3
 8013456:	f7fe fc4f 	bl	8011cf8 <netif_get_by_index>
 801345a:	6278      	str	r0, [r7, #36]	; 0x24
 801345c:	e005      	b.n	801346a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	3304      	adds	r3, #4
 8013462:	4618      	mov	r0, r3
 8013464:	f006 ffb0 	bl	801a3c8 <ip4_route>
 8013468:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346c:	2b00      	cmp	r3, #0
 801346e:	d102      	bne.n	8013476 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8013470:	f06f 0303 	mvn.w	r3, #3
 8013474:	e0ae      	b.n	80135d4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d003      	beq.n	8013484 <tcp_connect+0xb8>
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d111      	bne.n	80134a8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8013484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013486:	2b00      	cmp	r3, #0
 8013488:	d002      	beq.n	8013490 <tcp_connect+0xc4>
 801348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801348c:	3304      	adds	r3, #4
 801348e:	e000      	b.n	8013492 <tcp_connect+0xc6>
 8013490:	2300      	movs	r3, #0
 8013492:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8013494:	69fb      	ldr	r3, [r7, #28]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d102      	bne.n	80134a0 <tcp_connect+0xd4>
      return ERR_RTE;
 801349a:	f06f 0303 	mvn.w	r3, #3
 801349e:	e099      	b.n	80135d4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80134a0:	69fb      	ldr	r3, [r7, #28]
 80134a2:	681a      	ldr	r2, [r3, #0]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	8adb      	ldrh	r3, [r3, #22]
 80134ac:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	8adb      	ldrh	r3, [r3, #22]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d10c      	bne.n	80134d0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80134b6:	f7ff ff43 	bl	8013340 <tcp_new_port>
 80134ba:	4603      	mov	r3, r0
 80134bc:	461a      	mov	r2, r3
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	8adb      	ldrh	r3, [r3, #22]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d102      	bne.n	80134d0 <tcp_connect+0x104>
      return ERR_BUF;
 80134ca:	f06f 0301 	mvn.w	r3, #1
 80134ce:	e081      	b.n	80135d4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80134d0:	68f8      	ldr	r0, [r7, #12]
 80134d2:	f001 f881 	bl	80145d8 <tcp_next_iss>
 80134d6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2200      	movs	r2, #0
 80134dc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	697a      	ldr	r2, [r7, #20]
 80134e2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	1e5a      	subs	r2, r3, #1
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	1e5a      	subs	r2, r3, #1
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	1e5a      	subs	r2, r3, #1
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801351a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013524:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	3304      	adds	r3, #4
 801352e:	461a      	mov	r2, r3
 8013530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013532:	f001 f877 	bl	8014624 <tcp_eff_send_mss_netif>
 8013536:	4603      	mov	r3, r0
 8013538:	461a      	mov	r2, r3
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2201      	movs	r2, #1
 8013542:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	683a      	ldr	r2, [r7, #0]
 801354a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801354e:	2102      	movs	r1, #2
 8013550:	68f8      	ldr	r0, [r7, #12]
 8013552:	f004 fadb 	bl	8017b0c <tcp_enqueue_flags>
 8013556:	4603      	mov	r3, r0
 8013558:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801355a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d136      	bne.n	80135d0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	2202      	movs	r2, #2
 8013566:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8013568:	8b7b      	ldrh	r3, [r7, #26]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d021      	beq.n	80135b2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801356e:	4b20      	ldr	r3, [pc, #128]	; (80135f0 <tcp_connect+0x224>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	68fa      	ldr	r2, [r7, #12]
 8013574:	429a      	cmp	r2, r3
 8013576:	d105      	bne.n	8013584 <tcp_connect+0x1b8>
 8013578:	4b1d      	ldr	r3, [pc, #116]	; (80135f0 <tcp_connect+0x224>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	68db      	ldr	r3, [r3, #12]
 801357e:	4a1c      	ldr	r2, [pc, #112]	; (80135f0 <tcp_connect+0x224>)
 8013580:	6013      	str	r3, [r2, #0]
 8013582:	e013      	b.n	80135ac <tcp_connect+0x1e0>
 8013584:	4b1a      	ldr	r3, [pc, #104]	; (80135f0 <tcp_connect+0x224>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	623b      	str	r3, [r7, #32]
 801358a:	e00c      	b.n	80135a6 <tcp_connect+0x1da>
 801358c:	6a3b      	ldr	r3, [r7, #32]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	429a      	cmp	r2, r3
 8013594:	d104      	bne.n	80135a0 <tcp_connect+0x1d4>
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	68da      	ldr	r2, [r3, #12]
 801359a:	6a3b      	ldr	r3, [r7, #32]
 801359c:	60da      	str	r2, [r3, #12]
 801359e:	e005      	b.n	80135ac <tcp_connect+0x1e0>
 80135a0:	6a3b      	ldr	r3, [r7, #32]
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	623b      	str	r3, [r7, #32]
 80135a6:	6a3b      	ldr	r3, [r7, #32]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d1ef      	bne.n	801358c <tcp_connect+0x1c0>
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	2200      	movs	r2, #0
 80135b0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80135b2:	4b10      	ldr	r3, [pc, #64]	; (80135f4 <tcp_connect+0x228>)
 80135b4:	681a      	ldr	r2, [r3, #0]
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	60da      	str	r2, [r3, #12]
 80135ba:	4a0e      	ldr	r2, [pc, #56]	; (80135f4 <tcp_connect+0x228>)
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	6013      	str	r3, [r2, #0]
 80135c0:	f005 fb08 	bl	8018bd4 <tcp_timer_needed>
 80135c4:	4b0c      	ldr	r3, [pc, #48]	; (80135f8 <tcp_connect+0x22c>)
 80135c6:	2201      	movs	r2, #1
 80135c8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80135ca:	68f8      	ldr	r0, [r7, #12]
 80135cc:	f004 fb8c 	bl	8017ce8 <tcp_output>
  }
  return ret;
 80135d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3728      	adds	r7, #40	; 0x28
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}
 80135dc:	0801deb0 	.word	0x0801deb0
 80135e0:	0801e18c 	.word	0x0801e18c
 80135e4:	0801def4 	.word	0x0801def4
 80135e8:	0801e1a8 	.word	0x0801e1a8
 80135ec:	0801e1c4 	.word	0x0801e1c4
 80135f0:	2000afe8 	.word	0x2000afe8
 80135f4:	2000aff0 	.word	0x2000aff0
 80135f8:	2000aff8 	.word	0x2000aff8

080135fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80135fc:	b5b0      	push	{r4, r5, r7, lr}
 80135fe:	b090      	sub	sp, #64	; 0x40
 8013600:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013602:	2300      	movs	r3, #0
 8013604:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013608:	4b94      	ldr	r3, [pc, #592]	; (801385c <tcp_slowtmr+0x260>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	3301      	adds	r3, #1
 801360e:	4a93      	ldr	r2, [pc, #588]	; (801385c <tcp_slowtmr+0x260>)
 8013610:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013612:	4b93      	ldr	r3, [pc, #588]	; (8013860 <tcp_slowtmr+0x264>)
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	3301      	adds	r3, #1
 8013618:	b2da      	uxtb	r2, r3
 801361a:	4b91      	ldr	r3, [pc, #580]	; (8013860 <tcp_slowtmr+0x264>)
 801361c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801361e:	2300      	movs	r3, #0
 8013620:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013622:	4b90      	ldr	r3, [pc, #576]	; (8013864 <tcp_slowtmr+0x268>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013628:	e29f      	b.n	8013b6a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362c:	7d1b      	ldrb	r3, [r3, #20]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d106      	bne.n	8013640 <tcp_slowtmr+0x44>
 8013632:	4b8d      	ldr	r3, [pc, #564]	; (8013868 <tcp_slowtmr+0x26c>)
 8013634:	f240 42be 	movw	r2, #1214	; 0x4be
 8013638:	498c      	ldr	r1, [pc, #560]	; (801386c <tcp_slowtmr+0x270>)
 801363a:	488d      	ldr	r0, [pc, #564]	; (8013870 <tcp_slowtmr+0x274>)
 801363c:	f008 fc0a 	bl	801be54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013642:	7d1b      	ldrb	r3, [r3, #20]
 8013644:	2b01      	cmp	r3, #1
 8013646:	d106      	bne.n	8013656 <tcp_slowtmr+0x5a>
 8013648:	4b87      	ldr	r3, [pc, #540]	; (8013868 <tcp_slowtmr+0x26c>)
 801364a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801364e:	4989      	ldr	r1, [pc, #548]	; (8013874 <tcp_slowtmr+0x278>)
 8013650:	4887      	ldr	r0, [pc, #540]	; (8013870 <tcp_slowtmr+0x274>)
 8013652:	f008 fbff 	bl	801be54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013658:	7d1b      	ldrb	r3, [r3, #20]
 801365a:	2b0a      	cmp	r3, #10
 801365c:	d106      	bne.n	801366c <tcp_slowtmr+0x70>
 801365e:	4b82      	ldr	r3, [pc, #520]	; (8013868 <tcp_slowtmr+0x26c>)
 8013660:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013664:	4984      	ldr	r1, [pc, #528]	; (8013878 <tcp_slowtmr+0x27c>)
 8013666:	4882      	ldr	r0, [pc, #520]	; (8013870 <tcp_slowtmr+0x274>)
 8013668:	f008 fbf4 	bl	801be54 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366e:	7f9a      	ldrb	r2, [r3, #30]
 8013670:	4b7b      	ldr	r3, [pc, #492]	; (8013860 <tcp_slowtmr+0x264>)
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	429a      	cmp	r2, r3
 8013676:	d105      	bne.n	8013684 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801367a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801367e:	68db      	ldr	r3, [r3, #12]
 8013680:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013682:	e272      	b.n	8013b6a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013684:	4b76      	ldr	r3, [pc, #472]	; (8013860 <tcp_slowtmr+0x264>)
 8013686:	781a      	ldrb	r2, [r3, #0]
 8013688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801368a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801368c:	2300      	movs	r3, #0
 801368e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013692:	2300      	movs	r3, #0
 8013694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369a:	7d1b      	ldrb	r3, [r3, #20]
 801369c:	2b02      	cmp	r3, #2
 801369e:	d10a      	bne.n	80136b6 <tcp_slowtmr+0xba>
 80136a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136a6:	2b05      	cmp	r3, #5
 80136a8:	d905      	bls.n	80136b6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80136aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136ae:	3301      	adds	r3, #1
 80136b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136b4:	e11e      	b.n	80138f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80136b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136bc:	2b0b      	cmp	r3, #11
 80136be:	d905      	bls.n	80136cc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80136c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136c4:	3301      	adds	r3, #1
 80136c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136ca:	e113      	b.n	80138f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80136cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d075      	beq.n	80137c2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80136d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d006      	beq.n	80136ec <tcp_slowtmr+0xf0>
 80136de:	4b62      	ldr	r3, [pc, #392]	; (8013868 <tcp_slowtmr+0x26c>)
 80136e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80136e4:	4965      	ldr	r1, [pc, #404]	; (801387c <tcp_slowtmr+0x280>)
 80136e6:	4862      	ldr	r0, [pc, #392]	; (8013870 <tcp_slowtmr+0x274>)
 80136e8:	f008 fbb4 	bl	801be54 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80136ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d106      	bne.n	8013702 <tcp_slowtmr+0x106>
 80136f4:	4b5c      	ldr	r3, [pc, #368]	; (8013868 <tcp_slowtmr+0x26c>)
 80136f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80136fa:	4961      	ldr	r1, [pc, #388]	; (8013880 <tcp_slowtmr+0x284>)
 80136fc:	485c      	ldr	r0, [pc, #368]	; (8013870 <tcp_slowtmr+0x274>)
 80136fe:	f008 fba9 	bl	801be54 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013704:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013708:	2b0b      	cmp	r3, #11
 801370a:	d905      	bls.n	8013718 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801370c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013710:	3301      	adds	r3, #1
 8013712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013716:	e0ed      	b.n	80138f4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801371e:	3b01      	subs	r3, #1
 8013720:	4a58      	ldr	r2, [pc, #352]	; (8013884 <tcp_slowtmr+0x288>)
 8013722:	5cd3      	ldrb	r3, [r2, r3]
 8013724:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013728:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801372c:	7c7a      	ldrb	r2, [r7, #17]
 801372e:	429a      	cmp	r2, r3
 8013730:	d907      	bls.n	8013742 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013734:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013738:	3301      	adds	r3, #1
 801373a:	b2da      	uxtb	r2, r3
 801373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801373e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013744:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013748:	7c7a      	ldrb	r2, [r7, #17]
 801374a:	429a      	cmp	r2, r3
 801374c:	f200 80d2 	bhi.w	80138f4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013750:	2301      	movs	r3, #1
 8013752:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801375a:	2b00      	cmp	r3, #0
 801375c:	d108      	bne.n	8013770 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801375e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013760:	f005 f96a 	bl	8018a38 <tcp_zero_window_probe>
 8013764:	4603      	mov	r3, r0
 8013766:	2b00      	cmp	r3, #0
 8013768:	d014      	beq.n	8013794 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801376a:	2300      	movs	r3, #0
 801376c:	623b      	str	r3, [r7, #32]
 801376e:	e011      	b.n	8013794 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013776:	4619      	mov	r1, r3
 8013778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801377a:	f004 f82f 	bl	80177dc <tcp_split_unsent_seg>
 801377e:	4603      	mov	r3, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	d107      	bne.n	8013794 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013786:	f004 faaf 	bl	8017ce8 <tcp_output>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d101      	bne.n	8013794 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013790:	2300      	movs	r3, #0
 8013792:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013794:	6a3b      	ldr	r3, [r7, #32]
 8013796:	2b00      	cmp	r3, #0
 8013798:	f000 80ac 	beq.w	80138f4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801379e:	2200      	movs	r2, #0
 80137a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80137a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80137aa:	2b06      	cmp	r3, #6
 80137ac:	f200 80a2 	bhi.w	80138f4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80137b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80137b6:	3301      	adds	r3, #1
 80137b8:	b2da      	uxtb	r2, r3
 80137ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80137c0:	e098      	b.n	80138f4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80137c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	db0f      	blt.n	80137ec <tcp_slowtmr+0x1f0>
 80137cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80137d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d008      	beq.n	80137ec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	3301      	adds	r3, #1
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	b21a      	sxth	r2, r3
 80137e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80137ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80137f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80137f8:	429a      	cmp	r2, r3
 80137fa:	db7b      	blt.n	80138f4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80137fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137fe:	f004 fd67 	bl	80182d0 <tcp_rexmit_rto_prepare>
 8013802:	4603      	mov	r3, r0
 8013804:	2b00      	cmp	r3, #0
 8013806:	d007      	beq.n	8013818 <tcp_slowtmr+0x21c>
 8013808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801380c:	2b00      	cmp	r3, #0
 801380e:	d171      	bne.n	80138f4 <tcp_slowtmr+0x2f8>
 8013810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013814:	2b00      	cmp	r3, #0
 8013816:	d06d      	beq.n	80138f4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381a:	7d1b      	ldrb	r3, [r3, #20]
 801381c:	2b02      	cmp	r3, #2
 801381e:	d03a      	beq.n	8013896 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013826:	2b0c      	cmp	r3, #12
 8013828:	bf28      	it	cs
 801382a:	230c      	movcs	r3, #12
 801382c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013830:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013834:	10db      	asrs	r3, r3, #3
 8013836:	b21b      	sxth	r3, r3
 8013838:	461a      	mov	r2, r3
 801383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013840:	4413      	add	r3, r2
 8013842:	7efa      	ldrb	r2, [r7, #27]
 8013844:	4910      	ldr	r1, [pc, #64]	; (8013888 <tcp_slowtmr+0x28c>)
 8013846:	5c8a      	ldrb	r2, [r1, r2]
 8013848:	4093      	lsls	r3, r2
 801384a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013852:	4293      	cmp	r3, r2
 8013854:	dc1a      	bgt.n	801388c <tcp_slowtmr+0x290>
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	b21a      	sxth	r2, r3
 801385a:	e019      	b.n	8013890 <tcp_slowtmr+0x294>
 801385c:	2000afe4 	.word	0x2000afe4
 8013860:	2000affa 	.word	0x2000affa
 8013864:	2000aff0 	.word	0x2000aff0
 8013868:	0801deb0 	.word	0x0801deb0
 801386c:	0801e1f4 	.word	0x0801e1f4
 8013870:	0801def4 	.word	0x0801def4
 8013874:	0801e220 	.word	0x0801e220
 8013878:	0801e24c 	.word	0x0801e24c
 801387c:	0801e27c 	.word	0x0801e27c
 8013880:	0801e2b0 	.word	0x0801e2b0
 8013884:	08020028 	.word	0x08020028
 8013888:	08020018 	.word	0x08020018
 801388c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013898:	2200      	movs	r2, #0
 801389a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80138a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80138a8:	4293      	cmp	r3, r2
 80138aa:	bf28      	it	cs
 80138ac:	4613      	movcs	r3, r2
 80138ae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80138b0:	8a7b      	ldrh	r3, [r7, #18]
 80138b2:	085b      	lsrs	r3, r3, #1
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80138bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80138c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138c6:	005b      	lsls	r3, r3, #1
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d206      	bcs.n	80138dc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80138ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138d2:	005b      	lsls	r3, r3, #1
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80138dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138de:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80138e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80138e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e8:	2200      	movs	r2, #0
 80138ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80138ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138f0:	f004 fd5e 	bl	80183b0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80138f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f6:	7d1b      	ldrb	r3, [r3, #20]
 80138f8:	2b06      	cmp	r3, #6
 80138fa:	d111      	bne.n	8013920 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80138fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138fe:	8b5b      	ldrh	r3, [r3, #26]
 8013900:	f003 0310 	and.w	r3, r3, #16
 8013904:	2b00      	cmp	r3, #0
 8013906:	d00b      	beq.n	8013920 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013908:	4b9d      	ldr	r3, [pc, #628]	; (8013b80 <tcp_slowtmr+0x584>)
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801390e:	6a1b      	ldr	r3, [r3, #32]
 8013910:	1ad3      	subs	r3, r2, r3
 8013912:	2b28      	cmp	r3, #40	; 0x28
 8013914:	d904      	bls.n	8013920 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8013916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801391a:	3301      	adds	r3, #1
 801391c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013922:	7a5b      	ldrb	r3, [r3, #9]
 8013924:	f003 0308 	and.w	r3, r3, #8
 8013928:	2b00      	cmp	r3, #0
 801392a:	d04c      	beq.n	80139c6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801392e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013930:	2b04      	cmp	r3, #4
 8013932:	d003      	beq.n	801393c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013936:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013938:	2b07      	cmp	r3, #7
 801393a:	d144      	bne.n	80139c6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801393c:	4b90      	ldr	r3, [pc, #576]	; (8013b80 <tcp_slowtmr+0x584>)
 801393e:	681a      	ldr	r2, [r3, #0]
 8013940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013942:	6a1b      	ldr	r3, [r3, #32]
 8013944:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801394c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8013950:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8013954:	498b      	ldr	r1, [pc, #556]	; (8013b84 <tcp_slowtmr+0x588>)
 8013956:	fba1 1303 	umull	r1, r3, r1, r3
 801395a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801395c:	429a      	cmp	r2, r3
 801395e:	d90a      	bls.n	8013976 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013964:	3301      	adds	r3, #1
 8013966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801396a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801396e:	3301      	adds	r3, #1
 8013970:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013974:	e027      	b.n	80139c6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013976:	4b82      	ldr	r3, [pc, #520]	; (8013b80 <tcp_slowtmr+0x584>)
 8013978:	681a      	ldr	r2, [r3, #0]
 801397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397c:	6a1b      	ldr	r3, [r3, #32]
 801397e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013982:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013988:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801398c:	4618      	mov	r0, r3
 801398e:	4b7e      	ldr	r3, [pc, #504]	; (8013b88 <tcp_slowtmr+0x58c>)
 8013990:	fb00 f303 	mul.w	r3, r0, r3
 8013994:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013996:	497b      	ldr	r1, [pc, #492]	; (8013b84 <tcp_slowtmr+0x588>)
 8013998:	fba1 1303 	umull	r1, r3, r1, r3
 801399c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801399e:	429a      	cmp	r2, r3
 80139a0:	d911      	bls.n	80139c6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80139a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80139a4:	f005 f808 	bl	80189b8 <tcp_keepalive>
 80139a8:	4603      	mov	r3, r0
 80139aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80139ae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d107      	bne.n	80139c6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80139b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80139bc:	3301      	adds	r3, #1
 80139be:	b2da      	uxtb	r2, r3
 80139c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139c2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80139c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d011      	beq.n	80139f2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80139ce:	4b6c      	ldr	r3, [pc, #432]	; (8013b80 <tcp_slowtmr+0x584>)
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139d4:	6a1b      	ldr	r3, [r3, #32]
 80139d6:	1ad2      	subs	r2, r2, r3
 80139d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80139de:	4619      	mov	r1, r3
 80139e0:	460b      	mov	r3, r1
 80139e2:	005b      	lsls	r3, r3, #1
 80139e4:	440b      	add	r3, r1
 80139e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d302      	bcc.n	80139f2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80139ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80139ee:	f000 fec3 	bl	8014778 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80139f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f4:	7d1b      	ldrb	r3, [r3, #20]
 80139f6:	2b03      	cmp	r3, #3
 80139f8:	d10b      	bne.n	8013a12 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80139fa:	4b61      	ldr	r3, [pc, #388]	; (8013b80 <tcp_slowtmr+0x584>)
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a00:	6a1b      	ldr	r3, [r3, #32]
 8013a02:	1ad3      	subs	r3, r2, r3
 8013a04:	2b28      	cmp	r3, #40	; 0x28
 8013a06:	d904      	bls.n	8013a12 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a0c:	3301      	adds	r3, #1
 8013a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a14:	7d1b      	ldrb	r3, [r3, #20]
 8013a16:	2b09      	cmp	r3, #9
 8013a18:	d10b      	bne.n	8013a32 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013a1a:	4b59      	ldr	r3, [pc, #356]	; (8013b80 <tcp_slowtmr+0x584>)
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a20:	6a1b      	ldr	r3, [r3, #32]
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	2bf0      	cmp	r3, #240	; 0xf0
 8013a26:	d904      	bls.n	8013a32 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a2c:	3301      	adds	r3, #1
 8013a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d060      	beq.n	8013afc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8013a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a40:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013a42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a44:	f000 fce4 	bl	8014410 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d010      	beq.n	8013a70 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013a4e:	4b4f      	ldr	r3, [pc, #316]	; (8013b8c <tcp_slowtmr+0x590>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d106      	bne.n	8013a66 <tcp_slowtmr+0x46a>
 8013a58:	4b4d      	ldr	r3, [pc, #308]	; (8013b90 <tcp_slowtmr+0x594>)
 8013a5a:	f240 526d 	movw	r2, #1389	; 0x56d
 8013a5e:	494d      	ldr	r1, [pc, #308]	; (8013b94 <tcp_slowtmr+0x598>)
 8013a60:	484d      	ldr	r0, [pc, #308]	; (8013b98 <tcp_slowtmr+0x59c>)
 8013a62:	f008 f9f7 	bl	801be54 <iprintf>
        prev->next = pcb->next;
 8013a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a68:	68da      	ldr	r2, [r3, #12]
 8013a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6c:	60da      	str	r2, [r3, #12]
 8013a6e:	e00f      	b.n	8013a90 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013a70:	4b46      	ldr	r3, [pc, #280]	; (8013b8c <tcp_slowtmr+0x590>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a76:	429a      	cmp	r2, r3
 8013a78:	d006      	beq.n	8013a88 <tcp_slowtmr+0x48c>
 8013a7a:	4b45      	ldr	r3, [pc, #276]	; (8013b90 <tcp_slowtmr+0x594>)
 8013a7c:	f240 5271 	movw	r2, #1393	; 0x571
 8013a80:	4946      	ldr	r1, [pc, #280]	; (8013b9c <tcp_slowtmr+0x5a0>)
 8013a82:	4845      	ldr	r0, [pc, #276]	; (8013b98 <tcp_slowtmr+0x59c>)
 8013a84:	f008 f9e6 	bl	801be54 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	4a3f      	ldr	r2, [pc, #252]	; (8013b8c <tcp_slowtmr+0x590>)
 8013a8e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d013      	beq.n	8013ac0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013aa0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa4:	3304      	adds	r3, #4
 8013aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013aa8:	8ad2      	ldrh	r2, [r2, #22]
 8013aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013aac:	8b09      	ldrh	r1, [r1, #24]
 8013aae:	9102      	str	r1, [sp, #8]
 8013ab0:	9201      	str	r2, [sp, #4]
 8013ab2:	9300      	str	r3, [sp, #0]
 8013ab4:	462b      	mov	r3, r5
 8013ab6:	4622      	mov	r2, r4
 8013ab8:	4601      	mov	r1, r0
 8013aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013abc:	f004 fec8 	bl	8018850 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac2:	691b      	ldr	r3, [r3, #16]
 8013ac4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac8:	7d1b      	ldrb	r3, [r3, #20]
 8013aca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ace:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad2:	68db      	ldr	r3, [r3, #12]
 8013ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013ad6:	6838      	ldr	r0, [r7, #0]
 8013ad8:	f7fe ff1e 	bl	8012918 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8013adc:	4b30      	ldr	r3, [pc, #192]	; (8013ba0 <tcp_slowtmr+0x5a4>)
 8013ade:	2200      	movs	r2, #0
 8013ae0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d004      	beq.n	8013af2 <tcp_slowtmr+0x4f6>
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	f06f 010c 	mvn.w	r1, #12
 8013aee:	68b8      	ldr	r0, [r7, #8]
 8013af0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013af2:	4b2b      	ldr	r3, [pc, #172]	; (8013ba0 <tcp_slowtmr+0x5a4>)
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d037      	beq.n	8013b6a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8013afa:	e590      	b.n	801361e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8013afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013afe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8013b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b08:	7f1b      	ldrb	r3, [r3, #28]
 8013b0a:	3301      	adds	r3, #1
 8013b0c:	b2da      	uxtb	r2, r3
 8013b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b10:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b14:	7f1a      	ldrb	r2, [r3, #28]
 8013b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b18:	7f5b      	ldrb	r3, [r3, #29]
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d325      	bcc.n	8013b6a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8013b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b20:	2200      	movs	r2, #0
 8013b22:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013b24:	4b1e      	ldr	r3, [pc, #120]	; (8013ba0 <tcp_slowtmr+0x5a4>)
 8013b26:	2200      	movs	r2, #0
 8013b28:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d00b      	beq.n	8013b4c <tcp_slowtmr+0x550>
 8013b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b3c:	6912      	ldr	r2, [r2, #16]
 8013b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013b40:	4610      	mov	r0, r2
 8013b42:	4798      	blx	r3
 8013b44:	4603      	mov	r3, r0
 8013b46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8013b4a:	e002      	b.n	8013b52 <tcp_slowtmr+0x556>
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013b52:	4b13      	ldr	r3, [pc, #76]	; (8013ba0 <tcp_slowtmr+0x5a4>)
 8013b54:	781b      	ldrb	r3, [r3, #0]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d000      	beq.n	8013b5c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8013b5a:	e560      	b.n	801361e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013b5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d102      	bne.n	8013b6a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b66:	f004 f8bf 	bl	8017ce8 <tcp_output>
  while (pcb != NULL) {
 8013b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	f47f ad5c 	bne.w	801362a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013b72:	2300      	movs	r3, #0
 8013b74:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8013b76:	4b0b      	ldr	r3, [pc, #44]	; (8013ba4 <tcp_slowtmr+0x5a8>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013b7c:	e067      	b.n	8013c4e <tcp_slowtmr+0x652>
 8013b7e:	bf00      	nop
 8013b80:	2000afe4 	.word	0x2000afe4
 8013b84:	10624dd3 	.word	0x10624dd3
 8013b88:	000124f8 	.word	0x000124f8
 8013b8c:	2000aff0 	.word	0x2000aff0
 8013b90:	0801deb0 	.word	0x0801deb0
 8013b94:	0801e2e8 	.word	0x0801e2e8
 8013b98:	0801def4 	.word	0x0801def4
 8013b9c:	0801e314 	.word	0x0801e314
 8013ba0:	2000aff8 	.word	0x2000aff8
 8013ba4:	2000aff4 	.word	0x2000aff4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013baa:	7d1b      	ldrb	r3, [r3, #20]
 8013bac:	2b0a      	cmp	r3, #10
 8013bae:	d006      	beq.n	8013bbe <tcp_slowtmr+0x5c2>
 8013bb0:	4b2b      	ldr	r3, [pc, #172]	; (8013c60 <tcp_slowtmr+0x664>)
 8013bb2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8013bb6:	492b      	ldr	r1, [pc, #172]	; (8013c64 <tcp_slowtmr+0x668>)
 8013bb8:	482b      	ldr	r0, [pc, #172]	; (8013c68 <tcp_slowtmr+0x66c>)
 8013bba:	f008 f94b 	bl	801be54 <iprintf>
    pcb_remove = 0;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013bc4:	4b29      	ldr	r3, [pc, #164]	; (8013c6c <tcp_slowtmr+0x670>)
 8013bc6:	681a      	ldr	r2, [r3, #0]
 8013bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bca:	6a1b      	ldr	r3, [r3, #32]
 8013bcc:	1ad3      	subs	r3, r2, r3
 8013bce:	2bf0      	cmp	r3, #240	; 0xf0
 8013bd0:	d904      	bls.n	8013bdc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8013bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d02f      	beq.n	8013c44 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013be4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013be6:	f000 fc13 	bl	8014410 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d010      	beq.n	8013c12 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013bf0:	4b1f      	ldr	r3, [pc, #124]	; (8013c70 <tcp_slowtmr+0x674>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d106      	bne.n	8013c08 <tcp_slowtmr+0x60c>
 8013bfa:	4b19      	ldr	r3, [pc, #100]	; (8013c60 <tcp_slowtmr+0x664>)
 8013bfc:	f240 52af 	movw	r2, #1455	; 0x5af
 8013c00:	491c      	ldr	r1, [pc, #112]	; (8013c74 <tcp_slowtmr+0x678>)
 8013c02:	4819      	ldr	r0, [pc, #100]	; (8013c68 <tcp_slowtmr+0x66c>)
 8013c04:	f008 f926 	bl	801be54 <iprintf>
        prev->next = pcb->next;
 8013c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c0a:	68da      	ldr	r2, [r3, #12]
 8013c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0e:	60da      	str	r2, [r3, #12]
 8013c10:	e00f      	b.n	8013c32 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013c12:	4b17      	ldr	r3, [pc, #92]	; (8013c70 <tcp_slowtmr+0x674>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d006      	beq.n	8013c2a <tcp_slowtmr+0x62e>
 8013c1c:	4b10      	ldr	r3, [pc, #64]	; (8013c60 <tcp_slowtmr+0x664>)
 8013c1e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013c22:	4915      	ldr	r1, [pc, #84]	; (8013c78 <tcp_slowtmr+0x67c>)
 8013c24:	4810      	ldr	r0, [pc, #64]	; (8013c68 <tcp_slowtmr+0x66c>)
 8013c26:	f008 f915 	bl	801be54 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c2c:	68db      	ldr	r3, [r3, #12]
 8013c2e:	4a10      	ldr	r2, [pc, #64]	; (8013c70 <tcp_slowtmr+0x674>)
 8013c30:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c34:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c38:	68db      	ldr	r3, [r3, #12]
 8013c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013c3c:	69f8      	ldr	r0, [r7, #28]
 8013c3e:	f7fe fe6b 	bl	8012918 <tcp_free>
 8013c42:	e004      	b.n	8013c4e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d1a9      	bne.n	8013ba8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8013c54:	bf00      	nop
 8013c56:	bf00      	nop
 8013c58:	3730      	adds	r7, #48	; 0x30
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	0801deb0 	.word	0x0801deb0
 8013c64:	0801e340 	.word	0x0801e340
 8013c68:	0801def4 	.word	0x0801def4
 8013c6c:	2000afe4 	.word	0x2000afe4
 8013c70:	2000aff4 	.word	0x2000aff4
 8013c74:	0801e370 	.word	0x0801e370
 8013c78:	0801e398 	.word	0x0801e398

08013c7c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b082      	sub	sp, #8
 8013c80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013c82:	4b2d      	ldr	r3, [pc, #180]	; (8013d38 <tcp_fasttmr+0xbc>)
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	3301      	adds	r3, #1
 8013c88:	b2da      	uxtb	r2, r3
 8013c8a:	4b2b      	ldr	r3, [pc, #172]	; (8013d38 <tcp_fasttmr+0xbc>)
 8013c8c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013c8e:	4b2b      	ldr	r3, [pc, #172]	; (8013d3c <tcp_fasttmr+0xc0>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013c94:	e048      	b.n	8013d28 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	7f9a      	ldrb	r2, [r3, #30]
 8013c9a:	4b27      	ldr	r3, [pc, #156]	; (8013d38 <tcp_fasttmr+0xbc>)
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d03f      	beq.n	8013d22 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013ca2:	4b25      	ldr	r3, [pc, #148]	; (8013d38 <tcp_fasttmr+0xbc>)
 8013ca4:	781a      	ldrb	r2, [r3, #0]
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	8b5b      	ldrh	r3, [r3, #26]
 8013cae:	f003 0301 	and.w	r3, r3, #1
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d010      	beq.n	8013cd8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	8b5b      	ldrh	r3, [r3, #26]
 8013cba:	f043 0302 	orr.w	r3, r3, #2
 8013cbe:	b29a      	uxth	r2, r3
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f004 f80f 	bl	8017ce8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	8b5b      	ldrh	r3, [r3, #26]
 8013cce:	f023 0303 	bic.w	r3, r3, #3
 8013cd2:	b29a      	uxth	r2, r3
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	8b5b      	ldrh	r3, [r3, #26]
 8013cdc:	f003 0308 	and.w	r3, r3, #8
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d009      	beq.n	8013cf8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	8b5b      	ldrh	r3, [r3, #26]
 8013ce8:	f023 0308 	bic.w	r3, r3, #8
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f7fe ffa4 	bl	8012c40 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	68db      	ldr	r3, [r3, #12]
 8013cfc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d00a      	beq.n	8013d1c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013d06:	4b0e      	ldr	r3, [pc, #56]	; (8013d40 <tcp_fasttmr+0xc4>)
 8013d08:	2200      	movs	r2, #0
 8013d0a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f000 f819 	bl	8013d44 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013d12:	4b0b      	ldr	r3, [pc, #44]	; (8013d40 <tcp_fasttmr+0xc4>)
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d000      	beq.n	8013d1c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013d1a:	e7b8      	b.n	8013c8e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	607b      	str	r3, [r7, #4]
 8013d20:	e002      	b.n	8013d28 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	68db      	ldr	r3, [r3, #12]
 8013d26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d1b3      	bne.n	8013c96 <tcp_fasttmr+0x1a>
    }
  }
}
 8013d2e:	bf00      	nop
 8013d30:	bf00      	nop
 8013d32:	3708      	adds	r7, #8
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	2000affa 	.word	0x2000affa
 8013d3c:	2000aff0 	.word	0x2000aff0
 8013d40:	2000aff8 	.word	0x2000aff8

08013d44 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013d44:	b590      	push	{r4, r7, lr}
 8013d46:	b085      	sub	sp, #20
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d109      	bne.n	8013d66 <tcp_process_refused_data+0x22>
 8013d52:	4b38      	ldr	r3, [pc, #224]	; (8013e34 <tcp_process_refused_data+0xf0>)
 8013d54:	f240 6209 	movw	r2, #1545	; 0x609
 8013d58:	4937      	ldr	r1, [pc, #220]	; (8013e38 <tcp_process_refused_data+0xf4>)
 8013d5a:	4838      	ldr	r0, [pc, #224]	; (8013e3c <tcp_process_refused_data+0xf8>)
 8013d5c:	f008 f87a 	bl	801be54 <iprintf>
 8013d60:	f06f 030f 	mvn.w	r3, #15
 8013d64:	e061      	b.n	8013e2a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d6a:	7b5b      	ldrb	r3, [r3, #13]
 8013d6c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d72:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2200      	movs	r2, #0
 8013d78:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d00b      	beq.n	8013d9c <tcp_process_refused_data+0x58>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6918      	ldr	r0, [r3, #16]
 8013d8e:	2300      	movs	r3, #0
 8013d90:	68ba      	ldr	r2, [r7, #8]
 8013d92:	6879      	ldr	r1, [r7, #4]
 8013d94:	47a0      	blx	r4
 8013d96:	4603      	mov	r3, r0
 8013d98:	73fb      	strb	r3, [r7, #15]
 8013d9a:	e007      	b.n	8013dac <tcp_process_refused_data+0x68>
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	68ba      	ldr	r2, [r7, #8]
 8013da0:	6879      	ldr	r1, [r7, #4]
 8013da2:	2000      	movs	r0, #0
 8013da4:	f000 f8c4 	bl	8013f30 <tcp_recv_null>
 8013da8:	4603      	mov	r3, r0
 8013daa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d12b      	bne.n	8013e0c <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013db4:	7bbb      	ldrb	r3, [r7, #14]
 8013db6:	f003 0320 	and.w	r3, r3, #32
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d034      	beq.n	8013e28 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dc2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	d005      	beq.n	8013dd6 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dce:	3301      	adds	r3, #1
 8013dd0:	b29a      	uxth	r2, r3
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d00b      	beq.n	8013df8 <tcp_process_refused_data+0xb4>
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6918      	ldr	r0, [r3, #16]
 8013dea:	2300      	movs	r3, #0
 8013dec:	2200      	movs	r2, #0
 8013dee:	6879      	ldr	r1, [r7, #4]
 8013df0:	47a0      	blx	r4
 8013df2:	4603      	mov	r3, r0
 8013df4:	73fb      	strb	r3, [r7, #15]
 8013df6:	e001      	b.n	8013dfc <tcp_process_refused_data+0xb8>
 8013df8:	2300      	movs	r3, #0
 8013dfa:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e00:	f113 0f0d 	cmn.w	r3, #13
 8013e04:	d110      	bne.n	8013e28 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8013e06:	f06f 030c 	mvn.w	r3, #12
 8013e0a:	e00e      	b.n	8013e2a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8013e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e10:	f113 0f0d 	cmn.w	r3, #13
 8013e14:	d102      	bne.n	8013e1c <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013e16:	f06f 030c 	mvn.w	r3, #12
 8013e1a:	e006      	b.n	8013e2a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	68ba      	ldr	r2, [r7, #8]
 8013e20:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8013e22:	f06f 0304 	mvn.w	r3, #4
 8013e26:	e000      	b.n	8013e2a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8013e28:	2300      	movs	r3, #0
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3714      	adds	r7, #20
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd90      	pop	{r4, r7, pc}
 8013e32:	bf00      	nop
 8013e34:	0801deb0 	.word	0x0801deb0
 8013e38:	0801e3c0 	.word	0x0801e3c0
 8013e3c:	0801def4 	.word	0x0801def4

08013e40 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013e48:	e007      	b.n	8013e5a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f000 f80a 	bl	8013e6a <tcp_seg_free>
    seg = next;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d1f4      	bne.n	8013e4a <tcp_segs_free+0xa>
  }
}
 8013e60:	bf00      	nop
 8013e62:	bf00      	nop
 8013e64:	3710      	adds	r7, #16
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}

08013e6a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013e6a:	b580      	push	{r7, lr}
 8013e6c:	b082      	sub	sp, #8
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d00c      	beq.n	8013e92 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	685b      	ldr	r3, [r3, #4]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d004      	beq.n	8013e8a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	4618      	mov	r0, r3
 8013e86:	f7fe fa97 	bl	80123b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013e8a:	6879      	ldr	r1, [r7, #4]
 8013e8c:	2003      	movs	r0, #3
 8013e8e:	f7fd fc1d 	bl	80116cc <memp_free>
  }
}
 8013e92:	bf00      	nop
 8013e94:	3708      	adds	r7, #8
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
	...

08013e9c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	460b      	mov	r3, r1
 8013ea6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d107      	bne.n	8013ebe <tcp_setprio+0x22>
 8013eae:	4b07      	ldr	r3, [pc, #28]	; (8013ecc <tcp_setprio+0x30>)
 8013eb0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8013eb4:	4906      	ldr	r1, [pc, #24]	; (8013ed0 <tcp_setprio+0x34>)
 8013eb6:	4807      	ldr	r0, [pc, #28]	; (8013ed4 <tcp_setprio+0x38>)
 8013eb8:	f007 ffcc 	bl	801be54 <iprintf>
 8013ebc:	e002      	b.n	8013ec4 <tcp_setprio+0x28>

  pcb->prio = prio;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	78fa      	ldrb	r2, [r7, #3]
 8013ec2:	755a      	strb	r2, [r3, #21]
}
 8013ec4:	3708      	adds	r7, #8
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	0801deb0 	.word	0x0801deb0
 8013ed0:	0801e3e8 	.word	0x0801e3e8
 8013ed4:	0801def4 	.word	0x0801def4

08013ed8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b084      	sub	sp, #16
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d106      	bne.n	8013ef4 <tcp_seg_copy+0x1c>
 8013ee6:	4b0f      	ldr	r3, [pc, #60]	; (8013f24 <tcp_seg_copy+0x4c>)
 8013ee8:	f240 6282 	movw	r2, #1666	; 0x682
 8013eec:	490e      	ldr	r1, [pc, #56]	; (8013f28 <tcp_seg_copy+0x50>)
 8013eee:	480f      	ldr	r0, [pc, #60]	; (8013f2c <tcp_seg_copy+0x54>)
 8013ef0:	f007 ffb0 	bl	801be54 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013ef4:	2003      	movs	r0, #3
 8013ef6:	f7fd fb79 	bl	80115ec <memp_malloc>
 8013efa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d101      	bne.n	8013f06 <tcp_seg_copy+0x2e>
    return NULL;
 8013f02:	2300      	movs	r3, #0
 8013f04:	e00a      	b.n	8013f1c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013f06:	2210      	movs	r2, #16
 8013f08:	6879      	ldr	r1, [r7, #4]
 8013f0a:	68f8      	ldr	r0, [r7, #12]
 8013f0c:	f008 f913 	bl	801c136 <memcpy>
  pbuf_ref(cseg->p);
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	685b      	ldr	r3, [r3, #4]
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7fe faef 	bl	80124f8 <pbuf_ref>
  return cseg;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3710      	adds	r7, #16
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	0801deb0 	.word	0x0801deb0
 8013f28:	0801e404 	.word	0x0801e404
 8013f2c:	0801def4 	.word	0x0801def4

08013f30 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b084      	sub	sp, #16
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	60b9      	str	r1, [r7, #8]
 8013f3a:	607a      	str	r2, [r7, #4]
 8013f3c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d109      	bne.n	8013f58 <tcp_recv_null+0x28>
 8013f44:	4b12      	ldr	r3, [pc, #72]	; (8013f90 <tcp_recv_null+0x60>)
 8013f46:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013f4a:	4912      	ldr	r1, [pc, #72]	; (8013f94 <tcp_recv_null+0x64>)
 8013f4c:	4812      	ldr	r0, [pc, #72]	; (8013f98 <tcp_recv_null+0x68>)
 8013f4e:	f007 ff81 	bl	801be54 <iprintf>
 8013f52:	f06f 030f 	mvn.w	r3, #15
 8013f56:	e016      	b.n	8013f86 <tcp_recv_null+0x56>

  if (p != NULL) {
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d009      	beq.n	8013f72 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	891b      	ldrh	r3, [r3, #8]
 8013f62:	4619      	mov	r1, r3
 8013f64:	68b8      	ldr	r0, [r7, #8]
 8013f66:	f7ff f999 	bl	801329c <tcp_recved>
    pbuf_free(p);
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f7fe fa24 	bl	80123b8 <pbuf_free>
 8013f70:	e008      	b.n	8013f84 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d104      	bne.n	8013f84 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013f7a:	68b8      	ldr	r0, [r7, #8]
 8013f7c:	f7fe feca 	bl	8012d14 <tcp_close>
 8013f80:	4603      	mov	r3, r0
 8013f82:	e000      	b.n	8013f86 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013f84:	2300      	movs	r3, #0
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3710      	adds	r7, #16
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	0801deb0 	.word	0x0801deb0
 8013f94:	0801e420 	.word	0x0801e420
 8013f98:	0801def4 	.word	0x0801def4

08013f9c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b086      	sub	sp, #24
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	db01      	blt.n	8013fb2 <tcp_kill_prio+0x16>
 8013fae:	79fb      	ldrb	r3, [r7, #7]
 8013fb0:	e000      	b.n	8013fb4 <tcp_kill_prio+0x18>
 8013fb2:	237f      	movs	r3, #127	; 0x7f
 8013fb4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013fb6:	7afb      	ldrb	r3, [r7, #11]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d034      	beq.n	8014026 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013fbc:	7afb      	ldrb	r3, [r7, #11]
 8013fbe:	3b01      	subs	r3, #1
 8013fc0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fca:	4b19      	ldr	r3, [pc, #100]	; (8014030 <tcp_kill_prio+0x94>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	617b      	str	r3, [r7, #20]
 8013fd0:	e01f      	b.n	8014012 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	7d5b      	ldrb	r3, [r3, #21]
 8013fd6:	7afa      	ldrb	r2, [r7, #11]
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d80c      	bhi.n	8013ff6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013fe0:	7afa      	ldrb	r2, [r7, #11]
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d112      	bne.n	801400c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013fe6:	4b13      	ldr	r3, [pc, #76]	; (8014034 <tcp_kill_prio+0x98>)
 8013fe8:	681a      	ldr	r2, [r3, #0]
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	6a1b      	ldr	r3, [r3, #32]
 8013fee:	1ad3      	subs	r3, r2, r3
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d80a      	bhi.n	801400c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013ff6:	4b0f      	ldr	r3, [pc, #60]	; (8014034 <tcp_kill_prio+0x98>)
 8013ff8:	681a      	ldr	r2, [r3, #0]
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	6a1b      	ldr	r3, [r3, #32]
 8013ffe:	1ad3      	subs	r3, r2, r3
 8014000:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	7d5b      	ldrb	r3, [r3, #21]
 801400a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	68db      	ldr	r3, [r3, #12]
 8014010:	617b      	str	r3, [r7, #20]
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d1dc      	bne.n	8013fd2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d004      	beq.n	8014028 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801401e:	6938      	ldr	r0, [r7, #16]
 8014020:	f7fe ff62 	bl	8012ee8 <tcp_abort>
 8014024:	e000      	b.n	8014028 <tcp_kill_prio+0x8c>
    return;
 8014026:	bf00      	nop
  }
}
 8014028:	3718      	adds	r7, #24
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	2000aff0 	.word	0x2000aff0
 8014034:	2000afe4 	.word	0x2000afe4

08014038 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b086      	sub	sp, #24
 801403c:	af00      	add	r7, sp, #0
 801403e:	4603      	mov	r3, r0
 8014040:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014042:	79fb      	ldrb	r3, [r7, #7]
 8014044:	2b08      	cmp	r3, #8
 8014046:	d009      	beq.n	801405c <tcp_kill_state+0x24>
 8014048:	79fb      	ldrb	r3, [r7, #7]
 801404a:	2b09      	cmp	r3, #9
 801404c:	d006      	beq.n	801405c <tcp_kill_state+0x24>
 801404e:	4b1a      	ldr	r3, [pc, #104]	; (80140b8 <tcp_kill_state+0x80>)
 8014050:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014054:	4919      	ldr	r1, [pc, #100]	; (80140bc <tcp_kill_state+0x84>)
 8014056:	481a      	ldr	r0, [pc, #104]	; (80140c0 <tcp_kill_state+0x88>)
 8014058:	f007 fefc 	bl	801be54 <iprintf>

  inactivity = 0;
 801405c:	2300      	movs	r3, #0
 801405e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014060:	2300      	movs	r3, #0
 8014062:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014064:	4b17      	ldr	r3, [pc, #92]	; (80140c4 <tcp_kill_state+0x8c>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	617b      	str	r3, [r7, #20]
 801406a:	e017      	b.n	801409c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	7d1b      	ldrb	r3, [r3, #20]
 8014070:	79fa      	ldrb	r2, [r7, #7]
 8014072:	429a      	cmp	r2, r3
 8014074:	d10f      	bne.n	8014096 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014076:	4b14      	ldr	r3, [pc, #80]	; (80140c8 <tcp_kill_state+0x90>)
 8014078:	681a      	ldr	r2, [r3, #0]
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	6a1b      	ldr	r3, [r3, #32]
 801407e:	1ad3      	subs	r3, r2, r3
 8014080:	68fa      	ldr	r2, [r7, #12]
 8014082:	429a      	cmp	r2, r3
 8014084:	d807      	bhi.n	8014096 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014086:	4b10      	ldr	r3, [pc, #64]	; (80140c8 <tcp_kill_state+0x90>)
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	6a1b      	ldr	r3, [r3, #32]
 801408e:	1ad3      	subs	r3, r2, r3
 8014090:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	68db      	ldr	r3, [r3, #12]
 801409a:	617b      	str	r3, [r7, #20]
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d1e4      	bne.n	801406c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d003      	beq.n	80140b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80140a8:	2100      	movs	r1, #0
 80140aa:	6938      	ldr	r0, [r7, #16]
 80140ac:	f7fe fe5e 	bl	8012d6c <tcp_abandon>
  }
}
 80140b0:	bf00      	nop
 80140b2:	3718      	adds	r7, #24
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}
 80140b8:	0801deb0 	.word	0x0801deb0
 80140bc:	0801e43c 	.word	0x0801e43c
 80140c0:	0801def4 	.word	0x0801def4
 80140c4:	2000aff0 	.word	0x2000aff0
 80140c8:	2000afe4 	.word	0x2000afe4

080140cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80140d2:	2300      	movs	r3, #0
 80140d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80140d6:	2300      	movs	r3, #0
 80140d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80140da:	4b12      	ldr	r3, [pc, #72]	; (8014124 <tcp_kill_timewait+0x58>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	60fb      	str	r3, [r7, #12]
 80140e0:	e012      	b.n	8014108 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80140e2:	4b11      	ldr	r3, [pc, #68]	; (8014128 <tcp_kill_timewait+0x5c>)
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	6a1b      	ldr	r3, [r3, #32]
 80140ea:	1ad3      	subs	r3, r2, r3
 80140ec:	687a      	ldr	r2, [r7, #4]
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d807      	bhi.n	8014102 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80140f2:	4b0d      	ldr	r3, [pc, #52]	; (8014128 <tcp_kill_timewait+0x5c>)
 80140f4:	681a      	ldr	r2, [r3, #0]
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	6a1b      	ldr	r3, [r3, #32]
 80140fa:	1ad3      	subs	r3, r2, r3
 80140fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	60fb      	str	r3, [r7, #12]
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d1e9      	bne.n	80140e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d002      	beq.n	801411a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014114:	68b8      	ldr	r0, [r7, #8]
 8014116:	f7fe fee7 	bl	8012ee8 <tcp_abort>
  }
}
 801411a:	bf00      	nop
 801411c:	3710      	adds	r7, #16
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	2000aff4 	.word	0x2000aff4
 8014128:	2000afe4 	.word	0x2000afe4

0801412c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014132:	4b10      	ldr	r3, [pc, #64]	; (8014174 <tcp_handle_closepend+0x48>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014138:	e014      	b.n	8014164 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	68db      	ldr	r3, [r3, #12]
 801413e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	8b5b      	ldrh	r3, [r3, #26]
 8014144:	f003 0308 	and.w	r3, r3, #8
 8014148:	2b00      	cmp	r3, #0
 801414a:	d009      	beq.n	8014160 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	8b5b      	ldrh	r3, [r3, #26]
 8014150:	f023 0308 	bic.w	r3, r3, #8
 8014154:	b29a      	uxth	r2, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f7fe fd70 	bl	8012c40 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014160:	683b      	ldr	r3, [r7, #0]
 8014162:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d1e7      	bne.n	801413a <tcp_handle_closepend+0xe>
  }
}
 801416a:	bf00      	nop
 801416c:	bf00      	nop
 801416e:	3708      	adds	r7, #8
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}
 8014174:	2000aff0 	.word	0x2000aff0

08014178 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b084      	sub	sp, #16
 801417c:	af00      	add	r7, sp, #0
 801417e:	4603      	mov	r3, r0
 8014180:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014182:	2001      	movs	r0, #1
 8014184:	f7fd fa32 	bl	80115ec <memp_malloc>
 8014188:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d126      	bne.n	80141de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014190:	f7ff ffcc 	bl	801412c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014194:	f7ff ff9a 	bl	80140cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014198:	2001      	movs	r0, #1
 801419a:	f7fd fa27 	bl	80115ec <memp_malloc>
 801419e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d11b      	bne.n	80141de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80141a6:	2009      	movs	r0, #9
 80141a8:	f7ff ff46 	bl	8014038 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141ac:	2001      	movs	r0, #1
 80141ae:	f7fd fa1d 	bl	80115ec <memp_malloc>
 80141b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d111      	bne.n	80141de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80141ba:	2008      	movs	r0, #8
 80141bc:	f7ff ff3c 	bl	8014038 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141c0:	2001      	movs	r0, #1
 80141c2:	f7fd fa13 	bl	80115ec <memp_malloc>
 80141c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d107      	bne.n	80141de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80141ce:	79fb      	ldrb	r3, [r7, #7]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7ff fee3 	bl	8013f9c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80141d6:	2001      	movs	r0, #1
 80141d8:	f7fd fa08 	bl	80115ec <memp_malloc>
 80141dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d03f      	beq.n	8014264 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80141e4:	229c      	movs	r2, #156	; 0x9c
 80141e6:	2100      	movs	r1, #0
 80141e8:	68f8      	ldr	r0, [r7, #12]
 80141ea:	f007 ff0b 	bl	801c004 <memset>
    pcb->prio = prio;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	79fa      	ldrb	r2, [r7, #7]
 80141f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80141fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8014204:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	22ff      	movs	r2, #255	; 0xff
 8014212:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f44f 7206 	mov.w	r2, #536	; 0x218
 801421a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	2206      	movs	r2, #6
 8014220:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	2206      	movs	r2, #6
 8014228:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014230:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	2201      	movs	r2, #1
 8014236:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801423a:	4b0d      	ldr	r3, [pc, #52]	; (8014270 <tcp_alloc+0xf8>)
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014242:	4b0c      	ldr	r3, [pc, #48]	; (8014274 <tcp_alloc+0xfc>)
 8014244:	781a      	ldrb	r2, [r3, #0]
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8014250:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	4a08      	ldr	r2, [pc, #32]	; (8014278 <tcp_alloc+0x100>)
 8014258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	4a07      	ldr	r2, [pc, #28]	; (801427c <tcp_alloc+0x104>)
 8014260:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014264:	68fb      	ldr	r3, [r7, #12]
}
 8014266:	4618      	mov	r0, r3
 8014268:	3710      	adds	r7, #16
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	bf00      	nop
 8014270:	2000afe4 	.word	0x2000afe4
 8014274:	2000affa 	.word	0x2000affa
 8014278:	08013f31 	.word	0x08013f31
 801427c:	006ddd00 	.word	0x006ddd00

08014280 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8014284:	2040      	movs	r0, #64	; 0x40
 8014286:	f7ff ff77 	bl	8014178 <tcp_alloc>
 801428a:	4603      	mov	r3, r0
}
 801428c:	4618      	mov	r0, r3
 801428e:	bd80      	pop	{r7, pc}

08014290 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014290:	b480      	push	{r7}
 8014292:	b083      	sub	sp, #12
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d002      	beq.n	80142a6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	683a      	ldr	r2, [r7, #0]
 80142a4:	611a      	str	r2, [r3, #16]
  }
}
 80142a6:	bf00      	nop
 80142a8:	370c      	adds	r7, #12
 80142aa:	46bd      	mov	sp, r7
 80142ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b0:	4770      	bx	lr
	...

080142b4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
 80142bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d00e      	beq.n	80142e2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	7d1b      	ldrb	r3, [r3, #20]
 80142c8:	2b01      	cmp	r3, #1
 80142ca:	d106      	bne.n	80142da <tcp_recv+0x26>
 80142cc:	4b07      	ldr	r3, [pc, #28]	; (80142ec <tcp_recv+0x38>)
 80142ce:	f240 72df 	movw	r2, #2015	; 0x7df
 80142d2:	4907      	ldr	r1, [pc, #28]	; (80142f0 <tcp_recv+0x3c>)
 80142d4:	4807      	ldr	r0, [pc, #28]	; (80142f4 <tcp_recv+0x40>)
 80142d6:	f007 fdbd 	bl	801be54 <iprintf>
    pcb->recv = recv;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	683a      	ldr	r2, [r7, #0]
 80142de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80142e2:	bf00      	nop
 80142e4:	3708      	adds	r7, #8
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	0801deb0 	.word	0x0801deb0
 80142f0:	0801e44c 	.word	0x0801e44c
 80142f4:	0801def4 	.word	0x0801def4

080142f8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d00e      	beq.n	8014326 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	7d1b      	ldrb	r3, [r3, #20]
 801430c:	2b01      	cmp	r3, #1
 801430e:	d106      	bne.n	801431e <tcp_sent+0x26>
 8014310:	4b07      	ldr	r3, [pc, #28]	; (8014330 <tcp_sent+0x38>)
 8014312:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014316:	4907      	ldr	r1, [pc, #28]	; (8014334 <tcp_sent+0x3c>)
 8014318:	4807      	ldr	r0, [pc, #28]	; (8014338 <tcp_sent+0x40>)
 801431a:	f007 fd9b 	bl	801be54 <iprintf>
    pcb->sent = sent;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	683a      	ldr	r2, [r7, #0]
 8014322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014326:	bf00      	nop
 8014328:	3708      	adds	r7, #8
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	0801deb0 	.word	0x0801deb0
 8014334:	0801e474 	.word	0x0801e474
 8014338:	0801def4 	.word	0x0801def4

0801433c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d00e      	beq.n	801436a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	7d1b      	ldrb	r3, [r3, #20]
 8014350:	2b01      	cmp	r3, #1
 8014352:	d106      	bne.n	8014362 <tcp_err+0x26>
 8014354:	4b07      	ldr	r3, [pc, #28]	; (8014374 <tcp_err+0x38>)
 8014356:	f640 020d 	movw	r2, #2061	; 0x80d
 801435a:	4907      	ldr	r1, [pc, #28]	; (8014378 <tcp_err+0x3c>)
 801435c:	4807      	ldr	r0, [pc, #28]	; (801437c <tcp_err+0x40>)
 801435e:	f007 fd79 	bl	801be54 <iprintf>
    pcb->errf = err;
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	683a      	ldr	r2, [r7, #0]
 8014366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801436a:	bf00      	nop
 801436c:	3708      	adds	r7, #8
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	0801deb0 	.word	0x0801deb0
 8014378:	0801e49c 	.word	0x0801e49c
 801437c:	0801def4 	.word	0x0801def4

08014380 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014380:	b480      	push	{r7}
 8014382:	b085      	sub	sp, #20
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d008      	beq.n	80143a2 <tcp_accept+0x22>
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	7d1b      	ldrb	r3, [r3, #20]
 8014394:	2b01      	cmp	r3, #1
 8014396:	d104      	bne.n	80143a2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	683a      	ldr	r2, [r7, #0]
 80143a0:	619a      	str	r2, [r3, #24]
  }
}
 80143a2:	bf00      	nop
 80143a4:	3714      	adds	r7, #20
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr
	...

080143b0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	60f8      	str	r0, [r7, #12]
 80143b8:	60b9      	str	r1, [r7, #8]
 80143ba:	4613      	mov	r3, r2
 80143bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d107      	bne.n	80143d4 <tcp_poll+0x24>
 80143c4:	4b0e      	ldr	r3, [pc, #56]	; (8014400 <tcp_poll+0x50>)
 80143c6:	f640 023d 	movw	r2, #2109	; 0x83d
 80143ca:	490e      	ldr	r1, [pc, #56]	; (8014404 <tcp_poll+0x54>)
 80143cc:	480e      	ldr	r0, [pc, #56]	; (8014408 <tcp_poll+0x58>)
 80143ce:	f007 fd41 	bl	801be54 <iprintf>
 80143d2:	e011      	b.n	80143f8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	7d1b      	ldrb	r3, [r3, #20]
 80143d8:	2b01      	cmp	r3, #1
 80143da:	d106      	bne.n	80143ea <tcp_poll+0x3a>
 80143dc:	4b08      	ldr	r3, [pc, #32]	; (8014400 <tcp_poll+0x50>)
 80143de:	f640 023e 	movw	r2, #2110	; 0x83e
 80143e2:	490a      	ldr	r1, [pc, #40]	; (801440c <tcp_poll+0x5c>)
 80143e4:	4808      	ldr	r0, [pc, #32]	; (8014408 <tcp_poll+0x58>)
 80143e6:	f007 fd35 	bl	801be54 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	68ba      	ldr	r2, [r7, #8]
 80143ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	79fa      	ldrb	r2, [r7, #7]
 80143f6:	775a      	strb	r2, [r3, #29]
}
 80143f8:	3710      	adds	r7, #16
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	0801deb0 	.word	0x0801deb0
 8014404:	0801e4c4 	.word	0x0801e4c4
 8014408:	0801def4 	.word	0x0801def4
 801440c:	0801e4dc 	.word	0x0801e4dc

08014410 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b082      	sub	sp, #8
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d107      	bne.n	801442e <tcp_pcb_purge+0x1e>
 801441e:	4b21      	ldr	r3, [pc, #132]	; (80144a4 <tcp_pcb_purge+0x94>)
 8014420:	f640 0251 	movw	r2, #2129	; 0x851
 8014424:	4920      	ldr	r1, [pc, #128]	; (80144a8 <tcp_pcb_purge+0x98>)
 8014426:	4821      	ldr	r0, [pc, #132]	; (80144ac <tcp_pcb_purge+0x9c>)
 8014428:	f007 fd14 	bl	801be54 <iprintf>
 801442c:	e037      	b.n	801449e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	7d1b      	ldrb	r3, [r3, #20]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d033      	beq.n	801449e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801443a:	2b0a      	cmp	r3, #10
 801443c:	d02f      	beq.n	801449e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014442:	2b01      	cmp	r3, #1
 8014444:	d02b      	beq.n	801449e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801444a:	2b00      	cmp	r3, #0
 801444c:	d007      	beq.n	801445e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014452:	4618      	mov	r0, r3
 8014454:	f7fd ffb0 	bl	80123b8 <pbuf_free>
      pcb->refused_data = NULL;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2200      	movs	r2, #0
 801445c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014462:	2b00      	cmp	r3, #0
 8014464:	d002      	beq.n	801446c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f000 f986 	bl	8014778 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014472:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014478:	4618      	mov	r0, r3
 801447a:	f7ff fce1 	bl	8013e40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014482:	4618      	mov	r0, r3
 8014484:	f7ff fcdc 	bl	8013e40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2200      	movs	r2, #0
 801448c:	66da      	str	r2, [r3, #108]	; 0x6c
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2200      	movs	r2, #0
 801449a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801449e:	3708      	adds	r7, #8
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	0801deb0 	.word	0x0801deb0
 80144a8:	0801e4fc 	.word	0x0801e4fc
 80144ac:	0801def4 	.word	0x0801def4

080144b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b084      	sub	sp, #16
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d106      	bne.n	80144ce <tcp_pcb_remove+0x1e>
 80144c0:	4b3e      	ldr	r3, [pc, #248]	; (80145bc <tcp_pcb_remove+0x10c>)
 80144c2:	f640 0283 	movw	r2, #2179	; 0x883
 80144c6:	493e      	ldr	r1, [pc, #248]	; (80145c0 <tcp_pcb_remove+0x110>)
 80144c8:	483e      	ldr	r0, [pc, #248]	; (80145c4 <tcp_pcb_remove+0x114>)
 80144ca:	f007 fcc3 	bl	801be54 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d106      	bne.n	80144e2 <tcp_pcb_remove+0x32>
 80144d4:	4b39      	ldr	r3, [pc, #228]	; (80145bc <tcp_pcb_remove+0x10c>)
 80144d6:	f640 0284 	movw	r2, #2180	; 0x884
 80144da:	493b      	ldr	r1, [pc, #236]	; (80145c8 <tcp_pcb_remove+0x118>)
 80144dc:	4839      	ldr	r0, [pc, #228]	; (80145c4 <tcp_pcb_remove+0x114>)
 80144de:	f007 fcb9 	bl	801be54 <iprintf>

  TCP_RMV(pcblist, pcb);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	683a      	ldr	r2, [r7, #0]
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d105      	bne.n	80144f8 <tcp_pcb_remove+0x48>
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	68da      	ldr	r2, [r3, #12]
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	601a      	str	r2, [r3, #0]
 80144f6:	e013      	b.n	8014520 <tcp_pcb_remove+0x70>
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	60fb      	str	r3, [r7, #12]
 80144fe:	e00c      	b.n	801451a <tcp_pcb_remove+0x6a>
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	68db      	ldr	r3, [r3, #12]
 8014504:	683a      	ldr	r2, [r7, #0]
 8014506:	429a      	cmp	r2, r3
 8014508:	d104      	bne.n	8014514 <tcp_pcb_remove+0x64>
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	68da      	ldr	r2, [r3, #12]
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	60da      	str	r2, [r3, #12]
 8014512:	e005      	b.n	8014520 <tcp_pcb_remove+0x70>
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	60fb      	str	r3, [r7, #12]
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d1ef      	bne.n	8014500 <tcp_pcb_remove+0x50>
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	2200      	movs	r2, #0
 8014524:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014526:	6838      	ldr	r0, [r7, #0]
 8014528:	f7ff ff72 	bl	8014410 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	7d1b      	ldrb	r3, [r3, #20]
 8014530:	2b0a      	cmp	r3, #10
 8014532:	d013      	beq.n	801455c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014538:	2b01      	cmp	r3, #1
 801453a:	d00f      	beq.n	801455c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	8b5b      	ldrh	r3, [r3, #26]
 8014540:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014544:	2b00      	cmp	r3, #0
 8014546:	d009      	beq.n	801455c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	8b5b      	ldrh	r3, [r3, #26]
 801454c:	f043 0302 	orr.w	r3, r3, #2
 8014550:	b29a      	uxth	r2, r3
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014556:	6838      	ldr	r0, [r7, #0]
 8014558:	f003 fbc6 	bl	8017ce8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	7d1b      	ldrb	r3, [r3, #20]
 8014560:	2b01      	cmp	r3, #1
 8014562:	d020      	beq.n	80145a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014568:	2b00      	cmp	r3, #0
 801456a:	d006      	beq.n	801457a <tcp_pcb_remove+0xca>
 801456c:	4b13      	ldr	r3, [pc, #76]	; (80145bc <tcp_pcb_remove+0x10c>)
 801456e:	f640 0293 	movw	r2, #2195	; 0x893
 8014572:	4916      	ldr	r1, [pc, #88]	; (80145cc <tcp_pcb_remove+0x11c>)
 8014574:	4813      	ldr	r0, [pc, #76]	; (80145c4 <tcp_pcb_remove+0x114>)
 8014576:	f007 fc6d 	bl	801be54 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801457e:	2b00      	cmp	r3, #0
 8014580:	d006      	beq.n	8014590 <tcp_pcb_remove+0xe0>
 8014582:	4b0e      	ldr	r3, [pc, #56]	; (80145bc <tcp_pcb_remove+0x10c>)
 8014584:	f640 0294 	movw	r2, #2196	; 0x894
 8014588:	4911      	ldr	r1, [pc, #68]	; (80145d0 <tcp_pcb_remove+0x120>)
 801458a:	480e      	ldr	r0, [pc, #56]	; (80145c4 <tcp_pcb_remove+0x114>)
 801458c:	f007 fc62 	bl	801be54 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014594:	2b00      	cmp	r3, #0
 8014596:	d006      	beq.n	80145a6 <tcp_pcb_remove+0xf6>
 8014598:	4b08      	ldr	r3, [pc, #32]	; (80145bc <tcp_pcb_remove+0x10c>)
 801459a:	f640 0296 	movw	r2, #2198	; 0x896
 801459e:	490d      	ldr	r1, [pc, #52]	; (80145d4 <tcp_pcb_remove+0x124>)
 80145a0:	4808      	ldr	r0, [pc, #32]	; (80145c4 <tcp_pcb_remove+0x114>)
 80145a2:	f007 fc57 	bl	801be54 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	2200      	movs	r2, #0
 80145aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	2200      	movs	r2, #0
 80145b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80145b2:	bf00      	nop
 80145b4:	3710      	adds	r7, #16
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}
 80145ba:	bf00      	nop
 80145bc:	0801deb0 	.word	0x0801deb0
 80145c0:	0801e518 	.word	0x0801e518
 80145c4:	0801def4 	.word	0x0801def4
 80145c8:	0801e534 	.word	0x0801e534
 80145cc:	0801e554 	.word	0x0801e554
 80145d0:	0801e56c 	.word	0x0801e56c
 80145d4:	0801e588 	.word	0x0801e588

080145d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b082      	sub	sp, #8
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d106      	bne.n	80145f4 <tcp_next_iss+0x1c>
 80145e6:	4b0a      	ldr	r3, [pc, #40]	; (8014610 <tcp_next_iss+0x38>)
 80145e8:	f640 02af 	movw	r2, #2223	; 0x8af
 80145ec:	4909      	ldr	r1, [pc, #36]	; (8014614 <tcp_next_iss+0x3c>)
 80145ee:	480a      	ldr	r0, [pc, #40]	; (8014618 <tcp_next_iss+0x40>)
 80145f0:	f007 fc30 	bl	801be54 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80145f4:	4b09      	ldr	r3, [pc, #36]	; (801461c <tcp_next_iss+0x44>)
 80145f6:	681a      	ldr	r2, [r3, #0]
 80145f8:	4b09      	ldr	r3, [pc, #36]	; (8014620 <tcp_next_iss+0x48>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	4413      	add	r3, r2
 80145fe:	4a07      	ldr	r2, [pc, #28]	; (801461c <tcp_next_iss+0x44>)
 8014600:	6013      	str	r3, [r2, #0]
  return iss;
 8014602:	4b06      	ldr	r3, [pc, #24]	; (801461c <tcp_next_iss+0x44>)
 8014604:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014606:	4618      	mov	r0, r3
 8014608:	3708      	adds	r7, #8
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	0801deb0 	.word	0x0801deb0
 8014614:	0801e5a0 	.word	0x0801e5a0
 8014618:	0801def4 	.word	0x0801def4
 801461c:	2000007c 	.word	0x2000007c
 8014620:	2000afe4 	.word	0x2000afe4

08014624 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b086      	sub	sp, #24
 8014628:	af00      	add	r7, sp, #0
 801462a:	4603      	mov	r3, r0
 801462c:	60b9      	str	r1, [r7, #8]
 801462e:	607a      	str	r2, [r7, #4]
 8014630:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d106      	bne.n	8014646 <tcp_eff_send_mss_netif+0x22>
 8014638:	4b14      	ldr	r3, [pc, #80]	; (801468c <tcp_eff_send_mss_netif+0x68>)
 801463a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801463e:	4914      	ldr	r1, [pc, #80]	; (8014690 <tcp_eff_send_mss_netif+0x6c>)
 8014640:	4814      	ldr	r0, [pc, #80]	; (8014694 <tcp_eff_send_mss_netif+0x70>)
 8014642:	f007 fc07 	bl	801be54 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d101      	bne.n	8014650 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801464c:	89fb      	ldrh	r3, [r7, #14]
 801464e:	e019      	b.n	8014684 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014654:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014656:	8afb      	ldrh	r3, [r7, #22]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d012      	beq.n	8014682 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801465c:	2328      	movs	r3, #40	; 0x28
 801465e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014660:	8afa      	ldrh	r2, [r7, #22]
 8014662:	8abb      	ldrh	r3, [r7, #20]
 8014664:	429a      	cmp	r2, r3
 8014666:	d904      	bls.n	8014672 <tcp_eff_send_mss_netif+0x4e>
 8014668:	8afa      	ldrh	r2, [r7, #22]
 801466a:	8abb      	ldrh	r3, [r7, #20]
 801466c:	1ad3      	subs	r3, r2, r3
 801466e:	b29b      	uxth	r3, r3
 8014670:	e000      	b.n	8014674 <tcp_eff_send_mss_netif+0x50>
 8014672:	2300      	movs	r3, #0
 8014674:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014676:	8a7a      	ldrh	r2, [r7, #18]
 8014678:	89fb      	ldrh	r3, [r7, #14]
 801467a:	4293      	cmp	r3, r2
 801467c:	bf28      	it	cs
 801467e:	4613      	movcs	r3, r2
 8014680:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014682:	89fb      	ldrh	r3, [r7, #14]
}
 8014684:	4618      	mov	r0, r3
 8014686:	3718      	adds	r7, #24
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}
 801468c:	0801deb0 	.word	0x0801deb0
 8014690:	0801e5bc 	.word	0x0801e5bc
 8014694:	0801def4 	.word	0x0801def4

08014698 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d119      	bne.n	80146e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80146ac:	4b10      	ldr	r3, [pc, #64]	; (80146f0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80146ae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80146b2:	4910      	ldr	r1, [pc, #64]	; (80146f4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80146b4:	4810      	ldr	r0, [pc, #64]	; (80146f8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80146b6:	f007 fbcd 	bl	801be54 <iprintf>

  while (pcb != NULL) {
 80146ba:	e011      	b.n	80146e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d108      	bne.n	80146da <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80146ce:	68f8      	ldr	r0, [r7, #12]
 80146d0:	f7fe fc0a 	bl	8012ee8 <tcp_abort>
      pcb = next;
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	60fb      	str	r3, [r7, #12]
 80146d8:	e002      	b.n	80146e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	68db      	ldr	r3, [r3, #12]
 80146de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d1ea      	bne.n	80146bc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80146e6:	bf00      	nop
 80146e8:	bf00      	nop
 80146ea:	3710      	adds	r7, #16
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}
 80146f0:	0801deb0 	.word	0x0801deb0
 80146f4:	0801e5e4 	.word	0x0801e5e4
 80146f8:	0801def4 	.word	0x0801def4

080146fc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b084      	sub	sp, #16
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d02a      	beq.n	8014762 <tcp_netif_ip_addr_changed+0x66>
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d026      	beq.n	8014762 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014714:	4b15      	ldr	r3, [pc, #84]	; (801476c <tcp_netif_ip_addr_changed+0x70>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	4619      	mov	r1, r3
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f7ff ffbc 	bl	8014698 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014720:	4b13      	ldr	r3, [pc, #76]	; (8014770 <tcp_netif_ip_addr_changed+0x74>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	4619      	mov	r1, r3
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f7ff ffb6 	bl	8014698 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d017      	beq.n	8014762 <tcp_netif_ip_addr_changed+0x66>
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d013      	beq.n	8014762 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801473a:	4b0e      	ldr	r3, [pc, #56]	; (8014774 <tcp_netif_ip_addr_changed+0x78>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	60fb      	str	r3, [r7, #12]
 8014740:	e00c      	b.n	801475c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	681a      	ldr	r2, [r3, #0]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	429a      	cmp	r2, r3
 801474c:	d103      	bne.n	8014756 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	681a      	ldr	r2, [r3, #0]
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	68db      	ldr	r3, [r3, #12]
 801475a:	60fb      	str	r3, [r7, #12]
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d1ef      	bne.n	8014742 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014762:	bf00      	nop
 8014764:	3710      	adds	r7, #16
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	2000aff0 	.word	0x2000aff0
 8014770:	2000afe8 	.word	0x2000afe8
 8014774:	2000afec 	.word	0x2000afec

08014778 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b082      	sub	sp, #8
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014784:	2b00      	cmp	r3, #0
 8014786:	d007      	beq.n	8014798 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801478c:	4618      	mov	r0, r3
 801478e:	f7ff fb57 	bl	8013e40 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2200      	movs	r2, #0
 8014796:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014798:	bf00      	nop
 801479a:	3708      	adds	r7, #8
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}

080147a0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80147a0:	b590      	push	{r4, r7, lr}
 80147a2:	b08d      	sub	sp, #52	; 0x34
 80147a4:	af04      	add	r7, sp, #16
 80147a6:	6078      	str	r0, [r7, #4]
 80147a8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d105      	bne.n	80147bc <tcp_input+0x1c>
 80147b0:	4b9b      	ldr	r3, [pc, #620]	; (8014a20 <tcp_input+0x280>)
 80147b2:	2283      	movs	r2, #131	; 0x83
 80147b4:	499b      	ldr	r1, [pc, #620]	; (8014a24 <tcp_input+0x284>)
 80147b6:	489c      	ldr	r0, [pc, #624]	; (8014a28 <tcp_input+0x288>)
 80147b8:	f007 fb4c 	bl	801be54 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	4a9a      	ldr	r2, [pc, #616]	; (8014a2c <tcp_input+0x28c>)
 80147c2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	895b      	ldrh	r3, [r3, #10]
 80147c8:	2b13      	cmp	r3, #19
 80147ca:	f240 83d1 	bls.w	8014f70 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80147ce:	4b98      	ldr	r3, [pc, #608]	; (8014a30 <tcp_input+0x290>)
 80147d0:	695b      	ldr	r3, [r3, #20]
 80147d2:	4a97      	ldr	r2, [pc, #604]	; (8014a30 <tcp_input+0x290>)
 80147d4:	6812      	ldr	r2, [r2, #0]
 80147d6:	4611      	mov	r1, r2
 80147d8:	4618      	mov	r0, r3
 80147da:	f006 f88b 	bl	801a8f4 <ip4_addr_isbroadcast_u32>
 80147de:	4603      	mov	r3, r0
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	f040 83c7 	bne.w	8014f74 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80147e6:	4b92      	ldr	r3, [pc, #584]	; (8014a30 <tcp_input+0x290>)
 80147e8:	695b      	ldr	r3, [r3, #20]
 80147ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80147ee:	2be0      	cmp	r3, #224	; 0xe0
 80147f0:	f000 83c0 	beq.w	8014f74 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80147f4:	4b8d      	ldr	r3, [pc, #564]	; (8014a2c <tcp_input+0x28c>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	899b      	ldrh	r3, [r3, #12]
 80147fa:	b29b      	uxth	r3, r3
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7fc fa12 	bl	8010c26 <lwip_htons>
 8014802:	4603      	mov	r3, r0
 8014804:	0b1b      	lsrs	r3, r3, #12
 8014806:	b29b      	uxth	r3, r3
 8014808:	b2db      	uxtb	r3, r3
 801480a:	009b      	lsls	r3, r3, #2
 801480c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801480e:	7cbb      	ldrb	r3, [r7, #18]
 8014810:	2b13      	cmp	r3, #19
 8014812:	f240 83b1 	bls.w	8014f78 <tcp_input+0x7d8>
 8014816:	7cbb      	ldrb	r3, [r7, #18]
 8014818:	b29a      	uxth	r2, r3
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	891b      	ldrh	r3, [r3, #8]
 801481e:	429a      	cmp	r2, r3
 8014820:	f200 83aa 	bhi.w	8014f78 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014824:	7cbb      	ldrb	r3, [r7, #18]
 8014826:	b29b      	uxth	r3, r3
 8014828:	3b14      	subs	r3, #20
 801482a:	b29a      	uxth	r2, r3
 801482c:	4b81      	ldr	r3, [pc, #516]	; (8014a34 <tcp_input+0x294>)
 801482e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014830:	4b81      	ldr	r3, [pc, #516]	; (8014a38 <tcp_input+0x298>)
 8014832:	2200      	movs	r2, #0
 8014834:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	895a      	ldrh	r2, [r3, #10]
 801483a:	7cbb      	ldrb	r3, [r7, #18]
 801483c:	b29b      	uxth	r3, r3
 801483e:	429a      	cmp	r2, r3
 8014840:	d309      	bcc.n	8014856 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014842:	4b7c      	ldr	r3, [pc, #496]	; (8014a34 <tcp_input+0x294>)
 8014844:	881a      	ldrh	r2, [r3, #0]
 8014846:	4b7d      	ldr	r3, [pc, #500]	; (8014a3c <tcp_input+0x29c>)
 8014848:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801484a:	7cbb      	ldrb	r3, [r7, #18]
 801484c:	4619      	mov	r1, r3
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f7fd fd2c 	bl	80122ac <pbuf_remove_header>
 8014854:	e04e      	b.n	80148f4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d105      	bne.n	801486a <tcp_input+0xca>
 801485e:	4b70      	ldr	r3, [pc, #448]	; (8014a20 <tcp_input+0x280>)
 8014860:	22c2      	movs	r2, #194	; 0xc2
 8014862:	4977      	ldr	r1, [pc, #476]	; (8014a40 <tcp_input+0x2a0>)
 8014864:	4870      	ldr	r0, [pc, #448]	; (8014a28 <tcp_input+0x288>)
 8014866:	f007 faf5 	bl	801be54 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801486a:	2114      	movs	r1, #20
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f7fd fd1d 	bl	80122ac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	895a      	ldrh	r2, [r3, #10]
 8014876:	4b71      	ldr	r3, [pc, #452]	; (8014a3c <tcp_input+0x29c>)
 8014878:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801487a:	4b6e      	ldr	r3, [pc, #440]	; (8014a34 <tcp_input+0x294>)
 801487c:	881a      	ldrh	r2, [r3, #0]
 801487e:	4b6f      	ldr	r3, [pc, #444]	; (8014a3c <tcp_input+0x29c>)
 8014880:	881b      	ldrh	r3, [r3, #0]
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014886:	4b6d      	ldr	r3, [pc, #436]	; (8014a3c <tcp_input+0x29c>)
 8014888:	881b      	ldrh	r3, [r3, #0]
 801488a:	4619      	mov	r1, r3
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f7fd fd0d 	bl	80122ac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	895b      	ldrh	r3, [r3, #10]
 8014898:	8a3a      	ldrh	r2, [r7, #16]
 801489a:	429a      	cmp	r2, r3
 801489c:	f200 836e 	bhi.w	8014f7c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	685b      	ldr	r3, [r3, #4]
 80148a6:	4a64      	ldr	r2, [pc, #400]	; (8014a38 <tcp_input+0x298>)
 80148a8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	8a3a      	ldrh	r2, [r7, #16]
 80148b0:	4611      	mov	r1, r2
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fd fcfa 	bl	80122ac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	891a      	ldrh	r2, [r3, #8]
 80148bc:	8a3b      	ldrh	r3, [r7, #16]
 80148be:	1ad3      	subs	r3, r2, r3
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	895b      	ldrh	r3, [r3, #10]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d005      	beq.n	80148da <tcp_input+0x13a>
 80148ce:	4b54      	ldr	r3, [pc, #336]	; (8014a20 <tcp_input+0x280>)
 80148d0:	22df      	movs	r2, #223	; 0xdf
 80148d2:	495c      	ldr	r1, [pc, #368]	; (8014a44 <tcp_input+0x2a4>)
 80148d4:	4854      	ldr	r0, [pc, #336]	; (8014a28 <tcp_input+0x288>)
 80148d6:	f007 fabd 	bl	801be54 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	891a      	ldrh	r2, [r3, #8]
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	891b      	ldrh	r3, [r3, #8]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d005      	beq.n	80148f4 <tcp_input+0x154>
 80148e8:	4b4d      	ldr	r3, [pc, #308]	; (8014a20 <tcp_input+0x280>)
 80148ea:	22e0      	movs	r2, #224	; 0xe0
 80148ec:	4956      	ldr	r1, [pc, #344]	; (8014a48 <tcp_input+0x2a8>)
 80148ee:	484e      	ldr	r0, [pc, #312]	; (8014a28 <tcp_input+0x288>)
 80148f0:	f007 fab0 	bl	801be54 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80148f4:	4b4d      	ldr	r3, [pc, #308]	; (8014a2c <tcp_input+0x28c>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	881b      	ldrh	r3, [r3, #0]
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	4a4b      	ldr	r2, [pc, #300]	; (8014a2c <tcp_input+0x28c>)
 80148fe:	6814      	ldr	r4, [r2, #0]
 8014900:	4618      	mov	r0, r3
 8014902:	f7fc f990 	bl	8010c26 <lwip_htons>
 8014906:	4603      	mov	r3, r0
 8014908:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801490a:	4b48      	ldr	r3, [pc, #288]	; (8014a2c <tcp_input+0x28c>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	885b      	ldrh	r3, [r3, #2]
 8014910:	b29b      	uxth	r3, r3
 8014912:	4a46      	ldr	r2, [pc, #280]	; (8014a2c <tcp_input+0x28c>)
 8014914:	6814      	ldr	r4, [r2, #0]
 8014916:	4618      	mov	r0, r3
 8014918:	f7fc f985 	bl	8010c26 <lwip_htons>
 801491c:	4603      	mov	r3, r0
 801491e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014920:	4b42      	ldr	r3, [pc, #264]	; (8014a2c <tcp_input+0x28c>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	4a41      	ldr	r2, [pc, #260]	; (8014a2c <tcp_input+0x28c>)
 8014928:	6814      	ldr	r4, [r2, #0]
 801492a:	4618      	mov	r0, r3
 801492c:	f7fc f990 	bl	8010c50 <lwip_htonl>
 8014930:	4603      	mov	r3, r0
 8014932:	6063      	str	r3, [r4, #4]
 8014934:	6863      	ldr	r3, [r4, #4]
 8014936:	4a45      	ldr	r2, [pc, #276]	; (8014a4c <tcp_input+0x2ac>)
 8014938:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801493a:	4b3c      	ldr	r3, [pc, #240]	; (8014a2c <tcp_input+0x28c>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	689b      	ldr	r3, [r3, #8]
 8014940:	4a3a      	ldr	r2, [pc, #232]	; (8014a2c <tcp_input+0x28c>)
 8014942:	6814      	ldr	r4, [r2, #0]
 8014944:	4618      	mov	r0, r3
 8014946:	f7fc f983 	bl	8010c50 <lwip_htonl>
 801494a:	4603      	mov	r3, r0
 801494c:	60a3      	str	r3, [r4, #8]
 801494e:	68a3      	ldr	r3, [r4, #8]
 8014950:	4a3f      	ldr	r2, [pc, #252]	; (8014a50 <tcp_input+0x2b0>)
 8014952:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014954:	4b35      	ldr	r3, [pc, #212]	; (8014a2c <tcp_input+0x28c>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	89db      	ldrh	r3, [r3, #14]
 801495a:	b29b      	uxth	r3, r3
 801495c:	4a33      	ldr	r2, [pc, #204]	; (8014a2c <tcp_input+0x28c>)
 801495e:	6814      	ldr	r4, [r2, #0]
 8014960:	4618      	mov	r0, r3
 8014962:	f7fc f960 	bl	8010c26 <lwip_htons>
 8014966:	4603      	mov	r3, r0
 8014968:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801496a:	4b30      	ldr	r3, [pc, #192]	; (8014a2c <tcp_input+0x28c>)
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	899b      	ldrh	r3, [r3, #12]
 8014970:	b29b      	uxth	r3, r3
 8014972:	4618      	mov	r0, r3
 8014974:	f7fc f957 	bl	8010c26 <lwip_htons>
 8014978:	4603      	mov	r3, r0
 801497a:	b2db      	uxtb	r3, r3
 801497c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014980:	b2da      	uxtb	r2, r3
 8014982:	4b34      	ldr	r3, [pc, #208]	; (8014a54 <tcp_input+0x2b4>)
 8014984:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	891a      	ldrh	r2, [r3, #8]
 801498a:	4b33      	ldr	r3, [pc, #204]	; (8014a58 <tcp_input+0x2b8>)
 801498c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801498e:	4b31      	ldr	r3, [pc, #196]	; (8014a54 <tcp_input+0x2b4>)
 8014990:	781b      	ldrb	r3, [r3, #0]
 8014992:	f003 0303 	and.w	r3, r3, #3
 8014996:	2b00      	cmp	r3, #0
 8014998:	d00c      	beq.n	80149b4 <tcp_input+0x214>
    tcplen++;
 801499a:	4b2f      	ldr	r3, [pc, #188]	; (8014a58 <tcp_input+0x2b8>)
 801499c:	881b      	ldrh	r3, [r3, #0]
 801499e:	3301      	adds	r3, #1
 80149a0:	b29a      	uxth	r2, r3
 80149a2:	4b2d      	ldr	r3, [pc, #180]	; (8014a58 <tcp_input+0x2b8>)
 80149a4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	891a      	ldrh	r2, [r3, #8]
 80149aa:	4b2b      	ldr	r3, [pc, #172]	; (8014a58 <tcp_input+0x2b8>)
 80149ac:	881b      	ldrh	r3, [r3, #0]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	f200 82e6 	bhi.w	8014f80 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80149b4:	2300      	movs	r3, #0
 80149b6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80149b8:	4b28      	ldr	r3, [pc, #160]	; (8014a5c <tcp_input+0x2bc>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	61fb      	str	r3, [r7, #28]
 80149be:	e09d      	b.n	8014afc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80149c0:	69fb      	ldr	r3, [r7, #28]
 80149c2:	7d1b      	ldrb	r3, [r3, #20]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d105      	bne.n	80149d4 <tcp_input+0x234>
 80149c8:	4b15      	ldr	r3, [pc, #84]	; (8014a20 <tcp_input+0x280>)
 80149ca:	22fb      	movs	r2, #251	; 0xfb
 80149cc:	4924      	ldr	r1, [pc, #144]	; (8014a60 <tcp_input+0x2c0>)
 80149ce:	4816      	ldr	r0, [pc, #88]	; (8014a28 <tcp_input+0x288>)
 80149d0:	f007 fa40 	bl	801be54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80149d4:	69fb      	ldr	r3, [r7, #28]
 80149d6:	7d1b      	ldrb	r3, [r3, #20]
 80149d8:	2b0a      	cmp	r3, #10
 80149da:	d105      	bne.n	80149e8 <tcp_input+0x248>
 80149dc:	4b10      	ldr	r3, [pc, #64]	; (8014a20 <tcp_input+0x280>)
 80149de:	22fc      	movs	r2, #252	; 0xfc
 80149e0:	4920      	ldr	r1, [pc, #128]	; (8014a64 <tcp_input+0x2c4>)
 80149e2:	4811      	ldr	r0, [pc, #68]	; (8014a28 <tcp_input+0x288>)
 80149e4:	f007 fa36 	bl	801be54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80149e8:	69fb      	ldr	r3, [r7, #28]
 80149ea:	7d1b      	ldrb	r3, [r3, #20]
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	d105      	bne.n	80149fc <tcp_input+0x25c>
 80149f0:	4b0b      	ldr	r3, [pc, #44]	; (8014a20 <tcp_input+0x280>)
 80149f2:	22fd      	movs	r2, #253	; 0xfd
 80149f4:	491c      	ldr	r1, [pc, #112]	; (8014a68 <tcp_input+0x2c8>)
 80149f6:	480c      	ldr	r0, [pc, #48]	; (8014a28 <tcp_input+0x288>)
 80149f8:	f007 fa2c 	bl	801be54 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80149fc:	69fb      	ldr	r3, [r7, #28]
 80149fe:	7a1b      	ldrb	r3, [r3, #8]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d033      	beq.n	8014a6c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014a04:	69fb      	ldr	r3, [r7, #28]
 8014a06:	7a1a      	ldrb	r2, [r3, #8]
 8014a08:	4b09      	ldr	r3, [pc, #36]	; (8014a30 <tcp_input+0x290>)
 8014a0a:	685b      	ldr	r3, [r3, #4]
 8014a0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a10:	3301      	adds	r3, #1
 8014a12:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d029      	beq.n	8014a6c <tcp_input+0x2cc>
      prev = pcb;
 8014a18:	69fb      	ldr	r3, [r7, #28]
 8014a1a:	61bb      	str	r3, [r7, #24]
      continue;
 8014a1c:	e06b      	b.n	8014af6 <tcp_input+0x356>
 8014a1e:	bf00      	nop
 8014a20:	0801e618 	.word	0x0801e618
 8014a24:	0801e64c 	.word	0x0801e64c
 8014a28:	0801e664 	.word	0x0801e664
 8014a2c:	2000b00c 	.word	0x2000b00c
 8014a30:	200042bc 	.word	0x200042bc
 8014a34:	2000b010 	.word	0x2000b010
 8014a38:	2000b014 	.word	0x2000b014
 8014a3c:	2000b012 	.word	0x2000b012
 8014a40:	0801e68c 	.word	0x0801e68c
 8014a44:	0801e69c 	.word	0x0801e69c
 8014a48:	0801e6a8 	.word	0x0801e6a8
 8014a4c:	2000b01c 	.word	0x2000b01c
 8014a50:	2000b020 	.word	0x2000b020
 8014a54:	2000b028 	.word	0x2000b028
 8014a58:	2000b026 	.word	0x2000b026
 8014a5c:	2000aff0 	.word	0x2000aff0
 8014a60:	0801e6c8 	.word	0x0801e6c8
 8014a64:	0801e6f0 	.word	0x0801e6f0
 8014a68:	0801e71c 	.word	0x0801e71c
    }

    if (pcb->remote_port == tcphdr->src &&
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	8b1a      	ldrh	r2, [r3, #24]
 8014a70:	4b72      	ldr	r3, [pc, #456]	; (8014c3c <tcp_input+0x49c>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	881b      	ldrh	r3, [r3, #0]
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d13a      	bne.n	8014af2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014a7c:	69fb      	ldr	r3, [r7, #28]
 8014a7e:	8ada      	ldrh	r2, [r3, #22]
 8014a80:	4b6e      	ldr	r3, [pc, #440]	; (8014c3c <tcp_input+0x49c>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	885b      	ldrh	r3, [r3, #2]
 8014a86:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d132      	bne.n	8014af2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014a8c:	69fb      	ldr	r3, [r7, #28]
 8014a8e:	685a      	ldr	r2, [r3, #4]
 8014a90:	4b6b      	ldr	r3, [pc, #428]	; (8014c40 <tcp_input+0x4a0>)
 8014a92:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d12c      	bne.n	8014af2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	681a      	ldr	r2, [r3, #0]
 8014a9c:	4b68      	ldr	r3, [pc, #416]	; (8014c40 <tcp_input+0x4a0>)
 8014a9e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d126      	bne.n	8014af2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	68db      	ldr	r3, [r3, #12]
 8014aa8:	69fa      	ldr	r2, [r7, #28]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d106      	bne.n	8014abc <tcp_input+0x31c>
 8014aae:	4b65      	ldr	r3, [pc, #404]	; (8014c44 <tcp_input+0x4a4>)
 8014ab0:	f240 120d 	movw	r2, #269	; 0x10d
 8014ab4:	4964      	ldr	r1, [pc, #400]	; (8014c48 <tcp_input+0x4a8>)
 8014ab6:	4865      	ldr	r0, [pc, #404]	; (8014c4c <tcp_input+0x4ac>)
 8014ab8:	f007 f9cc 	bl	801be54 <iprintf>
      if (prev != NULL) {
 8014abc:	69bb      	ldr	r3, [r7, #24]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d00a      	beq.n	8014ad8 <tcp_input+0x338>
        prev->next = pcb->next;
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	68da      	ldr	r2, [r3, #12]
 8014ac6:	69bb      	ldr	r3, [r7, #24]
 8014ac8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014aca:	4b61      	ldr	r3, [pc, #388]	; (8014c50 <tcp_input+0x4b0>)
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	69fb      	ldr	r3, [r7, #28]
 8014ad0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014ad2:	4a5f      	ldr	r2, [pc, #380]	; (8014c50 <tcp_input+0x4b0>)
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014ad8:	69fb      	ldr	r3, [r7, #28]
 8014ada:	68db      	ldr	r3, [r3, #12]
 8014adc:	69fa      	ldr	r2, [r7, #28]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d111      	bne.n	8014b06 <tcp_input+0x366>
 8014ae2:	4b58      	ldr	r3, [pc, #352]	; (8014c44 <tcp_input+0x4a4>)
 8014ae4:	f240 1215 	movw	r2, #277	; 0x115
 8014ae8:	495a      	ldr	r1, [pc, #360]	; (8014c54 <tcp_input+0x4b4>)
 8014aea:	4858      	ldr	r0, [pc, #352]	; (8014c4c <tcp_input+0x4ac>)
 8014aec:	f007 f9b2 	bl	801be54 <iprintf>
      break;
 8014af0:	e009      	b.n	8014b06 <tcp_input+0x366>
    }
    prev = pcb;
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	68db      	ldr	r3, [r3, #12]
 8014afa:	61fb      	str	r3, [r7, #28]
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	f47f af5e 	bne.w	80149c0 <tcp_input+0x220>
 8014b04:	e000      	b.n	8014b08 <tcp_input+0x368>
      break;
 8014b06:	bf00      	nop
  }

  if (pcb == NULL) {
 8014b08:	69fb      	ldr	r3, [r7, #28]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	f040 80aa 	bne.w	8014c64 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b10:	4b51      	ldr	r3, [pc, #324]	; (8014c58 <tcp_input+0x4b8>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	61fb      	str	r3, [r7, #28]
 8014b16:	e03f      	b.n	8014b98 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014b18:	69fb      	ldr	r3, [r7, #28]
 8014b1a:	7d1b      	ldrb	r3, [r3, #20]
 8014b1c:	2b0a      	cmp	r3, #10
 8014b1e:	d006      	beq.n	8014b2e <tcp_input+0x38e>
 8014b20:	4b48      	ldr	r3, [pc, #288]	; (8014c44 <tcp_input+0x4a4>)
 8014b22:	f240 121f 	movw	r2, #287	; 0x11f
 8014b26:	494d      	ldr	r1, [pc, #308]	; (8014c5c <tcp_input+0x4bc>)
 8014b28:	4848      	ldr	r0, [pc, #288]	; (8014c4c <tcp_input+0x4ac>)
 8014b2a:	f007 f993 	bl	801be54 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	7a1b      	ldrb	r3, [r3, #8]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d009      	beq.n	8014b4a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	7a1a      	ldrb	r2, [r3, #8]
 8014b3a:	4b41      	ldr	r3, [pc, #260]	; (8014c40 <tcp_input+0x4a0>)
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b42:	3301      	adds	r3, #1
 8014b44:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d122      	bne.n	8014b90 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8014b4a:	69fb      	ldr	r3, [r7, #28]
 8014b4c:	8b1a      	ldrh	r2, [r3, #24]
 8014b4e:	4b3b      	ldr	r3, [pc, #236]	; (8014c3c <tcp_input+0x49c>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	881b      	ldrh	r3, [r3, #0]
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d11b      	bne.n	8014b92 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8014b5a:	69fb      	ldr	r3, [r7, #28]
 8014b5c:	8ada      	ldrh	r2, [r3, #22]
 8014b5e:	4b37      	ldr	r3, [pc, #220]	; (8014c3c <tcp_input+0x49c>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	885b      	ldrh	r3, [r3, #2]
 8014b64:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d113      	bne.n	8014b92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014b6a:	69fb      	ldr	r3, [r7, #28]
 8014b6c:	685a      	ldr	r2, [r3, #4]
 8014b6e:	4b34      	ldr	r3, [pc, #208]	; (8014c40 <tcp_input+0x4a0>)
 8014b70:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d10d      	bne.n	8014b92 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014b76:	69fb      	ldr	r3, [r7, #28]
 8014b78:	681a      	ldr	r2, [r3, #0]
 8014b7a:	4b31      	ldr	r3, [pc, #196]	; (8014c40 <tcp_input+0x4a0>)
 8014b7c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d107      	bne.n	8014b92 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014b82:	69f8      	ldr	r0, [r7, #28]
 8014b84:	f000 fb56 	bl	8015234 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7fd fc15 	bl	80123b8 <pbuf_free>
        return;
 8014b8e:	e1fd      	b.n	8014f8c <tcp_input+0x7ec>
        continue;
 8014b90:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b92:	69fb      	ldr	r3, [r7, #28]
 8014b94:	68db      	ldr	r3, [r3, #12]
 8014b96:	61fb      	str	r3, [r7, #28]
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d1bc      	bne.n	8014b18 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014ba2:	4b2f      	ldr	r3, [pc, #188]	; (8014c60 <tcp_input+0x4c0>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	617b      	str	r3, [r7, #20]
 8014ba8:	e02a      	b.n	8014c00 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	7a1b      	ldrb	r3, [r3, #8]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d00c      	beq.n	8014bcc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	7a1a      	ldrb	r2, [r3, #8]
 8014bb6:	4b22      	ldr	r3, [pc, #136]	; (8014c40 <tcp_input+0x4a0>)
 8014bb8:	685b      	ldr	r3, [r3, #4]
 8014bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d002      	beq.n	8014bcc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	61bb      	str	r3, [r7, #24]
        continue;
 8014bca:	e016      	b.n	8014bfa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	8ada      	ldrh	r2, [r3, #22]
 8014bd0:	4b1a      	ldr	r3, [pc, #104]	; (8014c3c <tcp_input+0x49c>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	885b      	ldrh	r3, [r3, #2]
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d10c      	bne.n	8014bf6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	681a      	ldr	r2, [r3, #0]
 8014be0:	4b17      	ldr	r3, [pc, #92]	; (8014c40 <tcp_input+0x4a0>)
 8014be2:	695b      	ldr	r3, [r3, #20]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d00f      	beq.n	8014c08 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d00d      	beq.n	8014c0a <tcp_input+0x46a>
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d009      	beq.n	8014c0a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	68db      	ldr	r3, [r3, #12]
 8014bfe:	617b      	str	r3, [r7, #20]
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d1d1      	bne.n	8014baa <tcp_input+0x40a>
 8014c06:	e000      	b.n	8014c0a <tcp_input+0x46a>
            break;
 8014c08:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014c0a:	697b      	ldr	r3, [r7, #20]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d029      	beq.n	8014c64 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014c10:	69bb      	ldr	r3, [r7, #24]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d00a      	beq.n	8014c2c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	68da      	ldr	r2, [r3, #12]
 8014c1a:	69bb      	ldr	r3, [r7, #24]
 8014c1c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014c1e:	4b10      	ldr	r3, [pc, #64]	; (8014c60 <tcp_input+0x4c0>)
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014c26:	4a0e      	ldr	r2, [pc, #56]	; (8014c60 <tcp_input+0x4c0>)
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014c2c:	6978      	ldr	r0, [r7, #20]
 8014c2e:	f000 fa03 	bl	8015038 <tcp_listen_input>
      }
      pbuf_free(p);
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f7fd fbc0 	bl	80123b8 <pbuf_free>
      return;
 8014c38:	e1a8      	b.n	8014f8c <tcp_input+0x7ec>
 8014c3a:	bf00      	nop
 8014c3c:	2000b00c 	.word	0x2000b00c
 8014c40:	200042bc 	.word	0x200042bc
 8014c44:	0801e618 	.word	0x0801e618
 8014c48:	0801e744 	.word	0x0801e744
 8014c4c:	0801e664 	.word	0x0801e664
 8014c50:	2000aff0 	.word	0x2000aff0
 8014c54:	0801e770 	.word	0x0801e770
 8014c58:	2000aff4 	.word	0x2000aff4
 8014c5c:	0801e79c 	.word	0x0801e79c
 8014c60:	2000afec 	.word	0x2000afec
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	f000 8158 	beq.w	8014f1c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014c6c:	4b95      	ldr	r3, [pc, #596]	; (8014ec4 <tcp_input+0x724>)
 8014c6e:	2200      	movs	r2, #0
 8014c70:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	891a      	ldrh	r2, [r3, #8]
 8014c76:	4b93      	ldr	r3, [pc, #588]	; (8014ec4 <tcp_input+0x724>)
 8014c78:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014c7a:	4a92      	ldr	r2, [pc, #584]	; (8014ec4 <tcp_input+0x724>)
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014c80:	4b91      	ldr	r3, [pc, #580]	; (8014ec8 <tcp_input+0x728>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	4a8f      	ldr	r2, [pc, #572]	; (8014ec4 <tcp_input+0x724>)
 8014c86:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014c88:	4b90      	ldr	r3, [pc, #576]	; (8014ecc <tcp_input+0x72c>)
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014c8e:	4b90      	ldr	r3, [pc, #576]	; (8014ed0 <tcp_input+0x730>)
 8014c90:	2200      	movs	r2, #0
 8014c92:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014c94:	4b8f      	ldr	r3, [pc, #572]	; (8014ed4 <tcp_input+0x734>)
 8014c96:	2200      	movs	r2, #0
 8014c98:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014c9a:	4b8f      	ldr	r3, [pc, #572]	; (8014ed8 <tcp_input+0x738>)
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	f003 0308 	and.w	r3, r3, #8
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d006      	beq.n	8014cb4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	7b5b      	ldrb	r3, [r3, #13]
 8014caa:	f043 0301 	orr.w	r3, r3, #1
 8014cae:	b2da      	uxtb	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014cb4:	69fb      	ldr	r3, [r7, #28]
 8014cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d017      	beq.n	8014cec <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014cbc:	69f8      	ldr	r0, [r7, #28]
 8014cbe:	f7ff f841 	bl	8013d44 <tcp_process_refused_data>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	f113 0f0d 	cmn.w	r3, #13
 8014cc8:	d007      	beq.n	8014cda <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d00c      	beq.n	8014cec <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014cd2:	4b82      	ldr	r3, [pc, #520]	; (8014edc <tcp_input+0x73c>)
 8014cd4:	881b      	ldrh	r3, [r3, #0]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d008      	beq.n	8014cec <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014cda:	69fb      	ldr	r3, [r7, #28]
 8014cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	f040 80e4 	bne.w	8014eac <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014ce4:	69f8      	ldr	r0, [r7, #28]
 8014ce6:	f003 fe05 	bl	80188f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014cea:	e0df      	b.n	8014eac <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8014cec:	4a7c      	ldr	r2, [pc, #496]	; (8014ee0 <tcp_input+0x740>)
 8014cee:	69fb      	ldr	r3, [r7, #28]
 8014cf0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014cf2:	69f8      	ldr	r0, [r7, #28]
 8014cf4:	f000 fb18 	bl	8015328 <tcp_process>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014cfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d00:	f113 0f0d 	cmn.w	r3, #13
 8014d04:	f000 80d4 	beq.w	8014eb0 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8014d08:	4b71      	ldr	r3, [pc, #452]	; (8014ed0 <tcp_input+0x730>)
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	f003 0308 	and.w	r3, r3, #8
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d015      	beq.n	8014d40 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014d14:	69fb      	ldr	r3, [r7, #28]
 8014d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d008      	beq.n	8014d30 <tcp_input+0x590>
 8014d1e:	69fb      	ldr	r3, [r7, #28]
 8014d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014d24:	69fa      	ldr	r2, [r7, #28]
 8014d26:	6912      	ldr	r2, [r2, #16]
 8014d28:	f06f 010d 	mvn.w	r1, #13
 8014d2c:	4610      	mov	r0, r2
 8014d2e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014d30:	69f9      	ldr	r1, [r7, #28]
 8014d32:	486c      	ldr	r0, [pc, #432]	; (8014ee4 <tcp_input+0x744>)
 8014d34:	f7ff fbbc 	bl	80144b0 <tcp_pcb_remove>
        tcp_free(pcb);
 8014d38:	69f8      	ldr	r0, [r7, #28]
 8014d3a:	f7fd fded 	bl	8012918 <tcp_free>
 8014d3e:	e0da      	b.n	8014ef6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014d40:	2300      	movs	r3, #0
 8014d42:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014d44:	4b63      	ldr	r3, [pc, #396]	; (8014ed4 <tcp_input+0x734>)
 8014d46:	881b      	ldrh	r3, [r3, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d01d      	beq.n	8014d88 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014d4c:	4b61      	ldr	r3, [pc, #388]	; (8014ed4 <tcp_input+0x734>)
 8014d4e:	881b      	ldrh	r3, [r3, #0]
 8014d50:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d00a      	beq.n	8014d72 <tcp_input+0x5d2>
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d62:	69fa      	ldr	r2, [r7, #28]
 8014d64:	6910      	ldr	r0, [r2, #16]
 8014d66:	89fa      	ldrh	r2, [r7, #14]
 8014d68:	69f9      	ldr	r1, [r7, #28]
 8014d6a:	4798      	blx	r3
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	74fb      	strb	r3, [r7, #19]
 8014d70:	e001      	b.n	8014d76 <tcp_input+0x5d6>
 8014d72:	2300      	movs	r3, #0
 8014d74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014d76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d7a:	f113 0f0d 	cmn.w	r3, #13
 8014d7e:	f000 8099 	beq.w	8014eb4 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014d82:	4b54      	ldr	r3, [pc, #336]	; (8014ed4 <tcp_input+0x734>)
 8014d84:	2200      	movs	r2, #0
 8014d86:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014d88:	69f8      	ldr	r0, [r7, #28]
 8014d8a:	f000 f915 	bl	8014fb8 <tcp_input_delayed_close>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f040 8091 	bne.w	8014eb8 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014d96:	4b4d      	ldr	r3, [pc, #308]	; (8014ecc <tcp_input+0x72c>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d041      	beq.n	8014e22 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d006      	beq.n	8014db4 <tcp_input+0x614>
 8014da6:	4b50      	ldr	r3, [pc, #320]	; (8014ee8 <tcp_input+0x748>)
 8014da8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014dac:	494f      	ldr	r1, [pc, #316]	; (8014eec <tcp_input+0x74c>)
 8014dae:	4850      	ldr	r0, [pc, #320]	; (8014ef0 <tcp_input+0x750>)
 8014db0:	f007 f850 	bl	801be54 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	8b5b      	ldrh	r3, [r3, #26]
 8014db8:	f003 0310 	and.w	r3, r3, #16
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d008      	beq.n	8014dd2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014dc0:	4b42      	ldr	r3, [pc, #264]	; (8014ecc <tcp_input+0x72c>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f7fd faf7 	bl	80123b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014dca:	69f8      	ldr	r0, [r7, #28]
 8014dcc:	f7fe f88c 	bl	8012ee8 <tcp_abort>
            goto aborted;
 8014dd0:	e091      	b.n	8014ef6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014dd2:	69fb      	ldr	r3, [r7, #28]
 8014dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d00c      	beq.n	8014df6 <tcp_input+0x656>
 8014ddc:	69fb      	ldr	r3, [r7, #28]
 8014dde:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	6918      	ldr	r0, [r3, #16]
 8014de6:	4b39      	ldr	r3, [pc, #228]	; (8014ecc <tcp_input+0x72c>)
 8014de8:	681a      	ldr	r2, [r3, #0]
 8014dea:	2300      	movs	r3, #0
 8014dec:	69f9      	ldr	r1, [r7, #28]
 8014dee:	47a0      	blx	r4
 8014df0:	4603      	mov	r3, r0
 8014df2:	74fb      	strb	r3, [r7, #19]
 8014df4:	e008      	b.n	8014e08 <tcp_input+0x668>
 8014df6:	4b35      	ldr	r3, [pc, #212]	; (8014ecc <tcp_input+0x72c>)
 8014df8:	681a      	ldr	r2, [r3, #0]
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	69f9      	ldr	r1, [r7, #28]
 8014dfe:	2000      	movs	r0, #0
 8014e00:	f7ff f896 	bl	8013f30 <tcp_recv_null>
 8014e04:	4603      	mov	r3, r0
 8014e06:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014e08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e0c:	f113 0f0d 	cmn.w	r3, #13
 8014e10:	d054      	beq.n	8014ebc <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014e12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d003      	beq.n	8014e22 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014e1a:	4b2c      	ldr	r3, [pc, #176]	; (8014ecc <tcp_input+0x72c>)
 8014e1c:	681a      	ldr	r2, [r3, #0]
 8014e1e:	69fb      	ldr	r3, [r7, #28]
 8014e20:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014e22:	4b2b      	ldr	r3, [pc, #172]	; (8014ed0 <tcp_input+0x730>)
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	f003 0320 	and.w	r3, r3, #32
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d031      	beq.n	8014e92 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8014e2e:	69fb      	ldr	r3, [r7, #28]
 8014e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d009      	beq.n	8014e4a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014e36:	69fb      	ldr	r3, [r7, #28]
 8014e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e3a:	7b5a      	ldrb	r2, [r3, #13]
 8014e3c:	69fb      	ldr	r3, [r7, #28]
 8014e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e40:	f042 0220 	orr.w	r2, r2, #32
 8014e44:	b2d2      	uxtb	r2, r2
 8014e46:	735a      	strb	r2, [r3, #13]
 8014e48:	e023      	b.n	8014e92 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e4e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8014e52:	4293      	cmp	r3, r2
 8014e54:	d005      	beq.n	8014e62 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8014e56:	69fb      	ldr	r3, [r7, #28]
 8014e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	b29a      	uxth	r2, r3
 8014e5e:	69fb      	ldr	r3, [r7, #28]
 8014e60:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014e62:	69fb      	ldr	r3, [r7, #28]
 8014e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d00b      	beq.n	8014e84 <tcp_input+0x6e4>
 8014e6c:	69fb      	ldr	r3, [r7, #28]
 8014e6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014e72:	69fb      	ldr	r3, [r7, #28]
 8014e74:	6918      	ldr	r0, [r3, #16]
 8014e76:	2300      	movs	r3, #0
 8014e78:	2200      	movs	r2, #0
 8014e7a:	69f9      	ldr	r1, [r7, #28]
 8014e7c:	47a0      	blx	r4
 8014e7e:	4603      	mov	r3, r0
 8014e80:	74fb      	strb	r3, [r7, #19]
 8014e82:	e001      	b.n	8014e88 <tcp_input+0x6e8>
 8014e84:	2300      	movs	r3, #0
 8014e86:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014e88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e8c:	f113 0f0d 	cmn.w	r3, #13
 8014e90:	d016      	beq.n	8014ec0 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014e92:	4b13      	ldr	r3, [pc, #76]	; (8014ee0 <tcp_input+0x740>)
 8014e94:	2200      	movs	r2, #0
 8014e96:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014e98:	69f8      	ldr	r0, [r7, #28]
 8014e9a:	f000 f88d 	bl	8014fb8 <tcp_input_delayed_close>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d127      	bne.n	8014ef4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014ea4:	69f8      	ldr	r0, [r7, #28]
 8014ea6:	f002 ff1f 	bl	8017ce8 <tcp_output>
 8014eaa:	e024      	b.n	8014ef6 <tcp_input+0x756>
        goto aborted;
 8014eac:	bf00      	nop
 8014eae:	e022      	b.n	8014ef6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014eb0:	bf00      	nop
 8014eb2:	e020      	b.n	8014ef6 <tcp_input+0x756>
              goto aborted;
 8014eb4:	bf00      	nop
 8014eb6:	e01e      	b.n	8014ef6 <tcp_input+0x756>
          goto aborted;
 8014eb8:	bf00      	nop
 8014eba:	e01c      	b.n	8014ef6 <tcp_input+0x756>
            goto aborted;
 8014ebc:	bf00      	nop
 8014ebe:	e01a      	b.n	8014ef6 <tcp_input+0x756>
              goto aborted;
 8014ec0:	bf00      	nop
 8014ec2:	e018      	b.n	8014ef6 <tcp_input+0x756>
 8014ec4:	2000affc 	.word	0x2000affc
 8014ec8:	2000b00c 	.word	0x2000b00c
 8014ecc:	2000b02c 	.word	0x2000b02c
 8014ed0:	2000b029 	.word	0x2000b029
 8014ed4:	2000b024 	.word	0x2000b024
 8014ed8:	2000b028 	.word	0x2000b028
 8014edc:	2000b026 	.word	0x2000b026
 8014ee0:	2000b030 	.word	0x2000b030
 8014ee4:	2000aff0 	.word	0x2000aff0
 8014ee8:	0801e618 	.word	0x0801e618
 8014eec:	0801e7cc 	.word	0x0801e7cc
 8014ef0:	0801e664 	.word	0x0801e664
          goto aborted;
 8014ef4:	bf00      	nop
    tcp_input_pcb = NULL;
 8014ef6:	4b27      	ldr	r3, [pc, #156]	; (8014f94 <tcp_input+0x7f4>)
 8014ef8:	2200      	movs	r2, #0
 8014efa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014efc:	4b26      	ldr	r3, [pc, #152]	; (8014f98 <tcp_input+0x7f8>)
 8014efe:	2200      	movs	r2, #0
 8014f00:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014f02:	4b26      	ldr	r3, [pc, #152]	; (8014f9c <tcp_input+0x7fc>)
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d03f      	beq.n	8014f8a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014f0a:	4b24      	ldr	r3, [pc, #144]	; (8014f9c <tcp_input+0x7fc>)
 8014f0c:	685b      	ldr	r3, [r3, #4]
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7fd fa52 	bl	80123b8 <pbuf_free>
      inseg.p = NULL;
 8014f14:	4b21      	ldr	r3, [pc, #132]	; (8014f9c <tcp_input+0x7fc>)
 8014f16:	2200      	movs	r2, #0
 8014f18:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014f1a:	e036      	b.n	8014f8a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014f1c:	4b20      	ldr	r3, [pc, #128]	; (8014fa0 <tcp_input+0x800>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	899b      	ldrh	r3, [r3, #12]
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	4618      	mov	r0, r3
 8014f26:	f7fb fe7e 	bl	8010c26 <lwip_htons>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	f003 0304 	and.w	r3, r3, #4
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d118      	bne.n	8014f68 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f36:	4b1b      	ldr	r3, [pc, #108]	; (8014fa4 <tcp_input+0x804>)
 8014f38:	6819      	ldr	r1, [r3, #0]
 8014f3a:	4b1b      	ldr	r3, [pc, #108]	; (8014fa8 <tcp_input+0x808>)
 8014f3c:	881b      	ldrh	r3, [r3, #0]
 8014f3e:	461a      	mov	r2, r3
 8014f40:	4b1a      	ldr	r3, [pc, #104]	; (8014fac <tcp_input+0x80c>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f46:	4b16      	ldr	r3, [pc, #88]	; (8014fa0 <tcp_input+0x800>)
 8014f48:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f4a:	885b      	ldrh	r3, [r3, #2]
 8014f4c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f4e:	4a14      	ldr	r2, [pc, #80]	; (8014fa0 <tcp_input+0x800>)
 8014f50:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f52:	8812      	ldrh	r2, [r2, #0]
 8014f54:	b292      	uxth	r2, r2
 8014f56:	9202      	str	r2, [sp, #8]
 8014f58:	9301      	str	r3, [sp, #4]
 8014f5a:	4b15      	ldr	r3, [pc, #84]	; (8014fb0 <tcp_input+0x810>)
 8014f5c:	9300      	str	r3, [sp, #0]
 8014f5e:	4b15      	ldr	r3, [pc, #84]	; (8014fb4 <tcp_input+0x814>)
 8014f60:	4602      	mov	r2, r0
 8014f62:	2000      	movs	r0, #0
 8014f64:	f003 fc74 	bl	8018850 <tcp_rst>
    pbuf_free(p);
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f7fd fa25 	bl	80123b8 <pbuf_free>
  return;
 8014f6e:	e00c      	b.n	8014f8a <tcp_input+0x7ea>
    goto dropped;
 8014f70:	bf00      	nop
 8014f72:	e006      	b.n	8014f82 <tcp_input+0x7e2>
    goto dropped;
 8014f74:	bf00      	nop
 8014f76:	e004      	b.n	8014f82 <tcp_input+0x7e2>
    goto dropped;
 8014f78:	bf00      	nop
 8014f7a:	e002      	b.n	8014f82 <tcp_input+0x7e2>
      goto dropped;
 8014f7c:	bf00      	nop
 8014f7e:	e000      	b.n	8014f82 <tcp_input+0x7e2>
      goto dropped;
 8014f80:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f7fd fa18 	bl	80123b8 <pbuf_free>
 8014f88:	e000      	b.n	8014f8c <tcp_input+0x7ec>
  return;
 8014f8a:	bf00      	nop
}
 8014f8c:	3724      	adds	r7, #36	; 0x24
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd90      	pop	{r4, r7, pc}
 8014f92:	bf00      	nop
 8014f94:	2000b030 	.word	0x2000b030
 8014f98:	2000b02c 	.word	0x2000b02c
 8014f9c:	2000affc 	.word	0x2000affc
 8014fa0:	2000b00c 	.word	0x2000b00c
 8014fa4:	2000b020 	.word	0x2000b020
 8014fa8:	2000b026 	.word	0x2000b026
 8014fac:	2000b01c 	.word	0x2000b01c
 8014fb0:	200042cc 	.word	0x200042cc
 8014fb4:	200042d0 	.word	0x200042d0

08014fb8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d106      	bne.n	8014fd4 <tcp_input_delayed_close+0x1c>
 8014fc6:	4b17      	ldr	r3, [pc, #92]	; (8015024 <tcp_input_delayed_close+0x6c>)
 8014fc8:	f240 225a 	movw	r2, #602	; 0x25a
 8014fcc:	4916      	ldr	r1, [pc, #88]	; (8015028 <tcp_input_delayed_close+0x70>)
 8014fce:	4817      	ldr	r0, [pc, #92]	; (801502c <tcp_input_delayed_close+0x74>)
 8014fd0:	f006 ff40 	bl	801be54 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014fd4:	4b16      	ldr	r3, [pc, #88]	; (8015030 <tcp_input_delayed_close+0x78>)
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	f003 0310 	and.w	r3, r3, #16
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d01c      	beq.n	801501a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	8b5b      	ldrh	r3, [r3, #26]
 8014fe4:	f003 0310 	and.w	r3, r3, #16
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d10d      	bne.n	8015008 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d008      	beq.n	8015008 <tcp_input_delayed_close+0x50>
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ffc:	687a      	ldr	r2, [r7, #4]
 8014ffe:	6912      	ldr	r2, [r2, #16]
 8015000:	f06f 010e 	mvn.w	r1, #14
 8015004:	4610      	mov	r0, r2
 8015006:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015008:	6879      	ldr	r1, [r7, #4]
 801500a:	480a      	ldr	r0, [pc, #40]	; (8015034 <tcp_input_delayed_close+0x7c>)
 801500c:	f7ff fa50 	bl	80144b0 <tcp_pcb_remove>
    tcp_free(pcb);
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f7fd fc81 	bl	8012918 <tcp_free>
    return 1;
 8015016:	2301      	movs	r3, #1
 8015018:	e000      	b.n	801501c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801501a:	2300      	movs	r3, #0
}
 801501c:	4618      	mov	r0, r3
 801501e:	3708      	adds	r7, #8
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}
 8015024:	0801e618 	.word	0x0801e618
 8015028:	0801e7e8 	.word	0x0801e7e8
 801502c:	0801e664 	.word	0x0801e664
 8015030:	2000b029 	.word	0x2000b029
 8015034:	2000aff0 	.word	0x2000aff0

08015038 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015038:	b590      	push	{r4, r7, lr}
 801503a:	b08b      	sub	sp, #44	; 0x2c
 801503c:	af04      	add	r7, sp, #16
 801503e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015040:	4b6f      	ldr	r3, [pc, #444]	; (8015200 <tcp_listen_input+0x1c8>)
 8015042:	781b      	ldrb	r3, [r3, #0]
 8015044:	f003 0304 	and.w	r3, r3, #4
 8015048:	2b00      	cmp	r3, #0
 801504a:	f040 80d2 	bne.w	80151f2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d106      	bne.n	8015062 <tcp_listen_input+0x2a>
 8015054:	4b6b      	ldr	r3, [pc, #428]	; (8015204 <tcp_listen_input+0x1cc>)
 8015056:	f240 2281 	movw	r2, #641	; 0x281
 801505a:	496b      	ldr	r1, [pc, #428]	; (8015208 <tcp_listen_input+0x1d0>)
 801505c:	486b      	ldr	r0, [pc, #428]	; (801520c <tcp_listen_input+0x1d4>)
 801505e:	f006 fef9 	bl	801be54 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015062:	4b67      	ldr	r3, [pc, #412]	; (8015200 <tcp_listen_input+0x1c8>)
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	f003 0310 	and.w	r3, r3, #16
 801506a:	2b00      	cmp	r3, #0
 801506c:	d019      	beq.n	80150a2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801506e:	4b68      	ldr	r3, [pc, #416]	; (8015210 <tcp_listen_input+0x1d8>)
 8015070:	6819      	ldr	r1, [r3, #0]
 8015072:	4b68      	ldr	r3, [pc, #416]	; (8015214 <tcp_listen_input+0x1dc>)
 8015074:	881b      	ldrh	r3, [r3, #0]
 8015076:	461a      	mov	r2, r3
 8015078:	4b67      	ldr	r3, [pc, #412]	; (8015218 <tcp_listen_input+0x1e0>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801507e:	4b67      	ldr	r3, [pc, #412]	; (801521c <tcp_listen_input+0x1e4>)
 8015080:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015082:	885b      	ldrh	r3, [r3, #2]
 8015084:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015086:	4a65      	ldr	r2, [pc, #404]	; (801521c <tcp_listen_input+0x1e4>)
 8015088:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801508a:	8812      	ldrh	r2, [r2, #0]
 801508c:	b292      	uxth	r2, r2
 801508e:	9202      	str	r2, [sp, #8]
 8015090:	9301      	str	r3, [sp, #4]
 8015092:	4b63      	ldr	r3, [pc, #396]	; (8015220 <tcp_listen_input+0x1e8>)
 8015094:	9300      	str	r3, [sp, #0]
 8015096:	4b63      	ldr	r3, [pc, #396]	; (8015224 <tcp_listen_input+0x1ec>)
 8015098:	4602      	mov	r2, r0
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f003 fbd8 	bl	8018850 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80150a0:	e0a9      	b.n	80151f6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80150a2:	4b57      	ldr	r3, [pc, #348]	; (8015200 <tcp_listen_input+0x1c8>)
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	f003 0302 	and.w	r3, r3, #2
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	f000 80a3 	beq.w	80151f6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	7d5b      	ldrb	r3, [r3, #21]
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7ff f85f 	bl	8014178 <tcp_alloc>
 80150ba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d111      	bne.n	80150e6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	699b      	ldr	r3, [r3, #24]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d00a      	beq.n	80150e0 <tcp_listen_input+0xa8>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	699b      	ldr	r3, [r3, #24]
 80150ce:	687a      	ldr	r2, [r7, #4]
 80150d0:	6910      	ldr	r0, [r2, #16]
 80150d2:	f04f 32ff 	mov.w	r2, #4294967295
 80150d6:	2100      	movs	r1, #0
 80150d8:	4798      	blx	r3
 80150da:	4603      	mov	r3, r0
 80150dc:	73bb      	strb	r3, [r7, #14]
      return;
 80150de:	e08b      	b.n	80151f8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80150e0:	23f0      	movs	r3, #240	; 0xf0
 80150e2:	73bb      	strb	r3, [r7, #14]
      return;
 80150e4:	e088      	b.n	80151f8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80150e6:	4b50      	ldr	r3, [pc, #320]	; (8015228 <tcp_listen_input+0x1f0>)
 80150e8:	695a      	ldr	r2, [r3, #20]
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80150ee:	4b4e      	ldr	r3, [pc, #312]	; (8015228 <tcp_listen_input+0x1f0>)
 80150f0:	691a      	ldr	r2, [r3, #16]
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	8ada      	ldrh	r2, [r3, #22]
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80150fe:	4b47      	ldr	r3, [pc, #284]	; (801521c <tcp_listen_input+0x1e4>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	881b      	ldrh	r3, [r3, #0]
 8015104:	b29a      	uxth	r2, r3
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2203      	movs	r2, #3
 801510e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015110:	4b41      	ldr	r3, [pc, #260]	; (8015218 <tcp_listen_input+0x1e0>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	1c5a      	adds	r2, r3, #1
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015122:	6978      	ldr	r0, [r7, #20]
 8015124:	f7ff fa58 	bl	80145d8 <tcp_next_iss>
 8015128:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	693a      	ldr	r2, [r7, #16]
 801512e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	693a      	ldr	r2, [r7, #16]
 8015134:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	693a      	ldr	r2, [r7, #16]
 801513a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	693a      	ldr	r2, [r7, #16]
 8015140:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015142:	4b35      	ldr	r3, [pc, #212]	; (8015218 <tcp_listen_input+0x1e0>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	1e5a      	subs	r2, r3, #1
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	691a      	ldr	r2, [r3, #16]
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	7a5b      	ldrb	r3, [r3, #9]
 801515e:	f003 030c 	and.w	r3, r3, #12
 8015162:	b2da      	uxtb	r2, r3
 8015164:	697b      	ldr	r3, [r7, #20]
 8015166:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	7a1a      	ldrb	r2, [r3, #8]
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015170:	4b2e      	ldr	r3, [pc, #184]	; (801522c <tcp_listen_input+0x1f4>)
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	60da      	str	r2, [r3, #12]
 8015178:	4a2c      	ldr	r2, [pc, #176]	; (801522c <tcp_listen_input+0x1f4>)
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	6013      	str	r3, [r2, #0]
 801517e:	f003 fd29 	bl	8018bd4 <tcp_timer_needed>
 8015182:	4b2b      	ldr	r3, [pc, #172]	; (8015230 <tcp_listen_input+0x1f8>)
 8015184:	2201      	movs	r2, #1
 8015186:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015188:	6978      	ldr	r0, [r7, #20]
 801518a:	f001 fd8f 	bl	8016cac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801518e:	4b23      	ldr	r3, [pc, #140]	; (801521c <tcp_listen_input+0x1e4>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	89db      	ldrh	r3, [r3, #14]
 8015194:	b29a      	uxth	r2, r3
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801519c:	697b      	ldr	r3, [r7, #20]
 801519e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80151a8:	697b      	ldr	r3, [r7, #20]
 80151aa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	3304      	adds	r3, #4
 80151b0:	4618      	mov	r0, r3
 80151b2:	f005 f909 	bl	801a3c8 <ip4_route>
 80151b6:	4601      	mov	r1, r0
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	3304      	adds	r3, #4
 80151bc:	461a      	mov	r2, r3
 80151be:	4620      	mov	r0, r4
 80151c0:	f7ff fa30 	bl	8014624 <tcp_eff_send_mss_netif>
 80151c4:	4603      	mov	r3, r0
 80151c6:	461a      	mov	r2, r3
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80151cc:	2112      	movs	r1, #18
 80151ce:	6978      	ldr	r0, [r7, #20]
 80151d0:	f002 fc9c 	bl	8017b0c <tcp_enqueue_flags>
 80151d4:	4603      	mov	r3, r0
 80151d6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80151d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d004      	beq.n	80151ea <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80151e0:	2100      	movs	r1, #0
 80151e2:	6978      	ldr	r0, [r7, #20]
 80151e4:	f7fd fdc2 	bl	8012d6c <tcp_abandon>
      return;
 80151e8:	e006      	b.n	80151f8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80151ea:	6978      	ldr	r0, [r7, #20]
 80151ec:	f002 fd7c 	bl	8017ce8 <tcp_output>
  return;
 80151f0:	e001      	b.n	80151f6 <tcp_listen_input+0x1be>
    return;
 80151f2:	bf00      	nop
 80151f4:	e000      	b.n	80151f8 <tcp_listen_input+0x1c0>
  return;
 80151f6:	bf00      	nop
}
 80151f8:	371c      	adds	r7, #28
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd90      	pop	{r4, r7, pc}
 80151fe:	bf00      	nop
 8015200:	2000b028 	.word	0x2000b028
 8015204:	0801e618 	.word	0x0801e618
 8015208:	0801e810 	.word	0x0801e810
 801520c:	0801e664 	.word	0x0801e664
 8015210:	2000b020 	.word	0x2000b020
 8015214:	2000b026 	.word	0x2000b026
 8015218:	2000b01c 	.word	0x2000b01c
 801521c:	2000b00c 	.word	0x2000b00c
 8015220:	200042cc 	.word	0x200042cc
 8015224:	200042d0 	.word	0x200042d0
 8015228:	200042bc 	.word	0x200042bc
 801522c:	2000aff0 	.word	0x2000aff0
 8015230:	2000aff8 	.word	0x2000aff8

08015234 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b086      	sub	sp, #24
 8015238:	af04      	add	r7, sp, #16
 801523a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801523c:	4b2f      	ldr	r3, [pc, #188]	; (80152fc <tcp_timewait_input+0xc8>)
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	f003 0304 	and.w	r3, r3, #4
 8015244:	2b00      	cmp	r3, #0
 8015246:	d153      	bne.n	80152f0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d106      	bne.n	801525c <tcp_timewait_input+0x28>
 801524e:	4b2c      	ldr	r3, [pc, #176]	; (8015300 <tcp_timewait_input+0xcc>)
 8015250:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015254:	492b      	ldr	r1, [pc, #172]	; (8015304 <tcp_timewait_input+0xd0>)
 8015256:	482c      	ldr	r0, [pc, #176]	; (8015308 <tcp_timewait_input+0xd4>)
 8015258:	f006 fdfc 	bl	801be54 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801525c:	4b27      	ldr	r3, [pc, #156]	; (80152fc <tcp_timewait_input+0xc8>)
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	f003 0302 	and.w	r3, r3, #2
 8015264:	2b00      	cmp	r3, #0
 8015266:	d02a      	beq.n	80152be <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015268:	4b28      	ldr	r3, [pc, #160]	; (801530c <tcp_timewait_input+0xd8>)
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	2b00      	cmp	r3, #0
 8015274:	db2d      	blt.n	80152d2 <tcp_timewait_input+0x9e>
 8015276:	4b25      	ldr	r3, [pc, #148]	; (801530c <tcp_timewait_input+0xd8>)
 8015278:	681a      	ldr	r2, [r3, #0]
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801527e:	6879      	ldr	r1, [r7, #4]
 8015280:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015282:	440b      	add	r3, r1
 8015284:	1ad3      	subs	r3, r2, r3
 8015286:	2b00      	cmp	r3, #0
 8015288:	dc23      	bgt.n	80152d2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801528a:	4b21      	ldr	r3, [pc, #132]	; (8015310 <tcp_timewait_input+0xdc>)
 801528c:	6819      	ldr	r1, [r3, #0]
 801528e:	4b21      	ldr	r3, [pc, #132]	; (8015314 <tcp_timewait_input+0xe0>)
 8015290:	881b      	ldrh	r3, [r3, #0]
 8015292:	461a      	mov	r2, r3
 8015294:	4b1d      	ldr	r3, [pc, #116]	; (801530c <tcp_timewait_input+0xd8>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801529a:	4b1f      	ldr	r3, [pc, #124]	; (8015318 <tcp_timewait_input+0xe4>)
 801529c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801529e:	885b      	ldrh	r3, [r3, #2]
 80152a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80152a2:	4a1d      	ldr	r2, [pc, #116]	; (8015318 <tcp_timewait_input+0xe4>)
 80152a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80152a6:	8812      	ldrh	r2, [r2, #0]
 80152a8:	b292      	uxth	r2, r2
 80152aa:	9202      	str	r2, [sp, #8]
 80152ac:	9301      	str	r3, [sp, #4]
 80152ae:	4b1b      	ldr	r3, [pc, #108]	; (801531c <tcp_timewait_input+0xe8>)
 80152b0:	9300      	str	r3, [sp, #0]
 80152b2:	4b1b      	ldr	r3, [pc, #108]	; (8015320 <tcp_timewait_input+0xec>)
 80152b4:	4602      	mov	r2, r0
 80152b6:	6878      	ldr	r0, [r7, #4]
 80152b8:	f003 faca 	bl	8018850 <tcp_rst>
      return;
 80152bc:	e01b      	b.n	80152f6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80152be:	4b0f      	ldr	r3, [pc, #60]	; (80152fc <tcp_timewait_input+0xc8>)
 80152c0:	781b      	ldrb	r3, [r3, #0]
 80152c2:	f003 0301 	and.w	r3, r3, #1
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d003      	beq.n	80152d2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80152ca:	4b16      	ldr	r3, [pc, #88]	; (8015324 <tcp_timewait_input+0xf0>)
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80152d2:	4b10      	ldr	r3, [pc, #64]	; (8015314 <tcp_timewait_input+0xe0>)
 80152d4:	881b      	ldrh	r3, [r3, #0]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d00c      	beq.n	80152f4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	8b5b      	ldrh	r3, [r3, #26]
 80152de:	f043 0302 	orr.w	r3, r3, #2
 80152e2:	b29a      	uxth	r2, r3
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f002 fcfd 	bl	8017ce8 <tcp_output>
  }
  return;
 80152ee:	e001      	b.n	80152f4 <tcp_timewait_input+0xc0>
    return;
 80152f0:	bf00      	nop
 80152f2:	e000      	b.n	80152f6 <tcp_timewait_input+0xc2>
  return;
 80152f4:	bf00      	nop
}
 80152f6:	3708      	adds	r7, #8
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	2000b028 	.word	0x2000b028
 8015300:	0801e618 	.word	0x0801e618
 8015304:	0801e830 	.word	0x0801e830
 8015308:	0801e664 	.word	0x0801e664
 801530c:	2000b01c 	.word	0x2000b01c
 8015310:	2000b020 	.word	0x2000b020
 8015314:	2000b026 	.word	0x2000b026
 8015318:	2000b00c 	.word	0x2000b00c
 801531c:	200042cc 	.word	0x200042cc
 8015320:	200042d0 	.word	0x200042d0
 8015324:	2000afe4 	.word	0x2000afe4

08015328 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015328:	b590      	push	{r4, r7, lr}
 801532a:	b08d      	sub	sp, #52	; 0x34
 801532c:	af04      	add	r7, sp, #16
 801532e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015330:	2300      	movs	r3, #0
 8015332:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015334:	2300      	movs	r3, #0
 8015336:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d106      	bne.n	801534c <tcp_process+0x24>
 801533e:	4b9d      	ldr	r3, [pc, #628]	; (80155b4 <tcp_process+0x28c>)
 8015340:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015344:	499c      	ldr	r1, [pc, #624]	; (80155b8 <tcp_process+0x290>)
 8015346:	489d      	ldr	r0, [pc, #628]	; (80155bc <tcp_process+0x294>)
 8015348:	f006 fd84 	bl	801be54 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801534c:	4b9c      	ldr	r3, [pc, #624]	; (80155c0 <tcp_process+0x298>)
 801534e:	781b      	ldrb	r3, [r3, #0]
 8015350:	f003 0304 	and.w	r3, r3, #4
 8015354:	2b00      	cmp	r3, #0
 8015356:	d04e      	beq.n	80153f6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	7d1b      	ldrb	r3, [r3, #20]
 801535c:	2b02      	cmp	r3, #2
 801535e:	d108      	bne.n	8015372 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015364:	4b97      	ldr	r3, [pc, #604]	; (80155c4 <tcp_process+0x29c>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	429a      	cmp	r2, r3
 801536a:	d123      	bne.n	80153b4 <tcp_process+0x8c>
        acceptable = 1;
 801536c:	2301      	movs	r3, #1
 801536e:	76fb      	strb	r3, [r7, #27]
 8015370:	e020      	b.n	80153b4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015376:	4b94      	ldr	r3, [pc, #592]	; (80155c8 <tcp_process+0x2a0>)
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	429a      	cmp	r2, r3
 801537c:	d102      	bne.n	8015384 <tcp_process+0x5c>
        acceptable = 1;
 801537e:	2301      	movs	r3, #1
 8015380:	76fb      	strb	r3, [r7, #27]
 8015382:	e017      	b.n	80153b4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015384:	4b90      	ldr	r3, [pc, #576]	; (80155c8 <tcp_process+0x2a0>)
 8015386:	681a      	ldr	r2, [r3, #0]
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801538c:	1ad3      	subs	r3, r2, r3
 801538e:	2b00      	cmp	r3, #0
 8015390:	db10      	blt.n	80153b4 <tcp_process+0x8c>
 8015392:	4b8d      	ldr	r3, [pc, #564]	; (80155c8 <tcp_process+0x2a0>)
 8015394:	681a      	ldr	r2, [r3, #0]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801539a:	6879      	ldr	r1, [r7, #4]
 801539c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801539e:	440b      	add	r3, r1
 80153a0:	1ad3      	subs	r3, r2, r3
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	dc06      	bgt.n	80153b4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	8b5b      	ldrh	r3, [r3, #26]
 80153aa:	f043 0302 	orr.w	r3, r3, #2
 80153ae:	b29a      	uxth	r2, r3
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80153b4:	7efb      	ldrb	r3, [r7, #27]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d01b      	beq.n	80153f2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	7d1b      	ldrb	r3, [r3, #20]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d106      	bne.n	80153d0 <tcp_process+0xa8>
 80153c2:	4b7c      	ldr	r3, [pc, #496]	; (80155b4 <tcp_process+0x28c>)
 80153c4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80153c8:	4980      	ldr	r1, [pc, #512]	; (80155cc <tcp_process+0x2a4>)
 80153ca:	487c      	ldr	r0, [pc, #496]	; (80155bc <tcp_process+0x294>)
 80153cc:	f006 fd42 	bl	801be54 <iprintf>
      recv_flags |= TF_RESET;
 80153d0:	4b7f      	ldr	r3, [pc, #508]	; (80155d0 <tcp_process+0x2a8>)
 80153d2:	781b      	ldrb	r3, [r3, #0]
 80153d4:	f043 0308 	orr.w	r3, r3, #8
 80153d8:	b2da      	uxtb	r2, r3
 80153da:	4b7d      	ldr	r3, [pc, #500]	; (80155d0 <tcp_process+0x2a8>)
 80153dc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	8b5b      	ldrh	r3, [r3, #26]
 80153e2:	f023 0301 	bic.w	r3, r3, #1
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80153ec:	f06f 030d 	mvn.w	r3, #13
 80153f0:	e37a      	b.n	8015ae8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80153f2:	2300      	movs	r3, #0
 80153f4:	e378      	b.n	8015ae8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80153f6:	4b72      	ldr	r3, [pc, #456]	; (80155c0 <tcp_process+0x298>)
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	f003 0302 	and.w	r3, r3, #2
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d010      	beq.n	8015424 <tcp_process+0xfc>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	7d1b      	ldrb	r3, [r3, #20]
 8015406:	2b02      	cmp	r3, #2
 8015408:	d00c      	beq.n	8015424 <tcp_process+0xfc>
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	7d1b      	ldrb	r3, [r3, #20]
 801540e:	2b03      	cmp	r3, #3
 8015410:	d008      	beq.n	8015424 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	8b5b      	ldrh	r3, [r3, #26]
 8015416:	f043 0302 	orr.w	r3, r3, #2
 801541a:	b29a      	uxth	r2, r3
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015420:	2300      	movs	r3, #0
 8015422:	e361      	b.n	8015ae8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	8b5b      	ldrh	r3, [r3, #26]
 8015428:	f003 0310 	and.w	r3, r3, #16
 801542c:	2b00      	cmp	r3, #0
 801542e:	d103      	bne.n	8015438 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015430:	4b68      	ldr	r3, [pc, #416]	; (80155d4 <tcp_process+0x2ac>)
 8015432:	681a      	ldr	r2, [r3, #0]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2200      	movs	r2, #0
 801543c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2200      	movs	r2, #0
 8015444:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f001 fc2f 	bl	8016cac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	7d1b      	ldrb	r3, [r3, #20]
 8015452:	3b02      	subs	r3, #2
 8015454:	2b07      	cmp	r3, #7
 8015456:	f200 8337 	bhi.w	8015ac8 <tcp_process+0x7a0>
 801545a:	a201      	add	r2, pc, #4	; (adr r2, 8015460 <tcp_process+0x138>)
 801545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015460:	08015481 	.word	0x08015481
 8015464:	080156b1 	.word	0x080156b1
 8015468:	08015829 	.word	0x08015829
 801546c:	08015853 	.word	0x08015853
 8015470:	08015977 	.word	0x08015977
 8015474:	08015829 	.word	0x08015829
 8015478:	08015a03 	.word	0x08015a03
 801547c:	08015a93 	.word	0x08015a93
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015480:	4b4f      	ldr	r3, [pc, #316]	; (80155c0 <tcp_process+0x298>)
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	f003 0310 	and.w	r3, r3, #16
 8015488:	2b00      	cmp	r3, #0
 801548a:	f000 80e4 	beq.w	8015656 <tcp_process+0x32e>
 801548e:	4b4c      	ldr	r3, [pc, #304]	; (80155c0 <tcp_process+0x298>)
 8015490:	781b      	ldrb	r3, [r3, #0]
 8015492:	f003 0302 	and.w	r3, r3, #2
 8015496:	2b00      	cmp	r3, #0
 8015498:	f000 80dd 	beq.w	8015656 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154a0:	1c5a      	adds	r2, r3, #1
 80154a2:	4b48      	ldr	r3, [pc, #288]	; (80155c4 <tcp_process+0x29c>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	f040 80d5 	bne.w	8015656 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80154ac:	4b46      	ldr	r3, [pc, #280]	; (80155c8 <tcp_process+0x2a0>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	1c5a      	adds	r2, r3, #1
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80154be:	4b41      	ldr	r3, [pc, #260]	; (80155c4 <tcp_process+0x29c>)
 80154c0:	681a      	ldr	r2, [r3, #0]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80154c6:	4b44      	ldr	r3, [pc, #272]	; (80155d8 <tcp_process+0x2b0>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	89db      	ldrh	r3, [r3, #14]
 80154cc:	b29a      	uxth	r2, r3
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80154e0:	4b39      	ldr	r3, [pc, #228]	; (80155c8 <tcp_process+0x2a0>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	1e5a      	subs	r2, r3, #1
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2204      	movs	r2, #4
 80154ee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	3304      	adds	r3, #4
 80154f8:	4618      	mov	r0, r3
 80154fa:	f004 ff65 	bl	801a3c8 <ip4_route>
 80154fe:	4601      	mov	r1, r0
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	3304      	adds	r3, #4
 8015504:	461a      	mov	r2, r3
 8015506:	4620      	mov	r0, r4
 8015508:	f7ff f88c 	bl	8014624 <tcp_eff_send_mss_netif>
 801550c:	4603      	mov	r3, r0
 801550e:	461a      	mov	r2, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015518:	009a      	lsls	r2, r3, #2
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801551e:	005b      	lsls	r3, r3, #1
 8015520:	f241 111c 	movw	r1, #4380	; 0x111c
 8015524:	428b      	cmp	r3, r1
 8015526:	bf38      	it	cc
 8015528:	460b      	movcc	r3, r1
 801552a:	429a      	cmp	r2, r3
 801552c:	d204      	bcs.n	8015538 <tcp_process+0x210>
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	b29b      	uxth	r3, r3
 8015536:	e00d      	b.n	8015554 <tcp_process+0x22c>
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801553c:	005b      	lsls	r3, r3, #1
 801553e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015542:	4293      	cmp	r3, r2
 8015544:	d904      	bls.n	8015550 <tcp_process+0x228>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801554a:	005b      	lsls	r3, r3, #1
 801554c:	b29b      	uxth	r3, r3
 801554e:	e001      	b.n	8015554 <tcp_process+0x22c>
 8015550:	f241 131c 	movw	r3, #4380	; 0x111c
 8015554:	687a      	ldr	r2, [r7, #4]
 8015556:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015560:	2b00      	cmp	r3, #0
 8015562:	d106      	bne.n	8015572 <tcp_process+0x24a>
 8015564:	4b13      	ldr	r3, [pc, #76]	; (80155b4 <tcp_process+0x28c>)
 8015566:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801556a:	491c      	ldr	r1, [pc, #112]	; (80155dc <tcp_process+0x2b4>)
 801556c:	4813      	ldr	r0, [pc, #76]	; (80155bc <tcp_process+0x294>)
 801556e:	f006 fc71 	bl	801be54 <iprintf>
        --pcb->snd_queuelen;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015578:	3b01      	subs	r3, #1
 801557a:	b29a      	uxth	r2, r3
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015586:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d12a      	bne.n	80155e4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015592:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d106      	bne.n	80155a8 <tcp_process+0x280>
 801559a:	4b06      	ldr	r3, [pc, #24]	; (80155b4 <tcp_process+0x28c>)
 801559c:	f44f 725d 	mov.w	r2, #884	; 0x374
 80155a0:	490f      	ldr	r1, [pc, #60]	; (80155e0 <tcp_process+0x2b8>)
 80155a2:	4806      	ldr	r0, [pc, #24]	; (80155bc <tcp_process+0x294>)
 80155a4:	f006 fc56 	bl	801be54 <iprintf>
          pcb->unsent = rseg->next;
 80155a8:	69fb      	ldr	r3, [r7, #28]
 80155aa:	681a      	ldr	r2, [r3, #0]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80155b0:	e01c      	b.n	80155ec <tcp_process+0x2c4>
 80155b2:	bf00      	nop
 80155b4:	0801e618 	.word	0x0801e618
 80155b8:	0801e850 	.word	0x0801e850
 80155bc:	0801e664 	.word	0x0801e664
 80155c0:	2000b028 	.word	0x2000b028
 80155c4:	2000b020 	.word	0x2000b020
 80155c8:	2000b01c 	.word	0x2000b01c
 80155cc:	0801e86c 	.word	0x0801e86c
 80155d0:	2000b029 	.word	0x2000b029
 80155d4:	2000afe4 	.word	0x2000afe4
 80155d8:	2000b00c 	.word	0x2000b00c
 80155dc:	0801e88c 	.word	0x0801e88c
 80155e0:	0801e8a4 	.word	0x0801e8a4
        } else {
          pcb->unacked = rseg->next;
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	681a      	ldr	r2, [r3, #0]
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80155ec:	69f8      	ldr	r0, [r7, #28]
 80155ee:	f7fe fc3c 	bl	8013e6a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d104      	bne.n	8015604 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015600:	861a      	strh	r2, [r3, #48]	; 0x30
 8015602:	e006      	b.n	8015612 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2200      	movs	r2, #0
 8015608:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	2200      	movs	r2, #0
 801560e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015618:	2b00      	cmp	r3, #0
 801561a:	d00a      	beq.n	8015632 <tcp_process+0x30a>
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015622:	687a      	ldr	r2, [r7, #4]
 8015624:	6910      	ldr	r0, [r2, #16]
 8015626:	2200      	movs	r2, #0
 8015628:	6879      	ldr	r1, [r7, #4]
 801562a:	4798      	blx	r3
 801562c:	4603      	mov	r3, r0
 801562e:	76bb      	strb	r3, [r7, #26]
 8015630:	e001      	b.n	8015636 <tcp_process+0x30e>
 8015632:	2300      	movs	r3, #0
 8015634:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015636:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801563a:	f113 0f0d 	cmn.w	r3, #13
 801563e:	d102      	bne.n	8015646 <tcp_process+0x31e>
          return ERR_ABRT;
 8015640:	f06f 030c 	mvn.w	r3, #12
 8015644:	e250      	b.n	8015ae8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	8b5b      	ldrh	r3, [r3, #26]
 801564a:	f043 0302 	orr.w	r3, r3, #2
 801564e:	b29a      	uxth	r2, r3
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015654:	e23a      	b.n	8015acc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015656:	4b98      	ldr	r3, [pc, #608]	; (80158b8 <tcp_process+0x590>)
 8015658:	781b      	ldrb	r3, [r3, #0]
 801565a:	f003 0310 	and.w	r3, r3, #16
 801565e:	2b00      	cmp	r3, #0
 8015660:	f000 8234 	beq.w	8015acc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015664:	4b95      	ldr	r3, [pc, #596]	; (80158bc <tcp_process+0x594>)
 8015666:	6819      	ldr	r1, [r3, #0]
 8015668:	4b95      	ldr	r3, [pc, #596]	; (80158c0 <tcp_process+0x598>)
 801566a:	881b      	ldrh	r3, [r3, #0]
 801566c:	461a      	mov	r2, r3
 801566e:	4b95      	ldr	r3, [pc, #596]	; (80158c4 <tcp_process+0x59c>)
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015674:	4b94      	ldr	r3, [pc, #592]	; (80158c8 <tcp_process+0x5a0>)
 8015676:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015678:	885b      	ldrh	r3, [r3, #2]
 801567a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801567c:	4a92      	ldr	r2, [pc, #584]	; (80158c8 <tcp_process+0x5a0>)
 801567e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015680:	8812      	ldrh	r2, [r2, #0]
 8015682:	b292      	uxth	r2, r2
 8015684:	9202      	str	r2, [sp, #8]
 8015686:	9301      	str	r3, [sp, #4]
 8015688:	4b90      	ldr	r3, [pc, #576]	; (80158cc <tcp_process+0x5a4>)
 801568a:	9300      	str	r3, [sp, #0]
 801568c:	4b90      	ldr	r3, [pc, #576]	; (80158d0 <tcp_process+0x5a8>)
 801568e:	4602      	mov	r2, r0
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f003 f8dd 	bl	8018850 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801569c:	2b05      	cmp	r3, #5
 801569e:	f200 8215 	bhi.w	8015acc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2200      	movs	r2, #0
 80156a6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f002 fea9 	bl	8018400 <tcp_rexmit_rto>
      break;
 80156ae:	e20d      	b.n	8015acc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80156b0:	4b81      	ldr	r3, [pc, #516]	; (80158b8 <tcp_process+0x590>)
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	f003 0310 	and.w	r3, r3, #16
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	f000 80a1 	beq.w	8015800 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80156be:	4b7f      	ldr	r3, [pc, #508]	; (80158bc <tcp_process+0x594>)
 80156c0:	681a      	ldr	r2, [r3, #0]
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156c6:	1ad3      	subs	r3, r2, r3
 80156c8:	3b01      	subs	r3, #1
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	db7e      	blt.n	80157cc <tcp_process+0x4a4>
 80156ce:	4b7b      	ldr	r3, [pc, #492]	; (80158bc <tcp_process+0x594>)
 80156d0:	681a      	ldr	r2, [r3, #0]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80156d6:	1ad3      	subs	r3, r2, r3
 80156d8:	2b00      	cmp	r3, #0
 80156da:	dc77      	bgt.n	80157cc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2204      	movs	r2, #4
 80156e0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d102      	bne.n	80156f0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80156ea:	23fa      	movs	r3, #250	; 0xfa
 80156ec:	76bb      	strb	r3, [r7, #26]
 80156ee:	e01d      	b.n	801572c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80156f4:	699b      	ldr	r3, [r3, #24]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d106      	bne.n	8015708 <tcp_process+0x3e0>
 80156fa:	4b76      	ldr	r3, [pc, #472]	; (80158d4 <tcp_process+0x5ac>)
 80156fc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015700:	4975      	ldr	r1, [pc, #468]	; (80158d8 <tcp_process+0x5b0>)
 8015702:	4876      	ldr	r0, [pc, #472]	; (80158dc <tcp_process+0x5b4>)
 8015704:	f006 fba6 	bl	801be54 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801570c:	699b      	ldr	r3, [r3, #24]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d00a      	beq.n	8015728 <tcp_process+0x400>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015716:	699b      	ldr	r3, [r3, #24]
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	6910      	ldr	r0, [r2, #16]
 801571c:	2200      	movs	r2, #0
 801571e:	6879      	ldr	r1, [r7, #4]
 8015720:	4798      	blx	r3
 8015722:	4603      	mov	r3, r0
 8015724:	76bb      	strb	r3, [r7, #26]
 8015726:	e001      	b.n	801572c <tcp_process+0x404>
 8015728:	23f0      	movs	r3, #240	; 0xf0
 801572a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801572c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d00a      	beq.n	801574a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015734:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015738:	f113 0f0d 	cmn.w	r3, #13
 801573c:	d002      	beq.n	8015744 <tcp_process+0x41c>
              tcp_abort(pcb);
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f7fd fbd2 	bl	8012ee8 <tcp_abort>
            }
            return ERR_ABRT;
 8015744:	f06f 030c 	mvn.w	r3, #12
 8015748:	e1ce      	b.n	8015ae8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801574a:	6878      	ldr	r0, [r7, #4]
 801574c:	f000 fae0 	bl	8015d10 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015750:	4b63      	ldr	r3, [pc, #396]	; (80158e0 <tcp_process+0x5b8>)
 8015752:	881b      	ldrh	r3, [r3, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d005      	beq.n	8015764 <tcp_process+0x43c>
            recv_acked--;
 8015758:	4b61      	ldr	r3, [pc, #388]	; (80158e0 <tcp_process+0x5b8>)
 801575a:	881b      	ldrh	r3, [r3, #0]
 801575c:	3b01      	subs	r3, #1
 801575e:	b29a      	uxth	r2, r3
 8015760:	4b5f      	ldr	r3, [pc, #380]	; (80158e0 <tcp_process+0x5b8>)
 8015762:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015768:	009a      	lsls	r2, r3, #2
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801576e:	005b      	lsls	r3, r3, #1
 8015770:	f241 111c 	movw	r1, #4380	; 0x111c
 8015774:	428b      	cmp	r3, r1
 8015776:	bf38      	it	cc
 8015778:	460b      	movcc	r3, r1
 801577a:	429a      	cmp	r2, r3
 801577c:	d204      	bcs.n	8015788 <tcp_process+0x460>
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015782:	009b      	lsls	r3, r3, #2
 8015784:	b29b      	uxth	r3, r3
 8015786:	e00d      	b.n	80157a4 <tcp_process+0x47c>
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801578c:	005b      	lsls	r3, r3, #1
 801578e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015792:	4293      	cmp	r3, r2
 8015794:	d904      	bls.n	80157a0 <tcp_process+0x478>
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801579a:	005b      	lsls	r3, r3, #1
 801579c:	b29b      	uxth	r3, r3
 801579e:	e001      	b.n	80157a4 <tcp_process+0x47c>
 80157a0:	f241 131c 	movw	r3, #4380	; 0x111c
 80157a4:	687a      	ldr	r2, [r7, #4]
 80157a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80157aa:	4b4e      	ldr	r3, [pc, #312]	; (80158e4 <tcp_process+0x5bc>)
 80157ac:	781b      	ldrb	r3, [r3, #0]
 80157ae:	f003 0320 	and.w	r3, r3, #32
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d037      	beq.n	8015826 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	8b5b      	ldrh	r3, [r3, #26]
 80157ba:	f043 0302 	orr.w	r3, r3, #2
 80157be:	b29a      	uxth	r2, r3
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2207      	movs	r2, #7
 80157c8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80157ca:	e02c      	b.n	8015826 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157cc:	4b3b      	ldr	r3, [pc, #236]	; (80158bc <tcp_process+0x594>)
 80157ce:	6819      	ldr	r1, [r3, #0]
 80157d0:	4b3b      	ldr	r3, [pc, #236]	; (80158c0 <tcp_process+0x598>)
 80157d2:	881b      	ldrh	r3, [r3, #0]
 80157d4:	461a      	mov	r2, r3
 80157d6:	4b3b      	ldr	r3, [pc, #236]	; (80158c4 <tcp_process+0x59c>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80157dc:	4b3a      	ldr	r3, [pc, #232]	; (80158c8 <tcp_process+0x5a0>)
 80157de:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157e0:	885b      	ldrh	r3, [r3, #2]
 80157e2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80157e4:	4a38      	ldr	r2, [pc, #224]	; (80158c8 <tcp_process+0x5a0>)
 80157e6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157e8:	8812      	ldrh	r2, [r2, #0]
 80157ea:	b292      	uxth	r2, r2
 80157ec:	9202      	str	r2, [sp, #8]
 80157ee:	9301      	str	r3, [sp, #4]
 80157f0:	4b36      	ldr	r3, [pc, #216]	; (80158cc <tcp_process+0x5a4>)
 80157f2:	9300      	str	r3, [sp, #0]
 80157f4:	4b36      	ldr	r3, [pc, #216]	; (80158d0 <tcp_process+0x5a8>)
 80157f6:	4602      	mov	r2, r0
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f003 f829 	bl	8018850 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80157fe:	e167      	b.n	8015ad0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015800:	4b2d      	ldr	r3, [pc, #180]	; (80158b8 <tcp_process+0x590>)
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	f003 0302 	and.w	r3, r3, #2
 8015808:	2b00      	cmp	r3, #0
 801580a:	f000 8161 	beq.w	8015ad0 <tcp_process+0x7a8>
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015812:	1e5a      	subs	r2, r3, #1
 8015814:	4b2b      	ldr	r3, [pc, #172]	; (80158c4 <tcp_process+0x59c>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	429a      	cmp	r2, r3
 801581a:	f040 8159 	bne.w	8015ad0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f002 fe10 	bl	8018444 <tcp_rexmit>
      break;
 8015824:	e154      	b.n	8015ad0 <tcp_process+0x7a8>
 8015826:	e153      	b.n	8015ad0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f000 fa71 	bl	8015d10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801582e:	4b2d      	ldr	r3, [pc, #180]	; (80158e4 <tcp_process+0x5bc>)
 8015830:	781b      	ldrb	r3, [r3, #0]
 8015832:	f003 0320 	and.w	r3, r3, #32
 8015836:	2b00      	cmp	r3, #0
 8015838:	f000 814c 	beq.w	8015ad4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	8b5b      	ldrh	r3, [r3, #26]
 8015840:	f043 0302 	orr.w	r3, r3, #2
 8015844:	b29a      	uxth	r2, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2207      	movs	r2, #7
 801584e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015850:	e140      	b.n	8015ad4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f000 fa5c 	bl	8015d10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015858:	4b22      	ldr	r3, [pc, #136]	; (80158e4 <tcp_process+0x5bc>)
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	f003 0320 	and.w	r3, r3, #32
 8015860:	2b00      	cmp	r3, #0
 8015862:	d071      	beq.n	8015948 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015864:	4b14      	ldr	r3, [pc, #80]	; (80158b8 <tcp_process+0x590>)
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	f003 0310 	and.w	r3, r3, #16
 801586c:	2b00      	cmp	r3, #0
 801586e:	d060      	beq.n	8015932 <tcp_process+0x60a>
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015874:	4b11      	ldr	r3, [pc, #68]	; (80158bc <tcp_process+0x594>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	429a      	cmp	r2, r3
 801587a:	d15a      	bne.n	8015932 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015880:	2b00      	cmp	r3, #0
 8015882:	d156      	bne.n	8015932 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	8b5b      	ldrh	r3, [r3, #26]
 8015888:	f043 0302 	orr.w	r3, r3, #2
 801588c:	b29a      	uxth	r2, r3
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f7fe fdbc 	bl	8014410 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015898:	4b13      	ldr	r3, [pc, #76]	; (80158e8 <tcp_process+0x5c0>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	687a      	ldr	r2, [r7, #4]
 801589e:	429a      	cmp	r2, r3
 80158a0:	d105      	bne.n	80158ae <tcp_process+0x586>
 80158a2:	4b11      	ldr	r3, [pc, #68]	; (80158e8 <tcp_process+0x5c0>)
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	68db      	ldr	r3, [r3, #12]
 80158a8:	4a0f      	ldr	r2, [pc, #60]	; (80158e8 <tcp_process+0x5c0>)
 80158aa:	6013      	str	r3, [r2, #0]
 80158ac:	e02e      	b.n	801590c <tcp_process+0x5e4>
 80158ae:	4b0e      	ldr	r3, [pc, #56]	; (80158e8 <tcp_process+0x5c0>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	617b      	str	r3, [r7, #20]
 80158b4:	e027      	b.n	8015906 <tcp_process+0x5de>
 80158b6:	bf00      	nop
 80158b8:	2000b028 	.word	0x2000b028
 80158bc:	2000b020 	.word	0x2000b020
 80158c0:	2000b026 	.word	0x2000b026
 80158c4:	2000b01c 	.word	0x2000b01c
 80158c8:	2000b00c 	.word	0x2000b00c
 80158cc:	200042cc 	.word	0x200042cc
 80158d0:	200042d0 	.word	0x200042d0
 80158d4:	0801e618 	.word	0x0801e618
 80158d8:	0801e8b8 	.word	0x0801e8b8
 80158dc:	0801e664 	.word	0x0801e664
 80158e0:	2000b024 	.word	0x2000b024
 80158e4:	2000b029 	.word	0x2000b029
 80158e8:	2000aff0 	.word	0x2000aff0
 80158ec:	697b      	ldr	r3, [r7, #20]
 80158ee:	68db      	ldr	r3, [r3, #12]
 80158f0:	687a      	ldr	r2, [r7, #4]
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d104      	bne.n	8015900 <tcp_process+0x5d8>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	68da      	ldr	r2, [r3, #12]
 80158fa:	697b      	ldr	r3, [r7, #20]
 80158fc:	60da      	str	r2, [r3, #12]
 80158fe:	e005      	b.n	801590c <tcp_process+0x5e4>
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	68db      	ldr	r3, [r3, #12]
 8015904:	617b      	str	r3, [r7, #20]
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d1ef      	bne.n	80158ec <tcp_process+0x5c4>
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2200      	movs	r2, #0
 8015910:	60da      	str	r2, [r3, #12]
 8015912:	4b77      	ldr	r3, [pc, #476]	; (8015af0 <tcp_process+0x7c8>)
 8015914:	2201      	movs	r2, #1
 8015916:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	220a      	movs	r2, #10
 801591c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801591e:	4b75      	ldr	r3, [pc, #468]	; (8015af4 <tcp_process+0x7cc>)
 8015920:	681a      	ldr	r2, [r3, #0]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	60da      	str	r2, [r3, #12]
 8015926:	4a73      	ldr	r2, [pc, #460]	; (8015af4 <tcp_process+0x7cc>)
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	6013      	str	r3, [r2, #0]
 801592c:	f003 f952 	bl	8018bd4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015930:	e0d2      	b.n	8015ad8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	8b5b      	ldrh	r3, [r3, #26]
 8015936:	f043 0302 	orr.w	r3, r3, #2
 801593a:	b29a      	uxth	r2, r3
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2208      	movs	r2, #8
 8015944:	751a      	strb	r2, [r3, #20]
      break;
 8015946:	e0c7      	b.n	8015ad8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015948:	4b6b      	ldr	r3, [pc, #428]	; (8015af8 <tcp_process+0x7d0>)
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	f003 0310 	and.w	r3, r3, #16
 8015950:	2b00      	cmp	r3, #0
 8015952:	f000 80c1 	beq.w	8015ad8 <tcp_process+0x7b0>
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801595a:	4b68      	ldr	r3, [pc, #416]	; (8015afc <tcp_process+0x7d4>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	429a      	cmp	r2, r3
 8015960:	f040 80ba 	bne.w	8015ad8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015968:	2b00      	cmp	r3, #0
 801596a:	f040 80b5 	bne.w	8015ad8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	2206      	movs	r2, #6
 8015972:	751a      	strb	r2, [r3, #20]
      break;
 8015974:	e0b0      	b.n	8015ad8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f000 f9ca 	bl	8015d10 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801597c:	4b60      	ldr	r3, [pc, #384]	; (8015b00 <tcp_process+0x7d8>)
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	f003 0320 	and.w	r3, r3, #32
 8015984:	2b00      	cmp	r3, #0
 8015986:	f000 80a9 	beq.w	8015adc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	8b5b      	ldrh	r3, [r3, #26]
 801598e:	f043 0302 	orr.w	r3, r3, #2
 8015992:	b29a      	uxth	r2, r3
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f7fe fd39 	bl	8014410 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801599e:	4b59      	ldr	r3, [pc, #356]	; (8015b04 <tcp_process+0x7dc>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d105      	bne.n	80159b4 <tcp_process+0x68c>
 80159a8:	4b56      	ldr	r3, [pc, #344]	; (8015b04 <tcp_process+0x7dc>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	68db      	ldr	r3, [r3, #12]
 80159ae:	4a55      	ldr	r2, [pc, #340]	; (8015b04 <tcp_process+0x7dc>)
 80159b0:	6013      	str	r3, [r2, #0]
 80159b2:	e013      	b.n	80159dc <tcp_process+0x6b4>
 80159b4:	4b53      	ldr	r3, [pc, #332]	; (8015b04 <tcp_process+0x7dc>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	613b      	str	r3, [r7, #16]
 80159ba:	e00c      	b.n	80159d6 <tcp_process+0x6ae>
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	68db      	ldr	r3, [r3, #12]
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d104      	bne.n	80159d0 <tcp_process+0x6a8>
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	68da      	ldr	r2, [r3, #12]
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	60da      	str	r2, [r3, #12]
 80159ce:	e005      	b.n	80159dc <tcp_process+0x6b4>
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	68db      	ldr	r3, [r3, #12]
 80159d4:	613b      	str	r3, [r7, #16]
 80159d6:	693b      	ldr	r3, [r7, #16]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d1ef      	bne.n	80159bc <tcp_process+0x694>
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	2200      	movs	r2, #0
 80159e0:	60da      	str	r2, [r3, #12]
 80159e2:	4b43      	ldr	r3, [pc, #268]	; (8015af0 <tcp_process+0x7c8>)
 80159e4:	2201      	movs	r2, #1
 80159e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	220a      	movs	r2, #10
 80159ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80159ee:	4b41      	ldr	r3, [pc, #260]	; (8015af4 <tcp_process+0x7cc>)
 80159f0:	681a      	ldr	r2, [r3, #0]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	60da      	str	r2, [r3, #12]
 80159f6:	4a3f      	ldr	r2, [pc, #252]	; (8015af4 <tcp_process+0x7cc>)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	6013      	str	r3, [r2, #0]
 80159fc:	f003 f8ea 	bl	8018bd4 <tcp_timer_needed>
      }
      break;
 8015a00:	e06c      	b.n	8015adc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	f000 f984 	bl	8015d10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015a08:	4b3b      	ldr	r3, [pc, #236]	; (8015af8 <tcp_process+0x7d0>)
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	f003 0310 	and.w	r3, r3, #16
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d065      	beq.n	8015ae0 <tcp_process+0x7b8>
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a18:	4b38      	ldr	r3, [pc, #224]	; (8015afc <tcp_process+0x7d4>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	d15f      	bne.n	8015ae0 <tcp_process+0x7b8>
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d15b      	bne.n	8015ae0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f7fe fcf1 	bl	8014410 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015a2e:	4b35      	ldr	r3, [pc, #212]	; (8015b04 <tcp_process+0x7dc>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d105      	bne.n	8015a44 <tcp_process+0x71c>
 8015a38:	4b32      	ldr	r3, [pc, #200]	; (8015b04 <tcp_process+0x7dc>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	68db      	ldr	r3, [r3, #12]
 8015a3e:	4a31      	ldr	r2, [pc, #196]	; (8015b04 <tcp_process+0x7dc>)
 8015a40:	6013      	str	r3, [r2, #0]
 8015a42:	e013      	b.n	8015a6c <tcp_process+0x744>
 8015a44:	4b2f      	ldr	r3, [pc, #188]	; (8015b04 <tcp_process+0x7dc>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	60fb      	str	r3, [r7, #12]
 8015a4a:	e00c      	b.n	8015a66 <tcp_process+0x73e>
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d104      	bne.n	8015a60 <tcp_process+0x738>
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	68da      	ldr	r2, [r3, #12]
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	60da      	str	r2, [r3, #12]
 8015a5e:	e005      	b.n	8015a6c <tcp_process+0x744>
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	68db      	ldr	r3, [r3, #12]
 8015a64:	60fb      	str	r3, [r7, #12]
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d1ef      	bne.n	8015a4c <tcp_process+0x724>
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	60da      	str	r2, [r3, #12]
 8015a72:	4b1f      	ldr	r3, [pc, #124]	; (8015af0 <tcp_process+0x7c8>)
 8015a74:	2201      	movs	r2, #1
 8015a76:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	220a      	movs	r2, #10
 8015a7c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015a7e:	4b1d      	ldr	r3, [pc, #116]	; (8015af4 <tcp_process+0x7cc>)
 8015a80:	681a      	ldr	r2, [r3, #0]
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	60da      	str	r2, [r3, #12]
 8015a86:	4a1b      	ldr	r2, [pc, #108]	; (8015af4 <tcp_process+0x7cc>)
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6013      	str	r3, [r2, #0]
 8015a8c:	f003 f8a2 	bl	8018bd4 <tcp_timer_needed>
      }
      break;
 8015a90:	e026      	b.n	8015ae0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 f93c 	bl	8015d10 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015a98:	4b17      	ldr	r3, [pc, #92]	; (8015af8 <tcp_process+0x7d0>)
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	f003 0310 	and.w	r3, r3, #16
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d01f      	beq.n	8015ae4 <tcp_process+0x7bc>
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015aa8:	4b14      	ldr	r3, [pc, #80]	; (8015afc <tcp_process+0x7d4>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	429a      	cmp	r2, r3
 8015aae:	d119      	bne.n	8015ae4 <tcp_process+0x7bc>
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d115      	bne.n	8015ae4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015ab8:	4b11      	ldr	r3, [pc, #68]	; (8015b00 <tcp_process+0x7d8>)
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	f043 0310 	orr.w	r3, r3, #16
 8015ac0:	b2da      	uxtb	r2, r3
 8015ac2:	4b0f      	ldr	r3, [pc, #60]	; (8015b00 <tcp_process+0x7d8>)
 8015ac4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015ac6:	e00d      	b.n	8015ae4 <tcp_process+0x7bc>
    default:
      break;
 8015ac8:	bf00      	nop
 8015aca:	e00c      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015acc:	bf00      	nop
 8015ace:	e00a      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ad0:	bf00      	nop
 8015ad2:	e008      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ad4:	bf00      	nop
 8015ad6:	e006      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ad8:	bf00      	nop
 8015ada:	e004      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015adc:	bf00      	nop
 8015ade:	e002      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ae0:	bf00      	nop
 8015ae2:	e000      	b.n	8015ae6 <tcp_process+0x7be>
      break;
 8015ae4:	bf00      	nop
  }
  return ERR_OK;
 8015ae6:	2300      	movs	r3, #0
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3724      	adds	r7, #36	; 0x24
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd90      	pop	{r4, r7, pc}
 8015af0:	2000aff8 	.word	0x2000aff8
 8015af4:	2000aff4 	.word	0x2000aff4
 8015af8:	2000b028 	.word	0x2000b028
 8015afc:	2000b020 	.word	0x2000b020
 8015b00:	2000b029 	.word	0x2000b029
 8015b04:	2000aff0 	.word	0x2000aff0

08015b08 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015b08:	b590      	push	{r4, r7, lr}
 8015b0a:	b085      	sub	sp, #20
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d106      	bne.n	8015b26 <tcp_oos_insert_segment+0x1e>
 8015b18:	4b3b      	ldr	r3, [pc, #236]	; (8015c08 <tcp_oos_insert_segment+0x100>)
 8015b1a:	f240 421f 	movw	r2, #1055	; 0x41f
 8015b1e:	493b      	ldr	r1, [pc, #236]	; (8015c0c <tcp_oos_insert_segment+0x104>)
 8015b20:	483b      	ldr	r0, [pc, #236]	; (8015c10 <tcp_oos_insert_segment+0x108>)
 8015b22:	f006 f997 	bl	801be54 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	68db      	ldr	r3, [r3, #12]
 8015b2a:	899b      	ldrh	r3, [r3, #12]
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f7fb f879 	bl	8010c26 <lwip_htons>
 8015b34:	4603      	mov	r3, r0
 8015b36:	b2db      	uxtb	r3, r3
 8015b38:	f003 0301 	and.w	r3, r3, #1
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d028      	beq.n	8015b92 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015b40:	6838      	ldr	r0, [r7, #0]
 8015b42:	f7fe f97d 	bl	8013e40 <tcp_segs_free>
    next = NULL;
 8015b46:	2300      	movs	r3, #0
 8015b48:	603b      	str	r3, [r7, #0]
 8015b4a:	e056      	b.n	8015bfa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	68db      	ldr	r3, [r3, #12]
 8015b50:	899b      	ldrh	r3, [r3, #12]
 8015b52:	b29b      	uxth	r3, r3
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7fb f866 	bl	8010c26 <lwip_htons>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	f003 0301 	and.w	r3, r3, #1
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d00d      	beq.n	8015b82 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	68db      	ldr	r3, [r3, #12]
 8015b6a:	899b      	ldrh	r3, [r3, #12]
 8015b6c:	b29c      	uxth	r4, r3
 8015b6e:	2001      	movs	r0, #1
 8015b70:	f7fb f859 	bl	8010c26 <lwip_htons>
 8015b74:	4603      	mov	r3, r0
 8015b76:	461a      	mov	r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	4322      	orrs	r2, r4
 8015b7e:	b292      	uxth	r2, r2
 8015b80:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015b8c:	68f8      	ldr	r0, [r7, #12]
 8015b8e:	f7fe f96c 	bl	8013e6a <tcp_seg_free>
    while (next &&
 8015b92:	683b      	ldr	r3, [r7, #0]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d00e      	beq.n	8015bb6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	891b      	ldrh	r3, [r3, #8]
 8015b9c:	461a      	mov	r2, r3
 8015b9e:	4b1d      	ldr	r3, [pc, #116]	; (8015c14 <tcp_oos_insert_segment+0x10c>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	441a      	add	r2, r3
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	68db      	ldr	r3, [r3, #12]
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	6839      	ldr	r1, [r7, #0]
 8015bac:	8909      	ldrh	r1, [r1, #8]
 8015bae:	440b      	add	r3, r1
 8015bb0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	daca      	bge.n	8015b4c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d01e      	beq.n	8015bfa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	891b      	ldrh	r3, [r3, #8]
 8015bc0:	461a      	mov	r2, r3
 8015bc2:	4b14      	ldr	r3, [pc, #80]	; (8015c14 <tcp_oos_insert_segment+0x10c>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	441a      	add	r2, r3
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	68db      	ldr	r3, [r3, #12]
 8015bcc:	685b      	ldr	r3, [r3, #4]
 8015bce:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	dd12      	ble.n	8015bfa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	68db      	ldr	r3, [r3, #12]
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	b29a      	uxth	r2, r3
 8015bdc:	4b0d      	ldr	r3, [pc, #52]	; (8015c14 <tcp_oos_insert_segment+0x10c>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	b29b      	uxth	r3, r3
 8015be2:	1ad3      	subs	r3, r2, r3
 8015be4:	b29a      	uxth	r2, r3
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	685a      	ldr	r2, [r3, #4]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	891b      	ldrh	r3, [r3, #8]
 8015bf2:	4619      	mov	r1, r3
 8015bf4:	4610      	mov	r0, r2
 8015bf6:	f7fc fa59 	bl	80120ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	683a      	ldr	r2, [r7, #0]
 8015bfe:	601a      	str	r2, [r3, #0]
}
 8015c00:	bf00      	nop
 8015c02:	3714      	adds	r7, #20
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd90      	pop	{r4, r7, pc}
 8015c08:	0801e618 	.word	0x0801e618
 8015c0c:	0801e8d8 	.word	0x0801e8d8
 8015c10:	0801e664 	.word	0x0801e664
 8015c14:	2000b01c 	.word	0x2000b01c

08015c18 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015c18:	b5b0      	push	{r4, r5, r7, lr}
 8015c1a:	b086      	sub	sp, #24
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	60f8      	str	r0, [r7, #12]
 8015c20:	60b9      	str	r1, [r7, #8]
 8015c22:	607a      	str	r2, [r7, #4]
 8015c24:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015c26:	e03e      	b.n	8015ca6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7fc fc46 	bl	80124c8 <pbuf_clen>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c46:	8a7a      	ldrh	r2, [r7, #18]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d906      	bls.n	8015c5a <tcp_free_acked_segments+0x42>
 8015c4c:	4b2a      	ldr	r3, [pc, #168]	; (8015cf8 <tcp_free_acked_segments+0xe0>)
 8015c4e:	f240 4257 	movw	r2, #1111	; 0x457
 8015c52:	492a      	ldr	r1, [pc, #168]	; (8015cfc <tcp_free_acked_segments+0xe4>)
 8015c54:	482a      	ldr	r0, [pc, #168]	; (8015d00 <tcp_free_acked_segments+0xe8>)
 8015c56:	f006 f8fd 	bl	801be54 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8015c60:	8a7b      	ldrh	r3, [r7, #18]
 8015c62:	1ad3      	subs	r3, r2, r3
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	891a      	ldrh	r2, [r3, #8]
 8015c70:	4b24      	ldr	r3, [pc, #144]	; (8015d04 <tcp_free_acked_segments+0xec>)
 8015c72:	881b      	ldrh	r3, [r3, #0]
 8015c74:	4413      	add	r3, r2
 8015c76:	b29a      	uxth	r2, r3
 8015c78:	4b22      	ldr	r3, [pc, #136]	; (8015d04 <tcp_free_acked_segments+0xec>)
 8015c7a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015c7c:	6978      	ldr	r0, [r7, #20]
 8015c7e:	f7fe f8f4 	bl	8013e6a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d00c      	beq.n	8015ca6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d109      	bne.n	8015ca6 <tcp_free_acked_segments+0x8e>
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d106      	bne.n	8015ca6 <tcp_free_acked_segments+0x8e>
 8015c98:	4b17      	ldr	r3, [pc, #92]	; (8015cf8 <tcp_free_acked_segments+0xe0>)
 8015c9a:	f240 4261 	movw	r2, #1121	; 0x461
 8015c9e:	491a      	ldr	r1, [pc, #104]	; (8015d08 <tcp_free_acked_segments+0xf0>)
 8015ca0:	4817      	ldr	r0, [pc, #92]	; (8015d00 <tcp_free_acked_segments+0xe8>)
 8015ca2:	f006 f8d7 	bl	801be54 <iprintf>
  while (seg_list != NULL &&
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d020      	beq.n	8015cee <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015cac:	68bb      	ldr	r3, [r7, #8]
 8015cae:	68db      	ldr	r3, [r3, #12]
 8015cb0:	685b      	ldr	r3, [r3, #4]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7fa ffcc 	bl	8010c50 <lwip_htonl>
 8015cb8:	4604      	mov	r4, r0
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	891b      	ldrh	r3, [r3, #8]
 8015cbe:	461d      	mov	r5, r3
 8015cc0:	68bb      	ldr	r3, [r7, #8]
 8015cc2:	68db      	ldr	r3, [r3, #12]
 8015cc4:	899b      	ldrh	r3, [r3, #12]
 8015cc6:	b29b      	uxth	r3, r3
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7fa ffac 	bl	8010c26 <lwip_htons>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	b2db      	uxtb	r3, r3
 8015cd2:	f003 0303 	and.w	r3, r3, #3
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d001      	beq.n	8015cde <tcp_free_acked_segments+0xc6>
 8015cda:	2301      	movs	r3, #1
 8015cdc:	e000      	b.n	8015ce0 <tcp_free_acked_segments+0xc8>
 8015cde:	2300      	movs	r3, #0
 8015ce0:	442b      	add	r3, r5
 8015ce2:	18e2      	adds	r2, r4, r3
 8015ce4:	4b09      	ldr	r3, [pc, #36]	; (8015d0c <tcp_free_acked_segments+0xf4>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	dd9c      	ble.n	8015c28 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015cee:	68bb      	ldr	r3, [r7, #8]
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3718      	adds	r7, #24
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8015cf8:	0801e618 	.word	0x0801e618
 8015cfc:	0801e900 	.word	0x0801e900
 8015d00:	0801e664 	.word	0x0801e664
 8015d04:	2000b024 	.word	0x2000b024
 8015d08:	0801e928 	.word	0x0801e928
 8015d0c:	2000b020 	.word	0x2000b020

08015d10 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015d10:	b5b0      	push	{r4, r5, r7, lr}
 8015d12:	b094      	sub	sp, #80	; 0x50
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d106      	bne.n	8015d30 <tcp_receive+0x20>
 8015d22:	4b91      	ldr	r3, [pc, #580]	; (8015f68 <tcp_receive+0x258>)
 8015d24:	f240 427b 	movw	r2, #1147	; 0x47b
 8015d28:	4990      	ldr	r1, [pc, #576]	; (8015f6c <tcp_receive+0x25c>)
 8015d2a:	4891      	ldr	r0, [pc, #580]	; (8015f70 <tcp_receive+0x260>)
 8015d2c:	f006 f892 	bl	801be54 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	7d1b      	ldrb	r3, [r3, #20]
 8015d34:	2b03      	cmp	r3, #3
 8015d36:	d806      	bhi.n	8015d46 <tcp_receive+0x36>
 8015d38:	4b8b      	ldr	r3, [pc, #556]	; (8015f68 <tcp_receive+0x258>)
 8015d3a:	f240 427c 	movw	r2, #1148	; 0x47c
 8015d3e:	498d      	ldr	r1, [pc, #564]	; (8015f74 <tcp_receive+0x264>)
 8015d40:	488b      	ldr	r0, [pc, #556]	; (8015f70 <tcp_receive+0x260>)
 8015d42:	f006 f887 	bl	801be54 <iprintf>

  if (flags & TCP_ACK) {
 8015d46:	4b8c      	ldr	r3, [pc, #560]	; (8015f78 <tcp_receive+0x268>)
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	f003 0310 	and.w	r3, r3, #16
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	f000 8264 	beq.w	801621c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d60:	4413      	add	r3, r2
 8015d62:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015d68:	4b84      	ldr	r3, [pc, #528]	; (8015f7c <tcp_receive+0x26c>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	1ad3      	subs	r3, r2, r3
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	db1b      	blt.n	8015daa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015d76:	4b81      	ldr	r3, [pc, #516]	; (8015f7c <tcp_receive+0x26c>)
 8015d78:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d106      	bne.n	8015d8c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015d82:	4b7f      	ldr	r3, [pc, #508]	; (8015f80 <tcp_receive+0x270>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	1ad3      	subs	r3, r2, r3
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	db0e      	blt.n	8015daa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015d90:	4b7b      	ldr	r3, [pc, #492]	; (8015f80 <tcp_receive+0x270>)
 8015d92:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d125      	bne.n	8015de4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015d98:	4b7a      	ldr	r3, [pc, #488]	; (8015f84 <tcp_receive+0x274>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	89db      	ldrh	r3, [r3, #14]
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d91c      	bls.n	8015de4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015daa:	4b76      	ldr	r3, [pc, #472]	; (8015f84 <tcp_receive+0x274>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	89db      	ldrh	r3, [r3, #14]
 8015db0:	b29a      	uxth	r2, r3
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d205      	bcs.n	8015dd4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015dd4:	4b69      	ldr	r3, [pc, #420]	; (8015f7c <tcp_receive+0x26c>)
 8015dd6:	681a      	ldr	r2, [r3, #0]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8015ddc:	4b68      	ldr	r3, [pc, #416]	; (8015f80 <tcp_receive+0x270>)
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015de4:	4b66      	ldr	r3, [pc, #408]	; (8015f80 <tcp_receive+0x270>)
 8015de6:	681a      	ldr	r2, [r3, #0]
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dec:	1ad3      	subs	r3, r2, r3
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	dc58      	bgt.n	8015ea4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015df2:	4b65      	ldr	r3, [pc, #404]	; (8015f88 <tcp_receive+0x278>)
 8015df4:	881b      	ldrh	r3, [r3, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d14b      	bne.n	8015e92 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015e04:	4413      	add	r3, r2
 8015e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d142      	bne.n	8015e92 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	db3d      	blt.n	8015e92 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015e1a:	4b59      	ldr	r3, [pc, #356]	; (8015f80 <tcp_receive+0x270>)
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d137      	bne.n	8015e92 <tcp_receive+0x182>
              found_dupack = 1;
 8015e22:	2301      	movs	r3, #1
 8015e24:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015e2c:	2bff      	cmp	r3, #255	; 0xff
 8015e2e:	d007      	beq.n	8015e40 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015e36:	3301      	adds	r3, #1
 8015e38:	b2da      	uxtb	r2, r3
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015e46:	2b03      	cmp	r3, #3
 8015e48:	d91b      	bls.n	8015e82 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e54:	4413      	add	r3, r2
 8015e56:	b29a      	uxth	r2, r3
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d30a      	bcc.n	8015e78 <tcp_receive+0x168>
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e6c:	4413      	add	r3, r2
 8015e6e:	b29a      	uxth	r2, r3
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015e76:	e004      	b.n	8015e82 <tcp_receive+0x172>
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015e88:	2b02      	cmp	r3, #2
 8015e8a:	d902      	bls.n	8015e92 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f002 fb45 	bl	801851c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f040 8161 	bne.w	801615c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015ea2:	e15b      	b.n	801615c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015ea4:	4b36      	ldr	r3, [pc, #216]	; (8015f80 <tcp_receive+0x270>)
 8015ea6:	681a      	ldr	r2, [r3, #0]
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eac:	1ad3      	subs	r3, r2, r3
 8015eae:	3b01      	subs	r3, #1
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f2c0 814e 	blt.w	8016152 <tcp_receive+0x442>
 8015eb6:	4b32      	ldr	r3, [pc, #200]	; (8015f80 <tcp_receive+0x270>)
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ebe:	1ad3      	subs	r3, r2, r3
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	f300 8146 	bgt.w	8016152 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	8b5b      	ldrh	r3, [r3, #26]
 8015eca:	f003 0304 	and.w	r3, r3, #4
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d010      	beq.n	8015ef4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	8b5b      	ldrh	r3, [r3, #26]
 8015ed6:	f023 0304 	bic.w	r3, r3, #4
 8015eda:	b29a      	uxth	r2, r3
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2200      	movs	r2, #0
 8015ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015f02:	10db      	asrs	r3, r3, #3
 8015f04:	b21b      	sxth	r3, r3
 8015f06:	b29a      	uxth	r2, r3
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	4413      	add	r3, r2
 8015f12:	b29b      	uxth	r3, r3
 8015f14:	b21a      	sxth	r2, r3
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015f1c:	4b18      	ldr	r3, [pc, #96]	; (8015f80 <tcp_receive+0x270>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	b29a      	uxth	r2, r3
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	1ad3      	subs	r3, r2, r3
 8015f2a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015f34:	4b12      	ldr	r3, [pc, #72]	; (8015f80 <tcp_receive+0x270>)
 8015f36:	681a      	ldr	r2, [r3, #0]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	7d1b      	ldrb	r3, [r3, #20]
 8015f40:	2b03      	cmp	r3, #3
 8015f42:	f240 8097 	bls.w	8016074 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d245      	bcs.n	8015fe2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	8b5b      	ldrh	r3, [r3, #26]
 8015f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d014      	beq.n	8015f8c <tcp_receive+0x27c>
 8015f62:	2301      	movs	r3, #1
 8015f64:	e013      	b.n	8015f8e <tcp_receive+0x27e>
 8015f66:	bf00      	nop
 8015f68:	0801e618 	.word	0x0801e618
 8015f6c:	0801e948 	.word	0x0801e948
 8015f70:	0801e664 	.word	0x0801e664
 8015f74:	0801e964 	.word	0x0801e964
 8015f78:	2000b028 	.word	0x2000b028
 8015f7c:	2000b01c 	.word	0x2000b01c
 8015f80:	2000b020 	.word	0x2000b020
 8015f84:	2000b00c 	.word	0x2000b00c
 8015f88:	2000b026 	.word	0x2000b026
 8015f8c:	2302      	movs	r3, #2
 8015f8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015f92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015f96:	b29a      	uxth	r2, r3
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f9c:	fb12 f303 	smulbb	r3, r2, r3
 8015fa0:	b29b      	uxth	r3, r3
 8015fa2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015fa4:	4293      	cmp	r3, r2
 8015fa6:	bf28      	it	cs
 8015fa8:	4613      	movcs	r3, r2
 8015faa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015fb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015fb4:	4413      	add	r3, r2
 8015fb6:	b29a      	uxth	r2, r3
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	d309      	bcc.n	8015fd6 <tcp_receive+0x2c6>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015fc8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015fca:	4413      	add	r3, r2
 8015fcc:	b29a      	uxth	r2, r3
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015fd4:	e04e      	b.n	8016074 <tcp_receive+0x364>
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fdc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015fe0:	e048      	b.n	8016074 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015fe8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015fea:	4413      	add	r3, r2
 8015fec:	b29a      	uxth	r2, r3
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015ff4:	429a      	cmp	r2, r3
 8015ff6:	d309      	bcc.n	801600c <tcp_receive+0x2fc>
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016000:	4413      	add	r3, r2
 8016002:	b29a      	uxth	r2, r3
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801600a:	e004      	b.n	8016016 <tcp_receive+0x306>
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016022:	429a      	cmp	r2, r3
 8016024:	d326      	bcc.n	8016074 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016032:	1ad3      	subs	r3, r2, r3
 8016034:	b29a      	uxth	r2, r3
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016046:	4413      	add	r3, r2
 8016048:	b29a      	uxth	r2, r3
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016050:	429a      	cmp	r2, r3
 8016052:	d30a      	bcc.n	801606a <tcp_receive+0x35a>
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801605e:	4413      	add	r3, r2
 8016060:	b29a      	uxth	r2, r3
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016068:	e004      	b.n	8016074 <tcp_receive+0x364>
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016070:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801607c:	4a98      	ldr	r2, [pc, #608]	; (80162e0 <tcp_receive+0x5d0>)
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f7ff fdca 	bl	8015c18 <tcp_free_acked_segments>
 8016084:	4602      	mov	r2, r0
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016092:	4a94      	ldr	r2, [pc, #592]	; (80162e4 <tcp_receive+0x5d4>)
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f7ff fdbf 	bl	8015c18 <tcp_free_acked_segments>
 801609a:	4602      	mov	r2, r0
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d104      	bne.n	80160b2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80160ae:	861a      	strh	r2, [r3, #48]	; 0x30
 80160b0:	e002      	b.n	80160b8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2200      	movs	r2, #0
 80160b6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2200      	movs	r2, #0
 80160bc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d103      	bne.n	80160ce <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2200      	movs	r2, #0
 80160ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80160d4:	4b84      	ldr	r3, [pc, #528]	; (80162e8 <tcp_receive+0x5d8>)
 80160d6:	881b      	ldrh	r3, [r3, #0]
 80160d8:	4413      	add	r3, r2
 80160da:	b29a      	uxth	r2, r3
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	8b5b      	ldrh	r3, [r3, #26]
 80160e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d035      	beq.n	801615a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d118      	bne.n	8016128 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00c      	beq.n	8016118 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	685b      	ldr	r3, [r3, #4]
 801610a:	4618      	mov	r0, r3
 801610c:	f7fa fda0 	bl	8010c50 <lwip_htonl>
 8016110:	4603      	mov	r3, r0
 8016112:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016114:	2b00      	cmp	r3, #0
 8016116:	dc20      	bgt.n	801615a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	8b5b      	ldrh	r3, [r3, #26]
 801611c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016120:	b29a      	uxth	r2, r3
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016126:	e018      	b.n	801615a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016130:	68db      	ldr	r3, [r3, #12]
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	4618      	mov	r0, r3
 8016136:	f7fa fd8b 	bl	8010c50 <lwip_htonl>
 801613a:	4603      	mov	r3, r0
 801613c:	1ae3      	subs	r3, r4, r3
 801613e:	2b00      	cmp	r3, #0
 8016140:	dc0b      	bgt.n	801615a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	8b5b      	ldrh	r3, [r3, #26]
 8016146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801614a:	b29a      	uxth	r2, r3
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016150:	e003      	b.n	801615a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016152:	6878      	ldr	r0, [r7, #4]
 8016154:	f002 fbce 	bl	80188f4 <tcp_send_empty_ack>
 8016158:	e000      	b.n	801615c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801615a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016160:	2b00      	cmp	r3, #0
 8016162:	d05b      	beq.n	801621c <tcp_receive+0x50c>
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016168:	4b60      	ldr	r3, [pc, #384]	; (80162ec <tcp_receive+0x5dc>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	1ad3      	subs	r3, r2, r3
 801616e:	2b00      	cmp	r3, #0
 8016170:	da54      	bge.n	801621c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016172:	4b5f      	ldr	r3, [pc, #380]	; (80162f0 <tcp_receive+0x5e0>)
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	b29a      	uxth	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801617c:	b29b      	uxth	r3, r3
 801617e:	1ad3      	subs	r3, r2, r3
 8016180:	b29b      	uxth	r3, r3
 8016182:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016186:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016190:	10db      	asrs	r3, r3, #3
 8016192:	b21b      	sxth	r3, r3
 8016194:	b29b      	uxth	r3, r3
 8016196:	1ad3      	subs	r3, r2, r3
 8016198:	b29b      	uxth	r3, r3
 801619a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161a4:	b29a      	uxth	r2, r3
 80161a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80161aa:	4413      	add	r3, r2
 80161ac:	b29b      	uxth	r3, r3
 80161ae:	b21a      	sxth	r2, r3
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80161b4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	da05      	bge.n	80161c8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80161bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80161c0:	425b      	negs	r3, r3
 80161c2:	b29b      	uxth	r3, r3
 80161c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80161c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80161d2:	109b      	asrs	r3, r3, #2
 80161d4:	b21b      	sxth	r3, r3
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	1ad3      	subs	r3, r2, r3
 80161da:	b29b      	uxth	r3, r3
 80161dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80161e6:	b29a      	uxth	r2, r3
 80161e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80161ec:	4413      	add	r3, r2
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	b21a      	sxth	r2, r3
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80161fc:	10db      	asrs	r3, r3, #3
 80161fe:	b21b      	sxth	r3, r3
 8016200:	b29a      	uxth	r2, r3
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016208:	b29b      	uxth	r3, r3
 801620a:	4413      	add	r3, r2
 801620c:	b29b      	uxth	r3, r3
 801620e:	b21a      	sxth	r2, r3
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2200      	movs	r2, #0
 801621a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801621c:	4b35      	ldr	r3, [pc, #212]	; (80162f4 <tcp_receive+0x5e4>)
 801621e:	881b      	ldrh	r3, [r3, #0]
 8016220:	2b00      	cmp	r3, #0
 8016222:	f000 84e2 	beq.w	8016bea <tcp_receive+0xeda>
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	7d1b      	ldrb	r3, [r3, #20]
 801622a:	2b06      	cmp	r3, #6
 801622c:	f200 84dd 	bhi.w	8016bea <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016234:	4b30      	ldr	r3, [pc, #192]	; (80162f8 <tcp_receive+0x5e8>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	1ad3      	subs	r3, r2, r3
 801623a:	3b01      	subs	r3, #1
 801623c:	2b00      	cmp	r3, #0
 801623e:	f2c0 808f 	blt.w	8016360 <tcp_receive+0x650>
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016246:	4b2b      	ldr	r3, [pc, #172]	; (80162f4 <tcp_receive+0x5e4>)
 8016248:	881b      	ldrh	r3, [r3, #0]
 801624a:	4619      	mov	r1, r3
 801624c:	4b2a      	ldr	r3, [pc, #168]	; (80162f8 <tcp_receive+0x5e8>)
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	440b      	add	r3, r1
 8016252:	1ad3      	subs	r3, r2, r3
 8016254:	3301      	adds	r3, #1
 8016256:	2b00      	cmp	r3, #0
 8016258:	f300 8082 	bgt.w	8016360 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801625c:	4b27      	ldr	r3, [pc, #156]	; (80162fc <tcp_receive+0x5ec>)
 801625e:	685b      	ldr	r3, [r3, #4]
 8016260:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016266:	4b24      	ldr	r3, [pc, #144]	; (80162f8 <tcp_receive+0x5e8>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	1ad3      	subs	r3, r2, r3
 801626c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801626e:	4b23      	ldr	r3, [pc, #140]	; (80162fc <tcp_receive+0x5ec>)
 8016270:	685b      	ldr	r3, [r3, #4]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d106      	bne.n	8016284 <tcp_receive+0x574>
 8016276:	4b22      	ldr	r3, [pc, #136]	; (8016300 <tcp_receive+0x5f0>)
 8016278:	f240 5294 	movw	r2, #1428	; 0x594
 801627c:	4921      	ldr	r1, [pc, #132]	; (8016304 <tcp_receive+0x5f4>)
 801627e:	4822      	ldr	r0, [pc, #136]	; (8016308 <tcp_receive+0x5f8>)
 8016280:	f005 fde8 	bl	801be54 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016286:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801628a:	4293      	cmp	r3, r2
 801628c:	d906      	bls.n	801629c <tcp_receive+0x58c>
 801628e:	4b1c      	ldr	r3, [pc, #112]	; (8016300 <tcp_receive+0x5f0>)
 8016290:	f240 5295 	movw	r2, #1429	; 0x595
 8016294:	491d      	ldr	r1, [pc, #116]	; (801630c <tcp_receive+0x5fc>)
 8016296:	481c      	ldr	r0, [pc, #112]	; (8016308 <tcp_receive+0x5f8>)
 8016298:	f005 fddc 	bl	801be54 <iprintf>
      off = (u16_t)off32;
 801629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80162a2:	4b16      	ldr	r3, [pc, #88]	; (80162fc <tcp_receive+0x5ec>)
 80162a4:	685b      	ldr	r3, [r3, #4]
 80162a6:	891b      	ldrh	r3, [r3, #8]
 80162a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162ac:	429a      	cmp	r2, r3
 80162ae:	d906      	bls.n	80162be <tcp_receive+0x5ae>
 80162b0:	4b13      	ldr	r3, [pc, #76]	; (8016300 <tcp_receive+0x5f0>)
 80162b2:	f240 5297 	movw	r2, #1431	; 0x597
 80162b6:	4916      	ldr	r1, [pc, #88]	; (8016310 <tcp_receive+0x600>)
 80162b8:	4813      	ldr	r0, [pc, #76]	; (8016308 <tcp_receive+0x5f8>)
 80162ba:	f005 fdcb 	bl	801be54 <iprintf>
      inseg.len -= off;
 80162be:	4b0f      	ldr	r3, [pc, #60]	; (80162fc <tcp_receive+0x5ec>)
 80162c0:	891a      	ldrh	r2, [r3, #8]
 80162c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162c6:	1ad3      	subs	r3, r2, r3
 80162c8:	b29a      	uxth	r2, r3
 80162ca:	4b0c      	ldr	r3, [pc, #48]	; (80162fc <tcp_receive+0x5ec>)
 80162cc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80162ce:	4b0b      	ldr	r3, [pc, #44]	; (80162fc <tcp_receive+0x5ec>)
 80162d0:	685b      	ldr	r3, [r3, #4]
 80162d2:	891a      	ldrh	r2, [r3, #8]
 80162d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162d8:	1ad3      	subs	r3, r2, r3
 80162da:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80162dc:	e02a      	b.n	8016334 <tcp_receive+0x624>
 80162de:	bf00      	nop
 80162e0:	0801e980 	.word	0x0801e980
 80162e4:	0801e988 	.word	0x0801e988
 80162e8:	2000b024 	.word	0x2000b024
 80162ec:	2000b020 	.word	0x2000b020
 80162f0:	2000afe4 	.word	0x2000afe4
 80162f4:	2000b026 	.word	0x2000b026
 80162f8:	2000b01c 	.word	0x2000b01c
 80162fc:	2000affc 	.word	0x2000affc
 8016300:	0801e618 	.word	0x0801e618
 8016304:	0801e990 	.word	0x0801e990
 8016308:	0801e664 	.word	0x0801e664
 801630c:	0801e9a0 	.word	0x0801e9a0
 8016310:	0801e9b0 	.word	0x0801e9b0
        off -= p->len;
 8016314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016316:	895b      	ldrh	r3, [r3, #10]
 8016318:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801631c:	1ad3      	subs	r3, r2, r3
 801631e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016324:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016326:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801632a:	2200      	movs	r2, #0
 801632c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801632e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016336:	895b      	ldrh	r3, [r3, #10]
 8016338:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801633c:	429a      	cmp	r2, r3
 801633e:	d8e9      	bhi.n	8016314 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016340:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016344:	4619      	mov	r1, r3
 8016346:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016348:	f7fb ffb0 	bl	80122ac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016350:	4a91      	ldr	r2, [pc, #580]	; (8016598 <tcp_receive+0x888>)
 8016352:	6013      	str	r3, [r2, #0]
 8016354:	4b91      	ldr	r3, [pc, #580]	; (801659c <tcp_receive+0x88c>)
 8016356:	68db      	ldr	r3, [r3, #12]
 8016358:	4a8f      	ldr	r2, [pc, #572]	; (8016598 <tcp_receive+0x888>)
 801635a:	6812      	ldr	r2, [r2, #0]
 801635c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801635e:	e00d      	b.n	801637c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016360:	4b8d      	ldr	r3, [pc, #564]	; (8016598 <tcp_receive+0x888>)
 8016362:	681a      	ldr	r2, [r3, #0]
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016368:	1ad3      	subs	r3, r2, r3
 801636a:	2b00      	cmp	r3, #0
 801636c:	da06      	bge.n	801637c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	8b5b      	ldrh	r3, [r3, #26]
 8016372:	f043 0302 	orr.w	r3, r3, #2
 8016376:	b29a      	uxth	r2, r3
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801637c:	4b86      	ldr	r3, [pc, #536]	; (8016598 <tcp_receive+0x888>)
 801637e:	681a      	ldr	r2, [r3, #0]
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016384:	1ad3      	subs	r3, r2, r3
 8016386:	2b00      	cmp	r3, #0
 8016388:	f2c0 842a 	blt.w	8016be0 <tcp_receive+0xed0>
 801638c:	4b82      	ldr	r3, [pc, #520]	; (8016598 <tcp_receive+0x888>)
 801638e:	681a      	ldr	r2, [r3, #0]
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016394:	6879      	ldr	r1, [r7, #4]
 8016396:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016398:	440b      	add	r3, r1
 801639a:	1ad3      	subs	r3, r2, r3
 801639c:	3301      	adds	r3, #1
 801639e:	2b00      	cmp	r3, #0
 80163a0:	f300 841e 	bgt.w	8016be0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80163a8:	4b7b      	ldr	r3, [pc, #492]	; (8016598 <tcp_receive+0x888>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	f040 829a 	bne.w	80168e6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80163b2:	4b7a      	ldr	r3, [pc, #488]	; (801659c <tcp_receive+0x88c>)
 80163b4:	891c      	ldrh	r4, [r3, #8]
 80163b6:	4b79      	ldr	r3, [pc, #484]	; (801659c <tcp_receive+0x88c>)
 80163b8:	68db      	ldr	r3, [r3, #12]
 80163ba:	899b      	ldrh	r3, [r3, #12]
 80163bc:	b29b      	uxth	r3, r3
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fa fc31 	bl	8010c26 <lwip_htons>
 80163c4:	4603      	mov	r3, r0
 80163c6:	b2db      	uxtb	r3, r3
 80163c8:	f003 0303 	and.w	r3, r3, #3
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d001      	beq.n	80163d4 <tcp_receive+0x6c4>
 80163d0:	2301      	movs	r3, #1
 80163d2:	e000      	b.n	80163d6 <tcp_receive+0x6c6>
 80163d4:	2300      	movs	r3, #0
 80163d6:	4423      	add	r3, r4
 80163d8:	b29a      	uxth	r2, r3
 80163da:	4b71      	ldr	r3, [pc, #452]	; (80165a0 <tcp_receive+0x890>)
 80163dc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80163e2:	4b6f      	ldr	r3, [pc, #444]	; (80165a0 <tcp_receive+0x890>)
 80163e4:	881b      	ldrh	r3, [r3, #0]
 80163e6:	429a      	cmp	r2, r3
 80163e8:	d275      	bcs.n	80164d6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80163ea:	4b6c      	ldr	r3, [pc, #432]	; (801659c <tcp_receive+0x88c>)
 80163ec:	68db      	ldr	r3, [r3, #12]
 80163ee:	899b      	ldrh	r3, [r3, #12]
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7fa fc17 	bl	8010c26 <lwip_htons>
 80163f8:	4603      	mov	r3, r0
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	f003 0301 	and.w	r3, r3, #1
 8016400:	2b00      	cmp	r3, #0
 8016402:	d01f      	beq.n	8016444 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016404:	4b65      	ldr	r3, [pc, #404]	; (801659c <tcp_receive+0x88c>)
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	899b      	ldrh	r3, [r3, #12]
 801640a:	b29b      	uxth	r3, r3
 801640c:	b21b      	sxth	r3, r3
 801640e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016412:	b21c      	sxth	r4, r3
 8016414:	4b61      	ldr	r3, [pc, #388]	; (801659c <tcp_receive+0x88c>)
 8016416:	68db      	ldr	r3, [r3, #12]
 8016418:	899b      	ldrh	r3, [r3, #12]
 801641a:	b29b      	uxth	r3, r3
 801641c:	4618      	mov	r0, r3
 801641e:	f7fa fc02 	bl	8010c26 <lwip_htons>
 8016422:	4603      	mov	r3, r0
 8016424:	b2db      	uxtb	r3, r3
 8016426:	b29b      	uxth	r3, r3
 8016428:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801642c:	b29b      	uxth	r3, r3
 801642e:	4618      	mov	r0, r3
 8016430:	f7fa fbf9 	bl	8010c26 <lwip_htons>
 8016434:	4603      	mov	r3, r0
 8016436:	b21b      	sxth	r3, r3
 8016438:	4323      	orrs	r3, r4
 801643a:	b21a      	sxth	r2, r3
 801643c:	4b57      	ldr	r3, [pc, #348]	; (801659c <tcp_receive+0x88c>)
 801643e:	68db      	ldr	r3, [r3, #12]
 8016440:	b292      	uxth	r2, r2
 8016442:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016448:	4b54      	ldr	r3, [pc, #336]	; (801659c <tcp_receive+0x88c>)
 801644a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801644c:	4b53      	ldr	r3, [pc, #332]	; (801659c <tcp_receive+0x88c>)
 801644e:	68db      	ldr	r3, [r3, #12]
 8016450:	899b      	ldrh	r3, [r3, #12]
 8016452:	b29b      	uxth	r3, r3
 8016454:	4618      	mov	r0, r3
 8016456:	f7fa fbe6 	bl	8010c26 <lwip_htons>
 801645a:	4603      	mov	r3, r0
 801645c:	b2db      	uxtb	r3, r3
 801645e:	f003 0302 	and.w	r3, r3, #2
 8016462:	2b00      	cmp	r3, #0
 8016464:	d005      	beq.n	8016472 <tcp_receive+0x762>
            inseg.len -= 1;
 8016466:	4b4d      	ldr	r3, [pc, #308]	; (801659c <tcp_receive+0x88c>)
 8016468:	891b      	ldrh	r3, [r3, #8]
 801646a:	3b01      	subs	r3, #1
 801646c:	b29a      	uxth	r2, r3
 801646e:	4b4b      	ldr	r3, [pc, #300]	; (801659c <tcp_receive+0x88c>)
 8016470:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016472:	4b4a      	ldr	r3, [pc, #296]	; (801659c <tcp_receive+0x88c>)
 8016474:	685b      	ldr	r3, [r3, #4]
 8016476:	4a49      	ldr	r2, [pc, #292]	; (801659c <tcp_receive+0x88c>)
 8016478:	8912      	ldrh	r2, [r2, #8]
 801647a:	4611      	mov	r1, r2
 801647c:	4618      	mov	r0, r3
 801647e:	f7fb fe15 	bl	80120ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016482:	4b46      	ldr	r3, [pc, #280]	; (801659c <tcp_receive+0x88c>)
 8016484:	891c      	ldrh	r4, [r3, #8]
 8016486:	4b45      	ldr	r3, [pc, #276]	; (801659c <tcp_receive+0x88c>)
 8016488:	68db      	ldr	r3, [r3, #12]
 801648a:	899b      	ldrh	r3, [r3, #12]
 801648c:	b29b      	uxth	r3, r3
 801648e:	4618      	mov	r0, r3
 8016490:	f7fa fbc9 	bl	8010c26 <lwip_htons>
 8016494:	4603      	mov	r3, r0
 8016496:	b2db      	uxtb	r3, r3
 8016498:	f003 0303 	and.w	r3, r3, #3
 801649c:	2b00      	cmp	r3, #0
 801649e:	d001      	beq.n	80164a4 <tcp_receive+0x794>
 80164a0:	2301      	movs	r3, #1
 80164a2:	e000      	b.n	80164a6 <tcp_receive+0x796>
 80164a4:	2300      	movs	r3, #0
 80164a6:	4423      	add	r3, r4
 80164a8:	b29a      	uxth	r2, r3
 80164aa:	4b3d      	ldr	r3, [pc, #244]	; (80165a0 <tcp_receive+0x890>)
 80164ac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80164ae:	4b3c      	ldr	r3, [pc, #240]	; (80165a0 <tcp_receive+0x890>)
 80164b0:	881b      	ldrh	r3, [r3, #0]
 80164b2:	461a      	mov	r2, r3
 80164b4:	4b38      	ldr	r3, [pc, #224]	; (8016598 <tcp_receive+0x888>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	441a      	add	r2, r3
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164be:	6879      	ldr	r1, [r7, #4]
 80164c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80164c2:	440b      	add	r3, r1
 80164c4:	429a      	cmp	r2, r3
 80164c6:	d006      	beq.n	80164d6 <tcp_receive+0x7c6>
 80164c8:	4b36      	ldr	r3, [pc, #216]	; (80165a4 <tcp_receive+0x894>)
 80164ca:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80164ce:	4936      	ldr	r1, [pc, #216]	; (80165a8 <tcp_receive+0x898>)
 80164d0:	4836      	ldr	r0, [pc, #216]	; (80165ac <tcp_receive+0x89c>)
 80164d2:	f005 fcbf 	bl	801be54 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80164da:	2b00      	cmp	r3, #0
 80164dc:	f000 80e7 	beq.w	80166ae <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80164e0:	4b2e      	ldr	r3, [pc, #184]	; (801659c <tcp_receive+0x88c>)
 80164e2:	68db      	ldr	r3, [r3, #12]
 80164e4:	899b      	ldrh	r3, [r3, #12]
 80164e6:	b29b      	uxth	r3, r3
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7fa fb9c 	bl	8010c26 <lwip_htons>
 80164ee:	4603      	mov	r3, r0
 80164f0:	b2db      	uxtb	r3, r3
 80164f2:	f003 0301 	and.w	r3, r3, #1
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d010      	beq.n	801651c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80164fa:	e00a      	b.n	8016512 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016500:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801650c:	68f8      	ldr	r0, [r7, #12]
 801650e:	f7fd fcac 	bl	8013e6a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016516:	2b00      	cmp	r3, #0
 8016518:	d1f0      	bne.n	80164fc <tcp_receive+0x7ec>
 801651a:	e0c8      	b.n	80166ae <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016520:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016522:	e052      	b.n	80165ca <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016526:	68db      	ldr	r3, [r3, #12]
 8016528:	899b      	ldrh	r3, [r3, #12]
 801652a:	b29b      	uxth	r3, r3
 801652c:	4618      	mov	r0, r3
 801652e:	f7fa fb7a 	bl	8010c26 <lwip_htons>
 8016532:	4603      	mov	r3, r0
 8016534:	b2db      	uxtb	r3, r3
 8016536:	f003 0301 	and.w	r3, r3, #1
 801653a:	2b00      	cmp	r3, #0
 801653c:	d03d      	beq.n	80165ba <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801653e:	4b17      	ldr	r3, [pc, #92]	; (801659c <tcp_receive+0x88c>)
 8016540:	68db      	ldr	r3, [r3, #12]
 8016542:	899b      	ldrh	r3, [r3, #12]
 8016544:	b29b      	uxth	r3, r3
 8016546:	4618      	mov	r0, r3
 8016548:	f7fa fb6d 	bl	8010c26 <lwip_htons>
 801654c:	4603      	mov	r3, r0
 801654e:	b2db      	uxtb	r3, r3
 8016550:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016554:	2b00      	cmp	r3, #0
 8016556:	d130      	bne.n	80165ba <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016558:	4b10      	ldr	r3, [pc, #64]	; (801659c <tcp_receive+0x88c>)
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	899b      	ldrh	r3, [r3, #12]
 801655e:	b29c      	uxth	r4, r3
 8016560:	2001      	movs	r0, #1
 8016562:	f7fa fb60 	bl	8010c26 <lwip_htons>
 8016566:	4603      	mov	r3, r0
 8016568:	461a      	mov	r2, r3
 801656a:	4b0c      	ldr	r3, [pc, #48]	; (801659c <tcp_receive+0x88c>)
 801656c:	68db      	ldr	r3, [r3, #12]
 801656e:	4322      	orrs	r2, r4
 8016570:	b292      	uxth	r2, r2
 8016572:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016574:	4b09      	ldr	r3, [pc, #36]	; (801659c <tcp_receive+0x88c>)
 8016576:	891c      	ldrh	r4, [r3, #8]
 8016578:	4b08      	ldr	r3, [pc, #32]	; (801659c <tcp_receive+0x88c>)
 801657a:	68db      	ldr	r3, [r3, #12]
 801657c:	899b      	ldrh	r3, [r3, #12]
 801657e:	b29b      	uxth	r3, r3
 8016580:	4618      	mov	r0, r3
 8016582:	f7fa fb50 	bl	8010c26 <lwip_htons>
 8016586:	4603      	mov	r3, r0
 8016588:	b2db      	uxtb	r3, r3
 801658a:	f003 0303 	and.w	r3, r3, #3
 801658e:	2b00      	cmp	r3, #0
 8016590:	d00e      	beq.n	80165b0 <tcp_receive+0x8a0>
 8016592:	2301      	movs	r3, #1
 8016594:	e00d      	b.n	80165b2 <tcp_receive+0x8a2>
 8016596:	bf00      	nop
 8016598:	2000b01c 	.word	0x2000b01c
 801659c:	2000affc 	.word	0x2000affc
 80165a0:	2000b026 	.word	0x2000b026
 80165a4:	0801e618 	.word	0x0801e618
 80165a8:	0801e9c0 	.word	0x0801e9c0
 80165ac:	0801e664 	.word	0x0801e664
 80165b0:	2300      	movs	r3, #0
 80165b2:	4423      	add	r3, r4
 80165b4:	b29a      	uxth	r2, r3
 80165b6:	4b98      	ldr	r3, [pc, #608]	; (8016818 <tcp_receive+0xb08>)
 80165b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80165ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80165be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80165c4:	6938      	ldr	r0, [r7, #16]
 80165c6:	f7fd fc50 	bl	8013e6a <tcp_seg_free>
            while (next &&
 80165ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d00e      	beq.n	80165ee <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80165d0:	4b91      	ldr	r3, [pc, #580]	; (8016818 <tcp_receive+0xb08>)
 80165d2:	881b      	ldrh	r3, [r3, #0]
 80165d4:	461a      	mov	r2, r3
 80165d6:	4b91      	ldr	r3, [pc, #580]	; (801681c <tcp_receive+0xb0c>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	441a      	add	r2, r3
 80165dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80165e4:	8909      	ldrh	r1, [r1, #8]
 80165e6:	440b      	add	r3, r1
 80165e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	da9a      	bge.n	8016524 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80165ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d059      	beq.n	80166a8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80165f4:	4b88      	ldr	r3, [pc, #544]	; (8016818 <tcp_receive+0xb08>)
 80165f6:	881b      	ldrh	r3, [r3, #0]
 80165f8:	461a      	mov	r2, r3
 80165fa:	4b88      	ldr	r3, [pc, #544]	; (801681c <tcp_receive+0xb0c>)
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	441a      	add	r2, r3
 8016600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016602:	68db      	ldr	r3, [r3, #12]
 8016604:	685b      	ldr	r3, [r3, #4]
 8016606:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016608:	2b00      	cmp	r3, #0
 801660a:	dd4d      	ble.n	80166a8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801660c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801660e:	68db      	ldr	r3, [r3, #12]
 8016610:	685b      	ldr	r3, [r3, #4]
 8016612:	b29a      	uxth	r2, r3
 8016614:	4b81      	ldr	r3, [pc, #516]	; (801681c <tcp_receive+0xb0c>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	b29b      	uxth	r3, r3
 801661a:	1ad3      	subs	r3, r2, r3
 801661c:	b29a      	uxth	r2, r3
 801661e:	4b80      	ldr	r3, [pc, #512]	; (8016820 <tcp_receive+0xb10>)
 8016620:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016622:	4b7f      	ldr	r3, [pc, #508]	; (8016820 <tcp_receive+0xb10>)
 8016624:	68db      	ldr	r3, [r3, #12]
 8016626:	899b      	ldrh	r3, [r3, #12]
 8016628:	b29b      	uxth	r3, r3
 801662a:	4618      	mov	r0, r3
 801662c:	f7fa fafb 	bl	8010c26 <lwip_htons>
 8016630:	4603      	mov	r3, r0
 8016632:	b2db      	uxtb	r3, r3
 8016634:	f003 0302 	and.w	r3, r3, #2
 8016638:	2b00      	cmp	r3, #0
 801663a:	d005      	beq.n	8016648 <tcp_receive+0x938>
                inseg.len -= 1;
 801663c:	4b78      	ldr	r3, [pc, #480]	; (8016820 <tcp_receive+0xb10>)
 801663e:	891b      	ldrh	r3, [r3, #8]
 8016640:	3b01      	subs	r3, #1
 8016642:	b29a      	uxth	r2, r3
 8016644:	4b76      	ldr	r3, [pc, #472]	; (8016820 <tcp_receive+0xb10>)
 8016646:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016648:	4b75      	ldr	r3, [pc, #468]	; (8016820 <tcp_receive+0xb10>)
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	4a74      	ldr	r2, [pc, #464]	; (8016820 <tcp_receive+0xb10>)
 801664e:	8912      	ldrh	r2, [r2, #8]
 8016650:	4611      	mov	r1, r2
 8016652:	4618      	mov	r0, r3
 8016654:	f7fb fd2a 	bl	80120ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016658:	4b71      	ldr	r3, [pc, #452]	; (8016820 <tcp_receive+0xb10>)
 801665a:	891c      	ldrh	r4, [r3, #8]
 801665c:	4b70      	ldr	r3, [pc, #448]	; (8016820 <tcp_receive+0xb10>)
 801665e:	68db      	ldr	r3, [r3, #12]
 8016660:	899b      	ldrh	r3, [r3, #12]
 8016662:	b29b      	uxth	r3, r3
 8016664:	4618      	mov	r0, r3
 8016666:	f7fa fade 	bl	8010c26 <lwip_htons>
 801666a:	4603      	mov	r3, r0
 801666c:	b2db      	uxtb	r3, r3
 801666e:	f003 0303 	and.w	r3, r3, #3
 8016672:	2b00      	cmp	r3, #0
 8016674:	d001      	beq.n	801667a <tcp_receive+0x96a>
 8016676:	2301      	movs	r3, #1
 8016678:	e000      	b.n	801667c <tcp_receive+0x96c>
 801667a:	2300      	movs	r3, #0
 801667c:	4423      	add	r3, r4
 801667e:	b29a      	uxth	r2, r3
 8016680:	4b65      	ldr	r3, [pc, #404]	; (8016818 <tcp_receive+0xb08>)
 8016682:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016684:	4b64      	ldr	r3, [pc, #400]	; (8016818 <tcp_receive+0xb08>)
 8016686:	881b      	ldrh	r3, [r3, #0]
 8016688:	461a      	mov	r2, r3
 801668a:	4b64      	ldr	r3, [pc, #400]	; (801681c <tcp_receive+0xb0c>)
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	441a      	add	r2, r3
 8016690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016692:	68db      	ldr	r3, [r3, #12]
 8016694:	685b      	ldr	r3, [r3, #4]
 8016696:	429a      	cmp	r2, r3
 8016698:	d006      	beq.n	80166a8 <tcp_receive+0x998>
 801669a:	4b62      	ldr	r3, [pc, #392]	; (8016824 <tcp_receive+0xb14>)
 801669c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80166a0:	4961      	ldr	r1, [pc, #388]	; (8016828 <tcp_receive+0xb18>)
 80166a2:	4862      	ldr	r0, [pc, #392]	; (801682c <tcp_receive+0xb1c>)
 80166a4:	f005 fbd6 	bl	801be54 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80166ac:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80166ae:	4b5a      	ldr	r3, [pc, #360]	; (8016818 <tcp_receive+0xb08>)
 80166b0:	881b      	ldrh	r3, [r3, #0]
 80166b2:	461a      	mov	r2, r3
 80166b4:	4b59      	ldr	r3, [pc, #356]	; (801681c <tcp_receive+0xb0c>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	441a      	add	r2, r3
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80166c2:	4b55      	ldr	r3, [pc, #340]	; (8016818 <tcp_receive+0xb08>)
 80166c4:	881b      	ldrh	r3, [r3, #0]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d206      	bcs.n	80166d8 <tcp_receive+0x9c8>
 80166ca:	4b56      	ldr	r3, [pc, #344]	; (8016824 <tcp_receive+0xb14>)
 80166cc:	f240 6207 	movw	r2, #1543	; 0x607
 80166d0:	4957      	ldr	r1, [pc, #348]	; (8016830 <tcp_receive+0xb20>)
 80166d2:	4856      	ldr	r0, [pc, #344]	; (801682c <tcp_receive+0xb1c>)
 80166d4:	f005 fbbe 	bl	801be54 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80166dc:	4b4e      	ldr	r3, [pc, #312]	; (8016818 <tcp_receive+0xb08>)
 80166de:	881b      	ldrh	r3, [r3, #0]
 80166e0:	1ad3      	subs	r3, r2, r3
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f7fc fd7d 	bl	80131e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80166ee:	4b4c      	ldr	r3, [pc, #304]	; (8016820 <tcp_receive+0xb10>)
 80166f0:	685b      	ldr	r3, [r3, #4]
 80166f2:	891b      	ldrh	r3, [r3, #8]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d006      	beq.n	8016706 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80166f8:	4b49      	ldr	r3, [pc, #292]	; (8016820 <tcp_receive+0xb10>)
 80166fa:	685b      	ldr	r3, [r3, #4]
 80166fc:	4a4d      	ldr	r2, [pc, #308]	; (8016834 <tcp_receive+0xb24>)
 80166fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016700:	4b47      	ldr	r3, [pc, #284]	; (8016820 <tcp_receive+0xb10>)
 8016702:	2200      	movs	r2, #0
 8016704:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016706:	4b46      	ldr	r3, [pc, #280]	; (8016820 <tcp_receive+0xb10>)
 8016708:	68db      	ldr	r3, [r3, #12]
 801670a:	899b      	ldrh	r3, [r3, #12]
 801670c:	b29b      	uxth	r3, r3
 801670e:	4618      	mov	r0, r3
 8016710:	f7fa fa89 	bl	8010c26 <lwip_htons>
 8016714:	4603      	mov	r3, r0
 8016716:	b2db      	uxtb	r3, r3
 8016718:	f003 0301 	and.w	r3, r3, #1
 801671c:	2b00      	cmp	r3, #0
 801671e:	f000 80b8 	beq.w	8016892 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016722:	4b45      	ldr	r3, [pc, #276]	; (8016838 <tcp_receive+0xb28>)
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	f043 0320 	orr.w	r3, r3, #32
 801672a:	b2da      	uxtb	r2, r3
 801672c:	4b42      	ldr	r3, [pc, #264]	; (8016838 <tcp_receive+0xb28>)
 801672e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016730:	e0af      	b.n	8016892 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016736:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801673c:	68db      	ldr	r3, [r3, #12]
 801673e:	685b      	ldr	r3, [r3, #4]
 8016740:	4a36      	ldr	r2, [pc, #216]	; (801681c <tcp_receive+0xb0c>)
 8016742:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016744:	68bb      	ldr	r3, [r7, #8]
 8016746:	891b      	ldrh	r3, [r3, #8]
 8016748:	461c      	mov	r4, r3
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	68db      	ldr	r3, [r3, #12]
 801674e:	899b      	ldrh	r3, [r3, #12]
 8016750:	b29b      	uxth	r3, r3
 8016752:	4618      	mov	r0, r3
 8016754:	f7fa fa67 	bl	8010c26 <lwip_htons>
 8016758:	4603      	mov	r3, r0
 801675a:	b2db      	uxtb	r3, r3
 801675c:	f003 0303 	and.w	r3, r3, #3
 8016760:	2b00      	cmp	r3, #0
 8016762:	d001      	beq.n	8016768 <tcp_receive+0xa58>
 8016764:	2301      	movs	r3, #1
 8016766:	e000      	b.n	801676a <tcp_receive+0xa5a>
 8016768:	2300      	movs	r3, #0
 801676a:	191a      	adds	r2, r3, r4
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016770:	441a      	add	r2, r3
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801677a:	461c      	mov	r4, r3
 801677c:	68bb      	ldr	r3, [r7, #8]
 801677e:	891b      	ldrh	r3, [r3, #8]
 8016780:	461d      	mov	r5, r3
 8016782:	68bb      	ldr	r3, [r7, #8]
 8016784:	68db      	ldr	r3, [r3, #12]
 8016786:	899b      	ldrh	r3, [r3, #12]
 8016788:	b29b      	uxth	r3, r3
 801678a:	4618      	mov	r0, r3
 801678c:	f7fa fa4b 	bl	8010c26 <lwip_htons>
 8016790:	4603      	mov	r3, r0
 8016792:	b2db      	uxtb	r3, r3
 8016794:	f003 0303 	and.w	r3, r3, #3
 8016798:	2b00      	cmp	r3, #0
 801679a:	d001      	beq.n	80167a0 <tcp_receive+0xa90>
 801679c:	2301      	movs	r3, #1
 801679e:	e000      	b.n	80167a2 <tcp_receive+0xa92>
 80167a0:	2300      	movs	r3, #0
 80167a2:	442b      	add	r3, r5
 80167a4:	429c      	cmp	r4, r3
 80167a6:	d206      	bcs.n	80167b6 <tcp_receive+0xaa6>
 80167a8:	4b1e      	ldr	r3, [pc, #120]	; (8016824 <tcp_receive+0xb14>)
 80167aa:	f240 622b 	movw	r2, #1579	; 0x62b
 80167ae:	4923      	ldr	r1, [pc, #140]	; (801683c <tcp_receive+0xb2c>)
 80167b0:	481e      	ldr	r0, [pc, #120]	; (801682c <tcp_receive+0xb1c>)
 80167b2:	f005 fb4f 	bl	801be54 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80167b6:	68bb      	ldr	r3, [r7, #8]
 80167b8:	891b      	ldrh	r3, [r3, #8]
 80167ba:	461c      	mov	r4, r3
 80167bc:	68bb      	ldr	r3, [r7, #8]
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	899b      	ldrh	r3, [r3, #12]
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7fa fa2e 	bl	8010c26 <lwip_htons>
 80167ca:	4603      	mov	r3, r0
 80167cc:	b2db      	uxtb	r3, r3
 80167ce:	f003 0303 	and.w	r3, r3, #3
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d001      	beq.n	80167da <tcp_receive+0xaca>
 80167d6:	2301      	movs	r3, #1
 80167d8:	e000      	b.n	80167dc <tcp_receive+0xacc>
 80167da:	2300      	movs	r3, #0
 80167dc:	1919      	adds	r1, r3, r4
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80167e2:	b28b      	uxth	r3, r1
 80167e4:	1ad3      	subs	r3, r2, r3
 80167e6:	b29a      	uxth	r2, r3
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f7fc fcfb 	bl	80131e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	685b      	ldr	r3, [r3, #4]
 80167f6:	891b      	ldrh	r3, [r3, #8]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d028      	beq.n	801684e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80167fc:	4b0d      	ldr	r3, [pc, #52]	; (8016834 <tcp_receive+0xb24>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d01d      	beq.n	8016840 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016804:	4b0b      	ldr	r3, [pc, #44]	; (8016834 <tcp_receive+0xb24>)
 8016806:	681a      	ldr	r2, [r3, #0]
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	685b      	ldr	r3, [r3, #4]
 801680c:	4619      	mov	r1, r3
 801680e:	4610      	mov	r0, r2
 8016810:	f7fb fe94 	bl	801253c <pbuf_cat>
 8016814:	e018      	b.n	8016848 <tcp_receive+0xb38>
 8016816:	bf00      	nop
 8016818:	2000b026 	.word	0x2000b026
 801681c:	2000b01c 	.word	0x2000b01c
 8016820:	2000affc 	.word	0x2000affc
 8016824:	0801e618 	.word	0x0801e618
 8016828:	0801e9f8 	.word	0x0801e9f8
 801682c:	0801e664 	.word	0x0801e664
 8016830:	0801ea34 	.word	0x0801ea34
 8016834:	2000b02c 	.word	0x2000b02c
 8016838:	2000b029 	.word	0x2000b029
 801683c:	0801ea54 	.word	0x0801ea54
            } else {
              recv_data = cseg->p;
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	4a70      	ldr	r2, [pc, #448]	; (8016a08 <tcp_receive+0xcf8>)
 8016846:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016848:	68bb      	ldr	r3, [r7, #8]
 801684a:	2200      	movs	r2, #0
 801684c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	68db      	ldr	r3, [r3, #12]
 8016852:	899b      	ldrh	r3, [r3, #12]
 8016854:	b29b      	uxth	r3, r3
 8016856:	4618      	mov	r0, r3
 8016858:	f7fa f9e5 	bl	8010c26 <lwip_htons>
 801685c:	4603      	mov	r3, r0
 801685e:	b2db      	uxtb	r3, r3
 8016860:	f003 0301 	and.w	r3, r3, #1
 8016864:	2b00      	cmp	r3, #0
 8016866:	d00d      	beq.n	8016884 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016868:	4b68      	ldr	r3, [pc, #416]	; (8016a0c <tcp_receive+0xcfc>)
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	f043 0320 	orr.w	r3, r3, #32
 8016870:	b2da      	uxtb	r2, r3
 8016872:	4b66      	ldr	r3, [pc, #408]	; (8016a0c <tcp_receive+0xcfc>)
 8016874:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	7d1b      	ldrb	r3, [r3, #20]
 801687a:	2b04      	cmp	r3, #4
 801687c:	d102      	bne.n	8016884 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	2207      	movs	r2, #7
 8016882:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016884:	68bb      	ldr	r3, [r7, #8]
 8016886:	681a      	ldr	r2, [r3, #0]
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801688c:	68b8      	ldr	r0, [r7, #8]
 801688e:	f7fd faec 	bl	8013e6a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016896:	2b00      	cmp	r3, #0
 8016898:	d008      	beq.n	80168ac <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801689e:	68db      	ldr	r3, [r3, #12]
 80168a0:	685a      	ldr	r2, [r3, #4]
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80168a6:	429a      	cmp	r2, r3
 80168a8:	f43f af43 	beq.w	8016732 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	8b5b      	ldrh	r3, [r3, #26]
 80168b0:	f003 0301 	and.w	r3, r3, #1
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d00e      	beq.n	80168d6 <tcp_receive+0xbc6>
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	8b5b      	ldrh	r3, [r3, #26]
 80168bc:	f023 0301 	bic.w	r3, r3, #1
 80168c0:	b29a      	uxth	r2, r3
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	835a      	strh	r2, [r3, #26]
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	8b5b      	ldrh	r3, [r3, #26]
 80168ca:	f043 0302 	orr.w	r3, r3, #2
 80168ce:	b29a      	uxth	r2, r3
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80168d4:	e188      	b.n	8016be8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	8b5b      	ldrh	r3, [r3, #26]
 80168da:	f043 0301 	orr.w	r3, r3, #1
 80168de:	b29a      	uxth	r2, r3
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80168e4:	e180      	b.n	8016be8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d106      	bne.n	80168fc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80168ee:	4848      	ldr	r0, [pc, #288]	; (8016a10 <tcp_receive+0xd00>)
 80168f0:	f7fd faf2 	bl	8013ed8 <tcp_seg_copy>
 80168f4:	4602      	mov	r2, r0
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	675a      	str	r2, [r3, #116]	; 0x74
 80168fa:	e16d      	b.n	8016bd8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80168fc:	2300      	movs	r3, #0
 80168fe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016904:	63bb      	str	r3, [r7, #56]	; 0x38
 8016906:	e157      	b.n	8016bb8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801690a:	68db      	ldr	r3, [r3, #12]
 801690c:	685a      	ldr	r2, [r3, #4]
 801690e:	4b41      	ldr	r3, [pc, #260]	; (8016a14 <tcp_receive+0xd04>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	429a      	cmp	r2, r3
 8016914:	d11d      	bne.n	8016952 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016916:	4b3e      	ldr	r3, [pc, #248]	; (8016a10 <tcp_receive+0xd00>)
 8016918:	891a      	ldrh	r2, [r3, #8]
 801691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801691c:	891b      	ldrh	r3, [r3, #8]
 801691e:	429a      	cmp	r2, r3
 8016920:	f240 814f 	bls.w	8016bc2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016924:	483a      	ldr	r0, [pc, #232]	; (8016a10 <tcp_receive+0xd00>)
 8016926:	f7fd fad7 	bl	8013ed8 <tcp_seg_copy>
 801692a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801692c:	697b      	ldr	r3, [r7, #20]
 801692e:	2b00      	cmp	r3, #0
 8016930:	f000 8149 	beq.w	8016bc6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8016934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016936:	2b00      	cmp	r3, #0
 8016938:	d003      	beq.n	8016942 <tcp_receive+0xc32>
                    prev->next = cseg;
 801693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801693c:	697a      	ldr	r2, [r7, #20]
 801693e:	601a      	str	r2, [r3, #0]
 8016940:	e002      	b.n	8016948 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	697a      	ldr	r2, [r7, #20]
 8016946:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016948:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801694a:	6978      	ldr	r0, [r7, #20]
 801694c:	f7ff f8dc 	bl	8015b08 <tcp_oos_insert_segment>
                }
                break;
 8016950:	e139      	b.n	8016bc6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016954:	2b00      	cmp	r3, #0
 8016956:	d117      	bne.n	8016988 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016958:	4b2e      	ldr	r3, [pc, #184]	; (8016a14 <tcp_receive+0xd04>)
 801695a:	681a      	ldr	r2, [r3, #0]
 801695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801695e:	68db      	ldr	r3, [r3, #12]
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	1ad3      	subs	r3, r2, r3
 8016964:	2b00      	cmp	r3, #0
 8016966:	da57      	bge.n	8016a18 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016968:	4829      	ldr	r0, [pc, #164]	; (8016a10 <tcp_receive+0xd00>)
 801696a:	f7fd fab5 	bl	8013ed8 <tcp_seg_copy>
 801696e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016970:	69bb      	ldr	r3, [r7, #24]
 8016972:	2b00      	cmp	r3, #0
 8016974:	f000 8129 	beq.w	8016bca <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	69ba      	ldr	r2, [r7, #24]
 801697c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801697e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016980:	69b8      	ldr	r0, [r7, #24]
 8016982:	f7ff f8c1 	bl	8015b08 <tcp_oos_insert_segment>
                  }
                  break;
 8016986:	e120      	b.n	8016bca <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016988:	4b22      	ldr	r3, [pc, #136]	; (8016a14 <tcp_receive+0xd04>)
 801698a:	681a      	ldr	r2, [r3, #0]
 801698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	685b      	ldr	r3, [r3, #4]
 8016992:	1ad3      	subs	r3, r2, r3
 8016994:	3b01      	subs	r3, #1
 8016996:	2b00      	cmp	r3, #0
 8016998:	db3e      	blt.n	8016a18 <tcp_receive+0xd08>
 801699a:	4b1e      	ldr	r3, [pc, #120]	; (8016a14 <tcp_receive+0xd04>)
 801699c:	681a      	ldr	r2, [r3, #0]
 801699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169a0:	68db      	ldr	r3, [r3, #12]
 80169a2:	685b      	ldr	r3, [r3, #4]
 80169a4:	1ad3      	subs	r3, r2, r3
 80169a6:	3301      	adds	r3, #1
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	dc35      	bgt.n	8016a18 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80169ac:	4818      	ldr	r0, [pc, #96]	; (8016a10 <tcp_receive+0xd00>)
 80169ae:	f7fd fa93 	bl	8013ed8 <tcp_seg_copy>
 80169b2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	f000 8109 	beq.w	8016bce <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80169bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169be:	68db      	ldr	r3, [r3, #12]
 80169c0:	685b      	ldr	r3, [r3, #4]
 80169c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169c4:	8912      	ldrh	r2, [r2, #8]
 80169c6:	441a      	add	r2, r3
 80169c8:	4b12      	ldr	r3, [pc, #72]	; (8016a14 <tcp_receive+0xd04>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	1ad3      	subs	r3, r2, r3
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	dd12      	ble.n	80169f8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80169d2:	4b10      	ldr	r3, [pc, #64]	; (8016a14 <tcp_receive+0xd04>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	b29a      	uxth	r2, r3
 80169d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169da:	68db      	ldr	r3, [r3, #12]
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	b29b      	uxth	r3, r3
 80169e0:	1ad3      	subs	r3, r2, r3
 80169e2:	b29a      	uxth	r2, r3
 80169e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80169e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169ea:	685a      	ldr	r2, [r3, #4]
 80169ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169ee:	891b      	ldrh	r3, [r3, #8]
 80169f0:	4619      	mov	r1, r3
 80169f2:	4610      	mov	r0, r2
 80169f4:	f7fb fb5a 	bl	80120ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 80169f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169fa:	69fa      	ldr	r2, [r7, #28]
 80169fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80169fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016a00:	69f8      	ldr	r0, [r7, #28]
 8016a02:	f7ff f881 	bl	8015b08 <tcp_oos_insert_segment>
                  }
                  break;
 8016a06:	e0e2      	b.n	8016bce <tcp_receive+0xebe>
 8016a08:	2000b02c 	.word	0x2000b02c
 8016a0c:	2000b029 	.word	0x2000b029
 8016a10:	2000affc 	.word	0x2000affc
 8016a14:	2000b01c 	.word	0x2000b01c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	f040 80c6 	bne.w	8016bb2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016a26:	4b80      	ldr	r3, [pc, #512]	; (8016c28 <tcp_receive+0xf18>)
 8016a28:	681a      	ldr	r2, [r3, #0]
 8016a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a2c:	68db      	ldr	r3, [r3, #12]
 8016a2e:	685b      	ldr	r3, [r3, #4]
 8016a30:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	f340 80bd 	ble.w	8016bb2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a3a:	68db      	ldr	r3, [r3, #12]
 8016a3c:	899b      	ldrh	r3, [r3, #12]
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7fa f8f0 	bl	8010c26 <lwip_htons>
 8016a46:	4603      	mov	r3, r0
 8016a48:	b2db      	uxtb	r3, r3
 8016a4a:	f003 0301 	and.w	r3, r3, #1
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f040 80bf 	bne.w	8016bd2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016a54:	4875      	ldr	r0, [pc, #468]	; (8016c2c <tcp_receive+0xf1c>)
 8016a56:	f7fd fa3f 	bl	8013ed8 <tcp_seg_copy>
 8016a5a:	4602      	mov	r2, r0
 8016a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a5e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	f000 80b6 	beq.w	8016bd6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a6c:	68db      	ldr	r3, [r3, #12]
 8016a6e:	685b      	ldr	r3, [r3, #4]
 8016a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016a72:	8912      	ldrh	r2, [r2, #8]
 8016a74:	441a      	add	r2, r3
 8016a76:	4b6c      	ldr	r3, [pc, #432]	; (8016c28 <tcp_receive+0xf18>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	1ad3      	subs	r3, r2, r3
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	dd12      	ble.n	8016aa6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016a80:	4b69      	ldr	r3, [pc, #420]	; (8016c28 <tcp_receive+0xf18>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	b29a      	uxth	r2, r3
 8016a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a88:	68db      	ldr	r3, [r3, #12]
 8016a8a:	685b      	ldr	r3, [r3, #4]
 8016a8c:	b29b      	uxth	r3, r3
 8016a8e:	1ad3      	subs	r3, r2, r3
 8016a90:	b29a      	uxth	r2, r3
 8016a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a98:	685a      	ldr	r2, [r3, #4]
 8016a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a9c:	891b      	ldrh	r3, [r3, #8]
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	4610      	mov	r0, r2
 8016aa2:	f7fb fb03 	bl	80120ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016aa6:	4b62      	ldr	r3, [pc, #392]	; (8016c30 <tcp_receive+0xf20>)
 8016aa8:	881b      	ldrh	r3, [r3, #0]
 8016aaa:	461a      	mov	r2, r3
 8016aac:	4b5e      	ldr	r3, [pc, #376]	; (8016c28 <tcp_receive+0xf18>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	441a      	add	r2, r3
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab6:	6879      	ldr	r1, [r7, #4]
 8016ab8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016aba:	440b      	add	r3, r1
 8016abc:	1ad3      	subs	r3, r2, r3
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	f340 8089 	ble.w	8016bd6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	68db      	ldr	r3, [r3, #12]
 8016aca:	899b      	ldrh	r3, [r3, #12]
 8016acc:	b29b      	uxth	r3, r3
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7fa f8a9 	bl	8010c26 <lwip_htons>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	b2db      	uxtb	r3, r3
 8016ad8:	f003 0301 	and.w	r3, r3, #1
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d022      	beq.n	8016b26 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	68db      	ldr	r3, [r3, #12]
 8016ae6:	899b      	ldrh	r3, [r3, #12]
 8016ae8:	b29b      	uxth	r3, r3
 8016aea:	b21b      	sxth	r3, r3
 8016aec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016af0:	b21c      	sxth	r4, r3
 8016af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	68db      	ldr	r3, [r3, #12]
 8016af8:	899b      	ldrh	r3, [r3, #12]
 8016afa:	b29b      	uxth	r3, r3
 8016afc:	4618      	mov	r0, r3
 8016afe:	f7fa f892 	bl	8010c26 <lwip_htons>
 8016b02:	4603      	mov	r3, r0
 8016b04:	b2db      	uxtb	r3, r3
 8016b06:	b29b      	uxth	r3, r3
 8016b08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016b0c:	b29b      	uxth	r3, r3
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f7fa f889 	bl	8010c26 <lwip_htons>
 8016b14:	4603      	mov	r3, r0
 8016b16:	b21b      	sxth	r3, r3
 8016b18:	4323      	orrs	r3, r4
 8016b1a:	b21a      	sxth	r2, r3
 8016b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	68db      	ldr	r3, [r3, #12]
 8016b22:	b292      	uxth	r2, r2
 8016b24:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b2a:	b29a      	uxth	r2, r3
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b30:	4413      	add	r3, r2
 8016b32:	b299      	uxth	r1, r3
 8016b34:	4b3c      	ldr	r3, [pc, #240]	; (8016c28 <tcp_receive+0xf18>)
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	b29a      	uxth	r2, r3
 8016b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	1a8a      	subs	r2, r1, r2
 8016b40:	b292      	uxth	r2, r2
 8016b42:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	685a      	ldr	r2, [r3, #4]
 8016b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	891b      	ldrh	r3, [r3, #8]
 8016b50:	4619      	mov	r1, r3
 8016b52:	4610      	mov	r0, r2
 8016b54:	f7fb faaa 	bl	80120ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	891c      	ldrh	r4, [r3, #8]
 8016b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	68db      	ldr	r3, [r3, #12]
 8016b64:	899b      	ldrh	r3, [r3, #12]
 8016b66:	b29b      	uxth	r3, r3
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7fa f85c 	bl	8010c26 <lwip_htons>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	b2db      	uxtb	r3, r3
 8016b72:	f003 0303 	and.w	r3, r3, #3
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d001      	beq.n	8016b7e <tcp_receive+0xe6e>
 8016b7a:	2301      	movs	r3, #1
 8016b7c:	e000      	b.n	8016b80 <tcp_receive+0xe70>
 8016b7e:	2300      	movs	r3, #0
 8016b80:	4423      	add	r3, r4
 8016b82:	b29a      	uxth	r2, r3
 8016b84:	4b2a      	ldr	r3, [pc, #168]	; (8016c30 <tcp_receive+0xf20>)
 8016b86:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016b88:	4b29      	ldr	r3, [pc, #164]	; (8016c30 <tcp_receive+0xf20>)
 8016b8a:	881b      	ldrh	r3, [r3, #0]
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	4b26      	ldr	r3, [pc, #152]	; (8016c28 <tcp_receive+0xf18>)
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	441a      	add	r2, r3
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b98:	6879      	ldr	r1, [r7, #4]
 8016b9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016b9c:	440b      	add	r3, r1
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d019      	beq.n	8016bd6 <tcp_receive+0xec6>
 8016ba2:	4b24      	ldr	r3, [pc, #144]	; (8016c34 <tcp_receive+0xf24>)
 8016ba4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8016ba8:	4923      	ldr	r1, [pc, #140]	; (8016c38 <tcp_receive+0xf28>)
 8016baa:	4824      	ldr	r0, [pc, #144]	; (8016c3c <tcp_receive+0xf2c>)
 8016bac:	f005 f952 	bl	801be54 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016bb0:	e011      	b.n	8016bd6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8016bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	f47f aea4 	bne.w	8016908 <tcp_receive+0xbf8>
 8016bc0:	e00a      	b.n	8016bd8 <tcp_receive+0xec8>
                break;
 8016bc2:	bf00      	nop
 8016bc4:	e008      	b.n	8016bd8 <tcp_receive+0xec8>
                break;
 8016bc6:	bf00      	nop
 8016bc8:	e006      	b.n	8016bd8 <tcp_receive+0xec8>
                  break;
 8016bca:	bf00      	nop
 8016bcc:	e004      	b.n	8016bd8 <tcp_receive+0xec8>
                  break;
 8016bce:	bf00      	nop
 8016bd0:	e002      	b.n	8016bd8 <tcp_receive+0xec8>
                  break;
 8016bd2:	bf00      	nop
 8016bd4:	e000      	b.n	8016bd8 <tcp_receive+0xec8>
                break;
 8016bd6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016bd8:	6878      	ldr	r0, [r7, #4]
 8016bda:	f001 fe8b 	bl	80188f4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016bde:	e003      	b.n	8016be8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f001 fe87 	bl	80188f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016be6:	e01a      	b.n	8016c1e <tcp_receive+0xf0e>
 8016be8:	e019      	b.n	8016c1e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016bea:	4b0f      	ldr	r3, [pc, #60]	; (8016c28 <tcp_receive+0xf18>)
 8016bec:	681a      	ldr	r2, [r3, #0]
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bf2:	1ad3      	subs	r3, r2, r3
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	db0a      	blt.n	8016c0e <tcp_receive+0xefe>
 8016bf8:	4b0b      	ldr	r3, [pc, #44]	; (8016c28 <tcp_receive+0xf18>)
 8016bfa:	681a      	ldr	r2, [r3, #0]
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c00:	6879      	ldr	r1, [r7, #4]
 8016c02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016c04:	440b      	add	r3, r1
 8016c06:	1ad3      	subs	r3, r2, r3
 8016c08:	3301      	adds	r3, #1
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	dd07      	ble.n	8016c1e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	8b5b      	ldrh	r3, [r3, #26]
 8016c12:	f043 0302 	orr.w	r3, r3, #2
 8016c16:	b29a      	uxth	r2, r3
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8016c1c:	e7ff      	b.n	8016c1e <tcp_receive+0xf0e>
 8016c1e:	bf00      	nop
 8016c20:	3750      	adds	r7, #80	; 0x50
 8016c22:	46bd      	mov	sp, r7
 8016c24:	bdb0      	pop	{r4, r5, r7, pc}
 8016c26:	bf00      	nop
 8016c28:	2000b01c 	.word	0x2000b01c
 8016c2c:	2000affc 	.word	0x2000affc
 8016c30:	2000b026 	.word	0x2000b026
 8016c34:	0801e618 	.word	0x0801e618
 8016c38:	0801e9c0 	.word	0x0801e9c0
 8016c3c:	0801e664 	.word	0x0801e664

08016c40 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016c40:	b480      	push	{r7}
 8016c42:	b083      	sub	sp, #12
 8016c44:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016c46:	4b15      	ldr	r3, [pc, #84]	; (8016c9c <tcp_get_next_optbyte+0x5c>)
 8016c48:	881b      	ldrh	r3, [r3, #0]
 8016c4a:	1c5a      	adds	r2, r3, #1
 8016c4c:	b291      	uxth	r1, r2
 8016c4e:	4a13      	ldr	r2, [pc, #76]	; (8016c9c <tcp_get_next_optbyte+0x5c>)
 8016c50:	8011      	strh	r1, [r2, #0]
 8016c52:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016c54:	4b12      	ldr	r3, [pc, #72]	; (8016ca0 <tcp_get_next_optbyte+0x60>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d004      	beq.n	8016c66 <tcp_get_next_optbyte+0x26>
 8016c5c:	4b11      	ldr	r3, [pc, #68]	; (8016ca4 <tcp_get_next_optbyte+0x64>)
 8016c5e:	881b      	ldrh	r3, [r3, #0]
 8016c60:	88fa      	ldrh	r2, [r7, #6]
 8016c62:	429a      	cmp	r2, r3
 8016c64:	d208      	bcs.n	8016c78 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016c66:	4b10      	ldr	r3, [pc, #64]	; (8016ca8 <tcp_get_next_optbyte+0x68>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	3314      	adds	r3, #20
 8016c6c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016c6e:	88fb      	ldrh	r3, [r7, #6]
 8016c70:	683a      	ldr	r2, [r7, #0]
 8016c72:	4413      	add	r3, r2
 8016c74:	781b      	ldrb	r3, [r3, #0]
 8016c76:	e00b      	b.n	8016c90 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016c78:	88fb      	ldrh	r3, [r7, #6]
 8016c7a:	b2da      	uxtb	r2, r3
 8016c7c:	4b09      	ldr	r3, [pc, #36]	; (8016ca4 <tcp_get_next_optbyte+0x64>)
 8016c7e:	881b      	ldrh	r3, [r3, #0]
 8016c80:	b2db      	uxtb	r3, r3
 8016c82:	1ad3      	subs	r3, r2, r3
 8016c84:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016c86:	4b06      	ldr	r3, [pc, #24]	; (8016ca0 <tcp_get_next_optbyte+0x60>)
 8016c88:	681a      	ldr	r2, [r3, #0]
 8016c8a:	797b      	ldrb	r3, [r7, #5]
 8016c8c:	4413      	add	r3, r2
 8016c8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016c90:	4618      	mov	r0, r3
 8016c92:	370c      	adds	r7, #12
 8016c94:	46bd      	mov	sp, r7
 8016c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9a:	4770      	bx	lr
 8016c9c:	2000b018 	.word	0x2000b018
 8016ca0:	2000b014 	.word	0x2000b014
 8016ca4:	2000b012 	.word	0x2000b012
 8016ca8:	2000b00c 	.word	0x2000b00c

08016cac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b084      	sub	sp, #16
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d106      	bne.n	8016cc8 <tcp_parseopt+0x1c>
 8016cba:	4b32      	ldr	r3, [pc, #200]	; (8016d84 <tcp_parseopt+0xd8>)
 8016cbc:	f240 727d 	movw	r2, #1917	; 0x77d
 8016cc0:	4931      	ldr	r1, [pc, #196]	; (8016d88 <tcp_parseopt+0xdc>)
 8016cc2:	4832      	ldr	r0, [pc, #200]	; (8016d8c <tcp_parseopt+0xe0>)
 8016cc4:	f005 f8c6 	bl	801be54 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016cc8:	4b31      	ldr	r3, [pc, #196]	; (8016d90 <tcp_parseopt+0xe4>)
 8016cca:	881b      	ldrh	r3, [r3, #0]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d056      	beq.n	8016d7e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016cd0:	4b30      	ldr	r3, [pc, #192]	; (8016d94 <tcp_parseopt+0xe8>)
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	801a      	strh	r2, [r3, #0]
 8016cd6:	e046      	b.n	8016d66 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016cd8:	f7ff ffb2 	bl	8016c40 <tcp_get_next_optbyte>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016ce0:	7bfb      	ldrb	r3, [r7, #15]
 8016ce2:	2b02      	cmp	r3, #2
 8016ce4:	d006      	beq.n	8016cf4 <tcp_parseopt+0x48>
 8016ce6:	2b02      	cmp	r3, #2
 8016ce8:	dc2c      	bgt.n	8016d44 <tcp_parseopt+0x98>
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d042      	beq.n	8016d74 <tcp_parseopt+0xc8>
 8016cee:	2b01      	cmp	r3, #1
 8016cf0:	d128      	bne.n	8016d44 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8016cf2:	e038      	b.n	8016d66 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016cf4:	f7ff ffa4 	bl	8016c40 <tcp_get_next_optbyte>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	2b04      	cmp	r3, #4
 8016cfc:	d13c      	bne.n	8016d78 <tcp_parseopt+0xcc>
 8016cfe:	4b25      	ldr	r3, [pc, #148]	; (8016d94 <tcp_parseopt+0xe8>)
 8016d00:	881b      	ldrh	r3, [r3, #0]
 8016d02:	3301      	adds	r3, #1
 8016d04:	4a22      	ldr	r2, [pc, #136]	; (8016d90 <tcp_parseopt+0xe4>)
 8016d06:	8812      	ldrh	r2, [r2, #0]
 8016d08:	4293      	cmp	r3, r2
 8016d0a:	da35      	bge.n	8016d78 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016d0c:	f7ff ff98 	bl	8016c40 <tcp_get_next_optbyte>
 8016d10:	4603      	mov	r3, r0
 8016d12:	b29b      	uxth	r3, r3
 8016d14:	021b      	lsls	r3, r3, #8
 8016d16:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016d18:	f7ff ff92 	bl	8016c40 <tcp_get_next_optbyte>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	b29a      	uxth	r2, r3
 8016d20:	89bb      	ldrh	r3, [r7, #12]
 8016d22:	4313      	orrs	r3, r2
 8016d24:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016d26:	89bb      	ldrh	r3, [r7, #12]
 8016d28:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8016d2c:	4293      	cmp	r3, r2
 8016d2e:	d804      	bhi.n	8016d3a <tcp_parseopt+0x8e>
 8016d30:	89bb      	ldrh	r3, [r7, #12]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d001      	beq.n	8016d3a <tcp_parseopt+0x8e>
 8016d36:	89ba      	ldrh	r2, [r7, #12]
 8016d38:	e001      	b.n	8016d3e <tcp_parseopt+0x92>
 8016d3a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016d42:	e010      	b.n	8016d66 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016d44:	f7ff ff7c 	bl	8016c40 <tcp_get_next_optbyte>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016d4c:	7afb      	ldrb	r3, [r7, #11]
 8016d4e:	2b01      	cmp	r3, #1
 8016d50:	d914      	bls.n	8016d7c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016d52:	7afb      	ldrb	r3, [r7, #11]
 8016d54:	b29a      	uxth	r2, r3
 8016d56:	4b0f      	ldr	r3, [pc, #60]	; (8016d94 <tcp_parseopt+0xe8>)
 8016d58:	881b      	ldrh	r3, [r3, #0]
 8016d5a:	4413      	add	r3, r2
 8016d5c:	b29b      	uxth	r3, r3
 8016d5e:	3b02      	subs	r3, #2
 8016d60:	b29a      	uxth	r2, r3
 8016d62:	4b0c      	ldr	r3, [pc, #48]	; (8016d94 <tcp_parseopt+0xe8>)
 8016d64:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016d66:	4b0b      	ldr	r3, [pc, #44]	; (8016d94 <tcp_parseopt+0xe8>)
 8016d68:	881a      	ldrh	r2, [r3, #0]
 8016d6a:	4b09      	ldr	r3, [pc, #36]	; (8016d90 <tcp_parseopt+0xe4>)
 8016d6c:	881b      	ldrh	r3, [r3, #0]
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d3b2      	bcc.n	8016cd8 <tcp_parseopt+0x2c>
 8016d72:	e004      	b.n	8016d7e <tcp_parseopt+0xd2>
          return;
 8016d74:	bf00      	nop
 8016d76:	e002      	b.n	8016d7e <tcp_parseopt+0xd2>
            return;
 8016d78:	bf00      	nop
 8016d7a:	e000      	b.n	8016d7e <tcp_parseopt+0xd2>
            return;
 8016d7c:	bf00      	nop
      }
    }
  }
}
 8016d7e:	3710      	adds	r7, #16
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}
 8016d84:	0801e618 	.word	0x0801e618
 8016d88:	0801ea7c 	.word	0x0801ea7c
 8016d8c:	0801e664 	.word	0x0801e664
 8016d90:	2000b010 	.word	0x2000b010
 8016d94:	2000b018 	.word	0x2000b018

08016d98 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016d98:	b480      	push	{r7}
 8016d9a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016d9c:	4b05      	ldr	r3, [pc, #20]	; (8016db4 <tcp_trigger_input_pcb_close+0x1c>)
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	f043 0310 	orr.w	r3, r3, #16
 8016da4:	b2da      	uxtb	r2, r3
 8016da6:	4b03      	ldr	r3, [pc, #12]	; (8016db4 <tcp_trigger_input_pcb_close+0x1c>)
 8016da8:	701a      	strb	r2, [r3, #0]
}
 8016daa:	bf00      	nop
 8016dac:	46bd      	mov	sp, r7
 8016dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db2:	4770      	bx	lr
 8016db4:	2000b029 	.word	0x2000b029

08016db8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	60f8      	str	r0, [r7, #12]
 8016dc0:	60b9      	str	r1, [r7, #8]
 8016dc2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d00a      	beq.n	8016de0 <tcp_route+0x28>
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	7a1b      	ldrb	r3, [r3, #8]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d006      	beq.n	8016de0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	7a1b      	ldrb	r3, [r3, #8]
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7fa ff8e 	bl	8011cf8 <netif_get_by_index>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	e003      	b.n	8016de8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016de0:	6878      	ldr	r0, [r7, #4]
 8016de2:	f003 faf1 	bl	801a3c8 <ip4_route>
 8016de6:	4603      	mov	r3, r0
  }
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3710      	adds	r7, #16
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016df0:	b590      	push	{r4, r7, lr}
 8016df2:	b087      	sub	sp, #28
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	60b9      	str	r1, [r7, #8]
 8016dfa:	603b      	str	r3, [r7, #0]
 8016dfc:	4613      	mov	r3, r2
 8016dfe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d105      	bne.n	8016e12 <tcp_create_segment+0x22>
 8016e06:	4b44      	ldr	r3, [pc, #272]	; (8016f18 <tcp_create_segment+0x128>)
 8016e08:	22a3      	movs	r2, #163	; 0xa3
 8016e0a:	4944      	ldr	r1, [pc, #272]	; (8016f1c <tcp_create_segment+0x12c>)
 8016e0c:	4844      	ldr	r0, [pc, #272]	; (8016f20 <tcp_create_segment+0x130>)
 8016e0e:	f005 f821 	bl	801be54 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016e12:	68bb      	ldr	r3, [r7, #8]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d105      	bne.n	8016e24 <tcp_create_segment+0x34>
 8016e18:	4b3f      	ldr	r3, [pc, #252]	; (8016f18 <tcp_create_segment+0x128>)
 8016e1a:	22a4      	movs	r2, #164	; 0xa4
 8016e1c:	4941      	ldr	r1, [pc, #260]	; (8016f24 <tcp_create_segment+0x134>)
 8016e1e:	4840      	ldr	r0, [pc, #256]	; (8016f20 <tcp_create_segment+0x130>)
 8016e20:	f005 f818 	bl	801be54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016e24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016e28:	009b      	lsls	r3, r3, #2
 8016e2a:	b2db      	uxtb	r3, r3
 8016e2c:	f003 0304 	and.w	r3, r3, #4
 8016e30:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016e32:	2003      	movs	r0, #3
 8016e34:	f7fa fbda 	bl	80115ec <memp_malloc>
 8016e38:	6138      	str	r0, [r7, #16]
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d104      	bne.n	8016e4a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016e40:	68b8      	ldr	r0, [r7, #8]
 8016e42:	f7fb fab9 	bl	80123b8 <pbuf_free>
    return NULL;
 8016e46:	2300      	movs	r3, #0
 8016e48:	e061      	b.n	8016f0e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016e50:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016e52:	693b      	ldr	r3, [r7, #16]
 8016e54:	2200      	movs	r2, #0
 8016e56:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	68ba      	ldr	r2, [r7, #8]
 8016e5c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016e5e:	68bb      	ldr	r3, [r7, #8]
 8016e60:	891a      	ldrh	r2, [r3, #8]
 8016e62:	7dfb      	ldrb	r3, [r7, #23]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d205      	bcs.n	8016e76 <tcp_create_segment+0x86>
 8016e6a:	4b2b      	ldr	r3, [pc, #172]	; (8016f18 <tcp_create_segment+0x128>)
 8016e6c:	22b0      	movs	r2, #176	; 0xb0
 8016e6e:	492e      	ldr	r1, [pc, #184]	; (8016f28 <tcp_create_segment+0x138>)
 8016e70:	482b      	ldr	r0, [pc, #172]	; (8016f20 <tcp_create_segment+0x130>)
 8016e72:	f004 ffef 	bl	801be54 <iprintf>
  seg->len = p->tot_len - optlen;
 8016e76:	68bb      	ldr	r3, [r7, #8]
 8016e78:	891a      	ldrh	r2, [r3, #8]
 8016e7a:	7dfb      	ldrb	r3, [r7, #23]
 8016e7c:	b29b      	uxth	r3, r3
 8016e7e:	1ad3      	subs	r3, r2, r3
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	693b      	ldr	r3, [r7, #16]
 8016e84:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016e86:	2114      	movs	r1, #20
 8016e88:	68b8      	ldr	r0, [r7, #8]
 8016e8a:	f7fb f9ff 	bl	801228c <pbuf_add_header>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d004      	beq.n	8016e9e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016e94:	6938      	ldr	r0, [r7, #16]
 8016e96:	f7fc ffe8 	bl	8013e6a <tcp_seg_free>
    return NULL;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	e037      	b.n	8016f0e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	685a      	ldr	r2, [r3, #4]
 8016ea4:	693b      	ldr	r3, [r7, #16]
 8016ea6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	8ada      	ldrh	r2, [r3, #22]
 8016eac:	693b      	ldr	r3, [r7, #16]
 8016eae:	68dc      	ldr	r4, [r3, #12]
 8016eb0:	4610      	mov	r0, r2
 8016eb2:	f7f9 feb8 	bl	8010c26 <lwip_htons>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	8b1a      	ldrh	r2, [r3, #24]
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	68dc      	ldr	r4, [r3, #12]
 8016ec2:	4610      	mov	r0, r2
 8016ec4:	f7f9 feaf 	bl	8010c26 <lwip_htons>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016ecc:	693b      	ldr	r3, [r7, #16]
 8016ece:	68dc      	ldr	r4, [r3, #12]
 8016ed0:	6838      	ldr	r0, [r7, #0]
 8016ed2:	f7f9 febd 	bl	8010c50 <lwip_htonl>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016eda:	7dfb      	ldrb	r3, [r7, #23]
 8016edc:	089b      	lsrs	r3, r3, #2
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	3305      	adds	r3, #5
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	031b      	lsls	r3, r3, #12
 8016ee8:	b29a      	uxth	r2, r3
 8016eea:	79fb      	ldrb	r3, [r7, #7]
 8016eec:	b29b      	uxth	r3, r3
 8016eee:	4313      	orrs	r3, r2
 8016ef0:	b29a      	uxth	r2, r3
 8016ef2:	693b      	ldr	r3, [r7, #16]
 8016ef4:	68dc      	ldr	r4, [r3, #12]
 8016ef6:	4610      	mov	r0, r2
 8016ef8:	f7f9 fe95 	bl	8010c26 <lwip_htons>
 8016efc:	4603      	mov	r3, r0
 8016efe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016f00:	693b      	ldr	r3, [r7, #16]
 8016f02:	68db      	ldr	r3, [r3, #12]
 8016f04:	2200      	movs	r2, #0
 8016f06:	749a      	strb	r2, [r3, #18]
 8016f08:	2200      	movs	r2, #0
 8016f0a:	74da      	strb	r2, [r3, #19]
  return seg;
 8016f0c:	693b      	ldr	r3, [r7, #16]
}
 8016f0e:	4618      	mov	r0, r3
 8016f10:	371c      	adds	r7, #28
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd90      	pop	{r4, r7, pc}
 8016f16:	bf00      	nop
 8016f18:	0801ea98 	.word	0x0801ea98
 8016f1c:	0801eacc 	.word	0x0801eacc
 8016f20:	0801eaec 	.word	0x0801eaec
 8016f24:	0801eb14 	.word	0x0801eb14
 8016f28:	0801eb38 	.word	0x0801eb38

08016f2c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b086      	sub	sp, #24
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	607b      	str	r3, [r7, #4]
 8016f34:	4603      	mov	r3, r0
 8016f36:	73fb      	strb	r3, [r7, #15]
 8016f38:	460b      	mov	r3, r1
 8016f3a:	81bb      	strh	r3, [r7, #12]
 8016f3c:	4613      	mov	r3, r2
 8016f3e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8016f40:	89bb      	ldrh	r3, [r7, #12]
 8016f42:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d105      	bne.n	8016f56 <tcp_pbuf_prealloc+0x2a>
 8016f4a:	4b30      	ldr	r3, [pc, #192]	; (801700c <tcp_pbuf_prealloc+0xe0>)
 8016f4c:	22e8      	movs	r2, #232	; 0xe8
 8016f4e:	4930      	ldr	r1, [pc, #192]	; (8017010 <tcp_pbuf_prealloc+0xe4>)
 8016f50:	4830      	ldr	r0, [pc, #192]	; (8017014 <tcp_pbuf_prealloc+0xe8>)
 8016f52:	f004 ff7f 	bl	801be54 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016f56:	6a3b      	ldr	r3, [r7, #32]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d105      	bne.n	8016f68 <tcp_pbuf_prealloc+0x3c>
 8016f5c:	4b2b      	ldr	r3, [pc, #172]	; (801700c <tcp_pbuf_prealloc+0xe0>)
 8016f5e:	22e9      	movs	r2, #233	; 0xe9
 8016f60:	492d      	ldr	r1, [pc, #180]	; (8017018 <tcp_pbuf_prealloc+0xec>)
 8016f62:	482c      	ldr	r0, [pc, #176]	; (8017014 <tcp_pbuf_prealloc+0xe8>)
 8016f64:	f004 ff76 	bl	801be54 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016f68:	89ba      	ldrh	r2, [r7, #12]
 8016f6a:	897b      	ldrh	r3, [r7, #10]
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	d221      	bcs.n	8016fb4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016f70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f74:	f003 0302 	and.w	r3, r3, #2
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d111      	bne.n	8016fa0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016f7c:	6a3b      	ldr	r3, [r7, #32]
 8016f7e:	8b5b      	ldrh	r3, [r3, #26]
 8016f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d115      	bne.n	8016fb4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016f88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d007      	beq.n	8016fa0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016f90:	6a3b      	ldr	r3, [r7, #32]
 8016f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d103      	bne.n	8016fa0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016f98:	6a3b      	ldr	r3, [r7, #32]
 8016f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d009      	beq.n	8016fb4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016fa0:	89bb      	ldrh	r3, [r7, #12]
 8016fa2:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8016fa6:	f023 0203 	bic.w	r2, r3, #3
 8016faa:	897b      	ldrh	r3, [r7, #10]
 8016fac:	4293      	cmp	r3, r2
 8016fae:	bf28      	it	cs
 8016fb0:	4613      	movcs	r3, r2
 8016fb2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016fb4:	8af9      	ldrh	r1, [r7, #22]
 8016fb6:	7bfb      	ldrb	r3, [r7, #15]
 8016fb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f7fa ff17 	bl	8011df0 <pbuf_alloc>
 8016fc2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d101      	bne.n	8016fce <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	e019      	b.n	8017002 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016fce:	693b      	ldr	r3, [r7, #16]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d006      	beq.n	8016fe4 <tcp_pbuf_prealloc+0xb8>
 8016fd6:	4b0d      	ldr	r3, [pc, #52]	; (801700c <tcp_pbuf_prealloc+0xe0>)
 8016fd8:	f240 120b 	movw	r2, #267	; 0x10b
 8016fdc:	490f      	ldr	r1, [pc, #60]	; (801701c <tcp_pbuf_prealloc+0xf0>)
 8016fde:	480d      	ldr	r0, [pc, #52]	; (8017014 <tcp_pbuf_prealloc+0xe8>)
 8016fe0:	f004 ff38 	bl	801be54 <iprintf>
  *oversize = p->len - length;
 8016fe4:	693b      	ldr	r3, [r7, #16]
 8016fe6:	895a      	ldrh	r2, [r3, #10]
 8016fe8:	89bb      	ldrh	r3, [r7, #12]
 8016fea:	1ad3      	subs	r3, r2, r3
 8016fec:	b29a      	uxth	r2, r3
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016ff2:	693b      	ldr	r3, [r7, #16]
 8016ff4:	89ba      	ldrh	r2, [r7, #12]
 8016ff6:	811a      	strh	r2, [r3, #8]
 8016ff8:	693b      	ldr	r3, [r7, #16]
 8016ffa:	891a      	ldrh	r2, [r3, #8]
 8016ffc:	693b      	ldr	r3, [r7, #16]
 8016ffe:	815a      	strh	r2, [r3, #10]
  return p;
 8017000:	693b      	ldr	r3, [r7, #16]
}
 8017002:	4618      	mov	r0, r3
 8017004:	3718      	adds	r7, #24
 8017006:	46bd      	mov	sp, r7
 8017008:	bd80      	pop	{r7, pc}
 801700a:	bf00      	nop
 801700c:	0801ea98 	.word	0x0801ea98
 8017010:	0801eb50 	.word	0x0801eb50
 8017014:	0801eaec 	.word	0x0801eaec
 8017018:	0801eb74 	.word	0x0801eb74
 801701c:	0801eb94 	.word	0x0801eb94

08017020 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b082      	sub	sp, #8
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
 8017028:	460b      	mov	r3, r1
 801702a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d106      	bne.n	8017040 <tcp_write_checks+0x20>
 8017032:	4b33      	ldr	r3, [pc, #204]	; (8017100 <tcp_write_checks+0xe0>)
 8017034:	f240 1233 	movw	r2, #307	; 0x133
 8017038:	4932      	ldr	r1, [pc, #200]	; (8017104 <tcp_write_checks+0xe4>)
 801703a:	4833      	ldr	r0, [pc, #204]	; (8017108 <tcp_write_checks+0xe8>)
 801703c:	f004 ff0a 	bl	801be54 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	7d1b      	ldrb	r3, [r3, #20]
 8017044:	2b04      	cmp	r3, #4
 8017046:	d00e      	beq.n	8017066 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801704c:	2b07      	cmp	r3, #7
 801704e:	d00a      	beq.n	8017066 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017054:	2b02      	cmp	r3, #2
 8017056:	d006      	beq.n	8017066 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801705c:	2b03      	cmp	r3, #3
 801705e:	d002      	beq.n	8017066 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017060:	f06f 030a 	mvn.w	r3, #10
 8017064:	e048      	b.n	80170f8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017066:	887b      	ldrh	r3, [r7, #2]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d101      	bne.n	8017070 <tcp_write_checks+0x50>
    return ERR_OK;
 801706c:	2300      	movs	r3, #0
 801706e:	e043      	b.n	80170f8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017076:	887a      	ldrh	r2, [r7, #2]
 8017078:	429a      	cmp	r2, r3
 801707a:	d909      	bls.n	8017090 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	8b5b      	ldrh	r3, [r3, #26]
 8017080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017084:	b29a      	uxth	r2, r3
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801708a:	f04f 33ff 	mov.w	r3, #4294967295
 801708e:	e033      	b.n	80170f8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017096:	2b0f      	cmp	r3, #15
 8017098:	d909      	bls.n	80170ae <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	8b5b      	ldrh	r3, [r3, #26]
 801709e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170a2:	b29a      	uxth	r2, r3
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80170a8:	f04f 33ff 	mov.w	r3, #4294967295
 80170ac:	e024      	b.n	80170f8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d00f      	beq.n	80170d8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d11a      	bne.n	80170f6 <tcp_write_checks+0xd6>
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d116      	bne.n	80170f6 <tcp_write_checks+0xd6>
 80170c8:	4b0d      	ldr	r3, [pc, #52]	; (8017100 <tcp_write_checks+0xe0>)
 80170ca:	f240 1255 	movw	r2, #341	; 0x155
 80170ce:	490f      	ldr	r1, [pc, #60]	; (801710c <tcp_write_checks+0xec>)
 80170d0:	480d      	ldr	r0, [pc, #52]	; (8017108 <tcp_write_checks+0xe8>)
 80170d2:	f004 febf 	bl	801be54 <iprintf>
 80170d6:	e00e      	b.n	80170f6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d103      	bne.n	80170e8 <tcp_write_checks+0xc8>
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d006      	beq.n	80170f6 <tcp_write_checks+0xd6>
 80170e8:	4b05      	ldr	r3, [pc, #20]	; (8017100 <tcp_write_checks+0xe0>)
 80170ea:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80170ee:	4908      	ldr	r1, [pc, #32]	; (8017110 <tcp_write_checks+0xf0>)
 80170f0:	4805      	ldr	r0, [pc, #20]	; (8017108 <tcp_write_checks+0xe8>)
 80170f2:	f004 feaf 	bl	801be54 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80170f6:	2300      	movs	r3, #0
}
 80170f8:	4618      	mov	r0, r3
 80170fa:	3708      	adds	r7, #8
 80170fc:	46bd      	mov	sp, r7
 80170fe:	bd80      	pop	{r7, pc}
 8017100:	0801ea98 	.word	0x0801ea98
 8017104:	0801eba8 	.word	0x0801eba8
 8017108:	0801eaec 	.word	0x0801eaec
 801710c:	0801ebc8 	.word	0x0801ebc8
 8017110:	0801ec04 	.word	0x0801ec04

08017114 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017114:	b590      	push	{r4, r7, lr}
 8017116:	b09b      	sub	sp, #108	; 0x6c
 8017118:	af04      	add	r7, sp, #16
 801711a:	60f8      	str	r0, [r7, #12]
 801711c:	60b9      	str	r1, [r7, #8]
 801711e:	4611      	mov	r1, r2
 8017120:	461a      	mov	r2, r3
 8017122:	460b      	mov	r3, r1
 8017124:	80fb      	strh	r3, [r7, #6]
 8017126:	4613      	mov	r3, r2
 8017128:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801712a:	2300      	movs	r3, #0
 801712c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801712e:	2300      	movs	r3, #0
 8017130:	653b      	str	r3, [r7, #80]	; 0x50
 8017132:	2300      	movs	r3, #0
 8017134:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017136:	2300      	movs	r3, #0
 8017138:	64bb      	str	r3, [r7, #72]	; 0x48
 801713a:	2300      	movs	r3, #0
 801713c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801713e:	2300      	movs	r3, #0
 8017140:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017144:	2300      	movs	r3, #0
 8017146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801714a:	2300      	movs	r3, #0
 801714c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801714e:	2300      	movs	r3, #0
 8017150:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8017152:	2300      	movs	r3, #0
 8017154:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d109      	bne.n	8017170 <tcp_write+0x5c>
 801715c:	4ba4      	ldr	r3, [pc, #656]	; (80173f0 <tcp_write+0x2dc>)
 801715e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8017162:	49a4      	ldr	r1, [pc, #656]	; (80173f4 <tcp_write+0x2e0>)
 8017164:	48a4      	ldr	r0, [pc, #656]	; (80173f8 <tcp_write+0x2e4>)
 8017166:	f004 fe75 	bl	801be54 <iprintf>
 801716a:	f06f 030f 	mvn.w	r3, #15
 801716e:	e32a      	b.n	80177c6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017176:	085b      	lsrs	r3, r3, #1
 8017178:	b29a      	uxth	r2, r3
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801717e:	4293      	cmp	r3, r2
 8017180:	bf28      	it	cs
 8017182:	4613      	movcs	r3, r2
 8017184:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017188:	2b00      	cmp	r3, #0
 801718a:	d102      	bne.n	8017192 <tcp_write+0x7e>
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017190:	e000      	b.n	8017194 <tcp_write+0x80>
 8017192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017194:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017196:	68bb      	ldr	r3, [r7, #8]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d109      	bne.n	80171b0 <tcp_write+0x9c>
 801719c:	4b94      	ldr	r3, [pc, #592]	; (80173f0 <tcp_write+0x2dc>)
 801719e:	f240 12ad 	movw	r2, #429	; 0x1ad
 80171a2:	4996      	ldr	r1, [pc, #600]	; (80173fc <tcp_write+0x2e8>)
 80171a4:	4894      	ldr	r0, [pc, #592]	; (80173f8 <tcp_write+0x2e4>)
 80171a6:	f004 fe55 	bl	801be54 <iprintf>
 80171aa:	f06f 030f 	mvn.w	r3, #15
 80171ae:	e30a      	b.n	80177c6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80171b0:	88fb      	ldrh	r3, [r7, #6]
 80171b2:	4619      	mov	r1, r3
 80171b4:	68f8      	ldr	r0, [r7, #12]
 80171b6:	f7ff ff33 	bl	8017020 <tcp_write_checks>
 80171ba:	4603      	mov	r3, r0
 80171bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80171c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d002      	beq.n	80171ce <tcp_write+0xba>
    return err;
 80171c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80171cc:	e2fb      	b.n	80177c6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80171d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80171d8:	2300      	movs	r3, #0
 80171da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	f000 80f6 	beq.w	80173d4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171ec:	653b      	str	r3, [r7, #80]	; 0x50
 80171ee:	e002      	b.n	80171f6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80171f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80171f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d1f8      	bne.n	80171f0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80171fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017200:	7a9b      	ldrb	r3, [r3, #10]
 8017202:	009b      	lsls	r3, r3, #2
 8017204:	b29b      	uxth	r3, r3
 8017206:	f003 0304 	and.w	r3, r3, #4
 801720a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801720c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801720e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017210:	891b      	ldrh	r3, [r3, #8]
 8017212:	4619      	mov	r1, r3
 8017214:	8c3b      	ldrh	r3, [r7, #32]
 8017216:	440b      	add	r3, r1
 8017218:	429a      	cmp	r2, r3
 801721a:	da06      	bge.n	801722a <tcp_write+0x116>
 801721c:	4b74      	ldr	r3, [pc, #464]	; (80173f0 <tcp_write+0x2dc>)
 801721e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017222:	4977      	ldr	r1, [pc, #476]	; (8017400 <tcp_write+0x2ec>)
 8017224:	4874      	ldr	r0, [pc, #464]	; (80173f8 <tcp_write+0x2e4>)
 8017226:	f004 fe15 	bl	801be54 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801722a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801722c:	891a      	ldrh	r2, [r3, #8]
 801722e:	8c3b      	ldrh	r3, [r7, #32]
 8017230:	4413      	add	r3, r2
 8017232:	b29b      	uxth	r3, r3
 8017234:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017236:	1ad3      	subs	r3, r2, r3
 8017238:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017240:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017242:	8a7b      	ldrh	r3, [r7, #18]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d026      	beq.n	8017296 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017248:	8a7b      	ldrh	r3, [r7, #18]
 801724a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801724c:	429a      	cmp	r2, r3
 801724e:	d206      	bcs.n	801725e <tcp_write+0x14a>
 8017250:	4b67      	ldr	r3, [pc, #412]	; (80173f0 <tcp_write+0x2dc>)
 8017252:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017256:	496b      	ldr	r1, [pc, #428]	; (8017404 <tcp_write+0x2f0>)
 8017258:	4867      	ldr	r0, [pc, #412]	; (80173f8 <tcp_write+0x2e4>)
 801725a:	f004 fdfb 	bl	801be54 <iprintf>
      seg = last_unsent;
 801725e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017260:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017262:	8a7b      	ldrh	r3, [r7, #18]
 8017264:	88fa      	ldrh	r2, [r7, #6]
 8017266:	4293      	cmp	r3, r2
 8017268:	bf28      	it	cs
 801726a:	4613      	movcs	r3, r2
 801726c:	b29b      	uxth	r3, r3
 801726e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017270:	4293      	cmp	r3, r2
 8017272:	bf28      	it	cs
 8017274:	4613      	movcs	r3, r2
 8017276:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017278:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801727c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801727e:	4413      	add	r3, r2
 8017280:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017284:	8a7a      	ldrh	r2, [r7, #18]
 8017286:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017288:	1ad3      	subs	r3, r2, r3
 801728a:	b29b      	uxth	r3, r3
 801728c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801728e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017290:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017292:	1ad3      	subs	r3, r2, r3
 8017294:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017296:	8a7b      	ldrh	r3, [r7, #18]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d00b      	beq.n	80172b4 <tcp_write+0x1a0>
 801729c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80172a0:	88fb      	ldrh	r3, [r7, #6]
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d006      	beq.n	80172b4 <tcp_write+0x1a0>
 80172a6:	4b52      	ldr	r3, [pc, #328]	; (80173f0 <tcp_write+0x2dc>)
 80172a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80172ac:	4956      	ldr	r1, [pc, #344]	; (8017408 <tcp_write+0x2f4>)
 80172ae:	4852      	ldr	r0, [pc, #328]	; (80173f8 <tcp_write+0x2e4>)
 80172b0:	f004 fdd0 	bl	801be54 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80172b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80172b8:	88fb      	ldrh	r3, [r7, #6]
 80172ba:	429a      	cmp	r2, r3
 80172bc:	f080 8167 	bcs.w	801758e <tcp_write+0x47a>
 80172c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	f000 8163 	beq.w	801758e <tcp_write+0x47a>
 80172c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172ca:	891b      	ldrh	r3, [r3, #8]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	f000 815e 	beq.w	801758e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80172d2:	88fa      	ldrh	r2, [r7, #6]
 80172d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80172d8:	1ad2      	subs	r2, r2, r3
 80172da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80172dc:	4293      	cmp	r3, r2
 80172de:	bfa8      	it	ge
 80172e0:	4613      	movge	r3, r2
 80172e2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80172e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172e6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80172e8:	797b      	ldrb	r3, [r7, #5]
 80172ea:	f003 0301 	and.w	r3, r3, #1
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d027      	beq.n	8017342 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80172f2:	f107 0012 	add.w	r0, r7, #18
 80172f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80172f8:	8bf9      	ldrh	r1, [r7, #30]
 80172fa:	2301      	movs	r3, #1
 80172fc:	9302      	str	r3, [sp, #8]
 80172fe:	797b      	ldrb	r3, [r7, #5]
 8017300:	9301      	str	r3, [sp, #4]
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	9300      	str	r3, [sp, #0]
 8017306:	4603      	mov	r3, r0
 8017308:	2000      	movs	r0, #0
 801730a:	f7ff fe0f 	bl	8016f2c <tcp_pbuf_prealloc>
 801730e:	6578      	str	r0, [r7, #84]	; 0x54
 8017310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017312:	2b00      	cmp	r3, #0
 8017314:	f000 8225 	beq.w	8017762 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801731a:	6858      	ldr	r0, [r3, #4]
 801731c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017320:	68ba      	ldr	r2, [r7, #8]
 8017322:	4413      	add	r3, r2
 8017324:	8bfa      	ldrh	r2, [r7, #30]
 8017326:	4619      	mov	r1, r3
 8017328:	f004 ff05 	bl	801c136 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801732c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801732e:	f7fb f8cb 	bl	80124c8 <pbuf_clen>
 8017332:	4603      	mov	r3, r0
 8017334:	461a      	mov	r2, r3
 8017336:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801733a:	4413      	add	r3, r2
 801733c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017340:	e041      	b.n	80173c6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	637b      	str	r3, [r7, #52]	; 0x34
 8017348:	e002      	b.n	8017350 <tcp_write+0x23c>
 801734a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	637b      	str	r3, [r7, #52]	; 0x34
 8017350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d1f8      	bne.n	801734a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801735a:	7b1b      	ldrb	r3, [r3, #12]
 801735c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017360:	2b00      	cmp	r3, #0
 8017362:	d115      	bne.n	8017390 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801736a:	8952      	ldrh	r2, [r2, #10]
 801736c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801736e:	68ba      	ldr	r2, [r7, #8]
 8017370:	429a      	cmp	r2, r3
 8017372:	d10d      	bne.n	8017390 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017374:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017378:	2b00      	cmp	r3, #0
 801737a:	d006      	beq.n	801738a <tcp_write+0x276>
 801737c:	4b1c      	ldr	r3, [pc, #112]	; (80173f0 <tcp_write+0x2dc>)
 801737e:	f240 2231 	movw	r2, #561	; 0x231
 8017382:	4922      	ldr	r1, [pc, #136]	; (801740c <tcp_write+0x2f8>)
 8017384:	481c      	ldr	r0, [pc, #112]	; (80173f8 <tcp_write+0x2e4>)
 8017386:	f004 fd65 	bl	801be54 <iprintf>
          extendlen = seglen;
 801738a:	8bfb      	ldrh	r3, [r7, #30]
 801738c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801738e:	e01a      	b.n	80173c6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017390:	8bfb      	ldrh	r3, [r7, #30]
 8017392:	2201      	movs	r2, #1
 8017394:	4619      	mov	r1, r3
 8017396:	2000      	movs	r0, #0
 8017398:	f7fa fd2a 	bl	8011df0 <pbuf_alloc>
 801739c:	6578      	str	r0, [r7, #84]	; 0x54
 801739e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	f000 81e0 	beq.w	8017766 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80173a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80173aa:	68ba      	ldr	r2, [r7, #8]
 80173ac:	441a      	add	r2, r3
 80173ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80173b0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80173b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80173b4:	f7fb f888 	bl	80124c8 <pbuf_clen>
 80173b8:	4603      	mov	r3, r0
 80173ba:	461a      	mov	r2, r3
 80173bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80173c0:	4413      	add	r3, r2
 80173c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80173c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80173ca:	8bfb      	ldrh	r3, [r7, #30]
 80173cc:	4413      	add	r3, r2
 80173ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80173d2:	e0dc      	b.n	801758e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80173da:	2b00      	cmp	r3, #0
 80173dc:	f000 80d7 	beq.w	801758e <tcp_write+0x47a>
 80173e0:	4b03      	ldr	r3, [pc, #12]	; (80173f0 <tcp_write+0x2dc>)
 80173e2:	f240 224a 	movw	r2, #586	; 0x24a
 80173e6:	490a      	ldr	r1, [pc, #40]	; (8017410 <tcp_write+0x2fc>)
 80173e8:	4803      	ldr	r0, [pc, #12]	; (80173f8 <tcp_write+0x2e4>)
 80173ea:	f004 fd33 	bl	801be54 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80173ee:	e0ce      	b.n	801758e <tcp_write+0x47a>
 80173f0:	0801ea98 	.word	0x0801ea98
 80173f4:	0801ec38 	.word	0x0801ec38
 80173f8:	0801eaec 	.word	0x0801eaec
 80173fc:	0801ec50 	.word	0x0801ec50
 8017400:	0801ec84 	.word	0x0801ec84
 8017404:	0801ec9c 	.word	0x0801ec9c
 8017408:	0801ecbc 	.word	0x0801ecbc
 801740c:	0801ecdc 	.word	0x0801ecdc
 8017410:	0801ed08 	.word	0x0801ed08
    struct pbuf *p;
    u16_t left = len - pos;
 8017414:	88fa      	ldrh	r2, [r7, #6]
 8017416:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801741a:	1ad3      	subs	r3, r2, r3
 801741c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801741e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017422:	b29b      	uxth	r3, r3
 8017424:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017426:	1ad3      	subs	r3, r2, r3
 8017428:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801742a:	8b7a      	ldrh	r2, [r7, #26]
 801742c:	8bbb      	ldrh	r3, [r7, #28]
 801742e:	4293      	cmp	r3, r2
 8017430:	bf28      	it	cs
 8017432:	4613      	movcs	r3, r2
 8017434:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017436:	797b      	ldrb	r3, [r7, #5]
 8017438:	f003 0301 	and.w	r3, r3, #1
 801743c:	2b00      	cmp	r3, #0
 801743e:	d036      	beq.n	80174ae <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017440:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017444:	b29a      	uxth	r2, r3
 8017446:	8b3b      	ldrh	r3, [r7, #24]
 8017448:	4413      	add	r3, r2
 801744a:	b299      	uxth	r1, r3
 801744c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801744e:	2b00      	cmp	r3, #0
 8017450:	bf0c      	ite	eq
 8017452:	2301      	moveq	r3, #1
 8017454:	2300      	movne	r3, #0
 8017456:	b2db      	uxtb	r3, r3
 8017458:	f107 0012 	add.w	r0, r7, #18
 801745c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801745e:	9302      	str	r3, [sp, #8]
 8017460:	797b      	ldrb	r3, [r7, #5]
 8017462:	9301      	str	r3, [sp, #4]
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	9300      	str	r3, [sp, #0]
 8017468:	4603      	mov	r3, r0
 801746a:	2036      	movs	r0, #54	; 0x36
 801746c:	f7ff fd5e 	bl	8016f2c <tcp_pbuf_prealloc>
 8017470:	6338      	str	r0, [r7, #48]	; 0x30
 8017472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017474:	2b00      	cmp	r3, #0
 8017476:	f000 8178 	beq.w	801776a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801747c:	895b      	ldrh	r3, [r3, #10]
 801747e:	8b3a      	ldrh	r2, [r7, #24]
 8017480:	429a      	cmp	r2, r3
 8017482:	d906      	bls.n	8017492 <tcp_write+0x37e>
 8017484:	4b8c      	ldr	r3, [pc, #560]	; (80176b8 <tcp_write+0x5a4>)
 8017486:	f240 2266 	movw	r2, #614	; 0x266
 801748a:	498c      	ldr	r1, [pc, #560]	; (80176bc <tcp_write+0x5a8>)
 801748c:	488c      	ldr	r0, [pc, #560]	; (80176c0 <tcp_write+0x5ac>)
 801748e:	f004 fce1 	bl	801be54 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017494:	685a      	ldr	r2, [r3, #4]
 8017496:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801749a:	18d0      	adds	r0, r2, r3
 801749c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80174a0:	68ba      	ldr	r2, [r7, #8]
 80174a2:	4413      	add	r3, r2
 80174a4:	8b3a      	ldrh	r2, [r7, #24]
 80174a6:	4619      	mov	r1, r3
 80174a8:	f004 fe45 	bl	801c136 <memcpy>
 80174ac:	e02f      	b.n	801750e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80174ae:	8a7b      	ldrh	r3, [r7, #18]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d006      	beq.n	80174c2 <tcp_write+0x3ae>
 80174b4:	4b80      	ldr	r3, [pc, #512]	; (80176b8 <tcp_write+0x5a4>)
 80174b6:	f240 2271 	movw	r2, #625	; 0x271
 80174ba:	4982      	ldr	r1, [pc, #520]	; (80176c4 <tcp_write+0x5b0>)
 80174bc:	4880      	ldr	r0, [pc, #512]	; (80176c0 <tcp_write+0x5ac>)
 80174be:	f004 fcc9 	bl	801be54 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80174c2:	8b3b      	ldrh	r3, [r7, #24]
 80174c4:	2201      	movs	r2, #1
 80174c6:	4619      	mov	r1, r3
 80174c8:	2036      	movs	r0, #54	; 0x36
 80174ca:	f7fa fc91 	bl	8011df0 <pbuf_alloc>
 80174ce:	6178      	str	r0, [r7, #20]
 80174d0:	697b      	ldr	r3, [r7, #20]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	f000 814b 	beq.w	801776e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80174d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80174dc:	68ba      	ldr	r2, [r7, #8]
 80174de:	441a      	add	r2, r3
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80174e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80174e8:	b29b      	uxth	r3, r3
 80174ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80174ee:	4619      	mov	r1, r3
 80174f0:	2036      	movs	r0, #54	; 0x36
 80174f2:	f7fa fc7d 	bl	8011df0 <pbuf_alloc>
 80174f6:	6338      	str	r0, [r7, #48]	; 0x30
 80174f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d103      	bne.n	8017506 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80174fe:	6978      	ldr	r0, [r7, #20]
 8017500:	f7fa ff5a 	bl	80123b8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017504:	e136      	b.n	8017774 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017506:	6979      	ldr	r1, [r7, #20]
 8017508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801750a:	f7fb f817 	bl	801253c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801750e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017510:	f7fa ffda 	bl	80124c8 <pbuf_clen>
 8017514:	4603      	mov	r3, r0
 8017516:	461a      	mov	r2, r3
 8017518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801751c:	4413      	add	r3, r2
 801751e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017522:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017526:	2b10      	cmp	r3, #16
 8017528:	d903      	bls.n	8017532 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801752a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801752c:	f7fa ff44 	bl	80123b8 <pbuf_free>
      goto memerr;
 8017530:	e120      	b.n	8017774 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017536:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801753a:	441a      	add	r2, r3
 801753c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017540:	9300      	str	r3, [sp, #0]
 8017542:	4613      	mov	r3, r2
 8017544:	2200      	movs	r2, #0
 8017546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017548:	68f8      	ldr	r0, [r7, #12]
 801754a:	f7ff fc51 	bl	8016df0 <tcp_create_segment>
 801754e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017552:	2b00      	cmp	r3, #0
 8017554:	f000 810d 	beq.w	8017772 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801755a:	2b00      	cmp	r3, #0
 801755c:	d102      	bne.n	8017564 <tcp_write+0x450>
      queue = seg;
 801755e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017560:	647b      	str	r3, [r7, #68]	; 0x44
 8017562:	e00c      	b.n	801757e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017566:	2b00      	cmp	r3, #0
 8017568:	d106      	bne.n	8017578 <tcp_write+0x464>
 801756a:	4b53      	ldr	r3, [pc, #332]	; (80176b8 <tcp_write+0x5a4>)
 801756c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017570:	4955      	ldr	r1, [pc, #340]	; (80176c8 <tcp_write+0x5b4>)
 8017572:	4853      	ldr	r0, [pc, #332]	; (80176c0 <tcp_write+0x5ac>)
 8017574:	f004 fc6e 	bl	801be54 <iprintf>
      prev_seg->next = seg;
 8017578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801757a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801757c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801757e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017580:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017582:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017586:	8b3b      	ldrh	r3, [r7, #24]
 8017588:	4413      	add	r3, r2
 801758a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801758e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017592:	88fb      	ldrh	r3, [r7, #6]
 8017594:	429a      	cmp	r2, r3
 8017596:	f4ff af3d 	bcc.w	8017414 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801759a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801759c:	2b00      	cmp	r3, #0
 801759e:	d02c      	beq.n	80175fa <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80175a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175a2:	685b      	ldr	r3, [r3, #4]
 80175a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175a6:	e01e      	b.n	80175e6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80175a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175aa:	891a      	ldrh	r2, [r3, #8]
 80175ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175ae:	4413      	add	r3, r2
 80175b0:	b29a      	uxth	r2, r3
 80175b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175b4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80175b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d110      	bne.n	80175e0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80175be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c0:	685b      	ldr	r3, [r3, #4]
 80175c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175c4:	8952      	ldrh	r2, [r2, #10]
 80175c6:	4413      	add	r3, r2
 80175c8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80175ca:	68b9      	ldr	r1, [r7, #8]
 80175cc:	4618      	mov	r0, r3
 80175ce:	f004 fdb2 	bl	801c136 <memcpy>
        p->len += oversize_used;
 80175d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d4:	895a      	ldrh	r2, [r3, #10]
 80175d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175d8:	4413      	add	r3, r2
 80175da:	b29a      	uxth	r2, r3
 80175dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175de:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80175e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d1dd      	bne.n	80175a8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80175ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175ee:	891a      	ldrh	r2, [r3, #8]
 80175f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175f2:	4413      	add	r3, r2
 80175f4:	b29a      	uxth	r2, r3
 80175f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80175f8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80175fa:	8a7a      	ldrh	r2, [r7, #18]
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017604:	2b00      	cmp	r3, #0
 8017606:	d018      	beq.n	801763a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801760a:	2b00      	cmp	r3, #0
 801760c:	d106      	bne.n	801761c <tcp_write+0x508>
 801760e:	4b2a      	ldr	r3, [pc, #168]	; (80176b8 <tcp_write+0x5a4>)
 8017610:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017614:	492d      	ldr	r1, [pc, #180]	; (80176cc <tcp_write+0x5b8>)
 8017616:	482a      	ldr	r0, [pc, #168]	; (80176c0 <tcp_write+0x5ac>)
 8017618:	f004 fc1c 	bl	801be54 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801761c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801761e:	685b      	ldr	r3, [r3, #4]
 8017620:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017622:	4618      	mov	r0, r3
 8017624:	f7fa ff8a 	bl	801253c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801762a:	891a      	ldrh	r2, [r3, #8]
 801762c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801762e:	891b      	ldrh	r3, [r3, #8]
 8017630:	4413      	add	r3, r2
 8017632:	b29a      	uxth	r2, r3
 8017634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017636:	811a      	strh	r2, [r3, #8]
 8017638:	e037      	b.n	80176aa <tcp_write+0x596>
  } else if (extendlen > 0) {
 801763a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801763c:	2b00      	cmp	r3, #0
 801763e:	d034      	beq.n	80176aa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017642:	2b00      	cmp	r3, #0
 8017644:	d003      	beq.n	801764e <tcp_write+0x53a>
 8017646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017648:	685b      	ldr	r3, [r3, #4]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d106      	bne.n	801765c <tcp_write+0x548>
 801764e:	4b1a      	ldr	r3, [pc, #104]	; (80176b8 <tcp_write+0x5a4>)
 8017650:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017654:	491e      	ldr	r1, [pc, #120]	; (80176d0 <tcp_write+0x5bc>)
 8017656:	481a      	ldr	r0, [pc, #104]	; (80176c0 <tcp_write+0x5ac>)
 8017658:	f004 fbfc 	bl	801be54 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801765c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801765e:	685b      	ldr	r3, [r3, #4]
 8017660:	62bb      	str	r3, [r7, #40]	; 0x28
 8017662:	e009      	b.n	8017678 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017666:	891a      	ldrh	r2, [r3, #8]
 8017668:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801766a:	4413      	add	r3, r2
 801766c:	b29a      	uxth	r2, r3
 801766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017670:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	62bb      	str	r3, [r7, #40]	; 0x28
 8017678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d1f1      	bne.n	8017664 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017682:	891a      	ldrh	r2, [r3, #8]
 8017684:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017686:	4413      	add	r3, r2
 8017688:	b29a      	uxth	r2, r3
 801768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017690:	895a      	ldrh	r2, [r3, #10]
 8017692:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017694:	4413      	add	r3, r2
 8017696:	b29a      	uxth	r2, r3
 8017698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801769a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801769c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801769e:	891a      	ldrh	r2, [r3, #8]
 80176a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80176a2:	4413      	add	r3, r2
 80176a4:	b29a      	uxth	r2, r3
 80176a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176a8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80176aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d111      	bne.n	80176d4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80176b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80176b6:	e010      	b.n	80176da <tcp_write+0x5c6>
 80176b8:	0801ea98 	.word	0x0801ea98
 80176bc:	0801ed38 	.word	0x0801ed38
 80176c0:	0801eaec 	.word	0x0801eaec
 80176c4:	0801ed78 	.word	0x0801ed78
 80176c8:	0801ed88 	.word	0x0801ed88
 80176cc:	0801ed9c 	.word	0x0801ed9c
 80176d0:	0801edd4 	.word	0x0801edd4
  } else {
    last_unsent->next = queue;
 80176d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80176d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80176d8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80176de:	88fb      	ldrh	r3, [r7, #6]
 80176e0:	441a      	add	r2, r3
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80176ec:	88fb      	ldrh	r3, [r7, #6]
 80176ee:	1ad3      	subs	r3, r2, r3
 80176f0:	b29a      	uxth	r2, r3
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80176fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017708:	2b00      	cmp	r3, #0
 801770a:	d00e      	beq.n	801772a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017710:	2b00      	cmp	r3, #0
 8017712:	d10a      	bne.n	801772a <tcp_write+0x616>
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017718:	2b00      	cmp	r3, #0
 801771a:	d106      	bne.n	801772a <tcp_write+0x616>
 801771c:	4b2c      	ldr	r3, [pc, #176]	; (80177d0 <tcp_write+0x6bc>)
 801771e:	f240 3212 	movw	r2, #786	; 0x312
 8017722:	492c      	ldr	r1, [pc, #176]	; (80177d4 <tcp_write+0x6c0>)
 8017724:	482c      	ldr	r0, [pc, #176]	; (80177d8 <tcp_write+0x6c4>)
 8017726:	f004 fb95 	bl	801be54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801772a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801772c:	2b00      	cmp	r3, #0
 801772e:	d016      	beq.n	801775e <tcp_write+0x64a>
 8017730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017732:	68db      	ldr	r3, [r3, #12]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d012      	beq.n	801775e <tcp_write+0x64a>
 8017738:	797b      	ldrb	r3, [r7, #5]
 801773a:	f003 0302 	and.w	r3, r3, #2
 801773e:	2b00      	cmp	r3, #0
 8017740:	d10d      	bne.n	801775e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017744:	68db      	ldr	r3, [r3, #12]
 8017746:	899b      	ldrh	r3, [r3, #12]
 8017748:	b29c      	uxth	r4, r3
 801774a:	2008      	movs	r0, #8
 801774c:	f7f9 fa6b 	bl	8010c26 <lwip_htons>
 8017750:	4603      	mov	r3, r0
 8017752:	461a      	mov	r2, r3
 8017754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017756:	68db      	ldr	r3, [r3, #12]
 8017758:	4322      	orrs	r2, r4
 801775a:	b292      	uxth	r2, r2
 801775c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801775e:	2300      	movs	r3, #0
 8017760:	e031      	b.n	80177c6 <tcp_write+0x6b2>
          goto memerr;
 8017762:	bf00      	nop
 8017764:	e006      	b.n	8017774 <tcp_write+0x660>
            goto memerr;
 8017766:	bf00      	nop
 8017768:	e004      	b.n	8017774 <tcp_write+0x660>
        goto memerr;
 801776a:	bf00      	nop
 801776c:	e002      	b.n	8017774 <tcp_write+0x660>
        goto memerr;
 801776e:	bf00      	nop
 8017770:	e000      	b.n	8017774 <tcp_write+0x660>
      goto memerr;
 8017772:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	8b5b      	ldrh	r3, [r3, #26]
 8017778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801777c:	b29a      	uxth	r2, r3
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017784:	2b00      	cmp	r3, #0
 8017786:	d002      	beq.n	801778e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017788:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801778a:	f7fa fe15 	bl	80123b8 <pbuf_free>
  }
  if (queue != NULL) {
 801778e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017790:	2b00      	cmp	r3, #0
 8017792:	d002      	beq.n	801779a <tcp_write+0x686>
    tcp_segs_free(queue);
 8017794:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017796:	f7fc fb53 	bl	8013e40 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d00e      	beq.n	80177c2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d10a      	bne.n	80177c2 <tcp_write+0x6ae>
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d106      	bne.n	80177c2 <tcp_write+0x6ae>
 80177b4:	4b06      	ldr	r3, [pc, #24]	; (80177d0 <tcp_write+0x6bc>)
 80177b6:	f240 3227 	movw	r2, #807	; 0x327
 80177ba:	4906      	ldr	r1, [pc, #24]	; (80177d4 <tcp_write+0x6c0>)
 80177bc:	4806      	ldr	r0, [pc, #24]	; (80177d8 <tcp_write+0x6c4>)
 80177be:	f004 fb49 	bl	801be54 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80177c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80177c6:	4618      	mov	r0, r3
 80177c8:	375c      	adds	r7, #92	; 0x5c
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd90      	pop	{r4, r7, pc}
 80177ce:	bf00      	nop
 80177d0:	0801ea98 	.word	0x0801ea98
 80177d4:	0801ee0c 	.word	0x0801ee0c
 80177d8:	0801eaec 	.word	0x0801eaec

080177dc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80177dc:	b590      	push	{r4, r7, lr}
 80177de:	b08b      	sub	sp, #44	; 0x2c
 80177e0:	af02      	add	r7, sp, #8
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	460b      	mov	r3, r1
 80177e6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80177e8:	2300      	movs	r3, #0
 80177ea:	61fb      	str	r3, [r7, #28]
 80177ec:	2300      	movs	r3, #0
 80177ee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80177f0:	2300      	movs	r3, #0
 80177f2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d106      	bne.n	8017808 <tcp_split_unsent_seg+0x2c>
 80177fa:	4b95      	ldr	r3, [pc, #596]	; (8017a50 <tcp_split_unsent_seg+0x274>)
 80177fc:	f240 324b 	movw	r2, #843	; 0x34b
 8017800:	4994      	ldr	r1, [pc, #592]	; (8017a54 <tcp_split_unsent_seg+0x278>)
 8017802:	4895      	ldr	r0, [pc, #596]	; (8017a58 <tcp_split_unsent_seg+0x27c>)
 8017804:	f004 fb26 	bl	801be54 <iprintf>

  useg = pcb->unsent;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801780c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801780e:	697b      	ldr	r3, [r7, #20]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d102      	bne.n	801781a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017814:	f04f 33ff 	mov.w	r3, #4294967295
 8017818:	e116      	b.n	8017a48 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801781a:	887b      	ldrh	r3, [r7, #2]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d109      	bne.n	8017834 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017820:	4b8b      	ldr	r3, [pc, #556]	; (8017a50 <tcp_split_unsent_seg+0x274>)
 8017822:	f240 3253 	movw	r2, #851	; 0x353
 8017826:	498d      	ldr	r1, [pc, #564]	; (8017a5c <tcp_split_unsent_seg+0x280>)
 8017828:	488b      	ldr	r0, [pc, #556]	; (8017a58 <tcp_split_unsent_seg+0x27c>)
 801782a:	f004 fb13 	bl	801be54 <iprintf>
    return ERR_VAL;
 801782e:	f06f 0305 	mvn.w	r3, #5
 8017832:	e109      	b.n	8017a48 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017834:	697b      	ldr	r3, [r7, #20]
 8017836:	891b      	ldrh	r3, [r3, #8]
 8017838:	887a      	ldrh	r2, [r7, #2]
 801783a:	429a      	cmp	r2, r3
 801783c:	d301      	bcc.n	8017842 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801783e:	2300      	movs	r3, #0
 8017840:	e102      	b.n	8017a48 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017846:	887a      	ldrh	r2, [r7, #2]
 8017848:	429a      	cmp	r2, r3
 801784a:	d906      	bls.n	801785a <tcp_split_unsent_seg+0x7e>
 801784c:	4b80      	ldr	r3, [pc, #512]	; (8017a50 <tcp_split_unsent_seg+0x274>)
 801784e:	f240 325b 	movw	r2, #859	; 0x35b
 8017852:	4983      	ldr	r1, [pc, #524]	; (8017a60 <tcp_split_unsent_seg+0x284>)
 8017854:	4880      	ldr	r0, [pc, #512]	; (8017a58 <tcp_split_unsent_seg+0x27c>)
 8017856:	f004 fafd 	bl	801be54 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	891b      	ldrh	r3, [r3, #8]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d106      	bne.n	8017870 <tcp_split_unsent_seg+0x94>
 8017862:	4b7b      	ldr	r3, [pc, #492]	; (8017a50 <tcp_split_unsent_seg+0x274>)
 8017864:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017868:	497e      	ldr	r1, [pc, #504]	; (8017a64 <tcp_split_unsent_seg+0x288>)
 801786a:	487b      	ldr	r0, [pc, #492]	; (8017a58 <tcp_split_unsent_seg+0x27c>)
 801786c:	f004 faf2 	bl	801be54 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017870:	697b      	ldr	r3, [r7, #20]
 8017872:	7a9b      	ldrb	r3, [r3, #10]
 8017874:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017876:	7bfb      	ldrb	r3, [r7, #15]
 8017878:	009b      	lsls	r3, r3, #2
 801787a:	b2db      	uxtb	r3, r3
 801787c:	f003 0304 	and.w	r3, r3, #4
 8017880:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017882:	697b      	ldr	r3, [r7, #20]
 8017884:	891a      	ldrh	r2, [r3, #8]
 8017886:	887b      	ldrh	r3, [r7, #2]
 8017888:	1ad3      	subs	r3, r2, r3
 801788a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801788c:	7bbb      	ldrb	r3, [r7, #14]
 801788e:	b29a      	uxth	r2, r3
 8017890:	89bb      	ldrh	r3, [r7, #12]
 8017892:	4413      	add	r3, r2
 8017894:	b29b      	uxth	r3, r3
 8017896:	f44f 7220 	mov.w	r2, #640	; 0x280
 801789a:	4619      	mov	r1, r3
 801789c:	2036      	movs	r0, #54	; 0x36
 801789e:	f7fa faa7 	bl	8011df0 <pbuf_alloc>
 80178a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80178a4:	693b      	ldr	r3, [r7, #16]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	f000 80b7 	beq.w	8017a1a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80178ac:	697b      	ldr	r3, [r7, #20]
 80178ae:	685b      	ldr	r3, [r3, #4]
 80178b0:	891a      	ldrh	r2, [r3, #8]
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	891b      	ldrh	r3, [r3, #8]
 80178b6:	1ad3      	subs	r3, r2, r3
 80178b8:	b29a      	uxth	r2, r3
 80178ba:	887b      	ldrh	r3, [r7, #2]
 80178bc:	4413      	add	r3, r2
 80178be:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80178c0:	697b      	ldr	r3, [r7, #20]
 80178c2:	6858      	ldr	r0, [r3, #4]
 80178c4:	693b      	ldr	r3, [r7, #16]
 80178c6:	685a      	ldr	r2, [r3, #4]
 80178c8:	7bbb      	ldrb	r3, [r7, #14]
 80178ca:	18d1      	adds	r1, r2, r3
 80178cc:	897b      	ldrh	r3, [r7, #10]
 80178ce:	89ba      	ldrh	r2, [r7, #12]
 80178d0:	f7fa ff6c 	bl	80127ac <pbuf_copy_partial>
 80178d4:	4603      	mov	r3, r0
 80178d6:	461a      	mov	r2, r3
 80178d8:	89bb      	ldrh	r3, [r7, #12]
 80178da:	4293      	cmp	r3, r2
 80178dc:	f040 809f 	bne.w	8017a1e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80178e0:	697b      	ldr	r3, [r7, #20]
 80178e2:	68db      	ldr	r3, [r3, #12]
 80178e4:	899b      	ldrh	r3, [r3, #12]
 80178e6:	b29b      	uxth	r3, r3
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7f9 f99c 	bl	8010c26 <lwip_htons>
 80178ee:	4603      	mov	r3, r0
 80178f0:	b2db      	uxtb	r3, r3
 80178f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80178f6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80178f8:	2300      	movs	r3, #0
 80178fa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80178fc:	7efb      	ldrb	r3, [r7, #27]
 80178fe:	f003 0308 	and.w	r3, r3, #8
 8017902:	2b00      	cmp	r3, #0
 8017904:	d007      	beq.n	8017916 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017906:	7efb      	ldrb	r3, [r7, #27]
 8017908:	f023 0308 	bic.w	r3, r3, #8
 801790c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801790e:	7ebb      	ldrb	r3, [r7, #26]
 8017910:	f043 0308 	orr.w	r3, r3, #8
 8017914:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017916:	7efb      	ldrb	r3, [r7, #27]
 8017918:	f003 0301 	and.w	r3, r3, #1
 801791c:	2b00      	cmp	r3, #0
 801791e:	d007      	beq.n	8017930 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017920:	7efb      	ldrb	r3, [r7, #27]
 8017922:	f023 0301 	bic.w	r3, r3, #1
 8017926:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017928:	7ebb      	ldrb	r3, [r7, #26]
 801792a:	f043 0301 	orr.w	r3, r3, #1
 801792e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017930:	697b      	ldr	r3, [r7, #20]
 8017932:	68db      	ldr	r3, [r3, #12]
 8017934:	685b      	ldr	r3, [r3, #4]
 8017936:	4618      	mov	r0, r3
 8017938:	f7f9 f98a 	bl	8010c50 <lwip_htonl>
 801793c:	4602      	mov	r2, r0
 801793e:	887b      	ldrh	r3, [r7, #2]
 8017940:	18d1      	adds	r1, r2, r3
 8017942:	7eba      	ldrb	r2, [r7, #26]
 8017944:	7bfb      	ldrb	r3, [r7, #15]
 8017946:	9300      	str	r3, [sp, #0]
 8017948:	460b      	mov	r3, r1
 801794a:	6939      	ldr	r1, [r7, #16]
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	f7ff fa4f 	bl	8016df0 <tcp_create_segment>
 8017952:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017954:	69fb      	ldr	r3, [r7, #28]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d063      	beq.n	8017a22 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801795a:	697b      	ldr	r3, [r7, #20]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	4618      	mov	r0, r3
 8017960:	f7fa fdb2 	bl	80124c8 <pbuf_clen>
 8017964:	4603      	mov	r3, r0
 8017966:	461a      	mov	r2, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801796e:	1a9b      	subs	r3, r3, r2
 8017970:	b29a      	uxth	r2, r3
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017978:	697b      	ldr	r3, [r7, #20]
 801797a:	6858      	ldr	r0, [r3, #4]
 801797c:	697b      	ldr	r3, [r7, #20]
 801797e:	685b      	ldr	r3, [r3, #4]
 8017980:	891a      	ldrh	r2, [r3, #8]
 8017982:	89bb      	ldrh	r3, [r7, #12]
 8017984:	1ad3      	subs	r3, r2, r3
 8017986:	b29b      	uxth	r3, r3
 8017988:	4619      	mov	r1, r3
 801798a:	f7fa fb8f 	bl	80120ac <pbuf_realloc>
  useg->len -= remainder;
 801798e:	697b      	ldr	r3, [r7, #20]
 8017990:	891a      	ldrh	r2, [r3, #8]
 8017992:	89bb      	ldrh	r3, [r7, #12]
 8017994:	1ad3      	subs	r3, r2, r3
 8017996:	b29a      	uxth	r2, r3
 8017998:	697b      	ldr	r3, [r7, #20]
 801799a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801799c:	697b      	ldr	r3, [r7, #20]
 801799e:	68db      	ldr	r3, [r3, #12]
 80179a0:	899b      	ldrh	r3, [r3, #12]
 80179a2:	b29c      	uxth	r4, r3
 80179a4:	7efb      	ldrb	r3, [r7, #27]
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7f9 f93c 	bl	8010c26 <lwip_htons>
 80179ae:	4603      	mov	r3, r0
 80179b0:	461a      	mov	r2, r3
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	68db      	ldr	r3, [r3, #12]
 80179b6:	4322      	orrs	r2, r4
 80179b8:	b292      	uxth	r2, r2
 80179ba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	685b      	ldr	r3, [r3, #4]
 80179c0:	4618      	mov	r0, r3
 80179c2:	f7fa fd81 	bl	80124c8 <pbuf_clen>
 80179c6:	4603      	mov	r3, r0
 80179c8:	461a      	mov	r2, r3
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80179d0:	4413      	add	r3, r2
 80179d2:	b29a      	uxth	r2, r3
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80179da:	69fb      	ldr	r3, [r7, #28]
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	4618      	mov	r0, r3
 80179e0:	f7fa fd72 	bl	80124c8 <pbuf_clen>
 80179e4:	4603      	mov	r3, r0
 80179e6:	461a      	mov	r2, r3
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80179ee:	4413      	add	r3, r2
 80179f0:	b29a      	uxth	r2, r3
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	681a      	ldr	r2, [r3, #0]
 80179fc:	69fb      	ldr	r3, [r7, #28]
 80179fe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	69fa      	ldr	r2, [r7, #28]
 8017a04:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017a06:	69fb      	ldr	r3, [r7, #28]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d103      	bne.n	8017a16 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	2200      	movs	r2, #0
 8017a12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017a16:	2300      	movs	r3, #0
 8017a18:	e016      	b.n	8017a48 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017a1a:	bf00      	nop
 8017a1c:	e002      	b.n	8017a24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017a1e:	bf00      	nop
 8017a20:	e000      	b.n	8017a24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017a22:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017a24:	69fb      	ldr	r3, [r7, #28]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d006      	beq.n	8017a38 <tcp_split_unsent_seg+0x25c>
 8017a2a:	4b09      	ldr	r3, [pc, #36]	; (8017a50 <tcp_split_unsent_seg+0x274>)
 8017a2c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017a30:	490d      	ldr	r1, [pc, #52]	; (8017a68 <tcp_split_unsent_seg+0x28c>)
 8017a32:	4809      	ldr	r0, [pc, #36]	; (8017a58 <tcp_split_unsent_seg+0x27c>)
 8017a34:	f004 fa0e 	bl	801be54 <iprintf>
  if (p != NULL) {
 8017a38:	693b      	ldr	r3, [r7, #16]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d002      	beq.n	8017a44 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8017a3e:	6938      	ldr	r0, [r7, #16]
 8017a40:	f7fa fcba 	bl	80123b8 <pbuf_free>
  }

  return ERR_MEM;
 8017a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	3724      	adds	r7, #36	; 0x24
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd90      	pop	{r4, r7, pc}
 8017a50:	0801ea98 	.word	0x0801ea98
 8017a54:	0801ee2c 	.word	0x0801ee2c
 8017a58:	0801eaec 	.word	0x0801eaec
 8017a5c:	0801ee50 	.word	0x0801ee50
 8017a60:	0801ee74 	.word	0x0801ee74
 8017a64:	0801ee84 	.word	0x0801ee84
 8017a68:	0801ee94 	.word	0x0801ee94

08017a6c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017a6c:	b590      	push	{r4, r7, lr}
 8017a6e:	b085      	sub	sp, #20
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d106      	bne.n	8017a88 <tcp_send_fin+0x1c>
 8017a7a:	4b21      	ldr	r3, [pc, #132]	; (8017b00 <tcp_send_fin+0x94>)
 8017a7c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017a80:	4920      	ldr	r1, [pc, #128]	; (8017b04 <tcp_send_fin+0x98>)
 8017a82:	4821      	ldr	r0, [pc, #132]	; (8017b08 <tcp_send_fin+0x9c>)
 8017a84:	f004 f9e6 	bl	801be54 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d02e      	beq.n	8017aee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a94:	60fb      	str	r3, [r7, #12]
 8017a96:	e002      	b.n	8017a9e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d1f8      	bne.n	8017a98 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	68db      	ldr	r3, [r3, #12]
 8017aaa:	899b      	ldrh	r3, [r3, #12]
 8017aac:	b29b      	uxth	r3, r3
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f7f9 f8b9 	bl	8010c26 <lwip_htons>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	b2db      	uxtb	r3, r3
 8017ab8:	f003 0307 	and.w	r3, r3, #7
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d116      	bne.n	8017aee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	68db      	ldr	r3, [r3, #12]
 8017ac4:	899b      	ldrh	r3, [r3, #12]
 8017ac6:	b29c      	uxth	r4, r3
 8017ac8:	2001      	movs	r0, #1
 8017aca:	f7f9 f8ac 	bl	8010c26 <lwip_htons>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	461a      	mov	r2, r3
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	68db      	ldr	r3, [r3, #12]
 8017ad6:	4322      	orrs	r2, r4
 8017ad8:	b292      	uxth	r2, r2
 8017ada:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	8b5b      	ldrh	r3, [r3, #26]
 8017ae0:	f043 0320 	orr.w	r3, r3, #32
 8017ae4:	b29a      	uxth	r2, r3
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017aea:	2300      	movs	r3, #0
 8017aec:	e004      	b.n	8017af8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017aee:	2101      	movs	r1, #1
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f000 f80b 	bl	8017b0c <tcp_enqueue_flags>
 8017af6:	4603      	mov	r3, r0
}
 8017af8:	4618      	mov	r0, r3
 8017afa:	3714      	adds	r7, #20
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd90      	pop	{r4, r7, pc}
 8017b00:	0801ea98 	.word	0x0801ea98
 8017b04:	0801eea0 	.word	0x0801eea0
 8017b08:	0801eaec 	.word	0x0801eaec

08017b0c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b08a      	sub	sp, #40	; 0x28
 8017b10:	af02      	add	r7, sp, #8
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	460b      	mov	r3, r1
 8017b16:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017b18:	2300      	movs	r3, #0
 8017b1a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017b20:	78fb      	ldrb	r3, [r7, #3]
 8017b22:	f003 0303 	and.w	r3, r3, #3
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d106      	bne.n	8017b38 <tcp_enqueue_flags+0x2c>
 8017b2a:	4b67      	ldr	r3, [pc, #412]	; (8017cc8 <tcp_enqueue_flags+0x1bc>)
 8017b2c:	f240 4211 	movw	r2, #1041	; 0x411
 8017b30:	4966      	ldr	r1, [pc, #408]	; (8017ccc <tcp_enqueue_flags+0x1c0>)
 8017b32:	4867      	ldr	r0, [pc, #412]	; (8017cd0 <tcp_enqueue_flags+0x1c4>)
 8017b34:	f004 f98e 	bl	801be54 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d106      	bne.n	8017b4c <tcp_enqueue_flags+0x40>
 8017b3e:	4b62      	ldr	r3, [pc, #392]	; (8017cc8 <tcp_enqueue_flags+0x1bc>)
 8017b40:	f240 4213 	movw	r2, #1043	; 0x413
 8017b44:	4963      	ldr	r1, [pc, #396]	; (8017cd4 <tcp_enqueue_flags+0x1c8>)
 8017b46:	4862      	ldr	r0, [pc, #392]	; (8017cd0 <tcp_enqueue_flags+0x1c4>)
 8017b48:	f004 f984 	bl	801be54 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8017b4c:	78fb      	ldrb	r3, [r7, #3]
 8017b4e:	f003 0302 	and.w	r3, r3, #2
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d001      	beq.n	8017b5a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017b56:	2301      	movs	r3, #1
 8017b58:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017b5a:	7ffb      	ldrb	r3, [r7, #31]
 8017b5c:	009b      	lsls	r3, r3, #2
 8017b5e:	b2db      	uxtb	r3, r3
 8017b60:	f003 0304 	and.w	r3, r3, #4
 8017b64:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017b66:	7dfb      	ldrb	r3, [r7, #23]
 8017b68:	b29b      	uxth	r3, r3
 8017b6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b6e:	4619      	mov	r1, r3
 8017b70:	2036      	movs	r0, #54	; 0x36
 8017b72:	f7fa f93d 	bl	8011df0 <pbuf_alloc>
 8017b76:	6138      	str	r0, [r7, #16]
 8017b78:	693b      	ldr	r3, [r7, #16]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d109      	bne.n	8017b92 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	8b5b      	ldrh	r3, [r3, #26]
 8017b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b86:	b29a      	uxth	r2, r3
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b90:	e095      	b.n	8017cbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017b92:	693b      	ldr	r3, [r7, #16]
 8017b94:	895a      	ldrh	r2, [r3, #10]
 8017b96:	7dfb      	ldrb	r3, [r7, #23]
 8017b98:	b29b      	uxth	r3, r3
 8017b9a:	429a      	cmp	r2, r3
 8017b9c:	d206      	bcs.n	8017bac <tcp_enqueue_flags+0xa0>
 8017b9e:	4b4a      	ldr	r3, [pc, #296]	; (8017cc8 <tcp_enqueue_flags+0x1bc>)
 8017ba0:	f240 4239 	movw	r2, #1081	; 0x439
 8017ba4:	494c      	ldr	r1, [pc, #304]	; (8017cd8 <tcp_enqueue_flags+0x1cc>)
 8017ba6:	484a      	ldr	r0, [pc, #296]	; (8017cd0 <tcp_enqueue_flags+0x1c4>)
 8017ba8:	f004 f954 	bl	801be54 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017bb0:	78fa      	ldrb	r2, [r7, #3]
 8017bb2:	7ffb      	ldrb	r3, [r7, #31]
 8017bb4:	9300      	str	r3, [sp, #0]
 8017bb6:	460b      	mov	r3, r1
 8017bb8:	6939      	ldr	r1, [r7, #16]
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	f7ff f918 	bl	8016df0 <tcp_create_segment>
 8017bc0:	60f8      	str	r0, [r7, #12]
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d109      	bne.n	8017bdc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	8b5b      	ldrh	r3, [r3, #26]
 8017bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bd0:	b29a      	uxth	r2, r3
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8017bda:	e070      	b.n	8017cbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	68db      	ldr	r3, [r3, #12]
 8017be0:	f003 0303 	and.w	r3, r3, #3
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d006      	beq.n	8017bf6 <tcp_enqueue_flags+0xea>
 8017be8:	4b37      	ldr	r3, [pc, #220]	; (8017cc8 <tcp_enqueue_flags+0x1bc>)
 8017bea:	f240 4242 	movw	r2, #1090	; 0x442
 8017bee:	493b      	ldr	r1, [pc, #236]	; (8017cdc <tcp_enqueue_flags+0x1d0>)
 8017bf0:	4837      	ldr	r0, [pc, #220]	; (8017cd0 <tcp_enqueue_flags+0x1c4>)
 8017bf2:	f004 f92f 	bl	801be54 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	891b      	ldrh	r3, [r3, #8]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d006      	beq.n	8017c0c <tcp_enqueue_flags+0x100>
 8017bfe:	4b32      	ldr	r3, [pc, #200]	; (8017cc8 <tcp_enqueue_flags+0x1bc>)
 8017c00:	f240 4243 	movw	r2, #1091	; 0x443
 8017c04:	4936      	ldr	r1, [pc, #216]	; (8017ce0 <tcp_enqueue_flags+0x1d4>)
 8017c06:	4832      	ldr	r0, [pc, #200]	; (8017cd0 <tcp_enqueue_flags+0x1c4>)
 8017c08:	f004 f924 	bl	801be54 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d103      	bne.n	8017c1c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	68fa      	ldr	r2, [r7, #12]
 8017c18:	66da      	str	r2, [r3, #108]	; 0x6c
 8017c1a:	e00d      	b.n	8017c38 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c20:	61bb      	str	r3, [r7, #24]
 8017c22:	e002      	b.n	8017c2a <tcp_enqueue_flags+0x11e>
 8017c24:	69bb      	ldr	r3, [r7, #24]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	61bb      	str	r3, [r7, #24]
 8017c2a:	69bb      	ldr	r3, [r7, #24]
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d1f8      	bne.n	8017c24 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017c32:	69bb      	ldr	r3, [r7, #24]
 8017c34:	68fa      	ldr	r2, [r7, #12]
 8017c36:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017c40:	78fb      	ldrb	r3, [r7, #3]
 8017c42:	f003 0302 	and.w	r3, r3, #2
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d104      	bne.n	8017c54 <tcp_enqueue_flags+0x148>
 8017c4a:	78fb      	ldrb	r3, [r7, #3]
 8017c4c:	f003 0301 	and.w	r3, r3, #1
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d004      	beq.n	8017c5e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017c58:	1c5a      	adds	r2, r3, #1
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017c5e:	78fb      	ldrb	r3, [r7, #3]
 8017c60:	f003 0301 	and.w	r3, r3, #1
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d006      	beq.n	8017c76 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	8b5b      	ldrh	r3, [r3, #26]
 8017c6c:	f043 0320 	orr.w	r3, r3, #32
 8017c70:	b29a      	uxth	r2, r3
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	685b      	ldr	r3, [r3, #4]
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f7fa fc24 	bl	80124c8 <pbuf_clen>
 8017c80:	4603      	mov	r3, r0
 8017c82:	461a      	mov	r2, r3
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c8a:	4413      	add	r3, r2
 8017c8c:	b29a      	uxth	r2, r3
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d00e      	beq.n	8017cbc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d10a      	bne.n	8017cbc <tcp_enqueue_flags+0x1b0>
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d106      	bne.n	8017cbc <tcp_enqueue_flags+0x1b0>
 8017cae:	4b06      	ldr	r3, [pc, #24]	; (8017cc8 <tcp_enqueue_flags+0x1bc>)
 8017cb0:	f240 4265 	movw	r2, #1125	; 0x465
 8017cb4:	490b      	ldr	r1, [pc, #44]	; (8017ce4 <tcp_enqueue_flags+0x1d8>)
 8017cb6:	4806      	ldr	r0, [pc, #24]	; (8017cd0 <tcp_enqueue_flags+0x1c4>)
 8017cb8:	f004 f8cc 	bl	801be54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017cbc:	2300      	movs	r3, #0
}
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	3720      	adds	r7, #32
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}
 8017cc6:	bf00      	nop
 8017cc8:	0801ea98 	.word	0x0801ea98
 8017ccc:	0801eebc 	.word	0x0801eebc
 8017cd0:	0801eaec 	.word	0x0801eaec
 8017cd4:	0801ef14 	.word	0x0801ef14
 8017cd8:	0801ef34 	.word	0x0801ef34
 8017cdc:	0801ef70 	.word	0x0801ef70
 8017ce0:	0801ef88 	.word	0x0801ef88
 8017ce4:	0801efb4 	.word	0x0801efb4

08017ce8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017ce8:	b5b0      	push	{r4, r5, r7, lr}
 8017cea:	b08a      	sub	sp, #40	; 0x28
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d106      	bne.n	8017d04 <tcp_output+0x1c>
 8017cf6:	4b8a      	ldr	r3, [pc, #552]	; (8017f20 <tcp_output+0x238>)
 8017cf8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017cfc:	4989      	ldr	r1, [pc, #548]	; (8017f24 <tcp_output+0x23c>)
 8017cfe:	488a      	ldr	r0, [pc, #552]	; (8017f28 <tcp_output+0x240>)
 8017d00:	f004 f8a8 	bl	801be54 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	7d1b      	ldrb	r3, [r3, #20]
 8017d08:	2b01      	cmp	r3, #1
 8017d0a:	d106      	bne.n	8017d1a <tcp_output+0x32>
 8017d0c:	4b84      	ldr	r3, [pc, #528]	; (8017f20 <tcp_output+0x238>)
 8017d0e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017d12:	4986      	ldr	r1, [pc, #536]	; (8017f2c <tcp_output+0x244>)
 8017d14:	4884      	ldr	r0, [pc, #528]	; (8017f28 <tcp_output+0x240>)
 8017d16:	f004 f89d 	bl	801be54 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017d1a:	4b85      	ldr	r3, [pc, #532]	; (8017f30 <tcp_output+0x248>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	687a      	ldr	r2, [r7, #4]
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d101      	bne.n	8017d28 <tcp_output+0x40>
    return ERR_OK;
 8017d24:	2300      	movs	r3, #0
 8017d26:	e1ce      	b.n	80180c6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d34:	4293      	cmp	r3, r2
 8017d36:	bf28      	it	cs
 8017d38:	4613      	movcs	r3, r2
 8017d3a:	b29b      	uxth	r3, r3
 8017d3c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d42:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8017d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d10b      	bne.n	8017d62 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	8b5b      	ldrh	r3, [r3, #26]
 8017d4e:	f003 0302 	and.w	r3, r3, #2
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	f000 81aa 	beq.w	80180ac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017d58:	6878      	ldr	r0, [r7, #4]
 8017d5a:	f000 fdcb 	bl	80188f4 <tcp_send_empty_ack>
 8017d5e:	4603      	mov	r3, r0
 8017d60:	e1b1      	b.n	80180c6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017d62:	6879      	ldr	r1, [r7, #4]
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	3304      	adds	r3, #4
 8017d68:	461a      	mov	r2, r3
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f7ff f824 	bl	8016db8 <tcp_route>
 8017d70:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017d72:	697b      	ldr	r3, [r7, #20]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d102      	bne.n	8017d7e <tcp_output+0x96>
    return ERR_RTE;
 8017d78:	f06f 0303 	mvn.w	r3, #3
 8017d7c:	e1a3      	b.n	80180c6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d003      	beq.n	8017d8c <tcp_output+0xa4>
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d111      	bne.n	8017db0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017d8c:	697b      	ldr	r3, [r7, #20]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d002      	beq.n	8017d98 <tcp_output+0xb0>
 8017d92:	697b      	ldr	r3, [r7, #20]
 8017d94:	3304      	adds	r3, #4
 8017d96:	e000      	b.n	8017d9a <tcp_output+0xb2>
 8017d98:	2300      	movs	r3, #0
 8017d9a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017d9c:	693b      	ldr	r3, [r7, #16]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d102      	bne.n	8017da8 <tcp_output+0xc0>
      return ERR_RTE;
 8017da2:	f06f 0303 	mvn.w	r3, #3
 8017da6:	e18e      	b.n	80180c6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017da8:	693b      	ldr	r3, [r7, #16]
 8017daa:	681a      	ldr	r2, [r3, #0]
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017db2:	68db      	ldr	r3, [r3, #12]
 8017db4:	685b      	ldr	r3, [r3, #4]
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7f8 ff4a 	bl	8010c50 <lwip_htonl>
 8017dbc:	4602      	mov	r2, r0
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dc2:	1ad3      	subs	r3, r2, r3
 8017dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017dc6:	8912      	ldrh	r2, [r2, #8]
 8017dc8:	4413      	add	r3, r2
 8017dca:	69ba      	ldr	r2, [r7, #24]
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	d227      	bcs.n	8017e20 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017dd6:	461a      	mov	r2, r3
 8017dd8:	69bb      	ldr	r3, [r7, #24]
 8017dda:	4293      	cmp	r3, r2
 8017ddc:	d114      	bne.n	8017e08 <tcp_output+0x120>
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d110      	bne.n	8017e08 <tcp_output+0x120>
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d10b      	bne.n	8017e08 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2200      	movs	r2, #0
 8017df4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2201      	movs	r2, #1
 8017dfc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	2200      	movs	r2, #0
 8017e04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	8b5b      	ldrh	r3, [r3, #26]
 8017e0c:	f003 0302 	and.w	r3, r3, #2
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	f000 814d 	beq.w	80180b0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f000 fd6c 	bl	80188f4 <tcp_send_empty_ack>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	e152      	b.n	80180c6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	2200      	movs	r2, #0
 8017e24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e2c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017e2e:	6a3b      	ldr	r3, [r7, #32]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	f000 811c 	beq.w	801806e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017e36:	e002      	b.n	8017e3e <tcp_output+0x156>
 8017e38:	6a3b      	ldr	r3, [r7, #32]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	623b      	str	r3, [r7, #32]
 8017e3e:	6a3b      	ldr	r3, [r7, #32]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d1f8      	bne.n	8017e38 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017e46:	e112      	b.n	801806e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4a:	68db      	ldr	r3, [r3, #12]
 8017e4c:	899b      	ldrh	r3, [r3, #12]
 8017e4e:	b29b      	uxth	r3, r3
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7f8 fee8 	bl	8010c26 <lwip_htons>
 8017e56:	4603      	mov	r3, r0
 8017e58:	b2db      	uxtb	r3, r3
 8017e5a:	f003 0304 	and.w	r3, r3, #4
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d006      	beq.n	8017e70 <tcp_output+0x188>
 8017e62:	4b2f      	ldr	r3, [pc, #188]	; (8017f20 <tcp_output+0x238>)
 8017e64:	f240 5236 	movw	r2, #1334	; 0x536
 8017e68:	4932      	ldr	r1, [pc, #200]	; (8017f34 <tcp_output+0x24c>)
 8017e6a:	482f      	ldr	r0, [pc, #188]	; (8017f28 <tcp_output+0x240>)
 8017e6c:	f003 fff2 	bl	801be54 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d01f      	beq.n	8017eb8 <tcp_output+0x1d0>
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	8b5b      	ldrh	r3, [r3, #26]
 8017e7c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d119      	bne.n	8017eb8 <tcp_output+0x1d0>
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d00b      	beq.n	8017ea4 <tcp_output+0x1bc>
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d110      	bne.n	8017eb8 <tcp_output+0x1d0>
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e9a:	891a      	ldrh	r2, [r3, #8]
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	d209      	bcs.n	8017eb8 <tcp_output+0x1d0>
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d004      	beq.n	8017eb8 <tcp_output+0x1d0>
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017eb4:	2b0f      	cmp	r3, #15
 8017eb6:	d901      	bls.n	8017ebc <tcp_output+0x1d4>
 8017eb8:	2301      	movs	r3, #1
 8017eba:	e000      	b.n	8017ebe <tcp_output+0x1d6>
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d106      	bne.n	8017ed0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	8b5b      	ldrh	r3, [r3, #26]
 8017ec6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	f000 80e4 	beq.w	8018098 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	7d1b      	ldrb	r3, [r3, #20]
 8017ed4:	2b02      	cmp	r3, #2
 8017ed6:	d00d      	beq.n	8017ef4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eda:	68db      	ldr	r3, [r3, #12]
 8017edc:	899b      	ldrh	r3, [r3, #12]
 8017ede:	b29c      	uxth	r4, r3
 8017ee0:	2010      	movs	r0, #16
 8017ee2:	f7f8 fea0 	bl	8010c26 <lwip_htons>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	461a      	mov	r2, r3
 8017eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eec:	68db      	ldr	r3, [r3, #12]
 8017eee:	4322      	orrs	r2, r4
 8017ef0:	b292      	uxth	r2, r2
 8017ef2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017ef4:	697a      	ldr	r2, [r7, #20]
 8017ef6:	6879      	ldr	r1, [r7, #4]
 8017ef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017efa:	f000 f909 	bl	8018110 <tcp_output_segment>
 8017efe:	4603      	mov	r3, r0
 8017f00:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d016      	beq.n	8017f38 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	8b5b      	ldrh	r3, [r3, #26]
 8017f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f12:	b29a      	uxth	r2, r3
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	835a      	strh	r2, [r3, #26]
      return err;
 8017f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f1c:	e0d3      	b.n	80180c6 <tcp_output+0x3de>
 8017f1e:	bf00      	nop
 8017f20:	0801ea98 	.word	0x0801ea98
 8017f24:	0801efdc 	.word	0x0801efdc
 8017f28:	0801eaec 	.word	0x0801eaec
 8017f2c:	0801eff4 	.word	0x0801eff4
 8017f30:	2000b030 	.word	0x2000b030
 8017f34:	0801f01c 	.word	0x0801f01c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f3a:	681a      	ldr	r2, [r3, #0]
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	7d1b      	ldrb	r3, [r3, #20]
 8017f44:	2b02      	cmp	r3, #2
 8017f46:	d006      	beq.n	8017f56 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	8b5b      	ldrh	r3, [r3, #26]
 8017f4c:	f023 0303 	bic.w	r3, r3, #3
 8017f50:	b29a      	uxth	r2, r3
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f58:	68db      	ldr	r3, [r3, #12]
 8017f5a:	685b      	ldr	r3, [r3, #4]
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f7f8 fe77 	bl	8010c50 <lwip_htonl>
 8017f62:	4604      	mov	r4, r0
 8017f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f66:	891b      	ldrh	r3, [r3, #8]
 8017f68:	461d      	mov	r5, r3
 8017f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f6c:	68db      	ldr	r3, [r3, #12]
 8017f6e:	899b      	ldrh	r3, [r3, #12]
 8017f70:	b29b      	uxth	r3, r3
 8017f72:	4618      	mov	r0, r3
 8017f74:	f7f8 fe57 	bl	8010c26 <lwip_htons>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	b2db      	uxtb	r3, r3
 8017f7c:	f003 0303 	and.w	r3, r3, #3
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d001      	beq.n	8017f88 <tcp_output+0x2a0>
 8017f84:	2301      	movs	r3, #1
 8017f86:	e000      	b.n	8017f8a <tcp_output+0x2a2>
 8017f88:	2300      	movs	r3, #0
 8017f8a:	442b      	add	r3, r5
 8017f8c:	4423      	add	r3, r4
 8017f8e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	1ad3      	subs	r3, r2, r3
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	da02      	bge.n	8017fa2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	68ba      	ldr	r2, [r7, #8]
 8017fa0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa4:	891b      	ldrh	r3, [r3, #8]
 8017fa6:	461c      	mov	r4, r3
 8017fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017faa:	68db      	ldr	r3, [r3, #12]
 8017fac:	899b      	ldrh	r3, [r3, #12]
 8017fae:	b29b      	uxth	r3, r3
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f7f8 fe38 	bl	8010c26 <lwip_htons>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	b2db      	uxtb	r3, r3
 8017fba:	f003 0303 	and.w	r3, r3, #3
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d001      	beq.n	8017fc6 <tcp_output+0x2de>
 8017fc2:	2301      	movs	r3, #1
 8017fc4:	e000      	b.n	8017fc8 <tcp_output+0x2e0>
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	4423      	add	r3, r4
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d049      	beq.n	8018062 <tcp_output+0x37a>
      seg->next = NULL;
 8017fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d105      	bne.n	8017fe8 <tcp_output+0x300>
        pcb->unacked = seg;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017fe0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe4:	623b      	str	r3, [r7, #32]
 8017fe6:	e03f      	b.n	8018068 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fea:	68db      	ldr	r3, [r3, #12]
 8017fec:	685b      	ldr	r3, [r3, #4]
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f7f8 fe2e 	bl	8010c50 <lwip_htonl>
 8017ff4:	4604      	mov	r4, r0
 8017ff6:	6a3b      	ldr	r3, [r7, #32]
 8017ff8:	68db      	ldr	r3, [r3, #12]
 8017ffa:	685b      	ldr	r3, [r3, #4]
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f7f8 fe27 	bl	8010c50 <lwip_htonl>
 8018002:	4603      	mov	r3, r0
 8018004:	1ae3      	subs	r3, r4, r3
 8018006:	2b00      	cmp	r3, #0
 8018008:	da24      	bge.n	8018054 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	3370      	adds	r3, #112	; 0x70
 801800e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018010:	e002      	b.n	8018018 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018018:	69fb      	ldr	r3, [r7, #28]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d011      	beq.n	8018044 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018020:	69fb      	ldr	r3, [r7, #28]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	68db      	ldr	r3, [r3, #12]
 8018026:	685b      	ldr	r3, [r3, #4]
 8018028:	4618      	mov	r0, r3
 801802a:	f7f8 fe11 	bl	8010c50 <lwip_htonl>
 801802e:	4604      	mov	r4, r0
 8018030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018032:	68db      	ldr	r3, [r3, #12]
 8018034:	685b      	ldr	r3, [r3, #4]
 8018036:	4618      	mov	r0, r3
 8018038:	f7f8 fe0a 	bl	8010c50 <lwip_htonl>
 801803c:	4603      	mov	r3, r0
 801803e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018040:	2b00      	cmp	r3, #0
 8018042:	dbe6      	blt.n	8018012 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018044:	69fb      	ldr	r3, [r7, #28]
 8018046:	681a      	ldr	r2, [r3, #0]
 8018048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801804a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801804c:	69fb      	ldr	r3, [r7, #28]
 801804e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018050:	601a      	str	r2, [r3, #0]
 8018052:	e009      	b.n	8018068 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018054:	6a3b      	ldr	r3, [r7, #32]
 8018056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018058:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801805a:	6a3b      	ldr	r3, [r7, #32]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	623b      	str	r3, [r7, #32]
 8018060:	e002      	b.n	8018068 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018064:	f7fb ff01 	bl	8013e6a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801806c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018070:	2b00      	cmp	r3, #0
 8018072:	d012      	beq.n	801809a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018076:	68db      	ldr	r3, [r3, #12]
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	4618      	mov	r0, r3
 801807c:	f7f8 fde8 	bl	8010c50 <lwip_htonl>
 8018080:	4602      	mov	r2, r0
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018086:	1ad3      	subs	r3, r2, r3
 8018088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801808a:	8912      	ldrh	r2, [r2, #8]
 801808c:	4413      	add	r3, r2
  while (seg != NULL &&
 801808e:	69ba      	ldr	r2, [r7, #24]
 8018090:	429a      	cmp	r2, r3
 8018092:	f4bf aed9 	bcs.w	8017e48 <tcp_output+0x160>
 8018096:	e000      	b.n	801809a <tcp_output+0x3b2>
      break;
 8018098:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d108      	bne.n	80180b4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2200      	movs	r2, #0
 80180a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80180aa:	e004      	b.n	80180b6 <tcp_output+0x3ce>
    goto output_done;
 80180ac:	bf00      	nop
 80180ae:	e002      	b.n	80180b6 <tcp_output+0x3ce>
    goto output_done;
 80180b0:	bf00      	nop
 80180b2:	e000      	b.n	80180b6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80180b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	8b5b      	ldrh	r3, [r3, #26]
 80180ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80180be:	b29a      	uxth	r2, r3
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80180c4:	2300      	movs	r3, #0
}
 80180c6:	4618      	mov	r0, r3
 80180c8:	3728      	adds	r7, #40	; 0x28
 80180ca:	46bd      	mov	sp, r7
 80180cc:	bdb0      	pop	{r4, r5, r7, pc}
 80180ce:	bf00      	nop

080180d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b082      	sub	sp, #8
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d106      	bne.n	80180ec <tcp_output_segment_busy+0x1c>
 80180de:	4b09      	ldr	r3, [pc, #36]	; (8018104 <tcp_output_segment_busy+0x34>)
 80180e0:	f240 529a 	movw	r2, #1434	; 0x59a
 80180e4:	4908      	ldr	r1, [pc, #32]	; (8018108 <tcp_output_segment_busy+0x38>)
 80180e6:	4809      	ldr	r0, [pc, #36]	; (801810c <tcp_output_segment_busy+0x3c>)
 80180e8:	f003 feb4 	bl	801be54 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	685b      	ldr	r3, [r3, #4]
 80180f0:	7b9b      	ldrb	r3, [r3, #14]
 80180f2:	2b01      	cmp	r3, #1
 80180f4:	d001      	beq.n	80180fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80180f6:	2301      	movs	r3, #1
 80180f8:	e000      	b.n	80180fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80180fa:	2300      	movs	r3, #0
}
 80180fc:	4618      	mov	r0, r3
 80180fe:	3708      	adds	r7, #8
 8018100:	46bd      	mov	sp, r7
 8018102:	bd80      	pop	{r7, pc}
 8018104:	0801ea98 	.word	0x0801ea98
 8018108:	0801f034 	.word	0x0801f034
 801810c:	0801eaec 	.word	0x0801eaec

08018110 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018110:	b5b0      	push	{r4, r5, r7, lr}
 8018112:	b08c      	sub	sp, #48	; 0x30
 8018114:	af04      	add	r7, sp, #16
 8018116:	60f8      	str	r0, [r7, #12]
 8018118:	60b9      	str	r1, [r7, #8]
 801811a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	2b00      	cmp	r3, #0
 8018120:	d106      	bne.n	8018130 <tcp_output_segment+0x20>
 8018122:	4b64      	ldr	r3, [pc, #400]	; (80182b4 <tcp_output_segment+0x1a4>)
 8018124:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018128:	4963      	ldr	r1, [pc, #396]	; (80182b8 <tcp_output_segment+0x1a8>)
 801812a:	4864      	ldr	r0, [pc, #400]	; (80182bc <tcp_output_segment+0x1ac>)
 801812c:	f003 fe92 	bl	801be54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018130:	68bb      	ldr	r3, [r7, #8]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d106      	bne.n	8018144 <tcp_output_segment+0x34>
 8018136:	4b5f      	ldr	r3, [pc, #380]	; (80182b4 <tcp_output_segment+0x1a4>)
 8018138:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801813c:	4960      	ldr	r1, [pc, #384]	; (80182c0 <tcp_output_segment+0x1b0>)
 801813e:	485f      	ldr	r0, [pc, #380]	; (80182bc <tcp_output_segment+0x1ac>)
 8018140:	f003 fe88 	bl	801be54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d106      	bne.n	8018158 <tcp_output_segment+0x48>
 801814a:	4b5a      	ldr	r3, [pc, #360]	; (80182b4 <tcp_output_segment+0x1a4>)
 801814c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018150:	495c      	ldr	r1, [pc, #368]	; (80182c4 <tcp_output_segment+0x1b4>)
 8018152:	485a      	ldr	r0, [pc, #360]	; (80182bc <tcp_output_segment+0x1ac>)
 8018154:	f003 fe7e 	bl	801be54 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018158:	68f8      	ldr	r0, [r7, #12]
 801815a:	f7ff ffb9 	bl	80180d0 <tcp_output_segment_busy>
 801815e:	4603      	mov	r3, r0
 8018160:	2b00      	cmp	r3, #0
 8018162:	d001      	beq.n	8018168 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018164:	2300      	movs	r3, #0
 8018166:	e0a1      	b.n	80182ac <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	68dc      	ldr	r4, [r3, #12]
 8018170:	4610      	mov	r0, r2
 8018172:	f7f8 fd6d 	bl	8010c50 <lwip_htonl>
 8018176:	4603      	mov	r3, r0
 8018178:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	68dc      	ldr	r4, [r3, #12]
 8018182:	4610      	mov	r0, r2
 8018184:	f7f8 fd4f 	bl	8010c26 <lwip_htons>
 8018188:	4603      	mov	r3, r0
 801818a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801818c:	68bb      	ldr	r3, [r7, #8]
 801818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018190:	68ba      	ldr	r2, [r7, #8]
 8018192:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018194:	441a      	add	r2, r3
 8018196:	68bb      	ldr	r3, [r7, #8]
 8018198:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	68db      	ldr	r3, [r3, #12]
 801819e:	3314      	adds	r3, #20
 80181a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	7a9b      	ldrb	r3, [r3, #10]
 80181a6:	f003 0301 	and.w	r3, r3, #1
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d015      	beq.n	80181da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80181ae:	68bb      	ldr	r3, [r7, #8]
 80181b0:	3304      	adds	r3, #4
 80181b2:	461a      	mov	r2, r3
 80181b4:	6879      	ldr	r1, [r7, #4]
 80181b6:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80181ba:	f7fc fa33 	bl	8014624 <tcp_eff_send_mss_netif>
 80181be:	4603      	mov	r3, r0
 80181c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80181c2:	8b7b      	ldrh	r3, [r7, #26]
 80181c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7f8 fd41 	bl	8010c50 <lwip_htonl>
 80181ce:	4602      	mov	r2, r0
 80181d0:	69fb      	ldr	r3, [r7, #28]
 80181d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80181d4:	69fb      	ldr	r3, [r7, #28]
 80181d6:	3304      	adds	r3, #4
 80181d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80181da:	68bb      	ldr	r3, [r7, #8]
 80181dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	da02      	bge.n	80181ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80181e4:	68bb      	ldr	r3, [r7, #8]
 80181e6:	2200      	movs	r2, #0
 80181e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80181ea:	68bb      	ldr	r3, [r7, #8]
 80181ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d10c      	bne.n	801820c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80181f2:	4b35      	ldr	r3, [pc, #212]	; (80182c8 <tcp_output_segment+0x1b8>)
 80181f4:	681a      	ldr	r2, [r3, #0]
 80181f6:	68bb      	ldr	r3, [r7, #8]
 80181f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	68db      	ldr	r3, [r3, #12]
 80181fe:	685b      	ldr	r3, [r3, #4]
 8018200:	4618      	mov	r0, r3
 8018202:	f7f8 fd25 	bl	8010c50 <lwip_htonl>
 8018206:	4602      	mov	r2, r0
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	68da      	ldr	r2, [r3, #12]
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	685b      	ldr	r3, [r3, #4]
 8018214:	685b      	ldr	r3, [r3, #4]
 8018216:	1ad3      	subs	r3, r2, r3
 8018218:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	685b      	ldr	r3, [r3, #4]
 801821e:	8959      	ldrh	r1, [r3, #10]
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	685b      	ldr	r3, [r3, #4]
 8018224:	8b3a      	ldrh	r2, [r7, #24]
 8018226:	1a8a      	subs	r2, r1, r2
 8018228:	b292      	uxth	r2, r2
 801822a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	685b      	ldr	r3, [r3, #4]
 8018230:	8919      	ldrh	r1, [r3, #8]
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	685b      	ldr	r3, [r3, #4]
 8018236:	8b3a      	ldrh	r2, [r7, #24]
 8018238:	1a8a      	subs	r2, r1, r2
 801823a:	b292      	uxth	r2, r2
 801823c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	68fa      	ldr	r2, [r7, #12]
 8018244:	68d2      	ldr	r2, [r2, #12]
 8018246:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	68db      	ldr	r3, [r3, #12]
 801824c:	2200      	movs	r2, #0
 801824e:	741a      	strb	r2, [r3, #16]
 8018250:	2200      	movs	r2, #0
 8018252:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	68da      	ldr	r2, [r3, #12]
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	7a9b      	ldrb	r3, [r3, #10]
 801825c:	f003 0301 	and.w	r3, r3, #1
 8018260:	2b00      	cmp	r3, #0
 8018262:	d001      	beq.n	8018268 <tcp_output_segment+0x158>
 8018264:	2318      	movs	r3, #24
 8018266:	e000      	b.n	801826a <tcp_output_segment+0x15a>
 8018268:	2314      	movs	r3, #20
 801826a:	4413      	add	r3, r2
 801826c:	69fa      	ldr	r2, [r7, #28]
 801826e:	429a      	cmp	r2, r3
 8018270:	d006      	beq.n	8018280 <tcp_output_segment+0x170>
 8018272:	4b10      	ldr	r3, [pc, #64]	; (80182b4 <tcp_output_segment+0x1a4>)
 8018274:	f240 621c 	movw	r2, #1564	; 0x61c
 8018278:	4914      	ldr	r1, [pc, #80]	; (80182cc <tcp_output_segment+0x1bc>)
 801827a:	4810      	ldr	r0, [pc, #64]	; (80182bc <tcp_output_segment+0x1ac>)
 801827c:	f003 fdea 	bl	801be54 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	6858      	ldr	r0, [r3, #4]
 8018284:	68b9      	ldr	r1, [r7, #8]
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	1d1c      	adds	r4, r3, #4
 801828a:	68bb      	ldr	r3, [r7, #8]
 801828c:	7add      	ldrb	r5, [r3, #11]
 801828e:	68bb      	ldr	r3, [r7, #8]
 8018290:	7a9b      	ldrb	r3, [r3, #10]
 8018292:	687a      	ldr	r2, [r7, #4]
 8018294:	9202      	str	r2, [sp, #8]
 8018296:	2206      	movs	r2, #6
 8018298:	9201      	str	r2, [sp, #4]
 801829a:	9300      	str	r3, [sp, #0]
 801829c:	462b      	mov	r3, r5
 801829e:	4622      	mov	r2, r4
 80182a0:	f002 fa50 	bl	801a744 <ip4_output_if>
 80182a4:	4603      	mov	r3, r0
 80182a6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80182a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	3720      	adds	r7, #32
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bdb0      	pop	{r4, r5, r7, pc}
 80182b4:	0801ea98 	.word	0x0801ea98
 80182b8:	0801f05c 	.word	0x0801f05c
 80182bc:	0801eaec 	.word	0x0801eaec
 80182c0:	0801f07c 	.word	0x0801f07c
 80182c4:	0801f09c 	.word	0x0801f09c
 80182c8:	2000afe4 	.word	0x2000afe4
 80182cc:	0801f0c0 	.word	0x0801f0c0

080182d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80182d0:	b5b0      	push	{r4, r5, r7, lr}
 80182d2:	b084      	sub	sp, #16
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d106      	bne.n	80182ec <tcp_rexmit_rto_prepare+0x1c>
 80182de:	4b31      	ldr	r3, [pc, #196]	; (80183a4 <tcp_rexmit_rto_prepare+0xd4>)
 80182e0:	f240 6263 	movw	r2, #1635	; 0x663
 80182e4:	4930      	ldr	r1, [pc, #192]	; (80183a8 <tcp_rexmit_rto_prepare+0xd8>)
 80182e6:	4831      	ldr	r0, [pc, #196]	; (80183ac <tcp_rexmit_rto_prepare+0xdc>)
 80182e8:	f003 fdb4 	bl	801be54 <iprintf>

  if (pcb->unacked == NULL) {
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d102      	bne.n	80182fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80182f4:	f06f 0305 	mvn.w	r3, #5
 80182f8:	e050      	b.n	801839c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182fe:	60fb      	str	r3, [r7, #12]
 8018300:	e00b      	b.n	801831a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018302:	68f8      	ldr	r0, [r7, #12]
 8018304:	f7ff fee4 	bl	80180d0 <tcp_output_segment_busy>
 8018308:	4603      	mov	r3, r0
 801830a:	2b00      	cmp	r3, #0
 801830c:	d002      	beq.n	8018314 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801830e:	f06f 0305 	mvn.w	r3, #5
 8018312:	e043      	b.n	801839c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	60fb      	str	r3, [r7, #12]
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d1ef      	bne.n	8018302 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018322:	68f8      	ldr	r0, [r7, #12]
 8018324:	f7ff fed4 	bl	80180d0 <tcp_output_segment_busy>
 8018328:	4603      	mov	r3, r0
 801832a:	2b00      	cmp	r3, #0
 801832c:	d002      	beq.n	8018334 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801832e:	f06f 0305 	mvn.w	r3, #5
 8018332:	e033      	b.n	801839c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	2200      	movs	r2, #0
 8018348:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	8b5b      	ldrh	r3, [r3, #26]
 801834e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018352:	b29a      	uxth	r2, r3
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	68db      	ldr	r3, [r3, #12]
 801835c:	685b      	ldr	r3, [r3, #4]
 801835e:	4618      	mov	r0, r3
 8018360:	f7f8 fc76 	bl	8010c50 <lwip_htonl>
 8018364:	4604      	mov	r4, r0
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	891b      	ldrh	r3, [r3, #8]
 801836a:	461d      	mov	r5, r3
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	68db      	ldr	r3, [r3, #12]
 8018370:	899b      	ldrh	r3, [r3, #12]
 8018372:	b29b      	uxth	r3, r3
 8018374:	4618      	mov	r0, r3
 8018376:	f7f8 fc56 	bl	8010c26 <lwip_htons>
 801837a:	4603      	mov	r3, r0
 801837c:	b2db      	uxtb	r3, r3
 801837e:	f003 0303 	and.w	r3, r3, #3
 8018382:	2b00      	cmp	r3, #0
 8018384:	d001      	beq.n	801838a <tcp_rexmit_rto_prepare+0xba>
 8018386:	2301      	movs	r3, #1
 8018388:	e000      	b.n	801838c <tcp_rexmit_rto_prepare+0xbc>
 801838a:	2300      	movs	r3, #0
 801838c:	442b      	add	r3, r5
 801838e:	18e2      	adds	r2, r4, r3
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	2200      	movs	r2, #0
 8018398:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801839a:	2300      	movs	r3, #0
}
 801839c:	4618      	mov	r0, r3
 801839e:	3710      	adds	r7, #16
 80183a0:	46bd      	mov	sp, r7
 80183a2:	bdb0      	pop	{r4, r5, r7, pc}
 80183a4:	0801ea98 	.word	0x0801ea98
 80183a8:	0801f0d4 	.word	0x0801f0d4
 80183ac:	0801eaec 	.word	0x0801eaec

080183b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b082      	sub	sp, #8
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d106      	bne.n	80183cc <tcp_rexmit_rto_commit+0x1c>
 80183be:	4b0d      	ldr	r3, [pc, #52]	; (80183f4 <tcp_rexmit_rto_commit+0x44>)
 80183c0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80183c4:	490c      	ldr	r1, [pc, #48]	; (80183f8 <tcp_rexmit_rto_commit+0x48>)
 80183c6:	480d      	ldr	r0, [pc, #52]	; (80183fc <tcp_rexmit_rto_commit+0x4c>)
 80183c8:	f003 fd44 	bl	801be54 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80183d2:	2bff      	cmp	r3, #255	; 0xff
 80183d4:	d007      	beq.n	80183e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80183dc:	3301      	adds	r3, #1
 80183de:	b2da      	uxtb	r2, r3
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80183e6:	6878      	ldr	r0, [r7, #4]
 80183e8:	f7ff fc7e 	bl	8017ce8 <tcp_output>
}
 80183ec:	bf00      	nop
 80183ee:	3708      	adds	r7, #8
 80183f0:	46bd      	mov	sp, r7
 80183f2:	bd80      	pop	{r7, pc}
 80183f4:	0801ea98 	.word	0x0801ea98
 80183f8:	0801f0f8 	.word	0x0801f0f8
 80183fc:	0801eaec 	.word	0x0801eaec

08018400 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b082      	sub	sp, #8
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d106      	bne.n	801841c <tcp_rexmit_rto+0x1c>
 801840e:	4b0a      	ldr	r3, [pc, #40]	; (8018438 <tcp_rexmit_rto+0x38>)
 8018410:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018414:	4909      	ldr	r1, [pc, #36]	; (801843c <tcp_rexmit_rto+0x3c>)
 8018416:	480a      	ldr	r0, [pc, #40]	; (8018440 <tcp_rexmit_rto+0x40>)
 8018418:	f003 fd1c 	bl	801be54 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801841c:	6878      	ldr	r0, [r7, #4]
 801841e:	f7ff ff57 	bl	80182d0 <tcp_rexmit_rto_prepare>
 8018422:	4603      	mov	r3, r0
 8018424:	2b00      	cmp	r3, #0
 8018426:	d102      	bne.n	801842e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018428:	6878      	ldr	r0, [r7, #4]
 801842a:	f7ff ffc1 	bl	80183b0 <tcp_rexmit_rto_commit>
  }
}
 801842e:	bf00      	nop
 8018430:	3708      	adds	r7, #8
 8018432:	46bd      	mov	sp, r7
 8018434:	bd80      	pop	{r7, pc}
 8018436:	bf00      	nop
 8018438:	0801ea98 	.word	0x0801ea98
 801843c:	0801f11c 	.word	0x0801f11c
 8018440:	0801eaec 	.word	0x0801eaec

08018444 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018444:	b590      	push	{r4, r7, lr}
 8018446:	b085      	sub	sp, #20
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d106      	bne.n	8018460 <tcp_rexmit+0x1c>
 8018452:	4b2f      	ldr	r3, [pc, #188]	; (8018510 <tcp_rexmit+0xcc>)
 8018454:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018458:	492e      	ldr	r1, [pc, #184]	; (8018514 <tcp_rexmit+0xd0>)
 801845a:	482f      	ldr	r0, [pc, #188]	; (8018518 <tcp_rexmit+0xd4>)
 801845c:	f003 fcfa 	bl	801be54 <iprintf>

  if (pcb->unacked == NULL) {
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018464:	2b00      	cmp	r3, #0
 8018466:	d102      	bne.n	801846e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018468:	f06f 0305 	mvn.w	r3, #5
 801846c:	e04c      	b.n	8018508 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018472:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018474:	68b8      	ldr	r0, [r7, #8]
 8018476:	f7ff fe2b 	bl	80180d0 <tcp_output_segment_busy>
 801847a:	4603      	mov	r3, r0
 801847c:	2b00      	cmp	r3, #0
 801847e:	d002      	beq.n	8018486 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018480:	f06f 0305 	mvn.w	r3, #5
 8018484:	e040      	b.n	8018508 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018486:	68bb      	ldr	r3, [r7, #8]
 8018488:	681a      	ldr	r2, [r3, #0]
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	336c      	adds	r3, #108	; 0x6c
 8018492:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018494:	e002      	b.n	801849c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d011      	beq.n	80184c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	68db      	ldr	r3, [r3, #12]
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7f8 fbcf 	bl	8010c50 <lwip_htonl>
 80184b2:	4604      	mov	r4, r0
 80184b4:	68bb      	ldr	r3, [r7, #8]
 80184b6:	68db      	ldr	r3, [r3, #12]
 80184b8:	685b      	ldr	r3, [r3, #4]
 80184ba:	4618      	mov	r0, r3
 80184bc:	f7f8 fbc8 	bl	8010c50 <lwip_htonl>
 80184c0:	4603      	mov	r3, r0
 80184c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	dbe6      	blt.n	8018496 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	681a      	ldr	r2, [r3, #0]
 80184cc:	68bb      	ldr	r3, [r7, #8]
 80184ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	68ba      	ldr	r2, [r7, #8]
 80184d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80184d6:	68bb      	ldr	r3, [r7, #8]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d103      	bne.n	80184e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	2200      	movs	r2, #0
 80184e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80184ec:	2bff      	cmp	r3, #255	; 0xff
 80184ee:	d007      	beq.n	8018500 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80184f6:	3301      	adds	r3, #1
 80184f8:	b2da      	uxtb	r2, r3
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2200      	movs	r2, #0
 8018504:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018506:	2300      	movs	r3, #0
}
 8018508:	4618      	mov	r0, r3
 801850a:	3714      	adds	r7, #20
 801850c:	46bd      	mov	sp, r7
 801850e:	bd90      	pop	{r4, r7, pc}
 8018510:	0801ea98 	.word	0x0801ea98
 8018514:	0801f138 	.word	0x0801f138
 8018518:	0801eaec 	.word	0x0801eaec

0801851c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801851c:	b580      	push	{r7, lr}
 801851e:	b082      	sub	sp, #8
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d106      	bne.n	8018538 <tcp_rexmit_fast+0x1c>
 801852a:	4b2a      	ldr	r3, [pc, #168]	; (80185d4 <tcp_rexmit_fast+0xb8>)
 801852c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018530:	4929      	ldr	r1, [pc, #164]	; (80185d8 <tcp_rexmit_fast+0xbc>)
 8018532:	482a      	ldr	r0, [pc, #168]	; (80185dc <tcp_rexmit_fast+0xc0>)
 8018534:	f003 fc8e 	bl	801be54 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801853c:	2b00      	cmp	r3, #0
 801853e:	d044      	beq.n	80185ca <tcp_rexmit_fast+0xae>
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	8b5b      	ldrh	r3, [r3, #26]
 8018544:	f003 0304 	and.w	r3, r3, #4
 8018548:	2b00      	cmp	r3, #0
 801854a:	d13e      	bne.n	80185ca <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801854c:	6878      	ldr	r0, [r7, #4]
 801854e:	f7ff ff79 	bl	8018444 <tcp_rexmit>
 8018552:	4603      	mov	r3, r0
 8018554:	2b00      	cmp	r3, #0
 8018556:	d138      	bne.n	80185ca <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018564:	4293      	cmp	r3, r2
 8018566:	bf28      	it	cs
 8018568:	4613      	movcs	r3, r2
 801856a:	b29b      	uxth	r3, r3
 801856c:	0fda      	lsrs	r2, r3, #31
 801856e:	4413      	add	r3, r2
 8018570:	105b      	asrs	r3, r3, #1
 8018572:	b29a      	uxth	r2, r3
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018580:	461a      	mov	r2, r3
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018586:	005b      	lsls	r3, r3, #1
 8018588:	429a      	cmp	r2, r3
 801858a:	d206      	bcs.n	801859a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018590:	005b      	lsls	r3, r3, #1
 8018592:	b29a      	uxth	r2, r3
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80185a4:	4619      	mov	r1, r3
 80185a6:	0049      	lsls	r1, r1, #1
 80185a8:	440b      	add	r3, r1
 80185aa:	b29b      	uxth	r3, r3
 80185ac:	4413      	add	r3, r2
 80185ae:	b29a      	uxth	r2, r3
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	8b5b      	ldrh	r3, [r3, #26]
 80185ba:	f043 0304 	orr.w	r3, r3, #4
 80185be:	b29a      	uxth	r2, r3
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	2200      	movs	r2, #0
 80185c8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80185ca:	bf00      	nop
 80185cc:	3708      	adds	r7, #8
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd80      	pop	{r7, pc}
 80185d2:	bf00      	nop
 80185d4:	0801ea98 	.word	0x0801ea98
 80185d8:	0801f150 	.word	0x0801f150
 80185dc:	0801eaec 	.word	0x0801eaec

080185e0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b086      	sub	sp, #24
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	60f8      	str	r0, [r7, #12]
 80185e8:	607b      	str	r3, [r7, #4]
 80185ea:	460b      	mov	r3, r1
 80185ec:	817b      	strh	r3, [r7, #10]
 80185ee:	4613      	mov	r3, r2
 80185f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80185f2:	897a      	ldrh	r2, [r7, #10]
 80185f4:	893b      	ldrh	r3, [r7, #8]
 80185f6:	4413      	add	r3, r2
 80185f8:	b29b      	uxth	r3, r3
 80185fa:	3314      	adds	r3, #20
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018602:	4619      	mov	r1, r3
 8018604:	2022      	movs	r0, #34	; 0x22
 8018606:	f7f9 fbf3 	bl	8011df0 <pbuf_alloc>
 801860a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801860c:	697b      	ldr	r3, [r7, #20]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d04d      	beq.n	80186ae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018612:	897b      	ldrh	r3, [r7, #10]
 8018614:	3313      	adds	r3, #19
 8018616:	697a      	ldr	r2, [r7, #20]
 8018618:	8952      	ldrh	r2, [r2, #10]
 801861a:	4293      	cmp	r3, r2
 801861c:	db06      	blt.n	801862c <tcp_output_alloc_header_common+0x4c>
 801861e:	4b26      	ldr	r3, [pc, #152]	; (80186b8 <tcp_output_alloc_header_common+0xd8>)
 8018620:	f240 7223 	movw	r2, #1827	; 0x723
 8018624:	4925      	ldr	r1, [pc, #148]	; (80186bc <tcp_output_alloc_header_common+0xdc>)
 8018626:	4826      	ldr	r0, [pc, #152]	; (80186c0 <tcp_output_alloc_header_common+0xe0>)
 8018628:	f003 fc14 	bl	801be54 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801862c:	697b      	ldr	r3, [r7, #20]
 801862e:	685b      	ldr	r3, [r3, #4]
 8018630:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018632:	8c3b      	ldrh	r3, [r7, #32]
 8018634:	4618      	mov	r0, r3
 8018636:	f7f8 faf6 	bl	8010c26 <lwip_htons>
 801863a:	4603      	mov	r3, r0
 801863c:	461a      	mov	r2, r3
 801863e:	693b      	ldr	r3, [r7, #16]
 8018640:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018644:	4618      	mov	r0, r3
 8018646:	f7f8 faee 	bl	8010c26 <lwip_htons>
 801864a:	4603      	mov	r3, r0
 801864c:	461a      	mov	r2, r3
 801864e:	693b      	ldr	r3, [r7, #16]
 8018650:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	687a      	ldr	r2, [r7, #4]
 8018656:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018658:	68f8      	ldr	r0, [r7, #12]
 801865a:	f7f8 faf9 	bl	8010c50 <lwip_htonl>
 801865e:	4602      	mov	r2, r0
 8018660:	693b      	ldr	r3, [r7, #16]
 8018662:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018664:	897b      	ldrh	r3, [r7, #10]
 8018666:	089b      	lsrs	r3, r3, #2
 8018668:	b29b      	uxth	r3, r3
 801866a:	3305      	adds	r3, #5
 801866c:	b29b      	uxth	r3, r3
 801866e:	031b      	lsls	r3, r3, #12
 8018670:	b29a      	uxth	r2, r3
 8018672:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018676:	b29b      	uxth	r3, r3
 8018678:	4313      	orrs	r3, r2
 801867a:	b29b      	uxth	r3, r3
 801867c:	4618      	mov	r0, r3
 801867e:	f7f8 fad2 	bl	8010c26 <lwip_htons>
 8018682:	4603      	mov	r3, r0
 8018684:	461a      	mov	r2, r3
 8018686:	693b      	ldr	r3, [r7, #16]
 8018688:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801868a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801868c:	4618      	mov	r0, r3
 801868e:	f7f8 faca 	bl	8010c26 <lwip_htons>
 8018692:	4603      	mov	r3, r0
 8018694:	461a      	mov	r2, r3
 8018696:	693b      	ldr	r3, [r7, #16]
 8018698:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801869a:	693b      	ldr	r3, [r7, #16]
 801869c:	2200      	movs	r2, #0
 801869e:	741a      	strb	r2, [r3, #16]
 80186a0:	2200      	movs	r2, #0
 80186a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80186a4:	693b      	ldr	r3, [r7, #16]
 80186a6:	2200      	movs	r2, #0
 80186a8:	749a      	strb	r2, [r3, #18]
 80186aa:	2200      	movs	r2, #0
 80186ac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80186ae:	697b      	ldr	r3, [r7, #20]
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3718      	adds	r7, #24
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}
 80186b8:	0801ea98 	.word	0x0801ea98
 80186bc:	0801f170 	.word	0x0801f170
 80186c0:	0801eaec 	.word	0x0801eaec

080186c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80186c4:	b5b0      	push	{r4, r5, r7, lr}
 80186c6:	b08a      	sub	sp, #40	; 0x28
 80186c8:	af04      	add	r7, sp, #16
 80186ca:	60f8      	str	r0, [r7, #12]
 80186cc:	607b      	str	r3, [r7, #4]
 80186ce:	460b      	mov	r3, r1
 80186d0:	817b      	strh	r3, [r7, #10]
 80186d2:	4613      	mov	r3, r2
 80186d4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d106      	bne.n	80186ea <tcp_output_alloc_header+0x26>
 80186dc:	4b15      	ldr	r3, [pc, #84]	; (8018734 <tcp_output_alloc_header+0x70>)
 80186de:	f240 7242 	movw	r2, #1858	; 0x742
 80186e2:	4915      	ldr	r1, [pc, #84]	; (8018738 <tcp_output_alloc_header+0x74>)
 80186e4:	4815      	ldr	r0, [pc, #84]	; (801873c <tcp_output_alloc_header+0x78>)
 80186e6:	f003 fbb5 	bl	801be54 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	8adb      	ldrh	r3, [r3, #22]
 80186f2:	68fa      	ldr	r2, [r7, #12]
 80186f4:	8b12      	ldrh	r2, [r2, #24]
 80186f6:	68f9      	ldr	r1, [r7, #12]
 80186f8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80186fa:	893d      	ldrh	r5, [r7, #8]
 80186fc:	897c      	ldrh	r4, [r7, #10]
 80186fe:	9103      	str	r1, [sp, #12]
 8018700:	2110      	movs	r1, #16
 8018702:	9102      	str	r1, [sp, #8]
 8018704:	9201      	str	r2, [sp, #4]
 8018706:	9300      	str	r3, [sp, #0]
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	462a      	mov	r2, r5
 801870c:	4621      	mov	r1, r4
 801870e:	f7ff ff67 	bl	80185e0 <tcp_output_alloc_header_common>
 8018712:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018714:	697b      	ldr	r3, [r7, #20]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d006      	beq.n	8018728 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801871e:	68fa      	ldr	r2, [r7, #12]
 8018720:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018722:	441a      	add	r2, r3
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018728:	697b      	ldr	r3, [r7, #20]
}
 801872a:	4618      	mov	r0, r3
 801872c:	3718      	adds	r7, #24
 801872e:	46bd      	mov	sp, r7
 8018730:	bdb0      	pop	{r4, r5, r7, pc}
 8018732:	bf00      	nop
 8018734:	0801ea98 	.word	0x0801ea98
 8018738:	0801f1a0 	.word	0x0801f1a0
 801873c:	0801eaec 	.word	0x0801eaec

08018740 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b088      	sub	sp, #32
 8018744:	af00      	add	r7, sp, #0
 8018746:	60f8      	str	r0, [r7, #12]
 8018748:	60b9      	str	r1, [r7, #8]
 801874a:	4611      	mov	r1, r2
 801874c:	461a      	mov	r2, r3
 801874e:	460b      	mov	r3, r1
 8018750:	71fb      	strb	r3, [r7, #7]
 8018752:	4613      	mov	r3, r2
 8018754:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018756:	2300      	movs	r3, #0
 8018758:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801875a:	68bb      	ldr	r3, [r7, #8]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d106      	bne.n	801876e <tcp_output_fill_options+0x2e>
 8018760:	4b12      	ldr	r3, [pc, #72]	; (80187ac <tcp_output_fill_options+0x6c>)
 8018762:	f240 7256 	movw	r2, #1878	; 0x756
 8018766:	4912      	ldr	r1, [pc, #72]	; (80187b0 <tcp_output_fill_options+0x70>)
 8018768:	4812      	ldr	r0, [pc, #72]	; (80187b4 <tcp_output_fill_options+0x74>)
 801876a:	f003 fb73 	bl	801be54 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801876e:	68bb      	ldr	r3, [r7, #8]
 8018770:	685b      	ldr	r3, [r3, #4]
 8018772:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018774:	69bb      	ldr	r3, [r7, #24]
 8018776:	3314      	adds	r3, #20
 8018778:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801877a:	8bfb      	ldrh	r3, [r7, #30]
 801877c:	009b      	lsls	r3, r3, #2
 801877e:	461a      	mov	r2, r3
 8018780:	79fb      	ldrb	r3, [r7, #7]
 8018782:	009b      	lsls	r3, r3, #2
 8018784:	f003 0304 	and.w	r3, r3, #4
 8018788:	4413      	add	r3, r2
 801878a:	3314      	adds	r3, #20
 801878c:	69ba      	ldr	r2, [r7, #24]
 801878e:	4413      	add	r3, r2
 8018790:	697a      	ldr	r2, [r7, #20]
 8018792:	429a      	cmp	r2, r3
 8018794:	d006      	beq.n	80187a4 <tcp_output_fill_options+0x64>
 8018796:	4b05      	ldr	r3, [pc, #20]	; (80187ac <tcp_output_fill_options+0x6c>)
 8018798:	f240 7275 	movw	r2, #1909	; 0x775
 801879c:	4906      	ldr	r1, [pc, #24]	; (80187b8 <tcp_output_fill_options+0x78>)
 801879e:	4805      	ldr	r0, [pc, #20]	; (80187b4 <tcp_output_fill_options+0x74>)
 80187a0:	f003 fb58 	bl	801be54 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80187a4:	bf00      	nop
 80187a6:	3720      	adds	r7, #32
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd80      	pop	{r7, pc}
 80187ac:	0801ea98 	.word	0x0801ea98
 80187b0:	0801f1c8 	.word	0x0801f1c8
 80187b4:	0801eaec 	.word	0x0801eaec
 80187b8:	0801f0c0 	.word	0x0801f0c0

080187bc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b08a      	sub	sp, #40	; 0x28
 80187c0:	af04      	add	r7, sp, #16
 80187c2:	60f8      	str	r0, [r7, #12]
 80187c4:	60b9      	str	r1, [r7, #8]
 80187c6:	607a      	str	r2, [r7, #4]
 80187c8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80187ca:	68bb      	ldr	r3, [r7, #8]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d106      	bne.n	80187de <tcp_output_control_segment+0x22>
 80187d0:	4b1c      	ldr	r3, [pc, #112]	; (8018844 <tcp_output_control_segment+0x88>)
 80187d2:	f240 7287 	movw	r2, #1927	; 0x787
 80187d6:	491c      	ldr	r1, [pc, #112]	; (8018848 <tcp_output_control_segment+0x8c>)
 80187d8:	481c      	ldr	r0, [pc, #112]	; (801884c <tcp_output_control_segment+0x90>)
 80187da:	f003 fb3b 	bl	801be54 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80187de:	683a      	ldr	r2, [r7, #0]
 80187e0:	6879      	ldr	r1, [r7, #4]
 80187e2:	68f8      	ldr	r0, [r7, #12]
 80187e4:	f7fe fae8 	bl	8016db8 <tcp_route>
 80187e8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80187ea:	693b      	ldr	r3, [r7, #16]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d102      	bne.n	80187f6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80187f0:	23fc      	movs	r3, #252	; 0xfc
 80187f2:	75fb      	strb	r3, [r7, #23]
 80187f4:	e01c      	b.n	8018830 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d006      	beq.n	801880a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	7adb      	ldrb	r3, [r3, #11]
 8018800:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	7a9b      	ldrb	r3, [r3, #10]
 8018806:	757b      	strb	r3, [r7, #21]
 8018808:	e003      	b.n	8018812 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801880a:	23ff      	movs	r3, #255	; 0xff
 801880c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801880e:	2300      	movs	r3, #0
 8018810:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018812:	7dba      	ldrb	r2, [r7, #22]
 8018814:	693b      	ldr	r3, [r7, #16]
 8018816:	9302      	str	r3, [sp, #8]
 8018818:	2306      	movs	r3, #6
 801881a:	9301      	str	r3, [sp, #4]
 801881c:	7d7b      	ldrb	r3, [r7, #21]
 801881e:	9300      	str	r3, [sp, #0]
 8018820:	4613      	mov	r3, r2
 8018822:	683a      	ldr	r2, [r7, #0]
 8018824:	6879      	ldr	r1, [r7, #4]
 8018826:	68b8      	ldr	r0, [r7, #8]
 8018828:	f001 ff8c 	bl	801a744 <ip4_output_if>
 801882c:	4603      	mov	r3, r0
 801882e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018830:	68b8      	ldr	r0, [r7, #8]
 8018832:	f7f9 fdc1 	bl	80123b8 <pbuf_free>
  return err;
 8018836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801883a:	4618      	mov	r0, r3
 801883c:	3718      	adds	r7, #24
 801883e:	46bd      	mov	sp, r7
 8018840:	bd80      	pop	{r7, pc}
 8018842:	bf00      	nop
 8018844:	0801ea98 	.word	0x0801ea98
 8018848:	0801f1f0 	.word	0x0801f1f0
 801884c:	0801eaec 	.word	0x0801eaec

08018850 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018850:	b590      	push	{r4, r7, lr}
 8018852:	b08b      	sub	sp, #44	; 0x2c
 8018854:	af04      	add	r7, sp, #16
 8018856:	60f8      	str	r0, [r7, #12]
 8018858:	60b9      	str	r1, [r7, #8]
 801885a:	607a      	str	r2, [r7, #4]
 801885c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d106      	bne.n	8018872 <tcp_rst+0x22>
 8018864:	4b1f      	ldr	r3, [pc, #124]	; (80188e4 <tcp_rst+0x94>)
 8018866:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801886a:	491f      	ldr	r1, [pc, #124]	; (80188e8 <tcp_rst+0x98>)
 801886c:	481f      	ldr	r0, [pc, #124]	; (80188ec <tcp_rst+0x9c>)
 801886e:	f003 faf1 	bl	801be54 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018874:	2b00      	cmp	r3, #0
 8018876:	d106      	bne.n	8018886 <tcp_rst+0x36>
 8018878:	4b1a      	ldr	r3, [pc, #104]	; (80188e4 <tcp_rst+0x94>)
 801887a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801887e:	491c      	ldr	r1, [pc, #112]	; (80188f0 <tcp_rst+0xa0>)
 8018880:	481a      	ldr	r0, [pc, #104]	; (80188ec <tcp_rst+0x9c>)
 8018882:	f003 fae7 	bl	801be54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018886:	2300      	movs	r3, #0
 8018888:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801888a:	f24d 0316 	movw	r3, #53270	; 0xd016
 801888e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018890:	7dfb      	ldrb	r3, [r7, #23]
 8018892:	b29c      	uxth	r4, r3
 8018894:	68b8      	ldr	r0, [r7, #8]
 8018896:	f7f8 f9db 	bl	8010c50 <lwip_htonl>
 801889a:	4602      	mov	r2, r0
 801889c:	8abb      	ldrh	r3, [r7, #20]
 801889e:	9303      	str	r3, [sp, #12]
 80188a0:	2314      	movs	r3, #20
 80188a2:	9302      	str	r3, [sp, #8]
 80188a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80188a6:	9301      	str	r3, [sp, #4]
 80188a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80188aa:	9300      	str	r3, [sp, #0]
 80188ac:	4613      	mov	r3, r2
 80188ae:	2200      	movs	r2, #0
 80188b0:	4621      	mov	r1, r4
 80188b2:	6878      	ldr	r0, [r7, #4]
 80188b4:	f7ff fe94 	bl	80185e0 <tcp_output_alloc_header_common>
 80188b8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80188ba:	693b      	ldr	r3, [r7, #16]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d00c      	beq.n	80188da <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80188c0:	7dfb      	ldrb	r3, [r7, #23]
 80188c2:	2200      	movs	r2, #0
 80188c4:	6939      	ldr	r1, [r7, #16]
 80188c6:	68f8      	ldr	r0, [r7, #12]
 80188c8:	f7ff ff3a 	bl	8018740 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80188cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ce:	683a      	ldr	r2, [r7, #0]
 80188d0:	6939      	ldr	r1, [r7, #16]
 80188d2:	68f8      	ldr	r0, [r7, #12]
 80188d4:	f7ff ff72 	bl	80187bc <tcp_output_control_segment>
 80188d8:	e000      	b.n	80188dc <tcp_rst+0x8c>
    return;
 80188da:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80188dc:	371c      	adds	r7, #28
 80188de:	46bd      	mov	sp, r7
 80188e0:	bd90      	pop	{r4, r7, pc}
 80188e2:	bf00      	nop
 80188e4:	0801ea98 	.word	0x0801ea98
 80188e8:	0801f21c 	.word	0x0801f21c
 80188ec:	0801eaec 	.word	0x0801eaec
 80188f0:	0801f238 	.word	0x0801f238

080188f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80188f4:	b590      	push	{r4, r7, lr}
 80188f6:	b087      	sub	sp, #28
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80188fc:	2300      	movs	r3, #0
 80188fe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018900:	2300      	movs	r3, #0
 8018902:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d106      	bne.n	8018918 <tcp_send_empty_ack+0x24>
 801890a:	4b28      	ldr	r3, [pc, #160]	; (80189ac <tcp_send_empty_ack+0xb8>)
 801890c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018910:	4927      	ldr	r1, [pc, #156]	; (80189b0 <tcp_send_empty_ack+0xbc>)
 8018912:	4828      	ldr	r0, [pc, #160]	; (80189b4 <tcp_send_empty_ack+0xc0>)
 8018914:	f003 fa9e 	bl	801be54 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018918:	7dfb      	ldrb	r3, [r7, #23]
 801891a:	009b      	lsls	r3, r3, #2
 801891c:	b2db      	uxtb	r3, r3
 801891e:	f003 0304 	and.w	r3, r3, #4
 8018922:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018924:	7d7b      	ldrb	r3, [r7, #21]
 8018926:	b29c      	uxth	r4, r3
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801892c:	4618      	mov	r0, r3
 801892e:	f7f8 f98f 	bl	8010c50 <lwip_htonl>
 8018932:	4603      	mov	r3, r0
 8018934:	2200      	movs	r2, #0
 8018936:	4621      	mov	r1, r4
 8018938:	6878      	ldr	r0, [r7, #4]
 801893a:	f7ff fec3 	bl	80186c4 <tcp_output_alloc_header>
 801893e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018940:	693b      	ldr	r3, [r7, #16]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d109      	bne.n	801895a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	8b5b      	ldrh	r3, [r3, #26]
 801894a:	f043 0303 	orr.w	r3, r3, #3
 801894e:	b29a      	uxth	r2, r3
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018954:	f06f 0301 	mvn.w	r3, #1
 8018958:	e023      	b.n	80189a2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801895a:	7dbb      	ldrb	r3, [r7, #22]
 801895c:	7dfa      	ldrb	r2, [r7, #23]
 801895e:	6939      	ldr	r1, [r7, #16]
 8018960:	6878      	ldr	r0, [r7, #4]
 8018962:	f7ff feed 	bl	8018740 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018966:	687a      	ldr	r2, [r7, #4]
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	3304      	adds	r3, #4
 801896c:	6939      	ldr	r1, [r7, #16]
 801896e:	6878      	ldr	r0, [r7, #4]
 8018970:	f7ff ff24 	bl	80187bc <tcp_output_control_segment>
 8018974:	4603      	mov	r3, r0
 8018976:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d007      	beq.n	8018990 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	8b5b      	ldrh	r3, [r3, #26]
 8018984:	f043 0303 	orr.w	r3, r3, #3
 8018988:	b29a      	uxth	r2, r3
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	835a      	strh	r2, [r3, #26]
 801898e:	e006      	b.n	801899e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	8b5b      	ldrh	r3, [r3, #26]
 8018994:	f023 0303 	bic.w	r3, r3, #3
 8018998:	b29a      	uxth	r2, r3
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801899e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80189a2:	4618      	mov	r0, r3
 80189a4:	371c      	adds	r7, #28
 80189a6:	46bd      	mov	sp, r7
 80189a8:	bd90      	pop	{r4, r7, pc}
 80189aa:	bf00      	nop
 80189ac:	0801ea98 	.word	0x0801ea98
 80189b0:	0801f254 	.word	0x0801f254
 80189b4:	0801eaec 	.word	0x0801eaec

080189b8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80189b8:	b590      	push	{r4, r7, lr}
 80189ba:	b087      	sub	sp, #28
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80189c0:	2300      	movs	r3, #0
 80189c2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d106      	bne.n	80189d8 <tcp_keepalive+0x20>
 80189ca:	4b18      	ldr	r3, [pc, #96]	; (8018a2c <tcp_keepalive+0x74>)
 80189cc:	f640 0224 	movw	r2, #2084	; 0x824
 80189d0:	4917      	ldr	r1, [pc, #92]	; (8018a30 <tcp_keepalive+0x78>)
 80189d2:	4818      	ldr	r0, [pc, #96]	; (8018a34 <tcp_keepalive+0x7c>)
 80189d4:	f003 fa3e 	bl	801be54 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80189d8:	7dfb      	ldrb	r3, [r7, #23]
 80189da:	b29c      	uxth	r4, r3
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189e0:	3b01      	subs	r3, #1
 80189e2:	4618      	mov	r0, r3
 80189e4:	f7f8 f934 	bl	8010c50 <lwip_htonl>
 80189e8:	4603      	mov	r3, r0
 80189ea:	2200      	movs	r2, #0
 80189ec:	4621      	mov	r1, r4
 80189ee:	6878      	ldr	r0, [r7, #4]
 80189f0:	f7ff fe68 	bl	80186c4 <tcp_output_alloc_header>
 80189f4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d102      	bne.n	8018a02 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80189fc:	f04f 33ff 	mov.w	r3, #4294967295
 8018a00:	e010      	b.n	8018a24 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018a02:	7dfb      	ldrb	r3, [r7, #23]
 8018a04:	2200      	movs	r2, #0
 8018a06:	6939      	ldr	r1, [r7, #16]
 8018a08:	6878      	ldr	r0, [r7, #4]
 8018a0a:	f7ff fe99 	bl	8018740 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018a0e:	687a      	ldr	r2, [r7, #4]
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	3304      	adds	r3, #4
 8018a14:	6939      	ldr	r1, [r7, #16]
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	f7ff fed0 	bl	80187bc <tcp_output_control_segment>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	371c      	adds	r7, #28
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd90      	pop	{r4, r7, pc}
 8018a2c:	0801ea98 	.word	0x0801ea98
 8018a30:	0801f274 	.word	0x0801f274
 8018a34:	0801eaec 	.word	0x0801eaec

08018a38 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018a38:	b590      	push	{r4, r7, lr}
 8018a3a:	b08b      	sub	sp, #44	; 0x2c
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018a40:	2300      	movs	r3, #0
 8018a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d106      	bne.n	8018a5a <tcp_zero_window_probe+0x22>
 8018a4c:	4b4c      	ldr	r3, [pc, #304]	; (8018b80 <tcp_zero_window_probe+0x148>)
 8018a4e:	f640 024f 	movw	r2, #2127	; 0x84f
 8018a52:	494c      	ldr	r1, [pc, #304]	; (8018b84 <tcp_zero_window_probe+0x14c>)
 8018a54:	484c      	ldr	r0, [pc, #304]	; (8018b88 <tcp_zero_window_probe+0x150>)
 8018a56:	f003 f9fd 	bl	801be54 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a5e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018a60:	6a3b      	ldr	r3, [r7, #32]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d101      	bne.n	8018a6a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018a66:	2300      	movs	r3, #0
 8018a68:	e086      	b.n	8018b78 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018a70:	2bff      	cmp	r3, #255	; 0xff
 8018a72:	d007      	beq.n	8018a84 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018a7a:	3301      	adds	r3, #1
 8018a7c:	b2da      	uxtb	r2, r3
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018a84:	6a3b      	ldr	r3, [r7, #32]
 8018a86:	68db      	ldr	r3, [r3, #12]
 8018a88:	899b      	ldrh	r3, [r3, #12]
 8018a8a:	b29b      	uxth	r3, r3
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7f8 f8ca 	bl	8010c26 <lwip_htons>
 8018a92:	4603      	mov	r3, r0
 8018a94:	b2db      	uxtb	r3, r3
 8018a96:	f003 0301 	and.w	r3, r3, #1
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d005      	beq.n	8018aaa <tcp_zero_window_probe+0x72>
 8018a9e:	6a3b      	ldr	r3, [r7, #32]
 8018aa0:	891b      	ldrh	r3, [r3, #8]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d101      	bne.n	8018aaa <tcp_zero_window_probe+0x72>
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	e000      	b.n	8018aac <tcp_zero_window_probe+0x74>
 8018aaa:	2300      	movs	r3, #0
 8018aac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018aae:	7ffb      	ldrb	r3, [r7, #31]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	bf0c      	ite	eq
 8018ab4:	2301      	moveq	r3, #1
 8018ab6:	2300      	movne	r3, #0
 8018ab8:	b2db      	uxtb	r3, r3
 8018aba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ac0:	b299      	uxth	r1, r3
 8018ac2:	6a3b      	ldr	r3, [r7, #32]
 8018ac4:	68db      	ldr	r3, [r3, #12]
 8018ac6:	685b      	ldr	r3, [r3, #4]
 8018ac8:	8bba      	ldrh	r2, [r7, #28]
 8018aca:	6878      	ldr	r0, [r7, #4]
 8018acc:	f7ff fdfa 	bl	80186c4 <tcp_output_alloc_header>
 8018ad0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018ad2:	69bb      	ldr	r3, [r7, #24]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d102      	bne.n	8018ade <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8018adc:	e04c      	b.n	8018b78 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018ade:	69bb      	ldr	r3, [r7, #24]
 8018ae0:	685b      	ldr	r3, [r3, #4]
 8018ae2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018ae4:	7ffb      	ldrb	r3, [r7, #31]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d011      	beq.n	8018b0e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018aea:	697b      	ldr	r3, [r7, #20]
 8018aec:	899b      	ldrh	r3, [r3, #12]
 8018aee:	b29b      	uxth	r3, r3
 8018af0:	b21b      	sxth	r3, r3
 8018af2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018af6:	b21c      	sxth	r4, r3
 8018af8:	2011      	movs	r0, #17
 8018afa:	f7f8 f894 	bl	8010c26 <lwip_htons>
 8018afe:	4603      	mov	r3, r0
 8018b00:	b21b      	sxth	r3, r3
 8018b02:	4323      	orrs	r3, r4
 8018b04:	b21b      	sxth	r3, r3
 8018b06:	b29a      	uxth	r2, r3
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	819a      	strh	r2, [r3, #12]
 8018b0c:	e010      	b.n	8018b30 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018b0e:	69bb      	ldr	r3, [r7, #24]
 8018b10:	685b      	ldr	r3, [r3, #4]
 8018b12:	3314      	adds	r3, #20
 8018b14:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018b16:	6a3b      	ldr	r3, [r7, #32]
 8018b18:	6858      	ldr	r0, [r3, #4]
 8018b1a:	6a3b      	ldr	r3, [r7, #32]
 8018b1c:	685b      	ldr	r3, [r3, #4]
 8018b1e:	891a      	ldrh	r2, [r3, #8]
 8018b20:	6a3b      	ldr	r3, [r7, #32]
 8018b22:	891b      	ldrh	r3, [r3, #8]
 8018b24:	1ad3      	subs	r3, r2, r3
 8018b26:	b29b      	uxth	r3, r3
 8018b28:	2201      	movs	r2, #1
 8018b2a:	6939      	ldr	r1, [r7, #16]
 8018b2c:	f7f9 fe3e 	bl	80127ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018b30:	6a3b      	ldr	r3, [r7, #32]
 8018b32:	68db      	ldr	r3, [r3, #12]
 8018b34:	685b      	ldr	r3, [r3, #4]
 8018b36:	4618      	mov	r0, r3
 8018b38:	f7f8 f88a 	bl	8010c50 <lwip_htonl>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	3301      	adds	r3, #1
 8018b40:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	1ad3      	subs	r3, r2, r3
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	da02      	bge.n	8018b54 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	68fa      	ldr	r2, [r7, #12]
 8018b52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b58:	2200      	movs	r2, #0
 8018b5a:	69b9      	ldr	r1, [r7, #24]
 8018b5c:	6878      	ldr	r0, [r7, #4]
 8018b5e:	f7ff fdef 	bl	8018740 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018b62:	687a      	ldr	r2, [r7, #4]
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	3304      	adds	r3, #4
 8018b68:	69b9      	ldr	r1, [r7, #24]
 8018b6a:	6878      	ldr	r0, [r7, #4]
 8018b6c:	f7ff fe26 	bl	80187bc <tcp_output_control_segment>
 8018b70:	4603      	mov	r3, r0
 8018b72:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018b74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018b78:	4618      	mov	r0, r3
 8018b7a:	372c      	adds	r7, #44	; 0x2c
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd90      	pop	{r4, r7, pc}
 8018b80:	0801ea98 	.word	0x0801ea98
 8018b84:	0801f290 	.word	0x0801f290
 8018b88:	0801eaec 	.word	0x0801eaec

08018b8c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b082      	sub	sp, #8
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018b94:	f7f9 fef8 	bl	8012988 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018b98:	4b0a      	ldr	r3, [pc, #40]	; (8018bc4 <tcpip_tcp_timer+0x38>)
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d103      	bne.n	8018ba8 <tcpip_tcp_timer+0x1c>
 8018ba0:	4b09      	ldr	r3, [pc, #36]	; (8018bc8 <tcpip_tcp_timer+0x3c>)
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d005      	beq.n	8018bb4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018ba8:	2200      	movs	r2, #0
 8018baa:	4908      	ldr	r1, [pc, #32]	; (8018bcc <tcpip_tcp_timer+0x40>)
 8018bac:	20fa      	movs	r0, #250	; 0xfa
 8018bae:	f000 f8f3 	bl	8018d98 <sys_timeout>
 8018bb2:	e003      	b.n	8018bbc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018bb4:	4b06      	ldr	r3, [pc, #24]	; (8018bd0 <tcpip_tcp_timer+0x44>)
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	601a      	str	r2, [r3, #0]
  }
}
 8018bba:	bf00      	nop
 8018bbc:	bf00      	nop
 8018bbe:	3708      	adds	r7, #8
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	2000aff0 	.word	0x2000aff0
 8018bc8:	2000aff4 	.word	0x2000aff4
 8018bcc:	08018b8d 	.word	0x08018b8d
 8018bd0:	2000b03c 	.word	0x2000b03c

08018bd4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018bd8:	4b0a      	ldr	r3, [pc, #40]	; (8018c04 <tcp_timer_needed+0x30>)
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d10f      	bne.n	8018c00 <tcp_timer_needed+0x2c>
 8018be0:	4b09      	ldr	r3, [pc, #36]	; (8018c08 <tcp_timer_needed+0x34>)
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d103      	bne.n	8018bf0 <tcp_timer_needed+0x1c>
 8018be8:	4b08      	ldr	r3, [pc, #32]	; (8018c0c <tcp_timer_needed+0x38>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d007      	beq.n	8018c00 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018bf0:	4b04      	ldr	r3, [pc, #16]	; (8018c04 <tcp_timer_needed+0x30>)
 8018bf2:	2201      	movs	r2, #1
 8018bf4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	4905      	ldr	r1, [pc, #20]	; (8018c10 <tcp_timer_needed+0x3c>)
 8018bfa:	20fa      	movs	r0, #250	; 0xfa
 8018bfc:	f000 f8cc 	bl	8018d98 <sys_timeout>
  }
}
 8018c00:	bf00      	nop
 8018c02:	bd80      	pop	{r7, pc}
 8018c04:	2000b03c 	.word	0x2000b03c
 8018c08:	2000aff0 	.word	0x2000aff0
 8018c0c:	2000aff4 	.word	0x2000aff4
 8018c10:	08018b8d 	.word	0x08018b8d

08018c14 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b086      	sub	sp, #24
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	60f8      	str	r0, [r7, #12]
 8018c1c:	60b9      	str	r1, [r7, #8]
 8018c1e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018c20:	2006      	movs	r0, #6
 8018c22:	f7f8 fce3 	bl	80115ec <memp_malloc>
 8018c26:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018c28:	693b      	ldr	r3, [r7, #16]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d109      	bne.n	8018c42 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8018c2e:	693b      	ldr	r3, [r7, #16]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d151      	bne.n	8018cd8 <sys_timeout_abs+0xc4>
 8018c34:	4b2a      	ldr	r3, [pc, #168]	; (8018ce0 <sys_timeout_abs+0xcc>)
 8018c36:	22be      	movs	r2, #190	; 0xbe
 8018c38:	492a      	ldr	r1, [pc, #168]	; (8018ce4 <sys_timeout_abs+0xd0>)
 8018c3a:	482b      	ldr	r0, [pc, #172]	; (8018ce8 <sys_timeout_abs+0xd4>)
 8018c3c:	f003 f90a 	bl	801be54 <iprintf>
    return;
 8018c40:	e04a      	b.n	8018cd8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8018c42:	693b      	ldr	r3, [r7, #16]
 8018c44:	2200      	movs	r2, #0
 8018c46:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8018c48:	693b      	ldr	r3, [r7, #16]
 8018c4a:	68ba      	ldr	r2, [r7, #8]
 8018c4c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8018c4e:	693b      	ldr	r3, [r7, #16]
 8018c50:	687a      	ldr	r2, [r7, #4]
 8018c52:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018c54:	693b      	ldr	r3, [r7, #16]
 8018c56:	68fa      	ldr	r2, [r7, #12]
 8018c58:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8018c5a:	4b24      	ldr	r3, [pc, #144]	; (8018cec <sys_timeout_abs+0xd8>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d103      	bne.n	8018c6a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018c62:	4a22      	ldr	r2, [pc, #136]	; (8018cec <sys_timeout_abs+0xd8>)
 8018c64:	693b      	ldr	r3, [r7, #16]
 8018c66:	6013      	str	r3, [r2, #0]
    return;
 8018c68:	e037      	b.n	8018cda <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8018c6a:	693b      	ldr	r3, [r7, #16]
 8018c6c:	685a      	ldr	r2, [r3, #4]
 8018c6e:	4b1f      	ldr	r3, [pc, #124]	; (8018cec <sys_timeout_abs+0xd8>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	685b      	ldr	r3, [r3, #4]
 8018c74:	1ad3      	subs	r3, r2, r3
 8018c76:	0fdb      	lsrs	r3, r3, #31
 8018c78:	f003 0301 	and.w	r3, r3, #1
 8018c7c:	b2db      	uxtb	r3, r3
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d007      	beq.n	8018c92 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018c82:	4b1a      	ldr	r3, [pc, #104]	; (8018cec <sys_timeout_abs+0xd8>)
 8018c84:	681a      	ldr	r2, [r3, #0]
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8018c8a:	4a18      	ldr	r2, [pc, #96]	; (8018cec <sys_timeout_abs+0xd8>)
 8018c8c:	693b      	ldr	r3, [r7, #16]
 8018c8e:	6013      	str	r3, [r2, #0]
 8018c90:	e023      	b.n	8018cda <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018c92:	4b16      	ldr	r3, [pc, #88]	; (8018cec <sys_timeout_abs+0xd8>)
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	617b      	str	r3, [r7, #20]
 8018c98:	e01a      	b.n	8018cd0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8018c9a:	697b      	ldr	r3, [r7, #20]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d00b      	beq.n	8018cba <sys_timeout_abs+0xa6>
 8018ca2:	693b      	ldr	r3, [r7, #16]
 8018ca4:	685a      	ldr	r2, [r3, #4]
 8018ca6:	697b      	ldr	r3, [r7, #20]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	685b      	ldr	r3, [r3, #4]
 8018cac:	1ad3      	subs	r3, r2, r3
 8018cae:	0fdb      	lsrs	r3, r3, #31
 8018cb0:	f003 0301 	and.w	r3, r3, #1
 8018cb4:	b2db      	uxtb	r3, r3
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d007      	beq.n	8018cca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	681a      	ldr	r2, [r3, #0]
 8018cbe:	693b      	ldr	r3, [r7, #16]
 8018cc0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018cc2:	697b      	ldr	r3, [r7, #20]
 8018cc4:	693a      	ldr	r2, [r7, #16]
 8018cc6:	601a      	str	r2, [r3, #0]
        break;
 8018cc8:	e007      	b.n	8018cda <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	617b      	str	r3, [r7, #20]
 8018cd0:	697b      	ldr	r3, [r7, #20]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d1e1      	bne.n	8018c9a <sys_timeout_abs+0x86>
 8018cd6:	e000      	b.n	8018cda <sys_timeout_abs+0xc6>
    return;
 8018cd8:	bf00      	nop
      }
    }
  }
}
 8018cda:	3718      	adds	r7, #24
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	bd80      	pop	{r7, pc}
 8018ce0:	0801f2b4 	.word	0x0801f2b4
 8018ce4:	0801f2e8 	.word	0x0801f2e8
 8018ce8:	0801f328 	.word	0x0801f328
 8018cec:	2000b034 	.word	0x2000b034

08018cf0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b086      	sub	sp, #24
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018cfc:	697b      	ldr	r3, [r7, #20]
 8018cfe:	685b      	ldr	r3, [r3, #4]
 8018d00:	4798      	blx	r3

  now = sys_now();
 8018d02:	f7e9 f883 	bl	8001e0c <sys_now>
 8018d06:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018d08:	697b      	ldr	r3, [r7, #20]
 8018d0a:	681a      	ldr	r2, [r3, #0]
 8018d0c:	4b0f      	ldr	r3, [pc, #60]	; (8018d4c <lwip_cyclic_timer+0x5c>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	4413      	add	r3, r2
 8018d12:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018d14:	68fa      	ldr	r2, [r7, #12]
 8018d16:	693b      	ldr	r3, [r7, #16]
 8018d18:	1ad3      	subs	r3, r2, r3
 8018d1a:	0fdb      	lsrs	r3, r3, #31
 8018d1c:	f003 0301 	and.w	r3, r3, #1
 8018d20:	b2db      	uxtb	r3, r3
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d009      	beq.n	8018d3a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	681a      	ldr	r2, [r3, #0]
 8018d2a:	693b      	ldr	r3, [r7, #16]
 8018d2c:	4413      	add	r3, r2
 8018d2e:	687a      	ldr	r2, [r7, #4]
 8018d30:	4907      	ldr	r1, [pc, #28]	; (8018d50 <lwip_cyclic_timer+0x60>)
 8018d32:	4618      	mov	r0, r3
 8018d34:	f7ff ff6e 	bl	8018c14 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018d38:	e004      	b.n	8018d44 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018d3a:	687a      	ldr	r2, [r7, #4]
 8018d3c:	4904      	ldr	r1, [pc, #16]	; (8018d50 <lwip_cyclic_timer+0x60>)
 8018d3e:	68f8      	ldr	r0, [r7, #12]
 8018d40:	f7ff ff68 	bl	8018c14 <sys_timeout_abs>
}
 8018d44:	bf00      	nop
 8018d46:	3718      	adds	r7, #24
 8018d48:	46bd      	mov	sp, r7
 8018d4a:	bd80      	pop	{r7, pc}
 8018d4c:	2000b038 	.word	0x2000b038
 8018d50:	08018cf1 	.word	0x08018cf1

08018d54 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b082      	sub	sp, #8
 8018d58:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	607b      	str	r3, [r7, #4]
 8018d5e:	e00e      	b.n	8018d7e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018d60:	4a0b      	ldr	r2, [pc, #44]	; (8018d90 <sys_timeouts_init+0x3c>)
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	00db      	lsls	r3, r3, #3
 8018d6c:	4a08      	ldr	r2, [pc, #32]	; (8018d90 <sys_timeouts_init+0x3c>)
 8018d6e:	4413      	add	r3, r2
 8018d70:	461a      	mov	r2, r3
 8018d72:	4908      	ldr	r1, [pc, #32]	; (8018d94 <sys_timeouts_init+0x40>)
 8018d74:	f000 f810 	bl	8018d98 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	3301      	adds	r3, #1
 8018d7c:	607b      	str	r3, [r7, #4]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	2b02      	cmp	r3, #2
 8018d82:	d9ed      	bls.n	8018d60 <sys_timeouts_init+0xc>
  }
}
 8018d84:	bf00      	nop
 8018d86:	bf00      	nop
 8018d88:	3708      	adds	r7, #8
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	08020040 	.word	0x08020040
 8018d94:	08018cf1 	.word	0x08018cf1

08018d98 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b086      	sub	sp, #24
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	60f8      	str	r0, [r7, #12]
 8018da0:	60b9      	str	r1, [r7, #8]
 8018da2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018daa:	d306      	bcc.n	8018dba <sys_timeout+0x22>
 8018dac:	4b0a      	ldr	r3, [pc, #40]	; (8018dd8 <sys_timeout+0x40>)
 8018dae:	f240 1229 	movw	r2, #297	; 0x129
 8018db2:	490a      	ldr	r1, [pc, #40]	; (8018ddc <sys_timeout+0x44>)
 8018db4:	480a      	ldr	r0, [pc, #40]	; (8018de0 <sys_timeout+0x48>)
 8018db6:	f003 f84d 	bl	801be54 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018dba:	f7e9 f827 	bl	8001e0c <sys_now>
 8018dbe:	4602      	mov	r2, r0
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	4413      	add	r3, r2
 8018dc4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018dc6:	687a      	ldr	r2, [r7, #4]
 8018dc8:	68b9      	ldr	r1, [r7, #8]
 8018dca:	6978      	ldr	r0, [r7, #20]
 8018dcc:	f7ff ff22 	bl	8018c14 <sys_timeout_abs>
#endif
}
 8018dd0:	bf00      	nop
 8018dd2:	3718      	adds	r7, #24
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}
 8018dd8:	0801f2b4 	.word	0x0801f2b4
 8018ddc:	0801f350 	.word	0x0801f350
 8018de0:	0801f328 	.word	0x0801f328

08018de4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b084      	sub	sp, #16
 8018de8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8018dea:	f7e9 f80f 	bl	8001e0c <sys_now>
 8018dee:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8018df0:	4b1a      	ldr	r3, [pc, #104]	; (8018e5c <sys_check_timeouts+0x78>)
 8018df2:	781b      	ldrb	r3, [r3, #0]
 8018df4:	b2db      	uxtb	r3, r3
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d001      	beq.n	8018dfe <sys_check_timeouts+0x1a>
 8018dfa:	f7f8 ffa3 	bl	8011d44 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8018dfe:	4b18      	ldr	r3, [pc, #96]	; (8018e60 <sys_check_timeouts+0x7c>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018e04:	68bb      	ldr	r3, [r7, #8]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d022      	beq.n	8018e50 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018e0a:	68bb      	ldr	r3, [r7, #8]
 8018e0c:	685b      	ldr	r3, [r3, #4]
 8018e0e:	68fa      	ldr	r2, [r7, #12]
 8018e10:	1ad3      	subs	r3, r2, r3
 8018e12:	0fdb      	lsrs	r3, r3, #31
 8018e14:	f003 0301 	and.w	r3, r3, #1
 8018e18:	b2db      	uxtb	r3, r3
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d11a      	bne.n	8018e54 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018e1e:	68bb      	ldr	r3, [r7, #8]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	4a0f      	ldr	r2, [pc, #60]	; (8018e60 <sys_check_timeouts+0x7c>)
 8018e24:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018e26:	68bb      	ldr	r3, [r7, #8]
 8018e28:	689b      	ldr	r3, [r3, #8]
 8018e2a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018e2c:	68bb      	ldr	r3, [r7, #8]
 8018e2e:	68db      	ldr	r3, [r3, #12]
 8018e30:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018e32:	68bb      	ldr	r3, [r7, #8]
 8018e34:	685b      	ldr	r3, [r3, #4]
 8018e36:	4a0b      	ldr	r2, [pc, #44]	; (8018e64 <sys_check_timeouts+0x80>)
 8018e38:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018e3a:	68b9      	ldr	r1, [r7, #8]
 8018e3c:	2006      	movs	r0, #6
 8018e3e:	f7f8 fc45 	bl	80116cc <memp_free>
    if (handler != NULL) {
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d0d3      	beq.n	8018df0 <sys_check_timeouts+0xc>
      handler(arg);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	6838      	ldr	r0, [r7, #0]
 8018e4c:	4798      	blx	r3
  do {
 8018e4e:	e7cf      	b.n	8018df0 <sys_check_timeouts+0xc>
      return;
 8018e50:	bf00      	nop
 8018e52:	e000      	b.n	8018e56 <sys_check_timeouts+0x72>
      return;
 8018e54:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018e56:	3710      	adds	r7, #16
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}
 8018e5c:	2000afe1 	.word	0x2000afe1
 8018e60:	2000b034 	.word	0x2000b034
 8018e64:	2000b038 	.word	0x2000b038

08018e68 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018e6c:	f002 fef2 	bl	801bc54 <rand>
 8018e70:	4603      	mov	r3, r0
 8018e72:	b29b      	uxth	r3, r3
 8018e74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018e7e:	b29a      	uxth	r2, r3
 8018e80:	4b01      	ldr	r3, [pc, #4]	; (8018e88 <udp_init+0x20>)
 8018e82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018e84:	bf00      	nop
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	20000080 	.word	0x20000080

08018e8c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b084      	sub	sp, #16
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	60f8      	str	r0, [r7, #12]
 8018e94:	60b9      	str	r1, [r7, #8]
 8018e96:	4613      	mov	r3, r2
 8018e98:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d105      	bne.n	8018eac <udp_input_local_match+0x20>
 8018ea0:	4b27      	ldr	r3, [pc, #156]	; (8018f40 <udp_input_local_match+0xb4>)
 8018ea2:	2287      	movs	r2, #135	; 0x87
 8018ea4:	4927      	ldr	r1, [pc, #156]	; (8018f44 <udp_input_local_match+0xb8>)
 8018ea6:	4828      	ldr	r0, [pc, #160]	; (8018f48 <udp_input_local_match+0xbc>)
 8018ea8:	f002 ffd4 	bl	801be54 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018eac:	68bb      	ldr	r3, [r7, #8]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d105      	bne.n	8018ebe <udp_input_local_match+0x32>
 8018eb2:	4b23      	ldr	r3, [pc, #140]	; (8018f40 <udp_input_local_match+0xb4>)
 8018eb4:	2288      	movs	r2, #136	; 0x88
 8018eb6:	4925      	ldr	r1, [pc, #148]	; (8018f4c <udp_input_local_match+0xc0>)
 8018eb8:	4823      	ldr	r0, [pc, #140]	; (8018f48 <udp_input_local_match+0xbc>)
 8018eba:	f002 ffcb 	bl	801be54 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	7a1b      	ldrb	r3, [r3, #8]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d00b      	beq.n	8018ede <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	7a1a      	ldrb	r2, [r3, #8]
 8018eca:	4b21      	ldr	r3, [pc, #132]	; (8018f50 <udp_input_local_match+0xc4>)
 8018ecc:	685b      	ldr	r3, [r3, #4]
 8018ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018ed2:	3301      	adds	r3, #1
 8018ed4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ed6:	429a      	cmp	r2, r3
 8018ed8:	d001      	beq.n	8018ede <udp_input_local_match+0x52>
    return 0;
 8018eda:	2300      	movs	r3, #0
 8018edc:	e02b      	b.n	8018f36 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018ede:	79fb      	ldrb	r3, [r7, #7]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d018      	beq.n	8018f16 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d013      	beq.n	8018f12 <udp_input_local_match+0x86>
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d00f      	beq.n	8018f12 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018ef2:	4b17      	ldr	r3, [pc, #92]	; (8018f50 <udp_input_local_match+0xc4>)
 8018ef4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018efa:	d00a      	beq.n	8018f12 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	681a      	ldr	r2, [r3, #0]
 8018f00:	4b13      	ldr	r3, [pc, #76]	; (8018f50 <udp_input_local_match+0xc4>)
 8018f02:	695b      	ldr	r3, [r3, #20]
 8018f04:	405a      	eors	r2, r3
 8018f06:	68bb      	ldr	r3, [r7, #8]
 8018f08:	3308      	adds	r3, #8
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d110      	bne.n	8018f34 <udp_input_local_match+0xa8>
          return 1;
 8018f12:	2301      	movs	r3, #1
 8018f14:	e00f      	b.n	8018f36 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d009      	beq.n	8018f30 <udp_input_local_match+0xa4>
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d005      	beq.n	8018f30 <udp_input_local_match+0xa4>
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	681a      	ldr	r2, [r3, #0]
 8018f28:	4b09      	ldr	r3, [pc, #36]	; (8018f50 <udp_input_local_match+0xc4>)
 8018f2a:	695b      	ldr	r3, [r3, #20]
 8018f2c:	429a      	cmp	r2, r3
 8018f2e:	d101      	bne.n	8018f34 <udp_input_local_match+0xa8>
        return 1;
 8018f30:	2301      	movs	r3, #1
 8018f32:	e000      	b.n	8018f36 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018f34:	2300      	movs	r3, #0
}
 8018f36:	4618      	mov	r0, r3
 8018f38:	3710      	adds	r7, #16
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}
 8018f3e:	bf00      	nop
 8018f40:	0801f39c 	.word	0x0801f39c
 8018f44:	0801f3cc 	.word	0x0801f3cc
 8018f48:	0801f3f0 	.word	0x0801f3f0
 8018f4c:	0801f418 	.word	0x0801f418
 8018f50:	200042bc 	.word	0x200042bc

08018f54 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018f54:	b590      	push	{r4, r7, lr}
 8018f56:	b08d      	sub	sp, #52	; 0x34
 8018f58:	af02      	add	r7, sp, #8
 8018f5a:	6078      	str	r0, [r7, #4]
 8018f5c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8018f5e:	2300      	movs	r3, #0
 8018f60:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d105      	bne.n	8018f74 <udp_input+0x20>
 8018f68:	4b7c      	ldr	r3, [pc, #496]	; (801915c <udp_input+0x208>)
 8018f6a:	22cf      	movs	r2, #207	; 0xcf
 8018f6c:	497c      	ldr	r1, [pc, #496]	; (8019160 <udp_input+0x20c>)
 8018f6e:	487d      	ldr	r0, [pc, #500]	; (8019164 <udp_input+0x210>)
 8018f70:	f002 ff70 	bl	801be54 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018f74:	683b      	ldr	r3, [r7, #0]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d105      	bne.n	8018f86 <udp_input+0x32>
 8018f7a:	4b78      	ldr	r3, [pc, #480]	; (801915c <udp_input+0x208>)
 8018f7c:	22d0      	movs	r2, #208	; 0xd0
 8018f7e:	497a      	ldr	r1, [pc, #488]	; (8019168 <udp_input+0x214>)
 8018f80:	4878      	ldr	r0, [pc, #480]	; (8019164 <udp_input+0x210>)
 8018f82:	f002 ff67 	bl	801be54 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	895b      	ldrh	r3, [r3, #10]
 8018f8a:	2b07      	cmp	r3, #7
 8018f8c:	d803      	bhi.n	8018f96 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f7f9 fa12 	bl	80123b8 <pbuf_free>
    goto end;
 8018f94:	e0de      	b.n	8019154 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	685b      	ldr	r3, [r3, #4]
 8018f9a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018f9c:	4b73      	ldr	r3, [pc, #460]	; (801916c <udp_input+0x218>)
 8018f9e:	695b      	ldr	r3, [r3, #20]
 8018fa0:	4a72      	ldr	r2, [pc, #456]	; (801916c <udp_input+0x218>)
 8018fa2:	6812      	ldr	r2, [r2, #0]
 8018fa4:	4611      	mov	r1, r2
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f001 fca4 	bl	801a8f4 <ip4_addr_isbroadcast_u32>
 8018fac:	4603      	mov	r3, r0
 8018fae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018fb0:	697b      	ldr	r3, [r7, #20]
 8018fb2:	881b      	ldrh	r3, [r3, #0]
 8018fb4:	b29b      	uxth	r3, r3
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	f7f7 fe35 	bl	8010c26 <lwip_htons>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018fc0:	697b      	ldr	r3, [r7, #20]
 8018fc2:	885b      	ldrh	r3, [r3, #2]
 8018fc4:	b29b      	uxth	r3, r3
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7f7 fe2d 	bl	8010c26 <lwip_htons>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018fd8:	2300      	movs	r3, #0
 8018fda:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018fdc:	4b64      	ldr	r3, [pc, #400]	; (8019170 <udp_input+0x21c>)
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8018fe2:	e054      	b.n	801908e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fe6:	8a5b      	ldrh	r3, [r3, #18]
 8018fe8:	89fa      	ldrh	r2, [r7, #14]
 8018fea:	429a      	cmp	r2, r3
 8018fec:	d14a      	bne.n	8019084 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018fee:	7cfb      	ldrb	r3, [r7, #19]
 8018ff0:	461a      	mov	r2, r3
 8018ff2:	6839      	ldr	r1, [r7, #0]
 8018ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ff6:	f7ff ff49 	bl	8018e8c <udp_input_local_match>
 8018ffa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d041      	beq.n	8019084 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019002:	7c1b      	ldrb	r3, [r3, #16]
 8019004:	f003 0304 	and.w	r3, r3, #4
 8019008:	2b00      	cmp	r3, #0
 801900a:	d11d      	bne.n	8019048 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801900c:	69fb      	ldr	r3, [r7, #28]
 801900e:	2b00      	cmp	r3, #0
 8019010:	d102      	bne.n	8019018 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019014:	61fb      	str	r3, [r7, #28]
 8019016:	e017      	b.n	8019048 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019018:	7cfb      	ldrb	r3, [r7, #19]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d014      	beq.n	8019048 <udp_input+0xf4>
 801901e:	4b53      	ldr	r3, [pc, #332]	; (801916c <udp_input+0x218>)
 8019020:	695b      	ldr	r3, [r3, #20]
 8019022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019026:	d10f      	bne.n	8019048 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019028:	69fb      	ldr	r3, [r7, #28]
 801902a:	681a      	ldr	r2, [r3, #0]
 801902c:	683b      	ldr	r3, [r7, #0]
 801902e:	3304      	adds	r3, #4
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	429a      	cmp	r2, r3
 8019034:	d008      	beq.n	8019048 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019038:	681a      	ldr	r2, [r3, #0]
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	3304      	adds	r3, #4
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	429a      	cmp	r2, r3
 8019042:	d101      	bne.n	8019048 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019046:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801904a:	8a9b      	ldrh	r3, [r3, #20]
 801904c:	8a3a      	ldrh	r2, [r7, #16]
 801904e:	429a      	cmp	r2, r3
 8019050:	d118      	bne.n	8019084 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019054:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019056:	2b00      	cmp	r3, #0
 8019058:	d005      	beq.n	8019066 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905c:	685a      	ldr	r2, [r3, #4]
 801905e:	4b43      	ldr	r3, [pc, #268]	; (801916c <udp_input+0x218>)
 8019060:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019062:	429a      	cmp	r2, r3
 8019064:	d10e      	bne.n	8019084 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019066:	6a3b      	ldr	r3, [r7, #32]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d014      	beq.n	8019096 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801906e:	68da      	ldr	r2, [r3, #12]
 8019070:	6a3b      	ldr	r3, [r7, #32]
 8019072:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019074:	4b3e      	ldr	r3, [pc, #248]	; (8019170 <udp_input+0x21c>)
 8019076:	681a      	ldr	r2, [r3, #0]
 8019078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801907a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801907c:	4a3c      	ldr	r2, [pc, #240]	; (8019170 <udp_input+0x21c>)
 801907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019080:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019082:	e008      	b.n	8019096 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019086:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801908a:	68db      	ldr	r3, [r3, #12]
 801908c:	627b      	str	r3, [r7, #36]	; 0x24
 801908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019090:	2b00      	cmp	r3, #0
 8019092:	d1a7      	bne.n	8018fe4 <udp_input+0x90>
 8019094:	e000      	b.n	8019098 <udp_input+0x144>
        break;
 8019096:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801909a:	2b00      	cmp	r3, #0
 801909c:	d101      	bne.n	80190a2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801909e:	69fb      	ldr	r3, [r7, #28]
 80190a0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80190a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d002      	beq.n	80190ae <udp_input+0x15a>
    for_us = 1;
 80190a8:	2301      	movs	r3, #1
 80190aa:	76fb      	strb	r3, [r7, #27]
 80190ac:	e00a      	b.n	80190c4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	3304      	adds	r3, #4
 80190b2:	681a      	ldr	r2, [r3, #0]
 80190b4:	4b2d      	ldr	r3, [pc, #180]	; (801916c <udp_input+0x218>)
 80190b6:	695b      	ldr	r3, [r3, #20]
 80190b8:	429a      	cmp	r2, r3
 80190ba:	bf0c      	ite	eq
 80190bc:	2301      	moveq	r3, #1
 80190be:	2300      	movne	r3, #0
 80190c0:	b2db      	uxtb	r3, r3
 80190c2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80190c4:	7efb      	ldrb	r3, [r7, #27]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d041      	beq.n	801914e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80190ca:	2108      	movs	r1, #8
 80190cc:	6878      	ldr	r0, [r7, #4]
 80190ce:	f7f9 f8ed 	bl	80122ac <pbuf_remove_header>
 80190d2:	4603      	mov	r3, r0
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d00a      	beq.n	80190ee <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80190d8:	4b20      	ldr	r3, [pc, #128]	; (801915c <udp_input+0x208>)
 80190da:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80190de:	4925      	ldr	r1, [pc, #148]	; (8019174 <udp_input+0x220>)
 80190e0:	4820      	ldr	r0, [pc, #128]	; (8019164 <udp_input+0x210>)
 80190e2:	f002 feb7 	bl	801be54 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80190e6:	6878      	ldr	r0, [r7, #4]
 80190e8:	f7f9 f966 	bl	80123b8 <pbuf_free>
      goto end;
 80190ec:	e032      	b.n	8019154 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80190ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d012      	beq.n	801911a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80190f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f6:	699b      	ldr	r3, [r3, #24]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d00a      	beq.n	8019112 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80190fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190fe:	699c      	ldr	r4, [r3, #24]
 8019100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019102:	69d8      	ldr	r0, [r3, #28]
 8019104:	8a3b      	ldrh	r3, [r7, #16]
 8019106:	9300      	str	r3, [sp, #0]
 8019108:	4b1b      	ldr	r3, [pc, #108]	; (8019178 <udp_input+0x224>)
 801910a:	687a      	ldr	r2, [r7, #4]
 801910c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801910e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019110:	e021      	b.n	8019156 <udp_input+0x202>
        pbuf_free(p);
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	f7f9 f950 	bl	80123b8 <pbuf_free>
        goto end;
 8019118:	e01c      	b.n	8019154 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801911a:	7cfb      	ldrb	r3, [r7, #19]
 801911c:	2b00      	cmp	r3, #0
 801911e:	d112      	bne.n	8019146 <udp_input+0x1f2>
 8019120:	4b12      	ldr	r3, [pc, #72]	; (801916c <udp_input+0x218>)
 8019122:	695b      	ldr	r3, [r3, #20]
 8019124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019128:	2be0      	cmp	r3, #224	; 0xe0
 801912a:	d00c      	beq.n	8019146 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801912c:	4b0f      	ldr	r3, [pc, #60]	; (801916c <udp_input+0x218>)
 801912e:	899b      	ldrh	r3, [r3, #12]
 8019130:	3308      	adds	r3, #8
 8019132:	b29b      	uxth	r3, r3
 8019134:	b21b      	sxth	r3, r3
 8019136:	4619      	mov	r1, r3
 8019138:	6878      	ldr	r0, [r7, #4]
 801913a:	f7f9 f92a 	bl	8012392 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801913e:	2103      	movs	r1, #3
 8019140:	6878      	ldr	r0, [r7, #4]
 8019142:	f001 f8ad 	bl	801a2a0 <icmp_dest_unreach>
      pbuf_free(p);
 8019146:	6878      	ldr	r0, [r7, #4]
 8019148:	f7f9 f936 	bl	80123b8 <pbuf_free>
  return;
 801914c:	e003      	b.n	8019156 <udp_input+0x202>
    pbuf_free(p);
 801914e:	6878      	ldr	r0, [r7, #4]
 8019150:	f7f9 f932 	bl	80123b8 <pbuf_free>
  return;
 8019154:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019156:	372c      	adds	r7, #44	; 0x2c
 8019158:	46bd      	mov	sp, r7
 801915a:	bd90      	pop	{r4, r7, pc}
 801915c:	0801f39c 	.word	0x0801f39c
 8019160:	0801f440 	.word	0x0801f440
 8019164:	0801f3f0 	.word	0x0801f3f0
 8019168:	0801f458 	.word	0x0801f458
 801916c:	200042bc 	.word	0x200042bc
 8019170:	2000b040 	.word	0x2000b040
 8019174:	0801f474 	.word	0x0801f474
 8019178:	200042cc 	.word	0x200042cc

0801917c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801917c:	b480      	push	{r7}
 801917e:	b085      	sub	sp, #20
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
 8019184:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d01e      	beq.n	80191ca <udp_netif_ip_addr_changed+0x4e>
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d01a      	beq.n	80191ca <udp_netif_ip_addr_changed+0x4e>
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d017      	beq.n	80191ca <udp_netif_ip_addr_changed+0x4e>
 801919a:	683b      	ldr	r3, [r7, #0]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d013      	beq.n	80191ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80191a2:	4b0d      	ldr	r3, [pc, #52]	; (80191d8 <udp_netif_ip_addr_changed+0x5c>)
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	60fb      	str	r3, [r7, #12]
 80191a8:	e00c      	b.n	80191c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	681a      	ldr	r2, [r3, #0]
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	429a      	cmp	r2, r3
 80191b4:	d103      	bne.n	80191be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80191b6:	683b      	ldr	r3, [r7, #0]
 80191b8:	681a      	ldr	r2, [r3, #0]
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	68db      	ldr	r3, [r3, #12]
 80191c2:	60fb      	str	r3, [r7, #12]
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d1ef      	bne.n	80191aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80191ca:	bf00      	nop
 80191cc:	3714      	adds	r7, #20
 80191ce:	46bd      	mov	sp, r7
 80191d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d4:	4770      	bx	lr
 80191d6:	bf00      	nop
 80191d8:	2000b040 	.word	0x2000b040

080191dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80191e4:	4915      	ldr	r1, [pc, #84]	; (801923c <etharp_free_entry+0x60>)
 80191e6:	687a      	ldr	r2, [r7, #4]
 80191e8:	4613      	mov	r3, r2
 80191ea:	005b      	lsls	r3, r3, #1
 80191ec:	4413      	add	r3, r2
 80191ee:	00db      	lsls	r3, r3, #3
 80191f0:	440b      	add	r3, r1
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d013      	beq.n	8019220 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80191f8:	4910      	ldr	r1, [pc, #64]	; (801923c <etharp_free_entry+0x60>)
 80191fa:	687a      	ldr	r2, [r7, #4]
 80191fc:	4613      	mov	r3, r2
 80191fe:	005b      	lsls	r3, r3, #1
 8019200:	4413      	add	r3, r2
 8019202:	00db      	lsls	r3, r3, #3
 8019204:	440b      	add	r3, r1
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	4618      	mov	r0, r3
 801920a:	f7f9 f8d5 	bl	80123b8 <pbuf_free>
    arp_table[i].q = NULL;
 801920e:	490b      	ldr	r1, [pc, #44]	; (801923c <etharp_free_entry+0x60>)
 8019210:	687a      	ldr	r2, [r7, #4]
 8019212:	4613      	mov	r3, r2
 8019214:	005b      	lsls	r3, r3, #1
 8019216:	4413      	add	r3, r2
 8019218:	00db      	lsls	r3, r3, #3
 801921a:	440b      	add	r3, r1
 801921c:	2200      	movs	r2, #0
 801921e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019220:	4906      	ldr	r1, [pc, #24]	; (801923c <etharp_free_entry+0x60>)
 8019222:	687a      	ldr	r2, [r7, #4]
 8019224:	4613      	mov	r3, r2
 8019226:	005b      	lsls	r3, r3, #1
 8019228:	4413      	add	r3, r2
 801922a:	00db      	lsls	r3, r3, #3
 801922c:	440b      	add	r3, r1
 801922e:	3314      	adds	r3, #20
 8019230:	2200      	movs	r2, #0
 8019232:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019234:	bf00      	nop
 8019236:	3708      	adds	r7, #8
 8019238:	46bd      	mov	sp, r7
 801923a:	bd80      	pop	{r7, pc}
 801923c:	2000b044 	.word	0x2000b044

08019240 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b082      	sub	sp, #8
 8019244:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019246:	2300      	movs	r3, #0
 8019248:	607b      	str	r3, [r7, #4]
 801924a:	e096      	b.n	801937a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801924c:	494f      	ldr	r1, [pc, #316]	; (801938c <etharp_tmr+0x14c>)
 801924e:	687a      	ldr	r2, [r7, #4]
 8019250:	4613      	mov	r3, r2
 8019252:	005b      	lsls	r3, r3, #1
 8019254:	4413      	add	r3, r2
 8019256:	00db      	lsls	r3, r3, #3
 8019258:	440b      	add	r3, r1
 801925a:	3314      	adds	r3, #20
 801925c:	781b      	ldrb	r3, [r3, #0]
 801925e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019260:	78fb      	ldrb	r3, [r7, #3]
 8019262:	2b00      	cmp	r3, #0
 8019264:	f000 8086 	beq.w	8019374 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019268:	4948      	ldr	r1, [pc, #288]	; (801938c <etharp_tmr+0x14c>)
 801926a:	687a      	ldr	r2, [r7, #4]
 801926c:	4613      	mov	r3, r2
 801926e:	005b      	lsls	r3, r3, #1
 8019270:	4413      	add	r3, r2
 8019272:	00db      	lsls	r3, r3, #3
 8019274:	440b      	add	r3, r1
 8019276:	3312      	adds	r3, #18
 8019278:	881b      	ldrh	r3, [r3, #0]
 801927a:	3301      	adds	r3, #1
 801927c:	b298      	uxth	r0, r3
 801927e:	4943      	ldr	r1, [pc, #268]	; (801938c <etharp_tmr+0x14c>)
 8019280:	687a      	ldr	r2, [r7, #4]
 8019282:	4613      	mov	r3, r2
 8019284:	005b      	lsls	r3, r3, #1
 8019286:	4413      	add	r3, r2
 8019288:	00db      	lsls	r3, r3, #3
 801928a:	440b      	add	r3, r1
 801928c:	3312      	adds	r3, #18
 801928e:	4602      	mov	r2, r0
 8019290:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019292:	493e      	ldr	r1, [pc, #248]	; (801938c <etharp_tmr+0x14c>)
 8019294:	687a      	ldr	r2, [r7, #4]
 8019296:	4613      	mov	r3, r2
 8019298:	005b      	lsls	r3, r3, #1
 801929a:	4413      	add	r3, r2
 801929c:	00db      	lsls	r3, r3, #3
 801929e:	440b      	add	r3, r1
 80192a0:	3312      	adds	r3, #18
 80192a2:	881b      	ldrh	r3, [r3, #0]
 80192a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80192a8:	d215      	bcs.n	80192d6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80192aa:	4938      	ldr	r1, [pc, #224]	; (801938c <etharp_tmr+0x14c>)
 80192ac:	687a      	ldr	r2, [r7, #4]
 80192ae:	4613      	mov	r3, r2
 80192b0:	005b      	lsls	r3, r3, #1
 80192b2:	4413      	add	r3, r2
 80192b4:	00db      	lsls	r3, r3, #3
 80192b6:	440b      	add	r3, r1
 80192b8:	3314      	adds	r3, #20
 80192ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80192bc:	2b01      	cmp	r3, #1
 80192be:	d10e      	bne.n	80192de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80192c0:	4932      	ldr	r1, [pc, #200]	; (801938c <etharp_tmr+0x14c>)
 80192c2:	687a      	ldr	r2, [r7, #4]
 80192c4:	4613      	mov	r3, r2
 80192c6:	005b      	lsls	r3, r3, #1
 80192c8:	4413      	add	r3, r2
 80192ca:	00db      	lsls	r3, r3, #3
 80192cc:	440b      	add	r3, r1
 80192ce:	3312      	adds	r3, #18
 80192d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80192d2:	2b04      	cmp	r3, #4
 80192d4:	d903      	bls.n	80192de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80192d6:	6878      	ldr	r0, [r7, #4]
 80192d8:	f7ff ff80 	bl	80191dc <etharp_free_entry>
 80192dc:	e04a      	b.n	8019374 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80192de:	492b      	ldr	r1, [pc, #172]	; (801938c <etharp_tmr+0x14c>)
 80192e0:	687a      	ldr	r2, [r7, #4]
 80192e2:	4613      	mov	r3, r2
 80192e4:	005b      	lsls	r3, r3, #1
 80192e6:	4413      	add	r3, r2
 80192e8:	00db      	lsls	r3, r3, #3
 80192ea:	440b      	add	r3, r1
 80192ec:	3314      	adds	r3, #20
 80192ee:	781b      	ldrb	r3, [r3, #0]
 80192f0:	2b03      	cmp	r3, #3
 80192f2:	d10a      	bne.n	801930a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80192f4:	4925      	ldr	r1, [pc, #148]	; (801938c <etharp_tmr+0x14c>)
 80192f6:	687a      	ldr	r2, [r7, #4]
 80192f8:	4613      	mov	r3, r2
 80192fa:	005b      	lsls	r3, r3, #1
 80192fc:	4413      	add	r3, r2
 80192fe:	00db      	lsls	r3, r3, #3
 8019300:	440b      	add	r3, r1
 8019302:	3314      	adds	r3, #20
 8019304:	2204      	movs	r2, #4
 8019306:	701a      	strb	r2, [r3, #0]
 8019308:	e034      	b.n	8019374 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801930a:	4920      	ldr	r1, [pc, #128]	; (801938c <etharp_tmr+0x14c>)
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	4613      	mov	r3, r2
 8019310:	005b      	lsls	r3, r3, #1
 8019312:	4413      	add	r3, r2
 8019314:	00db      	lsls	r3, r3, #3
 8019316:	440b      	add	r3, r1
 8019318:	3314      	adds	r3, #20
 801931a:	781b      	ldrb	r3, [r3, #0]
 801931c:	2b04      	cmp	r3, #4
 801931e:	d10a      	bne.n	8019336 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019320:	491a      	ldr	r1, [pc, #104]	; (801938c <etharp_tmr+0x14c>)
 8019322:	687a      	ldr	r2, [r7, #4]
 8019324:	4613      	mov	r3, r2
 8019326:	005b      	lsls	r3, r3, #1
 8019328:	4413      	add	r3, r2
 801932a:	00db      	lsls	r3, r3, #3
 801932c:	440b      	add	r3, r1
 801932e:	3314      	adds	r3, #20
 8019330:	2202      	movs	r2, #2
 8019332:	701a      	strb	r2, [r3, #0]
 8019334:	e01e      	b.n	8019374 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019336:	4915      	ldr	r1, [pc, #84]	; (801938c <etharp_tmr+0x14c>)
 8019338:	687a      	ldr	r2, [r7, #4]
 801933a:	4613      	mov	r3, r2
 801933c:	005b      	lsls	r3, r3, #1
 801933e:	4413      	add	r3, r2
 8019340:	00db      	lsls	r3, r3, #3
 8019342:	440b      	add	r3, r1
 8019344:	3314      	adds	r3, #20
 8019346:	781b      	ldrb	r3, [r3, #0]
 8019348:	2b01      	cmp	r3, #1
 801934a:	d113      	bne.n	8019374 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801934c:	490f      	ldr	r1, [pc, #60]	; (801938c <etharp_tmr+0x14c>)
 801934e:	687a      	ldr	r2, [r7, #4]
 8019350:	4613      	mov	r3, r2
 8019352:	005b      	lsls	r3, r3, #1
 8019354:	4413      	add	r3, r2
 8019356:	00db      	lsls	r3, r3, #3
 8019358:	440b      	add	r3, r1
 801935a:	3308      	adds	r3, #8
 801935c:	6818      	ldr	r0, [r3, #0]
 801935e:	687a      	ldr	r2, [r7, #4]
 8019360:	4613      	mov	r3, r2
 8019362:	005b      	lsls	r3, r3, #1
 8019364:	4413      	add	r3, r2
 8019366:	00db      	lsls	r3, r3, #3
 8019368:	4a08      	ldr	r2, [pc, #32]	; (801938c <etharp_tmr+0x14c>)
 801936a:	4413      	add	r3, r2
 801936c:	3304      	adds	r3, #4
 801936e:	4619      	mov	r1, r3
 8019370:	f000 fe6e 	bl	801a050 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	3301      	adds	r3, #1
 8019378:	607b      	str	r3, [r7, #4]
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	2b09      	cmp	r3, #9
 801937e:	f77f af65 	ble.w	801924c <etharp_tmr+0xc>
      }
    }
  }
}
 8019382:	bf00      	nop
 8019384:	bf00      	nop
 8019386:	3708      	adds	r7, #8
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}
 801938c:	2000b044 	.word	0x2000b044

08019390 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b08a      	sub	sp, #40	; 0x28
 8019394:	af00      	add	r7, sp, #0
 8019396:	60f8      	str	r0, [r7, #12]
 8019398:	460b      	mov	r3, r1
 801939a:	607a      	str	r2, [r7, #4]
 801939c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801939e:	230a      	movs	r3, #10
 80193a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80193a2:	230a      	movs	r3, #10
 80193a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80193a6:	230a      	movs	r3, #10
 80193a8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80193aa:	2300      	movs	r3, #0
 80193ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80193ae:	230a      	movs	r3, #10
 80193b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80193b2:	2300      	movs	r3, #0
 80193b4:	83bb      	strh	r3, [r7, #28]
 80193b6:	2300      	movs	r3, #0
 80193b8:	837b      	strh	r3, [r7, #26]
 80193ba:	2300      	movs	r3, #0
 80193bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80193be:	2300      	movs	r3, #0
 80193c0:	843b      	strh	r3, [r7, #32]
 80193c2:	e0ae      	b.n	8019522 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80193c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80193c8:	49a6      	ldr	r1, [pc, #664]	; (8019664 <etharp_find_entry+0x2d4>)
 80193ca:	4613      	mov	r3, r2
 80193cc:	005b      	lsls	r3, r3, #1
 80193ce:	4413      	add	r3, r2
 80193d0:	00db      	lsls	r3, r3, #3
 80193d2:	440b      	add	r3, r1
 80193d4:	3314      	adds	r3, #20
 80193d6:	781b      	ldrb	r3, [r3, #0]
 80193d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80193da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80193de:	2b0a      	cmp	r3, #10
 80193e0:	d105      	bne.n	80193ee <etharp_find_entry+0x5e>
 80193e2:	7dfb      	ldrb	r3, [r7, #23]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d102      	bne.n	80193ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80193e8:	8c3b      	ldrh	r3, [r7, #32]
 80193ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80193ec:	e095      	b.n	801951a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80193ee:	7dfb      	ldrb	r3, [r7, #23]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	f000 8092 	beq.w	801951a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80193f6:	7dfb      	ldrb	r3, [r7, #23]
 80193f8:	2b01      	cmp	r3, #1
 80193fa:	d009      	beq.n	8019410 <etharp_find_entry+0x80>
 80193fc:	7dfb      	ldrb	r3, [r7, #23]
 80193fe:	2b01      	cmp	r3, #1
 8019400:	d806      	bhi.n	8019410 <etharp_find_entry+0x80>
 8019402:	4b99      	ldr	r3, [pc, #612]	; (8019668 <etharp_find_entry+0x2d8>)
 8019404:	f240 1223 	movw	r2, #291	; 0x123
 8019408:	4998      	ldr	r1, [pc, #608]	; (801966c <etharp_find_entry+0x2dc>)
 801940a:	4899      	ldr	r0, [pc, #612]	; (8019670 <etharp_find_entry+0x2e0>)
 801940c:	f002 fd22 	bl	801be54 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d020      	beq.n	8019458 <etharp_find_entry+0xc8>
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	6819      	ldr	r1, [r3, #0]
 801941a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801941e:	4891      	ldr	r0, [pc, #580]	; (8019664 <etharp_find_entry+0x2d4>)
 8019420:	4613      	mov	r3, r2
 8019422:	005b      	lsls	r3, r3, #1
 8019424:	4413      	add	r3, r2
 8019426:	00db      	lsls	r3, r3, #3
 8019428:	4403      	add	r3, r0
 801942a:	3304      	adds	r3, #4
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	4299      	cmp	r1, r3
 8019430:	d112      	bne.n	8019458 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d00c      	beq.n	8019452 <etharp_find_entry+0xc2>
 8019438:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801943c:	4989      	ldr	r1, [pc, #548]	; (8019664 <etharp_find_entry+0x2d4>)
 801943e:	4613      	mov	r3, r2
 8019440:	005b      	lsls	r3, r3, #1
 8019442:	4413      	add	r3, r2
 8019444:	00db      	lsls	r3, r3, #3
 8019446:	440b      	add	r3, r1
 8019448:	3308      	adds	r3, #8
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	687a      	ldr	r2, [r7, #4]
 801944e:	429a      	cmp	r2, r3
 8019450:	d102      	bne.n	8019458 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019452:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019456:	e100      	b.n	801965a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019458:	7dfb      	ldrb	r3, [r7, #23]
 801945a:	2b01      	cmp	r3, #1
 801945c:	d140      	bne.n	80194e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801945e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019462:	4980      	ldr	r1, [pc, #512]	; (8019664 <etharp_find_entry+0x2d4>)
 8019464:	4613      	mov	r3, r2
 8019466:	005b      	lsls	r3, r3, #1
 8019468:	4413      	add	r3, r2
 801946a:	00db      	lsls	r3, r3, #3
 801946c:	440b      	add	r3, r1
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d01a      	beq.n	80194aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019478:	497a      	ldr	r1, [pc, #488]	; (8019664 <etharp_find_entry+0x2d4>)
 801947a:	4613      	mov	r3, r2
 801947c:	005b      	lsls	r3, r3, #1
 801947e:	4413      	add	r3, r2
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	440b      	add	r3, r1
 8019484:	3312      	adds	r3, #18
 8019486:	881b      	ldrh	r3, [r3, #0]
 8019488:	8bba      	ldrh	r2, [r7, #28]
 801948a:	429a      	cmp	r2, r3
 801948c:	d845      	bhi.n	801951a <etharp_find_entry+0x18a>
            old_queue = i;
 801948e:	8c3b      	ldrh	r3, [r7, #32]
 8019490:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019496:	4973      	ldr	r1, [pc, #460]	; (8019664 <etharp_find_entry+0x2d4>)
 8019498:	4613      	mov	r3, r2
 801949a:	005b      	lsls	r3, r3, #1
 801949c:	4413      	add	r3, r2
 801949e:	00db      	lsls	r3, r3, #3
 80194a0:	440b      	add	r3, r1
 80194a2:	3312      	adds	r3, #18
 80194a4:	881b      	ldrh	r3, [r3, #0]
 80194a6:	83bb      	strh	r3, [r7, #28]
 80194a8:	e037      	b.n	801951a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80194aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80194ae:	496d      	ldr	r1, [pc, #436]	; (8019664 <etharp_find_entry+0x2d4>)
 80194b0:	4613      	mov	r3, r2
 80194b2:	005b      	lsls	r3, r3, #1
 80194b4:	4413      	add	r3, r2
 80194b6:	00db      	lsls	r3, r3, #3
 80194b8:	440b      	add	r3, r1
 80194ba:	3312      	adds	r3, #18
 80194bc:	881b      	ldrh	r3, [r3, #0]
 80194be:	8b7a      	ldrh	r2, [r7, #26]
 80194c0:	429a      	cmp	r2, r3
 80194c2:	d82a      	bhi.n	801951a <etharp_find_entry+0x18a>
            old_pending = i;
 80194c4:	8c3b      	ldrh	r3, [r7, #32]
 80194c6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80194c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80194cc:	4965      	ldr	r1, [pc, #404]	; (8019664 <etharp_find_entry+0x2d4>)
 80194ce:	4613      	mov	r3, r2
 80194d0:	005b      	lsls	r3, r3, #1
 80194d2:	4413      	add	r3, r2
 80194d4:	00db      	lsls	r3, r3, #3
 80194d6:	440b      	add	r3, r1
 80194d8:	3312      	adds	r3, #18
 80194da:	881b      	ldrh	r3, [r3, #0]
 80194dc:	837b      	strh	r3, [r7, #26]
 80194de:	e01c      	b.n	801951a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80194e0:	7dfb      	ldrb	r3, [r7, #23]
 80194e2:	2b01      	cmp	r3, #1
 80194e4:	d919      	bls.n	801951a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80194e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80194ea:	495e      	ldr	r1, [pc, #376]	; (8019664 <etharp_find_entry+0x2d4>)
 80194ec:	4613      	mov	r3, r2
 80194ee:	005b      	lsls	r3, r3, #1
 80194f0:	4413      	add	r3, r2
 80194f2:	00db      	lsls	r3, r3, #3
 80194f4:	440b      	add	r3, r1
 80194f6:	3312      	adds	r3, #18
 80194f8:	881b      	ldrh	r3, [r3, #0]
 80194fa:	8b3a      	ldrh	r2, [r7, #24]
 80194fc:	429a      	cmp	r2, r3
 80194fe:	d80c      	bhi.n	801951a <etharp_find_entry+0x18a>
            old_stable = i;
 8019500:	8c3b      	ldrh	r3, [r7, #32]
 8019502:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8019504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019508:	4956      	ldr	r1, [pc, #344]	; (8019664 <etharp_find_entry+0x2d4>)
 801950a:	4613      	mov	r3, r2
 801950c:	005b      	lsls	r3, r3, #1
 801950e:	4413      	add	r3, r2
 8019510:	00db      	lsls	r3, r3, #3
 8019512:	440b      	add	r3, r1
 8019514:	3312      	adds	r3, #18
 8019516:	881b      	ldrh	r3, [r3, #0]
 8019518:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801951a:	8c3b      	ldrh	r3, [r7, #32]
 801951c:	3301      	adds	r3, #1
 801951e:	b29b      	uxth	r3, r3
 8019520:	843b      	strh	r3, [r7, #32]
 8019522:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019526:	2b09      	cmp	r3, #9
 8019528:	f77f af4c 	ble.w	80193c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801952c:	7afb      	ldrb	r3, [r7, #11]
 801952e:	f003 0302 	and.w	r3, r3, #2
 8019532:	2b00      	cmp	r3, #0
 8019534:	d108      	bne.n	8019548 <etharp_find_entry+0x1b8>
 8019536:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801953a:	2b0a      	cmp	r3, #10
 801953c:	d107      	bne.n	801954e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801953e:	7afb      	ldrb	r3, [r7, #11]
 8019540:	f003 0301 	and.w	r3, r3, #1
 8019544:	2b00      	cmp	r3, #0
 8019546:	d102      	bne.n	801954e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019548:	f04f 33ff 	mov.w	r3, #4294967295
 801954c:	e085      	b.n	801965a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801954e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019552:	2b09      	cmp	r3, #9
 8019554:	dc02      	bgt.n	801955c <etharp_find_entry+0x1cc>
    i = empty;
 8019556:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019558:	843b      	strh	r3, [r7, #32]
 801955a:	e039      	b.n	80195d0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801955c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019560:	2b09      	cmp	r3, #9
 8019562:	dc14      	bgt.n	801958e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019566:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019568:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801956c:	493d      	ldr	r1, [pc, #244]	; (8019664 <etharp_find_entry+0x2d4>)
 801956e:	4613      	mov	r3, r2
 8019570:	005b      	lsls	r3, r3, #1
 8019572:	4413      	add	r3, r2
 8019574:	00db      	lsls	r3, r3, #3
 8019576:	440b      	add	r3, r1
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d018      	beq.n	80195b0 <etharp_find_entry+0x220>
 801957e:	4b3a      	ldr	r3, [pc, #232]	; (8019668 <etharp_find_entry+0x2d8>)
 8019580:	f240 126d 	movw	r2, #365	; 0x16d
 8019584:	493b      	ldr	r1, [pc, #236]	; (8019674 <etharp_find_entry+0x2e4>)
 8019586:	483a      	ldr	r0, [pc, #232]	; (8019670 <etharp_find_entry+0x2e0>)
 8019588:	f002 fc64 	bl	801be54 <iprintf>
 801958c:	e010      	b.n	80195b0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801958e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8019592:	2b09      	cmp	r3, #9
 8019594:	dc02      	bgt.n	801959c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019596:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019598:	843b      	strh	r3, [r7, #32]
 801959a:	e009      	b.n	80195b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801959c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80195a0:	2b09      	cmp	r3, #9
 80195a2:	dc02      	bgt.n	80195aa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80195a4:	8bfb      	ldrh	r3, [r7, #30]
 80195a6:	843b      	strh	r3, [r7, #32]
 80195a8:	e002      	b.n	80195b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80195aa:	f04f 33ff 	mov.w	r3, #4294967295
 80195ae:	e054      	b.n	801965a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80195b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80195b4:	2b09      	cmp	r3, #9
 80195b6:	dd06      	ble.n	80195c6 <etharp_find_entry+0x236>
 80195b8:	4b2b      	ldr	r3, [pc, #172]	; (8019668 <etharp_find_entry+0x2d8>)
 80195ba:	f240 127f 	movw	r2, #383	; 0x17f
 80195be:	492e      	ldr	r1, [pc, #184]	; (8019678 <etharp_find_entry+0x2e8>)
 80195c0:	482b      	ldr	r0, [pc, #172]	; (8019670 <etharp_find_entry+0x2e0>)
 80195c2:	f002 fc47 	bl	801be54 <iprintf>
    etharp_free_entry(i);
 80195c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7ff fe06 	bl	80191dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80195d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80195d4:	2b09      	cmp	r3, #9
 80195d6:	dd06      	ble.n	80195e6 <etharp_find_entry+0x256>
 80195d8:	4b23      	ldr	r3, [pc, #140]	; (8019668 <etharp_find_entry+0x2d8>)
 80195da:	f240 1283 	movw	r2, #387	; 0x183
 80195de:	4926      	ldr	r1, [pc, #152]	; (8019678 <etharp_find_entry+0x2e8>)
 80195e0:	4823      	ldr	r0, [pc, #140]	; (8019670 <etharp_find_entry+0x2e0>)
 80195e2:	f002 fc37 	bl	801be54 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80195e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80195ea:	491e      	ldr	r1, [pc, #120]	; (8019664 <etharp_find_entry+0x2d4>)
 80195ec:	4613      	mov	r3, r2
 80195ee:	005b      	lsls	r3, r3, #1
 80195f0:	4413      	add	r3, r2
 80195f2:	00db      	lsls	r3, r3, #3
 80195f4:	440b      	add	r3, r1
 80195f6:	3314      	adds	r3, #20
 80195f8:	781b      	ldrb	r3, [r3, #0]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d006      	beq.n	801960c <etharp_find_entry+0x27c>
 80195fe:	4b1a      	ldr	r3, [pc, #104]	; (8019668 <etharp_find_entry+0x2d8>)
 8019600:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8019604:	491d      	ldr	r1, [pc, #116]	; (801967c <etharp_find_entry+0x2ec>)
 8019606:	481a      	ldr	r0, [pc, #104]	; (8019670 <etharp_find_entry+0x2e0>)
 8019608:	f002 fc24 	bl	801be54 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d00b      	beq.n	801962a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019612:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	6819      	ldr	r1, [r3, #0]
 801961a:	4812      	ldr	r0, [pc, #72]	; (8019664 <etharp_find_entry+0x2d4>)
 801961c:	4613      	mov	r3, r2
 801961e:	005b      	lsls	r3, r3, #1
 8019620:	4413      	add	r3, r2
 8019622:	00db      	lsls	r3, r3, #3
 8019624:	4403      	add	r3, r0
 8019626:	3304      	adds	r3, #4
 8019628:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801962a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801962e:	490d      	ldr	r1, [pc, #52]	; (8019664 <etharp_find_entry+0x2d4>)
 8019630:	4613      	mov	r3, r2
 8019632:	005b      	lsls	r3, r3, #1
 8019634:	4413      	add	r3, r2
 8019636:	00db      	lsls	r3, r3, #3
 8019638:	440b      	add	r3, r1
 801963a:	3312      	adds	r3, #18
 801963c:	2200      	movs	r2, #0
 801963e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019640:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019644:	4907      	ldr	r1, [pc, #28]	; (8019664 <etharp_find_entry+0x2d4>)
 8019646:	4613      	mov	r3, r2
 8019648:	005b      	lsls	r3, r3, #1
 801964a:	4413      	add	r3, r2
 801964c:	00db      	lsls	r3, r3, #3
 801964e:	440b      	add	r3, r1
 8019650:	3308      	adds	r3, #8
 8019652:	687a      	ldr	r2, [r7, #4]
 8019654:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019656:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801965a:	4618      	mov	r0, r3
 801965c:	3728      	adds	r7, #40	; 0x28
 801965e:	46bd      	mov	sp, r7
 8019660:	bd80      	pop	{r7, pc}
 8019662:	bf00      	nop
 8019664:	2000b044 	.word	0x2000b044
 8019668:	0801f700 	.word	0x0801f700
 801966c:	0801f738 	.word	0x0801f738
 8019670:	0801f778 	.word	0x0801f778
 8019674:	0801f7a0 	.word	0x0801f7a0
 8019678:	0801f7b8 	.word	0x0801f7b8
 801967c:	0801f7cc 	.word	0x0801f7cc

08019680 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b088      	sub	sp, #32
 8019684:	af02      	add	r7, sp, #8
 8019686:	60f8      	str	r0, [r7, #12]
 8019688:	60b9      	str	r1, [r7, #8]
 801968a:	607a      	str	r2, [r7, #4]
 801968c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019694:	2b06      	cmp	r3, #6
 8019696:	d006      	beq.n	80196a6 <etharp_update_arp_entry+0x26>
 8019698:	4b48      	ldr	r3, [pc, #288]	; (80197bc <etharp_update_arp_entry+0x13c>)
 801969a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801969e:	4948      	ldr	r1, [pc, #288]	; (80197c0 <etharp_update_arp_entry+0x140>)
 80196a0:	4848      	ldr	r0, [pc, #288]	; (80197c4 <etharp_update_arp_entry+0x144>)
 80196a2:	f002 fbd7 	bl	801be54 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80196a6:	68bb      	ldr	r3, [r7, #8]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d012      	beq.n	80196d2 <etharp_update_arp_entry+0x52>
 80196ac:	68bb      	ldr	r3, [r7, #8]
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d00e      	beq.n	80196d2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80196b4:	68bb      	ldr	r3, [r7, #8]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	68f9      	ldr	r1, [r7, #12]
 80196ba:	4618      	mov	r0, r3
 80196bc:	f001 f91a 	bl	801a8f4 <ip4_addr_isbroadcast_u32>
 80196c0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d105      	bne.n	80196d2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80196c6:	68bb      	ldr	r3, [r7, #8]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80196ce:	2be0      	cmp	r3, #224	; 0xe0
 80196d0:	d102      	bne.n	80196d8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80196d2:	f06f 030f 	mvn.w	r3, #15
 80196d6:	e06c      	b.n	80197b2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80196d8:	78fb      	ldrb	r3, [r7, #3]
 80196da:	68fa      	ldr	r2, [r7, #12]
 80196dc:	4619      	mov	r1, r3
 80196de:	68b8      	ldr	r0, [r7, #8]
 80196e0:	f7ff fe56 	bl	8019390 <etharp_find_entry>
 80196e4:	4603      	mov	r3, r0
 80196e6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80196e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	da02      	bge.n	80196f6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80196f0:	8afb      	ldrh	r3, [r7, #22]
 80196f2:	b25b      	sxtb	r3, r3
 80196f4:	e05d      	b.n	80197b2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80196f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80196fa:	4933      	ldr	r1, [pc, #204]	; (80197c8 <etharp_update_arp_entry+0x148>)
 80196fc:	4613      	mov	r3, r2
 80196fe:	005b      	lsls	r3, r3, #1
 8019700:	4413      	add	r3, r2
 8019702:	00db      	lsls	r3, r3, #3
 8019704:	440b      	add	r3, r1
 8019706:	3314      	adds	r3, #20
 8019708:	2202      	movs	r2, #2
 801970a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801970c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019710:	492d      	ldr	r1, [pc, #180]	; (80197c8 <etharp_update_arp_entry+0x148>)
 8019712:	4613      	mov	r3, r2
 8019714:	005b      	lsls	r3, r3, #1
 8019716:	4413      	add	r3, r2
 8019718:	00db      	lsls	r3, r3, #3
 801971a:	440b      	add	r3, r1
 801971c:	3308      	adds	r3, #8
 801971e:	68fa      	ldr	r2, [r7, #12]
 8019720:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019722:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019726:	4613      	mov	r3, r2
 8019728:	005b      	lsls	r3, r3, #1
 801972a:	4413      	add	r3, r2
 801972c:	00db      	lsls	r3, r3, #3
 801972e:	3308      	adds	r3, #8
 8019730:	4a25      	ldr	r2, [pc, #148]	; (80197c8 <etharp_update_arp_entry+0x148>)
 8019732:	4413      	add	r3, r2
 8019734:	3304      	adds	r3, #4
 8019736:	2206      	movs	r2, #6
 8019738:	6879      	ldr	r1, [r7, #4]
 801973a:	4618      	mov	r0, r3
 801973c:	f002 fcfb 	bl	801c136 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019740:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019744:	4920      	ldr	r1, [pc, #128]	; (80197c8 <etharp_update_arp_entry+0x148>)
 8019746:	4613      	mov	r3, r2
 8019748:	005b      	lsls	r3, r3, #1
 801974a:	4413      	add	r3, r2
 801974c:	00db      	lsls	r3, r3, #3
 801974e:	440b      	add	r3, r1
 8019750:	3312      	adds	r3, #18
 8019752:	2200      	movs	r2, #0
 8019754:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019756:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801975a:	491b      	ldr	r1, [pc, #108]	; (80197c8 <etharp_update_arp_entry+0x148>)
 801975c:	4613      	mov	r3, r2
 801975e:	005b      	lsls	r3, r3, #1
 8019760:	4413      	add	r3, r2
 8019762:	00db      	lsls	r3, r3, #3
 8019764:	440b      	add	r3, r1
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d021      	beq.n	80197b0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801976c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019770:	4915      	ldr	r1, [pc, #84]	; (80197c8 <etharp_update_arp_entry+0x148>)
 8019772:	4613      	mov	r3, r2
 8019774:	005b      	lsls	r3, r3, #1
 8019776:	4413      	add	r3, r2
 8019778:	00db      	lsls	r3, r3, #3
 801977a:	440b      	add	r3, r1
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019780:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019784:	4910      	ldr	r1, [pc, #64]	; (80197c8 <etharp_update_arp_entry+0x148>)
 8019786:	4613      	mov	r3, r2
 8019788:	005b      	lsls	r3, r3, #1
 801978a:	4413      	add	r3, r2
 801978c:	00db      	lsls	r3, r3, #3
 801978e:	440b      	add	r3, r1
 8019790:	2200      	movs	r2, #0
 8019792:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801979a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801979e:	9300      	str	r3, [sp, #0]
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	6939      	ldr	r1, [r7, #16]
 80197a4:	68f8      	ldr	r0, [r7, #12]
 80197a6:	f001 ffb3 	bl	801b710 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80197aa:	6938      	ldr	r0, [r7, #16]
 80197ac:	f7f8 fe04 	bl	80123b8 <pbuf_free>
  }
  return ERR_OK;
 80197b0:	2300      	movs	r3, #0
}
 80197b2:	4618      	mov	r0, r3
 80197b4:	3718      	adds	r7, #24
 80197b6:	46bd      	mov	sp, r7
 80197b8:	bd80      	pop	{r7, pc}
 80197ba:	bf00      	nop
 80197bc:	0801f700 	.word	0x0801f700
 80197c0:	0801f7f8 	.word	0x0801f7f8
 80197c4:	0801f778 	.word	0x0801f778
 80197c8:	2000b044 	.word	0x2000b044

080197cc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b084      	sub	sp, #16
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80197d4:	2300      	movs	r3, #0
 80197d6:	60fb      	str	r3, [r7, #12]
 80197d8:	e01e      	b.n	8019818 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80197da:	4913      	ldr	r1, [pc, #76]	; (8019828 <etharp_cleanup_netif+0x5c>)
 80197dc:	68fa      	ldr	r2, [r7, #12]
 80197de:	4613      	mov	r3, r2
 80197e0:	005b      	lsls	r3, r3, #1
 80197e2:	4413      	add	r3, r2
 80197e4:	00db      	lsls	r3, r3, #3
 80197e6:	440b      	add	r3, r1
 80197e8:	3314      	adds	r3, #20
 80197ea:	781b      	ldrb	r3, [r3, #0]
 80197ec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80197ee:	7afb      	ldrb	r3, [r7, #11]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d00e      	beq.n	8019812 <etharp_cleanup_netif+0x46>
 80197f4:	490c      	ldr	r1, [pc, #48]	; (8019828 <etharp_cleanup_netif+0x5c>)
 80197f6:	68fa      	ldr	r2, [r7, #12]
 80197f8:	4613      	mov	r3, r2
 80197fa:	005b      	lsls	r3, r3, #1
 80197fc:	4413      	add	r3, r2
 80197fe:	00db      	lsls	r3, r3, #3
 8019800:	440b      	add	r3, r1
 8019802:	3308      	adds	r3, #8
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	687a      	ldr	r2, [r7, #4]
 8019808:	429a      	cmp	r2, r3
 801980a:	d102      	bne.n	8019812 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801980c:	68f8      	ldr	r0, [r7, #12]
 801980e:	f7ff fce5 	bl	80191dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	3301      	adds	r3, #1
 8019816:	60fb      	str	r3, [r7, #12]
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	2b09      	cmp	r3, #9
 801981c:	dddd      	ble.n	80197da <etharp_cleanup_netif+0xe>
    }
  }
}
 801981e:	bf00      	nop
 8019820:	bf00      	nop
 8019822:	3710      	adds	r7, #16
 8019824:	46bd      	mov	sp, r7
 8019826:	bd80      	pop	{r7, pc}
 8019828:	2000b044 	.word	0x2000b044

0801982c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801982c:	b5b0      	push	{r4, r5, r7, lr}
 801982e:	b08a      	sub	sp, #40	; 0x28
 8019830:	af04      	add	r7, sp, #16
 8019832:	6078      	str	r0, [r7, #4]
 8019834:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d107      	bne.n	801984c <etharp_input+0x20>
 801983c:	4b3d      	ldr	r3, [pc, #244]	; (8019934 <etharp_input+0x108>)
 801983e:	f240 228a 	movw	r2, #650	; 0x28a
 8019842:	493d      	ldr	r1, [pc, #244]	; (8019938 <etharp_input+0x10c>)
 8019844:	483d      	ldr	r0, [pc, #244]	; (801993c <etharp_input+0x110>)
 8019846:	f002 fb05 	bl	801be54 <iprintf>
 801984a:	e06f      	b.n	801992c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	685b      	ldr	r3, [r3, #4]
 8019850:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019852:	693b      	ldr	r3, [r7, #16]
 8019854:	881b      	ldrh	r3, [r3, #0]
 8019856:	b29b      	uxth	r3, r3
 8019858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801985c:	d10c      	bne.n	8019878 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801985e:	693b      	ldr	r3, [r7, #16]
 8019860:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019862:	2b06      	cmp	r3, #6
 8019864:	d108      	bne.n	8019878 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019866:	693b      	ldr	r3, [r7, #16]
 8019868:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801986a:	2b04      	cmp	r3, #4
 801986c:	d104      	bne.n	8019878 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801986e:	693b      	ldr	r3, [r7, #16]
 8019870:	885b      	ldrh	r3, [r3, #2]
 8019872:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019874:	2b08      	cmp	r3, #8
 8019876:	d003      	beq.n	8019880 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019878:	6878      	ldr	r0, [r7, #4]
 801987a:	f7f8 fd9d 	bl	80123b8 <pbuf_free>
    return;
 801987e:	e055      	b.n	801992c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019880:	693b      	ldr	r3, [r7, #16]
 8019882:	330e      	adds	r3, #14
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019888:	693b      	ldr	r3, [r7, #16]
 801988a:	3318      	adds	r3, #24
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	3304      	adds	r3, #4
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d102      	bne.n	80198a0 <etharp_input+0x74>
    for_us = 0;
 801989a:	2300      	movs	r3, #0
 801989c:	75fb      	strb	r3, [r7, #23]
 801989e:	e009      	b.n	80198b4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80198a0:	68ba      	ldr	r2, [r7, #8]
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	3304      	adds	r3, #4
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	429a      	cmp	r2, r3
 80198aa:	bf0c      	ite	eq
 80198ac:	2301      	moveq	r3, #1
 80198ae:	2300      	movne	r3, #0
 80198b0:	b2db      	uxtb	r3, r3
 80198b2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80198b4:	693b      	ldr	r3, [r7, #16]
 80198b6:	f103 0208 	add.w	r2, r3, #8
 80198ba:	7dfb      	ldrb	r3, [r7, #23]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d001      	beq.n	80198c4 <etharp_input+0x98>
 80198c0:	2301      	movs	r3, #1
 80198c2:	e000      	b.n	80198c6 <etharp_input+0x9a>
 80198c4:	2302      	movs	r3, #2
 80198c6:	f107 010c 	add.w	r1, r7, #12
 80198ca:	6838      	ldr	r0, [r7, #0]
 80198cc:	f7ff fed8 	bl	8019680 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80198d0:	693b      	ldr	r3, [r7, #16]
 80198d2:	88db      	ldrh	r3, [r3, #6]
 80198d4:	b29b      	uxth	r3, r3
 80198d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80198da:	d003      	beq.n	80198e4 <etharp_input+0xb8>
 80198dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198e0:	d01e      	beq.n	8019920 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80198e2:	e020      	b.n	8019926 <etharp_input+0xfa>
      if (for_us) {
 80198e4:	7dfb      	ldrb	r3, [r7, #23]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d01c      	beq.n	8019924 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80198ea:	683b      	ldr	r3, [r7, #0]
 80198ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80198f0:	693b      	ldr	r3, [r7, #16]
 80198f2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80198fc:	683b      	ldr	r3, [r7, #0]
 80198fe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019900:	693a      	ldr	r2, [r7, #16]
 8019902:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019904:	2102      	movs	r1, #2
 8019906:	9103      	str	r1, [sp, #12]
 8019908:	f107 010c 	add.w	r1, r7, #12
 801990c:	9102      	str	r1, [sp, #8]
 801990e:	9201      	str	r2, [sp, #4]
 8019910:	9300      	str	r3, [sp, #0]
 8019912:	462b      	mov	r3, r5
 8019914:	4622      	mov	r2, r4
 8019916:	4601      	mov	r1, r0
 8019918:	6838      	ldr	r0, [r7, #0]
 801991a:	f000 faeb 	bl	8019ef4 <etharp_raw>
      break;
 801991e:	e001      	b.n	8019924 <etharp_input+0xf8>
      break;
 8019920:	bf00      	nop
 8019922:	e000      	b.n	8019926 <etharp_input+0xfa>
      break;
 8019924:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019926:	6878      	ldr	r0, [r7, #4]
 8019928:	f7f8 fd46 	bl	80123b8 <pbuf_free>
}
 801992c:	3718      	adds	r7, #24
 801992e:	46bd      	mov	sp, r7
 8019930:	bdb0      	pop	{r4, r5, r7, pc}
 8019932:	bf00      	nop
 8019934:	0801f700 	.word	0x0801f700
 8019938:	0801f850 	.word	0x0801f850
 801993c:	0801f778 	.word	0x0801f778

08019940 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b086      	sub	sp, #24
 8019944:	af02      	add	r7, sp, #8
 8019946:	60f8      	str	r0, [r7, #12]
 8019948:	60b9      	str	r1, [r7, #8]
 801994a:	4613      	mov	r3, r2
 801994c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801994e:	79fa      	ldrb	r2, [r7, #7]
 8019950:	4944      	ldr	r1, [pc, #272]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 8019952:	4613      	mov	r3, r2
 8019954:	005b      	lsls	r3, r3, #1
 8019956:	4413      	add	r3, r2
 8019958:	00db      	lsls	r3, r3, #3
 801995a:	440b      	add	r3, r1
 801995c:	3314      	adds	r3, #20
 801995e:	781b      	ldrb	r3, [r3, #0]
 8019960:	2b01      	cmp	r3, #1
 8019962:	d806      	bhi.n	8019972 <etharp_output_to_arp_index+0x32>
 8019964:	4b40      	ldr	r3, [pc, #256]	; (8019a68 <etharp_output_to_arp_index+0x128>)
 8019966:	f240 22ee 	movw	r2, #750	; 0x2ee
 801996a:	4940      	ldr	r1, [pc, #256]	; (8019a6c <etharp_output_to_arp_index+0x12c>)
 801996c:	4840      	ldr	r0, [pc, #256]	; (8019a70 <etharp_output_to_arp_index+0x130>)
 801996e:	f002 fa71 	bl	801be54 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019972:	79fa      	ldrb	r2, [r7, #7]
 8019974:	493b      	ldr	r1, [pc, #236]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 8019976:	4613      	mov	r3, r2
 8019978:	005b      	lsls	r3, r3, #1
 801997a:	4413      	add	r3, r2
 801997c:	00db      	lsls	r3, r3, #3
 801997e:	440b      	add	r3, r1
 8019980:	3314      	adds	r3, #20
 8019982:	781b      	ldrb	r3, [r3, #0]
 8019984:	2b02      	cmp	r3, #2
 8019986:	d153      	bne.n	8019a30 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019988:	79fa      	ldrb	r2, [r7, #7]
 801998a:	4936      	ldr	r1, [pc, #216]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 801998c:	4613      	mov	r3, r2
 801998e:	005b      	lsls	r3, r3, #1
 8019990:	4413      	add	r3, r2
 8019992:	00db      	lsls	r3, r3, #3
 8019994:	440b      	add	r3, r1
 8019996:	3312      	adds	r3, #18
 8019998:	881b      	ldrh	r3, [r3, #0]
 801999a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801999e:	d919      	bls.n	80199d4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80199a0:	79fa      	ldrb	r2, [r7, #7]
 80199a2:	4613      	mov	r3, r2
 80199a4:	005b      	lsls	r3, r3, #1
 80199a6:	4413      	add	r3, r2
 80199a8:	00db      	lsls	r3, r3, #3
 80199aa:	4a2e      	ldr	r2, [pc, #184]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 80199ac:	4413      	add	r3, r2
 80199ae:	3304      	adds	r3, #4
 80199b0:	4619      	mov	r1, r3
 80199b2:	68f8      	ldr	r0, [r7, #12]
 80199b4:	f000 fb4c 	bl	801a050 <etharp_request>
 80199b8:	4603      	mov	r3, r0
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d138      	bne.n	8019a30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80199be:	79fa      	ldrb	r2, [r7, #7]
 80199c0:	4928      	ldr	r1, [pc, #160]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 80199c2:	4613      	mov	r3, r2
 80199c4:	005b      	lsls	r3, r3, #1
 80199c6:	4413      	add	r3, r2
 80199c8:	00db      	lsls	r3, r3, #3
 80199ca:	440b      	add	r3, r1
 80199cc:	3314      	adds	r3, #20
 80199ce:	2203      	movs	r2, #3
 80199d0:	701a      	strb	r2, [r3, #0]
 80199d2:	e02d      	b.n	8019a30 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80199d4:	79fa      	ldrb	r2, [r7, #7]
 80199d6:	4923      	ldr	r1, [pc, #140]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 80199d8:	4613      	mov	r3, r2
 80199da:	005b      	lsls	r3, r3, #1
 80199dc:	4413      	add	r3, r2
 80199de:	00db      	lsls	r3, r3, #3
 80199e0:	440b      	add	r3, r1
 80199e2:	3312      	adds	r3, #18
 80199e4:	881b      	ldrh	r3, [r3, #0]
 80199e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80199ea:	d321      	bcc.n	8019a30 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80199ec:	79fa      	ldrb	r2, [r7, #7]
 80199ee:	4613      	mov	r3, r2
 80199f0:	005b      	lsls	r3, r3, #1
 80199f2:	4413      	add	r3, r2
 80199f4:	00db      	lsls	r3, r3, #3
 80199f6:	4a1b      	ldr	r2, [pc, #108]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 80199f8:	4413      	add	r3, r2
 80199fa:	1d19      	adds	r1, r3, #4
 80199fc:	79fa      	ldrb	r2, [r7, #7]
 80199fe:	4613      	mov	r3, r2
 8019a00:	005b      	lsls	r3, r3, #1
 8019a02:	4413      	add	r3, r2
 8019a04:	00db      	lsls	r3, r3, #3
 8019a06:	3308      	adds	r3, #8
 8019a08:	4a16      	ldr	r2, [pc, #88]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 8019a0a:	4413      	add	r3, r2
 8019a0c:	3304      	adds	r3, #4
 8019a0e:	461a      	mov	r2, r3
 8019a10:	68f8      	ldr	r0, [r7, #12]
 8019a12:	f000 fafb 	bl	801a00c <etharp_request_dst>
 8019a16:	4603      	mov	r3, r0
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d109      	bne.n	8019a30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019a1c:	79fa      	ldrb	r2, [r7, #7]
 8019a1e:	4911      	ldr	r1, [pc, #68]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 8019a20:	4613      	mov	r3, r2
 8019a22:	005b      	lsls	r3, r3, #1
 8019a24:	4413      	add	r3, r2
 8019a26:	00db      	lsls	r3, r3, #3
 8019a28:	440b      	add	r3, r1
 8019a2a:	3314      	adds	r3, #20
 8019a2c:	2203      	movs	r2, #3
 8019a2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8019a36:	79fa      	ldrb	r2, [r7, #7]
 8019a38:	4613      	mov	r3, r2
 8019a3a:	005b      	lsls	r3, r3, #1
 8019a3c:	4413      	add	r3, r2
 8019a3e:	00db      	lsls	r3, r3, #3
 8019a40:	3308      	adds	r3, #8
 8019a42:	4a08      	ldr	r2, [pc, #32]	; (8019a64 <etharp_output_to_arp_index+0x124>)
 8019a44:	4413      	add	r3, r2
 8019a46:	3304      	adds	r3, #4
 8019a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019a4c:	9200      	str	r2, [sp, #0]
 8019a4e:	460a      	mov	r2, r1
 8019a50:	68b9      	ldr	r1, [r7, #8]
 8019a52:	68f8      	ldr	r0, [r7, #12]
 8019a54:	f001 fe5c 	bl	801b710 <ethernet_output>
 8019a58:	4603      	mov	r3, r0
}
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	3710      	adds	r7, #16
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bd80      	pop	{r7, pc}
 8019a62:	bf00      	nop
 8019a64:	2000b044 	.word	0x2000b044
 8019a68:	0801f700 	.word	0x0801f700
 8019a6c:	0801f870 	.word	0x0801f870
 8019a70:	0801f778 	.word	0x0801f778

08019a74 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019a74:	b580      	push	{r7, lr}
 8019a76:	b08a      	sub	sp, #40	; 0x28
 8019a78:	af02      	add	r7, sp, #8
 8019a7a:	60f8      	str	r0, [r7, #12]
 8019a7c:	60b9      	str	r1, [r7, #8]
 8019a7e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d106      	bne.n	8019a98 <etharp_output+0x24>
 8019a8a:	4b73      	ldr	r3, [pc, #460]	; (8019c58 <etharp_output+0x1e4>)
 8019a8c:	f240 321e 	movw	r2, #798	; 0x31e
 8019a90:	4972      	ldr	r1, [pc, #456]	; (8019c5c <etharp_output+0x1e8>)
 8019a92:	4873      	ldr	r0, [pc, #460]	; (8019c60 <etharp_output+0x1ec>)
 8019a94:	f002 f9de 	bl	801be54 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d106      	bne.n	8019aac <etharp_output+0x38>
 8019a9e:	4b6e      	ldr	r3, [pc, #440]	; (8019c58 <etharp_output+0x1e4>)
 8019aa0:	f240 321f 	movw	r2, #799	; 0x31f
 8019aa4:	496f      	ldr	r1, [pc, #444]	; (8019c64 <etharp_output+0x1f0>)
 8019aa6:	486e      	ldr	r0, [pc, #440]	; (8019c60 <etharp_output+0x1ec>)
 8019aa8:	f002 f9d4 	bl	801be54 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d106      	bne.n	8019ac0 <etharp_output+0x4c>
 8019ab2:	4b69      	ldr	r3, [pc, #420]	; (8019c58 <etharp_output+0x1e4>)
 8019ab4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019ab8:	496b      	ldr	r1, [pc, #428]	; (8019c68 <etharp_output+0x1f4>)
 8019aba:	4869      	ldr	r0, [pc, #420]	; (8019c60 <etharp_output+0x1ec>)
 8019abc:	f002 f9ca 	bl	801be54 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	68f9      	ldr	r1, [r7, #12]
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f000 ff14 	bl	801a8f4 <ip4_addr_isbroadcast_u32>
 8019acc:	4603      	mov	r3, r0
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d002      	beq.n	8019ad8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019ad2:	4b66      	ldr	r3, [pc, #408]	; (8019c6c <etharp_output+0x1f8>)
 8019ad4:	61fb      	str	r3, [r7, #28]
 8019ad6:	e0af      	b.n	8019c38 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019ae0:	2be0      	cmp	r3, #224	; 0xe0
 8019ae2:	d118      	bne.n	8019b16 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019ae8:	2300      	movs	r3, #0
 8019aea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019aec:	235e      	movs	r3, #94	; 0x5e
 8019aee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	3301      	adds	r3, #1
 8019af4:	781b      	ldrb	r3, [r3, #0]
 8019af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019afa:	b2db      	uxtb	r3, r3
 8019afc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	3302      	adds	r3, #2
 8019b02:	781b      	ldrb	r3, [r3, #0]
 8019b04:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	3303      	adds	r3, #3
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019b0e:	f107 0310 	add.w	r3, r7, #16
 8019b12:	61fb      	str	r3, [r7, #28]
 8019b14:	e090      	b.n	8019c38 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	681a      	ldr	r2, [r3, #0]
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	3304      	adds	r3, #4
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	405a      	eors	r2, r3
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	3308      	adds	r3, #8
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	4013      	ands	r3, r2
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d012      	beq.n	8019b54 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019b34:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019b38:	4293      	cmp	r3, r2
 8019b3a:	d00b      	beq.n	8019b54 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	330c      	adds	r3, #12
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d003      	beq.n	8019b4e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	330c      	adds	r3, #12
 8019b4a:	61bb      	str	r3, [r7, #24]
 8019b4c:	e002      	b.n	8019b54 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019b4e:	f06f 0303 	mvn.w	r3, #3
 8019b52:	e07d      	b.n	8019c50 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019b54:	4b46      	ldr	r3, [pc, #280]	; (8019c70 <etharp_output+0x1fc>)
 8019b56:	781b      	ldrb	r3, [r3, #0]
 8019b58:	4619      	mov	r1, r3
 8019b5a:	4a46      	ldr	r2, [pc, #280]	; (8019c74 <etharp_output+0x200>)
 8019b5c:	460b      	mov	r3, r1
 8019b5e:	005b      	lsls	r3, r3, #1
 8019b60:	440b      	add	r3, r1
 8019b62:	00db      	lsls	r3, r3, #3
 8019b64:	4413      	add	r3, r2
 8019b66:	3314      	adds	r3, #20
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	2b01      	cmp	r3, #1
 8019b6c:	d925      	bls.n	8019bba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019b6e:	4b40      	ldr	r3, [pc, #256]	; (8019c70 <etharp_output+0x1fc>)
 8019b70:	781b      	ldrb	r3, [r3, #0]
 8019b72:	4619      	mov	r1, r3
 8019b74:	4a3f      	ldr	r2, [pc, #252]	; (8019c74 <etharp_output+0x200>)
 8019b76:	460b      	mov	r3, r1
 8019b78:	005b      	lsls	r3, r3, #1
 8019b7a:	440b      	add	r3, r1
 8019b7c:	00db      	lsls	r3, r3, #3
 8019b7e:	4413      	add	r3, r2
 8019b80:	3308      	adds	r3, #8
 8019b82:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019b84:	68fa      	ldr	r2, [r7, #12]
 8019b86:	429a      	cmp	r2, r3
 8019b88:	d117      	bne.n	8019bba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019b8a:	69bb      	ldr	r3, [r7, #24]
 8019b8c:	681a      	ldr	r2, [r3, #0]
 8019b8e:	4b38      	ldr	r3, [pc, #224]	; (8019c70 <etharp_output+0x1fc>)
 8019b90:	781b      	ldrb	r3, [r3, #0]
 8019b92:	4618      	mov	r0, r3
 8019b94:	4937      	ldr	r1, [pc, #220]	; (8019c74 <etharp_output+0x200>)
 8019b96:	4603      	mov	r3, r0
 8019b98:	005b      	lsls	r3, r3, #1
 8019b9a:	4403      	add	r3, r0
 8019b9c:	00db      	lsls	r3, r3, #3
 8019b9e:	440b      	add	r3, r1
 8019ba0:	3304      	adds	r3, #4
 8019ba2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019ba4:	429a      	cmp	r2, r3
 8019ba6:	d108      	bne.n	8019bba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019ba8:	4b31      	ldr	r3, [pc, #196]	; (8019c70 <etharp_output+0x1fc>)
 8019baa:	781b      	ldrb	r3, [r3, #0]
 8019bac:	461a      	mov	r2, r3
 8019bae:	68b9      	ldr	r1, [r7, #8]
 8019bb0:	68f8      	ldr	r0, [r7, #12]
 8019bb2:	f7ff fec5 	bl	8019940 <etharp_output_to_arp_index>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	e04a      	b.n	8019c50 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019bba:	2300      	movs	r3, #0
 8019bbc:	75fb      	strb	r3, [r7, #23]
 8019bbe:	e031      	b.n	8019c24 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019bc0:	7dfa      	ldrb	r2, [r7, #23]
 8019bc2:	492c      	ldr	r1, [pc, #176]	; (8019c74 <etharp_output+0x200>)
 8019bc4:	4613      	mov	r3, r2
 8019bc6:	005b      	lsls	r3, r3, #1
 8019bc8:	4413      	add	r3, r2
 8019bca:	00db      	lsls	r3, r3, #3
 8019bcc:	440b      	add	r3, r1
 8019bce:	3314      	adds	r3, #20
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	2b01      	cmp	r3, #1
 8019bd4:	d923      	bls.n	8019c1e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019bd6:	7dfa      	ldrb	r2, [r7, #23]
 8019bd8:	4926      	ldr	r1, [pc, #152]	; (8019c74 <etharp_output+0x200>)
 8019bda:	4613      	mov	r3, r2
 8019bdc:	005b      	lsls	r3, r3, #1
 8019bde:	4413      	add	r3, r2
 8019be0:	00db      	lsls	r3, r3, #3
 8019be2:	440b      	add	r3, r1
 8019be4:	3308      	adds	r3, #8
 8019be6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019be8:	68fa      	ldr	r2, [r7, #12]
 8019bea:	429a      	cmp	r2, r3
 8019bec:	d117      	bne.n	8019c1e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019bee:	69bb      	ldr	r3, [r7, #24]
 8019bf0:	6819      	ldr	r1, [r3, #0]
 8019bf2:	7dfa      	ldrb	r2, [r7, #23]
 8019bf4:	481f      	ldr	r0, [pc, #124]	; (8019c74 <etharp_output+0x200>)
 8019bf6:	4613      	mov	r3, r2
 8019bf8:	005b      	lsls	r3, r3, #1
 8019bfa:	4413      	add	r3, r2
 8019bfc:	00db      	lsls	r3, r3, #3
 8019bfe:	4403      	add	r3, r0
 8019c00:	3304      	adds	r3, #4
 8019c02:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019c04:	4299      	cmp	r1, r3
 8019c06:	d10a      	bne.n	8019c1e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019c08:	4a19      	ldr	r2, [pc, #100]	; (8019c70 <etharp_output+0x1fc>)
 8019c0a:	7dfb      	ldrb	r3, [r7, #23]
 8019c0c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019c0e:	7dfb      	ldrb	r3, [r7, #23]
 8019c10:	461a      	mov	r2, r3
 8019c12:	68b9      	ldr	r1, [r7, #8]
 8019c14:	68f8      	ldr	r0, [r7, #12]
 8019c16:	f7ff fe93 	bl	8019940 <etharp_output_to_arp_index>
 8019c1a:	4603      	mov	r3, r0
 8019c1c:	e018      	b.n	8019c50 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019c1e:	7dfb      	ldrb	r3, [r7, #23]
 8019c20:	3301      	adds	r3, #1
 8019c22:	75fb      	strb	r3, [r7, #23]
 8019c24:	7dfb      	ldrb	r3, [r7, #23]
 8019c26:	2b09      	cmp	r3, #9
 8019c28:	d9ca      	bls.n	8019bc0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019c2a:	68ba      	ldr	r2, [r7, #8]
 8019c2c:	69b9      	ldr	r1, [r7, #24]
 8019c2e:	68f8      	ldr	r0, [r7, #12]
 8019c30:	f000 f822 	bl	8019c78 <etharp_query>
 8019c34:	4603      	mov	r3, r0
 8019c36:	e00b      	b.n	8019c50 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019c42:	9300      	str	r3, [sp, #0]
 8019c44:	69fb      	ldr	r3, [r7, #28]
 8019c46:	68b9      	ldr	r1, [r7, #8]
 8019c48:	68f8      	ldr	r0, [r7, #12]
 8019c4a:	f001 fd61 	bl	801b710 <ethernet_output>
 8019c4e:	4603      	mov	r3, r0
}
 8019c50:	4618      	mov	r0, r3
 8019c52:	3720      	adds	r7, #32
 8019c54:	46bd      	mov	sp, r7
 8019c56:	bd80      	pop	{r7, pc}
 8019c58:	0801f700 	.word	0x0801f700
 8019c5c:	0801f850 	.word	0x0801f850
 8019c60:	0801f778 	.word	0x0801f778
 8019c64:	0801f8a0 	.word	0x0801f8a0
 8019c68:	0801f840 	.word	0x0801f840
 8019c6c:	0802005c 	.word	0x0802005c
 8019c70:	2000b134 	.word	0x2000b134
 8019c74:	2000b044 	.word	0x2000b044

08019c78 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b08c      	sub	sp, #48	; 0x30
 8019c7c:	af02      	add	r7, sp, #8
 8019c7e:	60f8      	str	r0, [r7, #12]
 8019c80:	60b9      	str	r1, [r7, #8]
 8019c82:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	3326      	adds	r3, #38	; 0x26
 8019c88:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019c8a:	23ff      	movs	r3, #255	; 0xff
 8019c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019c90:	2300      	movs	r3, #0
 8019c92:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	68f9      	ldr	r1, [r7, #12]
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f000 fe2a 	bl	801a8f4 <ip4_addr_isbroadcast_u32>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d10c      	bne.n	8019cc0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019ca6:	68bb      	ldr	r3, [r7, #8]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019cae:	2be0      	cmp	r3, #224	; 0xe0
 8019cb0:	d006      	beq.n	8019cc0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019cb2:	68bb      	ldr	r3, [r7, #8]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d003      	beq.n	8019cc0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019cb8:	68bb      	ldr	r3, [r7, #8]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d102      	bne.n	8019cc6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019cc0:	f06f 030f 	mvn.w	r3, #15
 8019cc4:	e101      	b.n	8019eca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019cc6:	68fa      	ldr	r2, [r7, #12]
 8019cc8:	2101      	movs	r1, #1
 8019cca:	68b8      	ldr	r0, [r7, #8]
 8019ccc:	f7ff fb60 	bl	8019390 <etharp_find_entry>
 8019cd0:	4603      	mov	r3, r0
 8019cd2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019cd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	da02      	bge.n	8019ce2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019cdc:	8a7b      	ldrh	r3, [r7, #18]
 8019cde:	b25b      	sxtb	r3, r3
 8019ce0:	e0f3      	b.n	8019eca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019ce2:	8a7b      	ldrh	r3, [r7, #18]
 8019ce4:	2b7e      	cmp	r3, #126	; 0x7e
 8019ce6:	d906      	bls.n	8019cf6 <etharp_query+0x7e>
 8019ce8:	4b7a      	ldr	r3, [pc, #488]	; (8019ed4 <etharp_query+0x25c>)
 8019cea:	f240 32c1 	movw	r2, #961	; 0x3c1
 8019cee:	497a      	ldr	r1, [pc, #488]	; (8019ed8 <etharp_query+0x260>)
 8019cf0:	487a      	ldr	r0, [pc, #488]	; (8019edc <etharp_query+0x264>)
 8019cf2:	f002 f8af 	bl	801be54 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019cf6:	8a7b      	ldrh	r3, [r7, #18]
 8019cf8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019cfa:	7c7a      	ldrb	r2, [r7, #17]
 8019cfc:	4978      	ldr	r1, [pc, #480]	; (8019ee0 <etharp_query+0x268>)
 8019cfe:	4613      	mov	r3, r2
 8019d00:	005b      	lsls	r3, r3, #1
 8019d02:	4413      	add	r3, r2
 8019d04:	00db      	lsls	r3, r3, #3
 8019d06:	440b      	add	r3, r1
 8019d08:	3314      	adds	r3, #20
 8019d0a:	781b      	ldrb	r3, [r3, #0]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d115      	bne.n	8019d3c <etharp_query+0xc4>
    is_new_entry = 1;
 8019d10:	2301      	movs	r3, #1
 8019d12:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019d14:	7c7a      	ldrb	r2, [r7, #17]
 8019d16:	4972      	ldr	r1, [pc, #456]	; (8019ee0 <etharp_query+0x268>)
 8019d18:	4613      	mov	r3, r2
 8019d1a:	005b      	lsls	r3, r3, #1
 8019d1c:	4413      	add	r3, r2
 8019d1e:	00db      	lsls	r3, r3, #3
 8019d20:	440b      	add	r3, r1
 8019d22:	3314      	adds	r3, #20
 8019d24:	2201      	movs	r2, #1
 8019d26:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019d28:	7c7a      	ldrb	r2, [r7, #17]
 8019d2a:	496d      	ldr	r1, [pc, #436]	; (8019ee0 <etharp_query+0x268>)
 8019d2c:	4613      	mov	r3, r2
 8019d2e:	005b      	lsls	r3, r3, #1
 8019d30:	4413      	add	r3, r2
 8019d32:	00db      	lsls	r3, r3, #3
 8019d34:	440b      	add	r3, r1
 8019d36:	3308      	adds	r3, #8
 8019d38:	68fa      	ldr	r2, [r7, #12]
 8019d3a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019d3c:	7c7a      	ldrb	r2, [r7, #17]
 8019d3e:	4968      	ldr	r1, [pc, #416]	; (8019ee0 <etharp_query+0x268>)
 8019d40:	4613      	mov	r3, r2
 8019d42:	005b      	lsls	r3, r3, #1
 8019d44:	4413      	add	r3, r2
 8019d46:	00db      	lsls	r3, r3, #3
 8019d48:	440b      	add	r3, r1
 8019d4a:	3314      	adds	r3, #20
 8019d4c:	781b      	ldrb	r3, [r3, #0]
 8019d4e:	2b01      	cmp	r3, #1
 8019d50:	d011      	beq.n	8019d76 <etharp_query+0xfe>
 8019d52:	7c7a      	ldrb	r2, [r7, #17]
 8019d54:	4962      	ldr	r1, [pc, #392]	; (8019ee0 <etharp_query+0x268>)
 8019d56:	4613      	mov	r3, r2
 8019d58:	005b      	lsls	r3, r3, #1
 8019d5a:	4413      	add	r3, r2
 8019d5c:	00db      	lsls	r3, r3, #3
 8019d5e:	440b      	add	r3, r1
 8019d60:	3314      	adds	r3, #20
 8019d62:	781b      	ldrb	r3, [r3, #0]
 8019d64:	2b01      	cmp	r3, #1
 8019d66:	d806      	bhi.n	8019d76 <etharp_query+0xfe>
 8019d68:	4b5a      	ldr	r3, [pc, #360]	; (8019ed4 <etharp_query+0x25c>)
 8019d6a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8019d6e:	495d      	ldr	r1, [pc, #372]	; (8019ee4 <etharp_query+0x26c>)
 8019d70:	485a      	ldr	r0, [pc, #360]	; (8019edc <etharp_query+0x264>)
 8019d72:	f002 f86f 	bl	801be54 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019d76:	6a3b      	ldr	r3, [r7, #32]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d102      	bne.n	8019d82 <etharp_query+0x10a>
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d10c      	bne.n	8019d9c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019d82:	68b9      	ldr	r1, [r7, #8]
 8019d84:	68f8      	ldr	r0, [r7, #12]
 8019d86:	f000 f963 	bl	801a050 <etharp_request>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d102      	bne.n	8019d9c <etharp_query+0x124>
      return result;
 8019d96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019d9a:	e096      	b.n	8019eca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d106      	bne.n	8019db0 <etharp_query+0x138>
 8019da2:	4b4c      	ldr	r3, [pc, #304]	; (8019ed4 <etharp_query+0x25c>)
 8019da4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019da8:	494f      	ldr	r1, [pc, #316]	; (8019ee8 <etharp_query+0x270>)
 8019daa:	484c      	ldr	r0, [pc, #304]	; (8019edc <etharp_query+0x264>)
 8019dac:	f002 f852 	bl	801be54 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019db0:	7c7a      	ldrb	r2, [r7, #17]
 8019db2:	494b      	ldr	r1, [pc, #300]	; (8019ee0 <etharp_query+0x268>)
 8019db4:	4613      	mov	r3, r2
 8019db6:	005b      	lsls	r3, r3, #1
 8019db8:	4413      	add	r3, r2
 8019dba:	00db      	lsls	r3, r3, #3
 8019dbc:	440b      	add	r3, r1
 8019dbe:	3314      	adds	r3, #20
 8019dc0:	781b      	ldrb	r3, [r3, #0]
 8019dc2:	2b01      	cmp	r3, #1
 8019dc4:	d917      	bls.n	8019df6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019dc6:	4a49      	ldr	r2, [pc, #292]	; (8019eec <etharp_query+0x274>)
 8019dc8:	7c7b      	ldrb	r3, [r7, #17]
 8019dca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019dcc:	7c7a      	ldrb	r2, [r7, #17]
 8019dce:	4613      	mov	r3, r2
 8019dd0:	005b      	lsls	r3, r3, #1
 8019dd2:	4413      	add	r3, r2
 8019dd4:	00db      	lsls	r3, r3, #3
 8019dd6:	3308      	adds	r3, #8
 8019dd8:	4a41      	ldr	r2, [pc, #260]	; (8019ee0 <etharp_query+0x268>)
 8019dda:	4413      	add	r3, r2
 8019ddc:	3304      	adds	r3, #4
 8019dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019de2:	9200      	str	r2, [sp, #0]
 8019de4:	697a      	ldr	r2, [r7, #20]
 8019de6:	6879      	ldr	r1, [r7, #4]
 8019de8:	68f8      	ldr	r0, [r7, #12]
 8019dea:	f001 fc91 	bl	801b710 <ethernet_output>
 8019dee:	4603      	mov	r3, r0
 8019df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019df4:	e067      	b.n	8019ec6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019df6:	7c7a      	ldrb	r2, [r7, #17]
 8019df8:	4939      	ldr	r1, [pc, #228]	; (8019ee0 <etharp_query+0x268>)
 8019dfa:	4613      	mov	r3, r2
 8019dfc:	005b      	lsls	r3, r3, #1
 8019dfe:	4413      	add	r3, r2
 8019e00:	00db      	lsls	r3, r3, #3
 8019e02:	440b      	add	r3, r1
 8019e04:	3314      	adds	r3, #20
 8019e06:	781b      	ldrb	r3, [r3, #0]
 8019e08:	2b01      	cmp	r3, #1
 8019e0a:	d15c      	bne.n	8019ec6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019e14:	e01c      	b.n	8019e50 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019e16:	69fb      	ldr	r3, [r7, #28]
 8019e18:	895a      	ldrh	r2, [r3, #10]
 8019e1a:	69fb      	ldr	r3, [r7, #28]
 8019e1c:	891b      	ldrh	r3, [r3, #8]
 8019e1e:	429a      	cmp	r2, r3
 8019e20:	d10a      	bne.n	8019e38 <etharp_query+0x1c0>
 8019e22:	69fb      	ldr	r3, [r7, #28]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d006      	beq.n	8019e38 <etharp_query+0x1c0>
 8019e2a:	4b2a      	ldr	r3, [pc, #168]	; (8019ed4 <etharp_query+0x25c>)
 8019e2c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019e30:	492f      	ldr	r1, [pc, #188]	; (8019ef0 <etharp_query+0x278>)
 8019e32:	482a      	ldr	r0, [pc, #168]	; (8019edc <etharp_query+0x264>)
 8019e34:	f002 f80e 	bl	801be54 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019e38:	69fb      	ldr	r3, [r7, #28]
 8019e3a:	7b1b      	ldrb	r3, [r3, #12]
 8019e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d002      	beq.n	8019e4a <etharp_query+0x1d2>
        copy_needed = 1;
 8019e44:	2301      	movs	r3, #1
 8019e46:	61bb      	str	r3, [r7, #24]
        break;
 8019e48:	e005      	b.n	8019e56 <etharp_query+0x1de>
      }
      p = p->next;
 8019e4a:	69fb      	ldr	r3, [r7, #28]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019e50:	69fb      	ldr	r3, [r7, #28]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d1df      	bne.n	8019e16 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019e56:	69bb      	ldr	r3, [r7, #24]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d007      	beq.n	8019e6c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019e5c:	687a      	ldr	r2, [r7, #4]
 8019e5e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019e62:	200e      	movs	r0, #14
 8019e64:	f7f8 fd14 	bl	8012890 <pbuf_clone>
 8019e68:	61f8      	str	r0, [r7, #28]
 8019e6a:	e004      	b.n	8019e76 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019e70:	69f8      	ldr	r0, [r7, #28]
 8019e72:	f7f8 fb41 	bl	80124f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019e76:	69fb      	ldr	r3, [r7, #28]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d021      	beq.n	8019ec0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019e7c:	7c7a      	ldrb	r2, [r7, #17]
 8019e7e:	4918      	ldr	r1, [pc, #96]	; (8019ee0 <etharp_query+0x268>)
 8019e80:	4613      	mov	r3, r2
 8019e82:	005b      	lsls	r3, r3, #1
 8019e84:	4413      	add	r3, r2
 8019e86:	00db      	lsls	r3, r3, #3
 8019e88:	440b      	add	r3, r1
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d00a      	beq.n	8019ea6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019e90:	7c7a      	ldrb	r2, [r7, #17]
 8019e92:	4913      	ldr	r1, [pc, #76]	; (8019ee0 <etharp_query+0x268>)
 8019e94:	4613      	mov	r3, r2
 8019e96:	005b      	lsls	r3, r3, #1
 8019e98:	4413      	add	r3, r2
 8019e9a:	00db      	lsls	r3, r3, #3
 8019e9c:	440b      	add	r3, r1
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	f7f8 fa89 	bl	80123b8 <pbuf_free>
      }
      arp_table[i].q = p;
 8019ea6:	7c7a      	ldrb	r2, [r7, #17]
 8019ea8:	490d      	ldr	r1, [pc, #52]	; (8019ee0 <etharp_query+0x268>)
 8019eaa:	4613      	mov	r3, r2
 8019eac:	005b      	lsls	r3, r3, #1
 8019eae:	4413      	add	r3, r2
 8019eb0:	00db      	lsls	r3, r3, #3
 8019eb2:	440b      	add	r3, r1
 8019eb4:	69fa      	ldr	r2, [r7, #28]
 8019eb6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019eb8:	2300      	movs	r3, #0
 8019eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019ebe:	e002      	b.n	8019ec6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019ec0:	23ff      	movs	r3, #255	; 0xff
 8019ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019ec6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019eca:	4618      	mov	r0, r3
 8019ecc:	3728      	adds	r7, #40	; 0x28
 8019ece:	46bd      	mov	sp, r7
 8019ed0:	bd80      	pop	{r7, pc}
 8019ed2:	bf00      	nop
 8019ed4:	0801f700 	.word	0x0801f700
 8019ed8:	0801f8ac 	.word	0x0801f8ac
 8019edc:	0801f778 	.word	0x0801f778
 8019ee0:	2000b044 	.word	0x2000b044
 8019ee4:	0801f8bc 	.word	0x0801f8bc
 8019ee8:	0801f8a0 	.word	0x0801f8a0
 8019eec:	2000b134 	.word	0x2000b134
 8019ef0:	0801f8e4 	.word	0x0801f8e4

08019ef4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b08a      	sub	sp, #40	; 0x28
 8019ef8:	af02      	add	r7, sp, #8
 8019efa:	60f8      	str	r0, [r7, #12]
 8019efc:	60b9      	str	r1, [r7, #8]
 8019efe:	607a      	str	r2, [r7, #4]
 8019f00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019f02:	2300      	movs	r3, #0
 8019f04:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019f06:	68fb      	ldr	r3, [r7, #12]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d106      	bne.n	8019f1a <etharp_raw+0x26>
 8019f0c:	4b3a      	ldr	r3, [pc, #232]	; (8019ff8 <etharp_raw+0x104>)
 8019f0e:	f240 4257 	movw	r2, #1111	; 0x457
 8019f12:	493a      	ldr	r1, [pc, #232]	; (8019ffc <etharp_raw+0x108>)
 8019f14:	483a      	ldr	r0, [pc, #232]	; (801a000 <etharp_raw+0x10c>)
 8019f16:	f001 ff9d 	bl	801be54 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019f1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f1e:	211c      	movs	r1, #28
 8019f20:	200e      	movs	r0, #14
 8019f22:	f7f7 ff65 	bl	8011df0 <pbuf_alloc>
 8019f26:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019f28:	69bb      	ldr	r3, [r7, #24]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d102      	bne.n	8019f34 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8019f32:	e05d      	b.n	8019ff0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019f34:	69bb      	ldr	r3, [r7, #24]
 8019f36:	895b      	ldrh	r3, [r3, #10]
 8019f38:	2b1b      	cmp	r3, #27
 8019f3a:	d806      	bhi.n	8019f4a <etharp_raw+0x56>
 8019f3c:	4b2e      	ldr	r3, [pc, #184]	; (8019ff8 <etharp_raw+0x104>)
 8019f3e:	f240 4262 	movw	r2, #1122	; 0x462
 8019f42:	4930      	ldr	r1, [pc, #192]	; (801a004 <etharp_raw+0x110>)
 8019f44:	482e      	ldr	r0, [pc, #184]	; (801a000 <etharp_raw+0x10c>)
 8019f46:	f001 ff85 	bl	801be54 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019f4a:	69bb      	ldr	r3, [r7, #24]
 8019f4c:	685b      	ldr	r3, [r3, #4]
 8019f4e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019f50:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f52:	4618      	mov	r0, r3
 8019f54:	f7f6 fe67 	bl	8010c26 <lwip_htons>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	461a      	mov	r2, r3
 8019f5c:	697b      	ldr	r3, [r7, #20]
 8019f5e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019f66:	2b06      	cmp	r3, #6
 8019f68:	d006      	beq.n	8019f78 <etharp_raw+0x84>
 8019f6a:	4b23      	ldr	r3, [pc, #140]	; (8019ff8 <etharp_raw+0x104>)
 8019f6c:	f240 4269 	movw	r2, #1129	; 0x469
 8019f70:	4925      	ldr	r1, [pc, #148]	; (801a008 <etharp_raw+0x114>)
 8019f72:	4823      	ldr	r0, [pc, #140]	; (801a000 <etharp_raw+0x10c>)
 8019f74:	f001 ff6e 	bl	801be54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019f78:	697b      	ldr	r3, [r7, #20]
 8019f7a:	3308      	adds	r3, #8
 8019f7c:	2206      	movs	r2, #6
 8019f7e:	6839      	ldr	r1, [r7, #0]
 8019f80:	4618      	mov	r0, r3
 8019f82:	f002 f8d8 	bl	801c136 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019f86:	697b      	ldr	r3, [r7, #20]
 8019f88:	3312      	adds	r3, #18
 8019f8a:	2206      	movs	r2, #6
 8019f8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f002 f8d1 	bl	801c136 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019f94:	697b      	ldr	r3, [r7, #20]
 8019f96:	330e      	adds	r3, #14
 8019f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f9a:	6812      	ldr	r2, [r2, #0]
 8019f9c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019f9e:	697b      	ldr	r3, [r7, #20]
 8019fa0:	3318      	adds	r3, #24
 8019fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019fa4:	6812      	ldr	r2, [r2, #0]
 8019fa6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019fa8:	697b      	ldr	r3, [r7, #20]
 8019faa:	2200      	movs	r2, #0
 8019fac:	701a      	strb	r2, [r3, #0]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	f042 0201 	orr.w	r2, r2, #1
 8019fb4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019fb6:	697b      	ldr	r3, [r7, #20]
 8019fb8:	2200      	movs	r2, #0
 8019fba:	f042 0208 	orr.w	r2, r2, #8
 8019fbe:	709a      	strb	r2, [r3, #2]
 8019fc0:	2200      	movs	r2, #0
 8019fc2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019fc4:	697b      	ldr	r3, [r7, #20]
 8019fc6:	2206      	movs	r2, #6
 8019fc8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019fca:	697b      	ldr	r3, [r7, #20]
 8019fcc:	2204      	movs	r2, #4
 8019fce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019fd0:	f640 0306 	movw	r3, #2054	; 0x806
 8019fd4:	9300      	str	r3, [sp, #0]
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	68ba      	ldr	r2, [r7, #8]
 8019fda:	69b9      	ldr	r1, [r7, #24]
 8019fdc:	68f8      	ldr	r0, [r7, #12]
 8019fde:	f001 fb97 	bl	801b710 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019fe2:	69b8      	ldr	r0, [r7, #24]
 8019fe4:	f7f8 f9e8 	bl	80123b8 <pbuf_free>
  p = NULL;
 8019fe8:	2300      	movs	r3, #0
 8019fea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019fec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	3720      	adds	r7, #32
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	bd80      	pop	{r7, pc}
 8019ff8:	0801f700 	.word	0x0801f700
 8019ffc:	0801f850 	.word	0x0801f850
 801a000:	0801f778 	.word	0x0801f778
 801a004:	0801f900 	.word	0x0801f900
 801a008:	0801f934 	.word	0x0801f934

0801a00c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b088      	sub	sp, #32
 801a010:	af04      	add	r7, sp, #16
 801a012:	60f8      	str	r0, [r7, #12]
 801a014:	60b9      	str	r1, [r7, #8]
 801a016:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a028:	2201      	movs	r2, #1
 801a02a:	9203      	str	r2, [sp, #12]
 801a02c:	68ba      	ldr	r2, [r7, #8]
 801a02e:	9202      	str	r2, [sp, #8]
 801a030:	4a06      	ldr	r2, [pc, #24]	; (801a04c <etharp_request_dst+0x40>)
 801a032:	9201      	str	r2, [sp, #4]
 801a034:	9300      	str	r3, [sp, #0]
 801a036:	4603      	mov	r3, r0
 801a038:	687a      	ldr	r2, [r7, #4]
 801a03a:	68f8      	ldr	r0, [r7, #12]
 801a03c:	f7ff ff5a 	bl	8019ef4 <etharp_raw>
 801a040:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a042:	4618      	mov	r0, r3
 801a044:	3710      	adds	r7, #16
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}
 801a04a:	bf00      	nop
 801a04c:	08020064 	.word	0x08020064

0801a050 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a050:	b580      	push	{r7, lr}
 801a052:	b082      	sub	sp, #8
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
 801a058:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a05a:	4a05      	ldr	r2, [pc, #20]	; (801a070 <etharp_request+0x20>)
 801a05c:	6839      	ldr	r1, [r7, #0]
 801a05e:	6878      	ldr	r0, [r7, #4]
 801a060:	f7ff ffd4 	bl	801a00c <etharp_request_dst>
 801a064:	4603      	mov	r3, r0
}
 801a066:	4618      	mov	r0, r3
 801a068:	3708      	adds	r7, #8
 801a06a:	46bd      	mov	sp, r7
 801a06c:	bd80      	pop	{r7, pc}
 801a06e:	bf00      	nop
 801a070:	0802005c 	.word	0x0802005c

0801a074 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b08e      	sub	sp, #56	; 0x38
 801a078:	af04      	add	r7, sp, #16
 801a07a:	6078      	str	r0, [r7, #4]
 801a07c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a07e:	4b82      	ldr	r3, [pc, #520]	; (801a288 <icmp_input+0x214>)
 801a080:	689b      	ldr	r3, [r3, #8]
 801a082:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a086:	781b      	ldrb	r3, [r3, #0]
 801a088:	f003 030f 	and.w	r3, r3, #15
 801a08c:	b2db      	uxtb	r3, r3
 801a08e:	009b      	lsls	r3, r3, #2
 801a090:	b2db      	uxtb	r3, r3
 801a092:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a094:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a096:	2b13      	cmp	r3, #19
 801a098:	f240 80de 	bls.w	801a258 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	895b      	ldrh	r3, [r3, #10]
 801a0a0:	2b03      	cmp	r3, #3
 801a0a2:	f240 80db 	bls.w	801a25c <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	685b      	ldr	r3, [r3, #4]
 801a0aa:	781b      	ldrb	r3, [r3, #0]
 801a0ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a0b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	f000 80c8 	beq.w	801a24a <icmp_input+0x1d6>
 801a0ba:	2b08      	cmp	r3, #8
 801a0bc:	f040 80c8 	bne.w	801a250 <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a0c0:	4b72      	ldr	r3, [pc, #456]	; (801a28c <icmp_input+0x218>)
 801a0c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a0c4:	4b70      	ldr	r3, [pc, #448]	; (801a288 <icmp_input+0x214>)
 801a0c6:	695b      	ldr	r3, [r3, #20]
 801a0c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a0cc:	2be0      	cmp	r3, #224	; 0xe0
 801a0ce:	f000 80cc 	beq.w	801a26a <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a0d2:	4b6d      	ldr	r3, [pc, #436]	; (801a288 <icmp_input+0x214>)
 801a0d4:	695b      	ldr	r3, [r3, #20]
 801a0d6:	4a6c      	ldr	r2, [pc, #432]	; (801a288 <icmp_input+0x214>)
 801a0d8:	6812      	ldr	r2, [r2, #0]
 801a0da:	4611      	mov	r1, r2
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f000 fc09 	bl	801a8f4 <ip4_addr_isbroadcast_u32>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	f040 80c2 	bne.w	801a26e <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	891b      	ldrh	r3, [r3, #8]
 801a0ee:	2b07      	cmp	r3, #7
 801a0f0:	f240 80b6 	bls.w	801a260 <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a0f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a0f6:	330e      	adds	r3, #14
 801a0f8:	4619      	mov	r1, r3
 801a0fa:	6878      	ldr	r0, [r7, #4]
 801a0fc:	f7f8 f8c6 	bl	801228c <pbuf_add_header>
 801a100:	4603      	mov	r3, r0
 801a102:	2b00      	cmp	r3, #0
 801a104:	d04b      	beq.n	801a19e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	891a      	ldrh	r2, [r3, #8]
 801a10a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a10c:	4413      	add	r3, r2
 801a10e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	891b      	ldrh	r3, [r3, #8]
 801a114:	8b7a      	ldrh	r2, [r7, #26]
 801a116:	429a      	cmp	r2, r3
 801a118:	f0c0 80ab 	bcc.w	801a272 <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a11c:	8b7b      	ldrh	r3, [r7, #26]
 801a11e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a122:	4619      	mov	r1, r3
 801a124:	200e      	movs	r0, #14
 801a126:	f7f7 fe63 	bl	8011df0 <pbuf_alloc>
 801a12a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a12c:	697b      	ldr	r3, [r7, #20]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	f000 80a1 	beq.w	801a276 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a134:	697b      	ldr	r3, [r7, #20]
 801a136:	895b      	ldrh	r3, [r3, #10]
 801a138:	461a      	mov	r2, r3
 801a13a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a13c:	3308      	adds	r3, #8
 801a13e:	429a      	cmp	r2, r3
 801a140:	d203      	bcs.n	801a14a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801a142:	6978      	ldr	r0, [r7, #20]
 801a144:	f7f8 f938 	bl	80123b8 <pbuf_free>
          goto icmperr;
 801a148:	e096      	b.n	801a278 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a14a:	697b      	ldr	r3, [r7, #20]
 801a14c:	685b      	ldr	r3, [r3, #4]
 801a14e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a152:	4618      	mov	r0, r3
 801a154:	f001 ffef 	bl	801c136 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a158:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a15a:	4619      	mov	r1, r3
 801a15c:	6978      	ldr	r0, [r7, #20]
 801a15e:	f7f8 f8a5 	bl	80122ac <pbuf_remove_header>
 801a162:	4603      	mov	r3, r0
 801a164:	2b00      	cmp	r3, #0
 801a166:	d009      	beq.n	801a17c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a168:	4b49      	ldr	r3, [pc, #292]	; (801a290 <icmp_input+0x21c>)
 801a16a:	22b6      	movs	r2, #182	; 0xb6
 801a16c:	4949      	ldr	r1, [pc, #292]	; (801a294 <icmp_input+0x220>)
 801a16e:	484a      	ldr	r0, [pc, #296]	; (801a298 <icmp_input+0x224>)
 801a170:	f001 fe70 	bl	801be54 <iprintf>
          pbuf_free(r);
 801a174:	6978      	ldr	r0, [r7, #20]
 801a176:	f7f8 f91f 	bl	80123b8 <pbuf_free>
          goto icmperr;
 801a17a:	e07d      	b.n	801a278 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a17c:	6879      	ldr	r1, [r7, #4]
 801a17e:	6978      	ldr	r0, [r7, #20]
 801a180:	f7f8 fa42 	bl	8012608 <pbuf_copy>
 801a184:	4603      	mov	r3, r0
 801a186:	2b00      	cmp	r3, #0
 801a188:	d003      	beq.n	801a192 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801a18a:	6978      	ldr	r0, [r7, #20]
 801a18c:	f7f8 f914 	bl	80123b8 <pbuf_free>
          goto icmperr;
 801a190:	e072      	b.n	801a278 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 801a192:	6878      	ldr	r0, [r7, #4]
 801a194:	f7f8 f910 	bl	80123b8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a198:	697b      	ldr	r3, [r7, #20]
 801a19a:	607b      	str	r3, [r7, #4]
 801a19c:	e00f      	b.n	801a1be <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a19e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a1a0:	330e      	adds	r3, #14
 801a1a2:	4619      	mov	r1, r3
 801a1a4:	6878      	ldr	r0, [r7, #4]
 801a1a6:	f7f8 f881 	bl	80122ac <pbuf_remove_header>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d006      	beq.n	801a1be <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a1b0:	4b37      	ldr	r3, [pc, #220]	; (801a290 <icmp_input+0x21c>)
 801a1b2:	22c7      	movs	r2, #199	; 0xc7
 801a1b4:	4939      	ldr	r1, [pc, #228]	; (801a29c <icmp_input+0x228>)
 801a1b6:	4838      	ldr	r0, [pc, #224]	; (801a298 <icmp_input+0x224>)
 801a1b8:	f001 fe4c 	bl	801be54 <iprintf>
          goto icmperr;
 801a1bc:	e05c      	b.n	801a278 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	685b      	ldr	r3, [r3, #4]
 801a1c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a1c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a1c6:	4619      	mov	r1, r3
 801a1c8:	6878      	ldr	r0, [r7, #4]
 801a1ca:	f7f8 f85f 	bl	801228c <pbuf_add_header>
 801a1ce:	4603      	mov	r3, r0
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d13c      	bne.n	801a24e <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	685b      	ldr	r3, [r3, #4]
 801a1d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a1da:	69fb      	ldr	r3, [r7, #28]
 801a1dc:	681a      	ldr	r2, [r3, #0]
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a1e2:	4b29      	ldr	r3, [pc, #164]	; (801a288 <icmp_input+0x214>)
 801a1e4:	691a      	ldr	r2, [r3, #16]
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a1ea:	693b      	ldr	r3, [r7, #16]
 801a1ec:	2200      	movs	r2, #0
 801a1ee:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801a1f0:	693b      	ldr	r3, [r7, #16]
 801a1f2:	885b      	ldrh	r3, [r3, #2]
 801a1f4:	b29b      	uxth	r3, r3
 801a1f6:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801a1fa:	4293      	cmp	r3, r2
 801a1fc:	d907      	bls.n	801a20e <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801a1fe:	693b      	ldr	r3, [r7, #16]
 801a200:	885b      	ldrh	r3, [r3, #2]
 801a202:	b29b      	uxth	r3, r3
 801a204:	3309      	adds	r3, #9
 801a206:	b29a      	uxth	r2, r3
 801a208:	693b      	ldr	r3, [r7, #16]
 801a20a:	805a      	strh	r2, [r3, #2]
 801a20c:	e006      	b.n	801a21c <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801a20e:	693b      	ldr	r3, [r7, #16]
 801a210:	885b      	ldrh	r3, [r3, #2]
 801a212:	b29b      	uxth	r3, r3
 801a214:	3308      	adds	r3, #8
 801a216:	b29a      	uxth	r2, r3
 801a218:	693b      	ldr	r3, [r7, #16]
 801a21a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	22ff      	movs	r2, #255	; 0xff
 801a220:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	2200      	movs	r2, #0
 801a226:	729a      	strb	r2, [r3, #10]
 801a228:	2200      	movs	r2, #0
 801a22a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a22c:	683b      	ldr	r3, [r7, #0]
 801a22e:	9302      	str	r3, [sp, #8]
 801a230:	2301      	movs	r3, #1
 801a232:	9301      	str	r3, [sp, #4]
 801a234:	2300      	movs	r3, #0
 801a236:	9300      	str	r3, [sp, #0]
 801a238:	23ff      	movs	r3, #255	; 0xff
 801a23a:	2200      	movs	r2, #0
 801a23c:	69f9      	ldr	r1, [r7, #28]
 801a23e:	6878      	ldr	r0, [r7, #4]
 801a240:	f000 fa80 	bl	801a744 <ip4_output_if>
 801a244:	4603      	mov	r3, r0
 801a246:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a248:	e001      	b.n	801a24e <icmp_input+0x1da>
      break;
 801a24a:	bf00      	nop
 801a24c:	e000      	b.n	801a250 <icmp_input+0x1dc>
      break;
 801a24e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a250:	6878      	ldr	r0, [r7, #4]
 801a252:	f7f8 f8b1 	bl	80123b8 <pbuf_free>
  return;
 801a256:	e013      	b.n	801a280 <icmp_input+0x20c>
    goto lenerr;
 801a258:	bf00      	nop
 801a25a:	e002      	b.n	801a262 <icmp_input+0x1ee>
    goto lenerr;
 801a25c:	bf00      	nop
 801a25e:	e000      	b.n	801a262 <icmp_input+0x1ee>
        goto lenerr;
 801a260:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a262:	6878      	ldr	r0, [r7, #4]
 801a264:	f7f8 f8a8 	bl	80123b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a268:	e00a      	b.n	801a280 <icmp_input+0x20c>
        goto icmperr;
 801a26a:	bf00      	nop
 801a26c:	e004      	b.n	801a278 <icmp_input+0x204>
        goto icmperr;
 801a26e:	bf00      	nop
 801a270:	e002      	b.n	801a278 <icmp_input+0x204>
          goto icmperr;
 801a272:	bf00      	nop
 801a274:	e000      	b.n	801a278 <icmp_input+0x204>
          goto icmperr;
 801a276:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f7f8 f89d 	bl	80123b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a27e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a280:	3728      	adds	r7, #40	; 0x28
 801a282:	46bd      	mov	sp, r7
 801a284:	bd80      	pop	{r7, pc}
 801a286:	bf00      	nop
 801a288:	200042bc 	.word	0x200042bc
 801a28c:	200042d0 	.word	0x200042d0
 801a290:	0801f978 	.word	0x0801f978
 801a294:	0801f9b0 	.word	0x0801f9b0
 801a298:	0801f9e8 	.word	0x0801f9e8
 801a29c:	0801fa10 	.word	0x0801fa10

0801a2a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b082      	sub	sp, #8
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
 801a2a8:	460b      	mov	r3, r1
 801a2aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a2ac:	78fb      	ldrb	r3, [r7, #3]
 801a2ae:	461a      	mov	r2, r3
 801a2b0:	2103      	movs	r1, #3
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f000 f814 	bl	801a2e0 <icmp_send_response>
}
 801a2b8:	bf00      	nop
 801a2ba:	3708      	adds	r7, #8
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd80      	pop	{r7, pc}

0801a2c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b082      	sub	sp, #8
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
 801a2c8:	460b      	mov	r3, r1
 801a2ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a2cc:	78fb      	ldrb	r3, [r7, #3]
 801a2ce:	461a      	mov	r2, r3
 801a2d0:	210b      	movs	r1, #11
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	f000 f804 	bl	801a2e0 <icmp_send_response>
}
 801a2d8:	bf00      	nop
 801a2da:	3708      	adds	r7, #8
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	bd80      	pop	{r7, pc}

0801a2e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b08c      	sub	sp, #48	; 0x30
 801a2e4:	af04      	add	r7, sp, #16
 801a2e6:	6078      	str	r0, [r7, #4]
 801a2e8:	460b      	mov	r3, r1
 801a2ea:	70fb      	strb	r3, [r7, #3]
 801a2ec:	4613      	mov	r3, r2
 801a2ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a2f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a2f4:	2124      	movs	r1, #36	; 0x24
 801a2f6:	2022      	movs	r0, #34	; 0x22
 801a2f8:	f7f7 fd7a 	bl	8011df0 <pbuf_alloc>
 801a2fc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a2fe:	69fb      	ldr	r3, [r7, #28]
 801a300:	2b00      	cmp	r3, #0
 801a302:	d056      	beq.n	801a3b2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a304:	69fb      	ldr	r3, [r7, #28]
 801a306:	895b      	ldrh	r3, [r3, #10]
 801a308:	2b23      	cmp	r3, #35	; 0x23
 801a30a:	d806      	bhi.n	801a31a <icmp_send_response+0x3a>
 801a30c:	4b2b      	ldr	r3, [pc, #172]	; (801a3bc <icmp_send_response+0xdc>)
 801a30e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801a312:	492b      	ldr	r1, [pc, #172]	; (801a3c0 <icmp_send_response+0xe0>)
 801a314:	482b      	ldr	r0, [pc, #172]	; (801a3c4 <icmp_send_response+0xe4>)
 801a316:	f001 fd9d 	bl	801be54 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	685b      	ldr	r3, [r3, #4]
 801a31e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a320:	69fb      	ldr	r3, [r7, #28]
 801a322:	685b      	ldr	r3, [r3, #4]
 801a324:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a326:	697b      	ldr	r3, [r7, #20]
 801a328:	78fa      	ldrb	r2, [r7, #3]
 801a32a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a32c:	697b      	ldr	r3, [r7, #20]
 801a32e:	78ba      	ldrb	r2, [r7, #2]
 801a330:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a332:	697b      	ldr	r3, [r7, #20]
 801a334:	2200      	movs	r2, #0
 801a336:	711a      	strb	r2, [r3, #4]
 801a338:	2200      	movs	r2, #0
 801a33a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a33c:	697b      	ldr	r3, [r7, #20]
 801a33e:	2200      	movs	r2, #0
 801a340:	719a      	strb	r2, [r3, #6]
 801a342:	2200      	movs	r2, #0
 801a344:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a346:	69fb      	ldr	r3, [r7, #28]
 801a348:	685b      	ldr	r3, [r3, #4]
 801a34a:	f103 0008 	add.w	r0, r3, #8
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	685b      	ldr	r3, [r3, #4]
 801a352:	221c      	movs	r2, #28
 801a354:	4619      	mov	r1, r3
 801a356:	f001 feee 	bl	801c136 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a35a:	69bb      	ldr	r3, [r7, #24]
 801a35c:	68db      	ldr	r3, [r3, #12]
 801a35e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a360:	f107 030c 	add.w	r3, r7, #12
 801a364:	4618      	mov	r0, r3
 801a366:	f000 f82f 	bl	801a3c8 <ip4_route>
 801a36a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a36c:	693b      	ldr	r3, [r7, #16]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d01b      	beq.n	801a3aa <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a372:	697b      	ldr	r3, [r7, #20]
 801a374:	2200      	movs	r2, #0
 801a376:	709a      	strb	r2, [r3, #2]
 801a378:	2200      	movs	r2, #0
 801a37a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801a37c:	69fb      	ldr	r3, [r7, #28]
 801a37e:	895b      	ldrh	r3, [r3, #10]
 801a380:	4619      	mov	r1, r3
 801a382:	6978      	ldr	r0, [r7, #20]
 801a384:	f7f6 fcda 	bl	8010d3c <inet_chksum>
 801a388:	4603      	mov	r3, r0
 801a38a:	461a      	mov	r2, r3
 801a38c:	697b      	ldr	r3, [r7, #20]
 801a38e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a390:	f107 020c 	add.w	r2, r7, #12
 801a394:	693b      	ldr	r3, [r7, #16]
 801a396:	9302      	str	r3, [sp, #8]
 801a398:	2301      	movs	r3, #1
 801a39a:	9301      	str	r3, [sp, #4]
 801a39c:	2300      	movs	r3, #0
 801a39e:	9300      	str	r3, [sp, #0]
 801a3a0:	23ff      	movs	r3, #255	; 0xff
 801a3a2:	2100      	movs	r1, #0
 801a3a4:	69f8      	ldr	r0, [r7, #28]
 801a3a6:	f000 f9cd 	bl	801a744 <ip4_output_if>
  }
  pbuf_free(q);
 801a3aa:	69f8      	ldr	r0, [r7, #28]
 801a3ac:	f7f8 f804 	bl	80123b8 <pbuf_free>
 801a3b0:	e000      	b.n	801a3b4 <icmp_send_response+0xd4>
    return;
 801a3b2:	bf00      	nop
}
 801a3b4:	3720      	adds	r7, #32
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	bd80      	pop	{r7, pc}
 801a3ba:	bf00      	nop
 801a3bc:	0801f978 	.word	0x0801f978
 801a3c0:	0801fa44 	.word	0x0801fa44
 801a3c4:	0801f9e8 	.word	0x0801f9e8

0801a3c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a3c8:	b480      	push	{r7}
 801a3ca:	b085      	sub	sp, #20
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a3d0:	4b33      	ldr	r3, [pc, #204]	; (801a4a0 <ip4_route+0xd8>)
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	60fb      	str	r3, [r7, #12]
 801a3d6:	e036      	b.n	801a446 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a3d8:	68fb      	ldr	r3, [r7, #12]
 801a3da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a3de:	f003 0301 	and.w	r3, r3, #1
 801a3e2:	b2db      	uxtb	r3, r3
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d02b      	beq.n	801a440 <ip4_route+0x78>
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a3ee:	089b      	lsrs	r3, r3, #2
 801a3f0:	f003 0301 	and.w	r3, r3, #1
 801a3f4:	b2db      	uxtb	r3, r3
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d022      	beq.n	801a440 <ip4_route+0x78>
 801a3fa:	68fb      	ldr	r3, [r7, #12]
 801a3fc:	3304      	adds	r3, #4
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	2b00      	cmp	r3, #0
 801a402:	d01d      	beq.n	801a440 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	681a      	ldr	r2, [r3, #0]
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	3304      	adds	r3, #4
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	405a      	eors	r2, r3
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	3308      	adds	r3, #8
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	4013      	ands	r3, r2
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d101      	bne.n	801a420 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	e038      	b.n	801a492 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a426:	f003 0302 	and.w	r3, r3, #2
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d108      	bne.n	801a440 <ip4_route+0x78>
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	681a      	ldr	r2, [r3, #0]
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	330c      	adds	r3, #12
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	429a      	cmp	r2, r3
 801a43a:	d101      	bne.n	801a440 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	e028      	b.n	801a492 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	60fb      	str	r3, [r7, #12]
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d1c5      	bne.n	801a3d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a44c:	4b15      	ldr	r3, [pc, #84]	; (801a4a4 <ip4_route+0xdc>)
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d01a      	beq.n	801a48a <ip4_route+0xc2>
 801a454:	4b13      	ldr	r3, [pc, #76]	; (801a4a4 <ip4_route+0xdc>)
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a45c:	f003 0301 	and.w	r3, r3, #1
 801a460:	2b00      	cmp	r3, #0
 801a462:	d012      	beq.n	801a48a <ip4_route+0xc2>
 801a464:	4b0f      	ldr	r3, [pc, #60]	; (801a4a4 <ip4_route+0xdc>)
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a46c:	f003 0304 	and.w	r3, r3, #4
 801a470:	2b00      	cmp	r3, #0
 801a472:	d00a      	beq.n	801a48a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a474:	4b0b      	ldr	r3, [pc, #44]	; (801a4a4 <ip4_route+0xdc>)
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	3304      	adds	r3, #4
 801a47a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d004      	beq.n	801a48a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	b2db      	uxtb	r3, r3
 801a486:	2b7f      	cmp	r3, #127	; 0x7f
 801a488:	d101      	bne.n	801a48e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a48a:	2300      	movs	r3, #0
 801a48c:	e001      	b.n	801a492 <ip4_route+0xca>
  }

  return netif_default;
 801a48e:	4b05      	ldr	r3, [pc, #20]	; (801a4a4 <ip4_route+0xdc>)
 801a490:	681b      	ldr	r3, [r3, #0]
}
 801a492:	4618      	mov	r0, r3
 801a494:	3714      	adds	r7, #20
 801a496:	46bd      	mov	sp, r7
 801a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a49c:	4770      	bx	lr
 801a49e:	bf00      	nop
 801a4a0:	2000afd8 	.word	0x2000afd8
 801a4a4:	2000afdc 	.word	0x2000afdc

0801a4a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b082      	sub	sp, #8
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a4b6:	f003 0301 	and.w	r3, r3, #1
 801a4ba:	b2db      	uxtb	r3, r3
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d016      	beq.n	801a4ee <ip4_input_accept+0x46>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	3304      	adds	r3, #4
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d011      	beq.n	801a4ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a4ca:	4b0b      	ldr	r3, [pc, #44]	; (801a4f8 <ip4_input_accept+0x50>)
 801a4cc:	695a      	ldr	r2, [r3, #20]
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	3304      	adds	r3, #4
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	429a      	cmp	r2, r3
 801a4d6:	d008      	beq.n	801a4ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a4d8:	4b07      	ldr	r3, [pc, #28]	; (801a4f8 <ip4_input_accept+0x50>)
 801a4da:	695b      	ldr	r3, [r3, #20]
 801a4dc:	6879      	ldr	r1, [r7, #4]
 801a4de:	4618      	mov	r0, r3
 801a4e0:	f000 fa08 	bl	801a8f4 <ip4_addr_isbroadcast_u32>
 801a4e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d001      	beq.n	801a4ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a4ea:	2301      	movs	r3, #1
 801a4ec:	e000      	b.n	801a4f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a4ee:	2300      	movs	r3, #0
}
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	3708      	adds	r7, #8
 801a4f4:	46bd      	mov	sp, r7
 801a4f6:	bd80      	pop	{r7, pc}
 801a4f8:	200042bc 	.word	0x200042bc

0801a4fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b086      	sub	sp, #24
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]
 801a504:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	685b      	ldr	r3, [r3, #4]
 801a50a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	781b      	ldrb	r3, [r3, #0]
 801a510:	091b      	lsrs	r3, r3, #4
 801a512:	b2db      	uxtb	r3, r3
 801a514:	2b04      	cmp	r3, #4
 801a516:	d004      	beq.n	801a522 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a518:	6878      	ldr	r0, [r7, #4]
 801a51a:	f7f7 ff4d 	bl	80123b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a51e:	2300      	movs	r3, #0
 801a520:	e107      	b.n	801a732 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a522:	697b      	ldr	r3, [r7, #20]
 801a524:	781b      	ldrb	r3, [r3, #0]
 801a526:	f003 030f 	and.w	r3, r3, #15
 801a52a:	b2db      	uxtb	r3, r3
 801a52c:	009b      	lsls	r3, r3, #2
 801a52e:	b2db      	uxtb	r3, r3
 801a530:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a532:	697b      	ldr	r3, [r7, #20]
 801a534:	885b      	ldrh	r3, [r3, #2]
 801a536:	b29b      	uxth	r3, r3
 801a538:	4618      	mov	r0, r3
 801a53a:	f7f6 fb74 	bl	8010c26 <lwip_htons>
 801a53e:	4603      	mov	r3, r0
 801a540:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	891b      	ldrh	r3, [r3, #8]
 801a546:	89ba      	ldrh	r2, [r7, #12]
 801a548:	429a      	cmp	r2, r3
 801a54a:	d204      	bcs.n	801a556 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801a54c:	89bb      	ldrh	r3, [r7, #12]
 801a54e:	4619      	mov	r1, r3
 801a550:	6878      	ldr	r0, [r7, #4]
 801a552:	f7f7 fdab 	bl	80120ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	895b      	ldrh	r3, [r3, #10]
 801a55a:	89fa      	ldrh	r2, [r7, #14]
 801a55c:	429a      	cmp	r2, r3
 801a55e:	d807      	bhi.n	801a570 <ip4_input+0x74>
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	891b      	ldrh	r3, [r3, #8]
 801a564:	89ba      	ldrh	r2, [r7, #12]
 801a566:	429a      	cmp	r2, r3
 801a568:	d802      	bhi.n	801a570 <ip4_input+0x74>
 801a56a:	89fb      	ldrh	r3, [r7, #14]
 801a56c:	2b13      	cmp	r3, #19
 801a56e:	d804      	bhi.n	801a57a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a570:	6878      	ldr	r0, [r7, #4]
 801a572:	f7f7 ff21 	bl	80123b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a576:	2300      	movs	r3, #0
 801a578:	e0db      	b.n	801a732 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a57a:	697b      	ldr	r3, [r7, #20]
 801a57c:	691b      	ldr	r3, [r3, #16]
 801a57e:	4a6f      	ldr	r2, [pc, #444]	; (801a73c <ip4_input+0x240>)
 801a580:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a582:	697b      	ldr	r3, [r7, #20]
 801a584:	68db      	ldr	r3, [r3, #12]
 801a586:	4a6d      	ldr	r2, [pc, #436]	; (801a73c <ip4_input+0x240>)
 801a588:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a58a:	4b6c      	ldr	r3, [pc, #432]	; (801a73c <ip4_input+0x240>)
 801a58c:	695b      	ldr	r3, [r3, #20]
 801a58e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a592:	2be0      	cmp	r3, #224	; 0xe0
 801a594:	d112      	bne.n	801a5bc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a596:	683b      	ldr	r3, [r7, #0]
 801a598:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a59c:	f003 0301 	and.w	r3, r3, #1
 801a5a0:	b2db      	uxtb	r3, r3
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d007      	beq.n	801a5b6 <ip4_input+0xba>
 801a5a6:	683b      	ldr	r3, [r7, #0]
 801a5a8:	3304      	adds	r3, #4
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d002      	beq.n	801a5b6 <ip4_input+0xba>
      netif = inp;
 801a5b0:	683b      	ldr	r3, [r7, #0]
 801a5b2:	613b      	str	r3, [r7, #16]
 801a5b4:	e02a      	b.n	801a60c <ip4_input+0x110>
    } else {
      netif = NULL;
 801a5b6:	2300      	movs	r3, #0
 801a5b8:	613b      	str	r3, [r7, #16]
 801a5ba:	e027      	b.n	801a60c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a5bc:	6838      	ldr	r0, [r7, #0]
 801a5be:	f7ff ff73 	bl	801a4a8 <ip4_input_accept>
 801a5c2:	4603      	mov	r3, r0
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d002      	beq.n	801a5ce <ip4_input+0xd2>
      netif = inp;
 801a5c8:	683b      	ldr	r3, [r7, #0]
 801a5ca:	613b      	str	r3, [r7, #16]
 801a5cc:	e01e      	b.n	801a60c <ip4_input+0x110>
    } else {
      netif = NULL;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a5d2:	4b5a      	ldr	r3, [pc, #360]	; (801a73c <ip4_input+0x240>)
 801a5d4:	695b      	ldr	r3, [r3, #20]
 801a5d6:	b2db      	uxtb	r3, r3
 801a5d8:	2b7f      	cmp	r3, #127	; 0x7f
 801a5da:	d017      	beq.n	801a60c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a5dc:	4b58      	ldr	r3, [pc, #352]	; (801a740 <ip4_input+0x244>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	613b      	str	r3, [r7, #16]
 801a5e2:	e00e      	b.n	801a602 <ip4_input+0x106>
          if (netif == inp) {
 801a5e4:	693a      	ldr	r2, [r7, #16]
 801a5e6:	683b      	ldr	r3, [r7, #0]
 801a5e8:	429a      	cmp	r2, r3
 801a5ea:	d006      	beq.n	801a5fa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a5ec:	6938      	ldr	r0, [r7, #16]
 801a5ee:	f7ff ff5b 	bl	801a4a8 <ip4_input_accept>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d108      	bne.n	801a60a <ip4_input+0x10e>
 801a5f8:	e000      	b.n	801a5fc <ip4_input+0x100>
            continue;
 801a5fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	613b      	str	r3, [r7, #16]
 801a602:	693b      	ldr	r3, [r7, #16]
 801a604:	2b00      	cmp	r3, #0
 801a606:	d1ed      	bne.n	801a5e4 <ip4_input+0xe8>
 801a608:	e000      	b.n	801a60c <ip4_input+0x110>
            break;
 801a60a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a60c:	4b4b      	ldr	r3, [pc, #300]	; (801a73c <ip4_input+0x240>)
 801a60e:	691b      	ldr	r3, [r3, #16]
 801a610:	6839      	ldr	r1, [r7, #0]
 801a612:	4618      	mov	r0, r3
 801a614:	f000 f96e 	bl	801a8f4 <ip4_addr_isbroadcast_u32>
 801a618:	4603      	mov	r3, r0
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d105      	bne.n	801a62a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a61e:	4b47      	ldr	r3, [pc, #284]	; (801a73c <ip4_input+0x240>)
 801a620:	691b      	ldr	r3, [r3, #16]
 801a622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a626:	2be0      	cmp	r3, #224	; 0xe0
 801a628:	d104      	bne.n	801a634 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a62a:	6878      	ldr	r0, [r7, #4]
 801a62c:	f7f7 fec4 	bl	80123b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a630:	2300      	movs	r3, #0
 801a632:	e07e      	b.n	801a732 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a634:	693b      	ldr	r3, [r7, #16]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d104      	bne.n	801a644 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a63a:	6878      	ldr	r0, [r7, #4]
 801a63c:	f7f7 febc 	bl	80123b8 <pbuf_free>
    return ERR_OK;
 801a640:	2300      	movs	r3, #0
 801a642:	e076      	b.n	801a732 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a644:	697b      	ldr	r3, [r7, #20]
 801a646:	88db      	ldrh	r3, [r3, #6]
 801a648:	b29b      	uxth	r3, r3
 801a64a:	461a      	mov	r2, r3
 801a64c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a650:	4013      	ands	r3, r2
 801a652:	2b00      	cmp	r3, #0
 801a654:	d00b      	beq.n	801a66e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a656:	6878      	ldr	r0, [r7, #4]
 801a658:	f000 fc92 	bl	801af80 <ip4_reass>
 801a65c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	2b00      	cmp	r3, #0
 801a662:	d101      	bne.n	801a668 <ip4_input+0x16c>
      return ERR_OK;
 801a664:	2300      	movs	r3, #0
 801a666:	e064      	b.n	801a732 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	685b      	ldr	r3, [r3, #4]
 801a66c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a66e:	4a33      	ldr	r2, [pc, #204]	; (801a73c <ip4_input+0x240>)
 801a670:	693b      	ldr	r3, [r7, #16]
 801a672:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a674:	4a31      	ldr	r2, [pc, #196]	; (801a73c <ip4_input+0x240>)
 801a676:	683b      	ldr	r3, [r7, #0]
 801a678:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a67a:	4a30      	ldr	r2, [pc, #192]	; (801a73c <ip4_input+0x240>)
 801a67c:	697b      	ldr	r3, [r7, #20]
 801a67e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a680:	697b      	ldr	r3, [r7, #20]
 801a682:	781b      	ldrb	r3, [r3, #0]
 801a684:	f003 030f 	and.w	r3, r3, #15
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	009b      	lsls	r3, r3, #2
 801a68c:	b2db      	uxtb	r3, r3
 801a68e:	b29a      	uxth	r2, r3
 801a690:	4b2a      	ldr	r3, [pc, #168]	; (801a73c <ip4_input+0x240>)
 801a692:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a694:	89fb      	ldrh	r3, [r7, #14]
 801a696:	4619      	mov	r1, r3
 801a698:	6878      	ldr	r0, [r7, #4]
 801a69a:	f7f7 fe07 	bl	80122ac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a69e:	697b      	ldr	r3, [r7, #20]
 801a6a0:	7a5b      	ldrb	r3, [r3, #9]
 801a6a2:	2b11      	cmp	r3, #17
 801a6a4:	d006      	beq.n	801a6b4 <ip4_input+0x1b8>
 801a6a6:	2b11      	cmp	r3, #17
 801a6a8:	dc13      	bgt.n	801a6d2 <ip4_input+0x1d6>
 801a6aa:	2b01      	cmp	r3, #1
 801a6ac:	d00c      	beq.n	801a6c8 <ip4_input+0x1cc>
 801a6ae:	2b06      	cmp	r3, #6
 801a6b0:	d005      	beq.n	801a6be <ip4_input+0x1c2>
 801a6b2:	e00e      	b.n	801a6d2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a6b4:	6839      	ldr	r1, [r7, #0]
 801a6b6:	6878      	ldr	r0, [r7, #4]
 801a6b8:	f7fe fc4c 	bl	8018f54 <udp_input>
        break;
 801a6bc:	e026      	b.n	801a70c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a6be:	6839      	ldr	r1, [r7, #0]
 801a6c0:	6878      	ldr	r0, [r7, #4]
 801a6c2:	f7fa f86d 	bl	80147a0 <tcp_input>
        break;
 801a6c6:	e021      	b.n	801a70c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a6c8:	6839      	ldr	r1, [r7, #0]
 801a6ca:	6878      	ldr	r0, [r7, #4]
 801a6cc:	f7ff fcd2 	bl	801a074 <icmp_input>
        break;
 801a6d0:	e01c      	b.n	801a70c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a6d2:	4b1a      	ldr	r3, [pc, #104]	; (801a73c <ip4_input+0x240>)
 801a6d4:	695b      	ldr	r3, [r3, #20]
 801a6d6:	6939      	ldr	r1, [r7, #16]
 801a6d8:	4618      	mov	r0, r3
 801a6da:	f000 f90b 	bl	801a8f4 <ip4_addr_isbroadcast_u32>
 801a6de:	4603      	mov	r3, r0
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d10f      	bne.n	801a704 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a6e4:	4b15      	ldr	r3, [pc, #84]	; (801a73c <ip4_input+0x240>)
 801a6e6:	695b      	ldr	r3, [r3, #20]
 801a6e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a6ec:	2be0      	cmp	r3, #224	; 0xe0
 801a6ee:	d009      	beq.n	801a704 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a6f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a6f4:	4619      	mov	r1, r3
 801a6f6:	6878      	ldr	r0, [r7, #4]
 801a6f8:	f7f7 fe4b 	bl	8012392 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a6fc:	2102      	movs	r1, #2
 801a6fe:	6878      	ldr	r0, [r7, #4]
 801a700:	f7ff fdce 	bl	801a2a0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a704:	6878      	ldr	r0, [r7, #4]
 801a706:	f7f7 fe57 	bl	80123b8 <pbuf_free>
        break;
 801a70a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a70c:	4b0b      	ldr	r3, [pc, #44]	; (801a73c <ip4_input+0x240>)
 801a70e:	2200      	movs	r2, #0
 801a710:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a712:	4b0a      	ldr	r3, [pc, #40]	; (801a73c <ip4_input+0x240>)
 801a714:	2200      	movs	r2, #0
 801a716:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a718:	4b08      	ldr	r3, [pc, #32]	; (801a73c <ip4_input+0x240>)
 801a71a:	2200      	movs	r2, #0
 801a71c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a71e:	4b07      	ldr	r3, [pc, #28]	; (801a73c <ip4_input+0x240>)
 801a720:	2200      	movs	r2, #0
 801a722:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a724:	4b05      	ldr	r3, [pc, #20]	; (801a73c <ip4_input+0x240>)
 801a726:	2200      	movs	r2, #0
 801a728:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a72a:	4b04      	ldr	r3, [pc, #16]	; (801a73c <ip4_input+0x240>)
 801a72c:	2200      	movs	r2, #0
 801a72e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a730:	2300      	movs	r3, #0
}
 801a732:	4618      	mov	r0, r3
 801a734:	3718      	adds	r7, #24
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}
 801a73a:	bf00      	nop
 801a73c:	200042bc 	.word	0x200042bc
 801a740:	2000afd8 	.word	0x2000afd8

0801a744 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b08a      	sub	sp, #40	; 0x28
 801a748:	af04      	add	r7, sp, #16
 801a74a:	60f8      	str	r0, [r7, #12]
 801a74c:	60b9      	str	r1, [r7, #8]
 801a74e:	607a      	str	r2, [r7, #4]
 801a750:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a752:	68bb      	ldr	r3, [r7, #8]
 801a754:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d009      	beq.n	801a770 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a75c:	68bb      	ldr	r3, [r7, #8]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d003      	beq.n	801a76a <ip4_output_if+0x26>
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d102      	bne.n	801a770 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a76c:	3304      	adds	r3, #4
 801a76e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a770:	78fa      	ldrb	r2, [r7, #3]
 801a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a774:	9302      	str	r3, [sp, #8]
 801a776:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a77a:	9301      	str	r3, [sp, #4]
 801a77c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a780:	9300      	str	r3, [sp, #0]
 801a782:	4613      	mov	r3, r2
 801a784:	687a      	ldr	r2, [r7, #4]
 801a786:	6979      	ldr	r1, [r7, #20]
 801a788:	68f8      	ldr	r0, [r7, #12]
 801a78a:	f000 f805 	bl	801a798 <ip4_output_if_src>
 801a78e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a790:	4618      	mov	r0, r3
 801a792:	3718      	adds	r7, #24
 801a794:	46bd      	mov	sp, r7
 801a796:	bd80      	pop	{r7, pc}

0801a798 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b088      	sub	sp, #32
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	60f8      	str	r0, [r7, #12]
 801a7a0:	60b9      	str	r1, [r7, #8]
 801a7a2:	607a      	str	r2, [r7, #4]
 801a7a4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	7b9b      	ldrb	r3, [r3, #14]
 801a7aa:	2b01      	cmp	r3, #1
 801a7ac:	d006      	beq.n	801a7bc <ip4_output_if_src+0x24>
 801a7ae:	4b4b      	ldr	r3, [pc, #300]	; (801a8dc <ip4_output_if_src+0x144>)
 801a7b0:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a7b4:	494a      	ldr	r1, [pc, #296]	; (801a8e0 <ip4_output_if_src+0x148>)
 801a7b6:	484b      	ldr	r0, [pc, #300]	; (801a8e4 <ip4_output_if_src+0x14c>)
 801a7b8:	f001 fb4c 	bl	801be54 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d060      	beq.n	801a884 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a7c2:	2314      	movs	r3, #20
 801a7c4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a7c6:	2114      	movs	r1, #20
 801a7c8:	68f8      	ldr	r0, [r7, #12]
 801a7ca:	f7f7 fd5f 	bl	801228c <pbuf_add_header>
 801a7ce:	4603      	mov	r3, r0
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d002      	beq.n	801a7da <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a7d4:	f06f 0301 	mvn.w	r3, #1
 801a7d8:	e07c      	b.n	801a8d4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	685b      	ldr	r3, [r3, #4]
 801a7de:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	895b      	ldrh	r3, [r3, #10]
 801a7e4:	2b13      	cmp	r3, #19
 801a7e6:	d806      	bhi.n	801a7f6 <ip4_output_if_src+0x5e>
 801a7e8:	4b3c      	ldr	r3, [pc, #240]	; (801a8dc <ip4_output_if_src+0x144>)
 801a7ea:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a7ee:	493e      	ldr	r1, [pc, #248]	; (801a8e8 <ip4_output_if_src+0x150>)
 801a7f0:	483c      	ldr	r0, [pc, #240]	; (801a8e4 <ip4_output_if_src+0x14c>)
 801a7f2:	f001 fb2f 	bl	801be54 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a7f6:	69fb      	ldr	r3, [r7, #28]
 801a7f8:	78fa      	ldrb	r2, [r7, #3]
 801a7fa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a7fc:	69fb      	ldr	r3, [r7, #28]
 801a7fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a802:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681a      	ldr	r2, [r3, #0]
 801a808:	69fb      	ldr	r3, [r7, #28]
 801a80a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a80c:	8b7b      	ldrh	r3, [r7, #26]
 801a80e:	089b      	lsrs	r3, r3, #2
 801a810:	b29b      	uxth	r3, r3
 801a812:	b2db      	uxtb	r3, r3
 801a814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a818:	b2da      	uxtb	r2, r3
 801a81a:	69fb      	ldr	r3, [r7, #28]
 801a81c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a81e:	69fb      	ldr	r3, [r7, #28]
 801a820:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a824:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	891b      	ldrh	r3, [r3, #8]
 801a82a:	4618      	mov	r0, r3
 801a82c:	f7f6 f9fb 	bl	8010c26 <lwip_htons>
 801a830:	4603      	mov	r3, r0
 801a832:	461a      	mov	r2, r3
 801a834:	69fb      	ldr	r3, [r7, #28]
 801a836:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a838:	69fb      	ldr	r3, [r7, #28]
 801a83a:	2200      	movs	r2, #0
 801a83c:	719a      	strb	r2, [r3, #6]
 801a83e:	2200      	movs	r2, #0
 801a840:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a842:	4b2a      	ldr	r3, [pc, #168]	; (801a8ec <ip4_output_if_src+0x154>)
 801a844:	881b      	ldrh	r3, [r3, #0]
 801a846:	4618      	mov	r0, r3
 801a848:	f7f6 f9ed 	bl	8010c26 <lwip_htons>
 801a84c:	4603      	mov	r3, r0
 801a84e:	461a      	mov	r2, r3
 801a850:	69fb      	ldr	r3, [r7, #28]
 801a852:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a854:	4b25      	ldr	r3, [pc, #148]	; (801a8ec <ip4_output_if_src+0x154>)
 801a856:	881b      	ldrh	r3, [r3, #0]
 801a858:	3301      	adds	r3, #1
 801a85a:	b29a      	uxth	r2, r3
 801a85c:	4b23      	ldr	r3, [pc, #140]	; (801a8ec <ip4_output_if_src+0x154>)
 801a85e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a860:	68bb      	ldr	r3, [r7, #8]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d104      	bne.n	801a870 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a866:	4b22      	ldr	r3, [pc, #136]	; (801a8f0 <ip4_output_if_src+0x158>)
 801a868:	681a      	ldr	r2, [r3, #0]
 801a86a:	69fb      	ldr	r3, [r7, #28]
 801a86c:	60da      	str	r2, [r3, #12]
 801a86e:	e003      	b.n	801a878 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	681a      	ldr	r2, [r3, #0]
 801a874:	69fb      	ldr	r3, [r7, #28]
 801a876:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a878:	69fb      	ldr	r3, [r7, #28]
 801a87a:	2200      	movs	r2, #0
 801a87c:	729a      	strb	r2, [r3, #10]
 801a87e:	2200      	movs	r2, #0
 801a880:	72da      	strb	r2, [r3, #11]
 801a882:	e00f      	b.n	801a8a4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	895b      	ldrh	r3, [r3, #10]
 801a888:	2b13      	cmp	r3, #19
 801a88a:	d802      	bhi.n	801a892 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a88c:	f06f 0301 	mvn.w	r3, #1
 801a890:	e020      	b.n	801a8d4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	685b      	ldr	r3, [r3, #4]
 801a896:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a898:	69fb      	ldr	r3, [r7, #28]
 801a89a:	691b      	ldr	r3, [r3, #16]
 801a89c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a89e:	f107 0314 	add.w	r3, r7, #20
 801a8a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d00c      	beq.n	801a8c6 <ip4_output_if_src+0x12e>
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	891a      	ldrh	r2, [r3, #8]
 801a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a8b4:	429a      	cmp	r2, r3
 801a8b6:	d906      	bls.n	801a8c6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a8b8:	687a      	ldr	r2, [r7, #4]
 801a8ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a8bc:	68f8      	ldr	r0, [r7, #12]
 801a8be:	f000 fd53 	bl	801b368 <ip4_frag>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	e006      	b.n	801a8d4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8c8:	695b      	ldr	r3, [r3, #20]
 801a8ca:	687a      	ldr	r2, [r7, #4]
 801a8cc:	68f9      	ldr	r1, [r7, #12]
 801a8ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a8d0:	4798      	blx	r3
 801a8d2:	4603      	mov	r3, r0
}
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	3720      	adds	r7, #32
 801a8d8:	46bd      	mov	sp, r7
 801a8da:	bd80      	pop	{r7, pc}
 801a8dc:	0801fa70 	.word	0x0801fa70
 801a8e0:	0801faa4 	.word	0x0801faa4
 801a8e4:	0801fab0 	.word	0x0801fab0
 801a8e8:	0801fad8 	.word	0x0801fad8
 801a8ec:	2000b136 	.word	0x2000b136
 801a8f0:	08020058 	.word	0x08020058

0801a8f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a8f4:	b480      	push	{r7}
 801a8f6:	b085      	sub	sp, #20
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
 801a8fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a908:	d002      	beq.n	801a910 <ip4_addr_isbroadcast_u32+0x1c>
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d101      	bne.n	801a914 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a910:	2301      	movs	r3, #1
 801a912:	e02a      	b.n	801a96a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a914:	683b      	ldr	r3, [r7, #0]
 801a916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a91a:	f003 0302 	and.w	r3, r3, #2
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d101      	bne.n	801a926 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a922:	2300      	movs	r3, #0
 801a924:	e021      	b.n	801a96a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a926:	683b      	ldr	r3, [r7, #0]
 801a928:	3304      	adds	r3, #4
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	687a      	ldr	r2, [r7, #4]
 801a92e:	429a      	cmp	r2, r3
 801a930:	d101      	bne.n	801a936 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a932:	2300      	movs	r3, #0
 801a934:	e019      	b.n	801a96a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a936:	68fa      	ldr	r2, [r7, #12]
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	3304      	adds	r3, #4
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	405a      	eors	r2, r3
 801a940:	683b      	ldr	r3, [r7, #0]
 801a942:	3308      	adds	r3, #8
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	4013      	ands	r3, r2
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d10d      	bne.n	801a968 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a94c:	683b      	ldr	r3, [r7, #0]
 801a94e:	3308      	adds	r3, #8
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	43da      	mvns	r2, r3
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a958:	683b      	ldr	r3, [r7, #0]
 801a95a:	3308      	adds	r3, #8
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a960:	429a      	cmp	r2, r3
 801a962:	d101      	bne.n	801a968 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a964:	2301      	movs	r3, #1
 801a966:	e000      	b.n	801a96a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a968:	2300      	movs	r3, #0
  }
}
 801a96a:	4618      	mov	r0, r3
 801a96c:	3714      	adds	r7, #20
 801a96e:	46bd      	mov	sp, r7
 801a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a974:	4770      	bx	lr
	...

0801a978 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a978:	b580      	push	{r7, lr}
 801a97a:	b084      	sub	sp, #16
 801a97c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a97e:	2300      	movs	r3, #0
 801a980:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a982:	4b12      	ldr	r3, [pc, #72]	; (801a9cc <ip_reass_tmr+0x54>)
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a988:	e018      	b.n	801a9bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	7fdb      	ldrb	r3, [r3, #31]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d00b      	beq.n	801a9aa <ip_reass_tmr+0x32>
      r->timer--;
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	7fdb      	ldrb	r3, [r3, #31]
 801a996:	3b01      	subs	r3, #1
 801a998:	b2da      	uxtb	r2, r3
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a99e:	68fb      	ldr	r3, [r7, #12]
 801a9a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	60fb      	str	r3, [r7, #12]
 801a9a8:	e008      	b.n	801a9bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a9ae:	68fb      	ldr	r3, [r7, #12]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a9b4:	68b9      	ldr	r1, [r7, #8]
 801a9b6:	6878      	ldr	r0, [r7, #4]
 801a9b8:	f000 f80a 	bl	801a9d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d1e3      	bne.n	801a98a <ip_reass_tmr+0x12>
    }
  }
}
 801a9c2:	bf00      	nop
 801a9c4:	bf00      	nop
 801a9c6:	3710      	adds	r7, #16
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	bd80      	pop	{r7, pc}
 801a9cc:	2000b138 	.word	0x2000b138

0801a9d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	b088      	sub	sp, #32
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	6078      	str	r0, [r7, #4]
 801a9d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a9da:	2300      	movs	r3, #0
 801a9dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a9de:	683a      	ldr	r2, [r7, #0]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	429a      	cmp	r2, r3
 801a9e4:	d105      	bne.n	801a9f2 <ip_reass_free_complete_datagram+0x22>
 801a9e6:	4b45      	ldr	r3, [pc, #276]	; (801aafc <ip_reass_free_complete_datagram+0x12c>)
 801a9e8:	22ab      	movs	r2, #171	; 0xab
 801a9ea:	4945      	ldr	r1, [pc, #276]	; (801ab00 <ip_reass_free_complete_datagram+0x130>)
 801a9ec:	4845      	ldr	r0, [pc, #276]	; (801ab04 <ip_reass_free_complete_datagram+0x134>)
 801a9ee:	f001 fa31 	bl	801be54 <iprintf>
  if (prev != NULL) {
 801a9f2:	683b      	ldr	r3, [r7, #0]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d00a      	beq.n	801aa0e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a9f8:	683b      	ldr	r3, [r7, #0]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	687a      	ldr	r2, [r7, #4]
 801a9fe:	429a      	cmp	r2, r3
 801aa00:	d005      	beq.n	801aa0e <ip_reass_free_complete_datagram+0x3e>
 801aa02:	4b3e      	ldr	r3, [pc, #248]	; (801aafc <ip_reass_free_complete_datagram+0x12c>)
 801aa04:	22ad      	movs	r2, #173	; 0xad
 801aa06:	4940      	ldr	r1, [pc, #256]	; (801ab08 <ip_reass_free_complete_datagram+0x138>)
 801aa08:	483e      	ldr	r0, [pc, #248]	; (801ab04 <ip_reass_free_complete_datagram+0x134>)
 801aa0a:	f001 fa23 	bl	801be54 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	685b      	ldr	r3, [r3, #4]
 801aa12:	685b      	ldr	r3, [r3, #4]
 801aa14:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801aa16:	697b      	ldr	r3, [r7, #20]
 801aa18:	889b      	ldrh	r3, [r3, #4]
 801aa1a:	b29b      	uxth	r3, r3
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d12a      	bne.n	801aa76 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	685b      	ldr	r3, [r3, #4]
 801aa24:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801aa26:	697b      	ldr	r3, [r7, #20]
 801aa28:	681a      	ldr	r2, [r3, #0]
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801aa2e:	69bb      	ldr	r3, [r7, #24]
 801aa30:	6858      	ldr	r0, [r3, #4]
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	3308      	adds	r3, #8
 801aa36:	2214      	movs	r2, #20
 801aa38:	4619      	mov	r1, r3
 801aa3a:	f001 fb7c 	bl	801c136 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801aa3e:	2101      	movs	r1, #1
 801aa40:	69b8      	ldr	r0, [r7, #24]
 801aa42:	f7ff fc3d 	bl	801a2c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801aa46:	69b8      	ldr	r0, [r7, #24]
 801aa48:	f7f7 fd3e 	bl	80124c8 <pbuf_clen>
 801aa4c:	4603      	mov	r3, r0
 801aa4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801aa50:	8bfa      	ldrh	r2, [r7, #30]
 801aa52:	8a7b      	ldrh	r3, [r7, #18]
 801aa54:	4413      	add	r3, r2
 801aa56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aa5a:	db05      	blt.n	801aa68 <ip_reass_free_complete_datagram+0x98>
 801aa5c:	4b27      	ldr	r3, [pc, #156]	; (801aafc <ip_reass_free_complete_datagram+0x12c>)
 801aa5e:	22bc      	movs	r2, #188	; 0xbc
 801aa60:	492a      	ldr	r1, [pc, #168]	; (801ab0c <ip_reass_free_complete_datagram+0x13c>)
 801aa62:	4828      	ldr	r0, [pc, #160]	; (801ab04 <ip_reass_free_complete_datagram+0x134>)
 801aa64:	f001 f9f6 	bl	801be54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801aa68:	8bfa      	ldrh	r2, [r7, #30]
 801aa6a:	8a7b      	ldrh	r3, [r7, #18]
 801aa6c:	4413      	add	r3, r2
 801aa6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801aa70:	69b8      	ldr	r0, [r7, #24]
 801aa72:	f7f7 fca1 	bl	80123b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	685b      	ldr	r3, [r3, #4]
 801aa7a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801aa7c:	e01f      	b.n	801aabe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801aa7e:	69bb      	ldr	r3, [r7, #24]
 801aa80:	685b      	ldr	r3, [r3, #4]
 801aa82:	617b      	str	r3, [r7, #20]
    pcur = p;
 801aa84:	69bb      	ldr	r3, [r7, #24]
 801aa86:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801aa8e:	68f8      	ldr	r0, [r7, #12]
 801aa90:	f7f7 fd1a 	bl	80124c8 <pbuf_clen>
 801aa94:	4603      	mov	r3, r0
 801aa96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801aa98:	8bfa      	ldrh	r2, [r7, #30]
 801aa9a:	8a7b      	ldrh	r3, [r7, #18]
 801aa9c:	4413      	add	r3, r2
 801aa9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aaa2:	db05      	blt.n	801aab0 <ip_reass_free_complete_datagram+0xe0>
 801aaa4:	4b15      	ldr	r3, [pc, #84]	; (801aafc <ip_reass_free_complete_datagram+0x12c>)
 801aaa6:	22cc      	movs	r2, #204	; 0xcc
 801aaa8:	4918      	ldr	r1, [pc, #96]	; (801ab0c <ip_reass_free_complete_datagram+0x13c>)
 801aaaa:	4816      	ldr	r0, [pc, #88]	; (801ab04 <ip_reass_free_complete_datagram+0x134>)
 801aaac:	f001 f9d2 	bl	801be54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801aab0:	8bfa      	ldrh	r2, [r7, #30]
 801aab2:	8a7b      	ldrh	r3, [r7, #18]
 801aab4:	4413      	add	r3, r2
 801aab6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801aab8:	68f8      	ldr	r0, [r7, #12]
 801aaba:	f7f7 fc7d 	bl	80123b8 <pbuf_free>
  while (p != NULL) {
 801aabe:	69bb      	ldr	r3, [r7, #24]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d1dc      	bne.n	801aa7e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801aac4:	6839      	ldr	r1, [r7, #0]
 801aac6:	6878      	ldr	r0, [r7, #4]
 801aac8:	f000 f8c2 	bl	801ac50 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801aacc:	4b10      	ldr	r3, [pc, #64]	; (801ab10 <ip_reass_free_complete_datagram+0x140>)
 801aace:	881b      	ldrh	r3, [r3, #0]
 801aad0:	8bfa      	ldrh	r2, [r7, #30]
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d905      	bls.n	801aae2 <ip_reass_free_complete_datagram+0x112>
 801aad6:	4b09      	ldr	r3, [pc, #36]	; (801aafc <ip_reass_free_complete_datagram+0x12c>)
 801aad8:	22d2      	movs	r2, #210	; 0xd2
 801aada:	490e      	ldr	r1, [pc, #56]	; (801ab14 <ip_reass_free_complete_datagram+0x144>)
 801aadc:	4809      	ldr	r0, [pc, #36]	; (801ab04 <ip_reass_free_complete_datagram+0x134>)
 801aade:	f001 f9b9 	bl	801be54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801aae2:	4b0b      	ldr	r3, [pc, #44]	; (801ab10 <ip_reass_free_complete_datagram+0x140>)
 801aae4:	881a      	ldrh	r2, [r3, #0]
 801aae6:	8bfb      	ldrh	r3, [r7, #30]
 801aae8:	1ad3      	subs	r3, r2, r3
 801aaea:	b29a      	uxth	r2, r3
 801aaec:	4b08      	ldr	r3, [pc, #32]	; (801ab10 <ip_reass_free_complete_datagram+0x140>)
 801aaee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801aaf0:	8bfb      	ldrh	r3, [r7, #30]
}
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	3720      	adds	r7, #32
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	bd80      	pop	{r7, pc}
 801aafa:	bf00      	nop
 801aafc:	0801fb08 	.word	0x0801fb08
 801ab00:	0801fb44 	.word	0x0801fb44
 801ab04:	0801fb50 	.word	0x0801fb50
 801ab08:	0801fb78 	.word	0x0801fb78
 801ab0c:	0801fb8c 	.word	0x0801fb8c
 801ab10:	2000b13c 	.word	0x2000b13c
 801ab14:	0801fbac 	.word	0x0801fbac

0801ab18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b08a      	sub	sp, #40	; 0x28
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
 801ab20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ab22:	2300      	movs	r3, #0
 801ab24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ab26:	2300      	movs	r3, #0
 801ab28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ab2a:	2300      	movs	r3, #0
 801ab2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ab2e:	2300      	movs	r3, #0
 801ab30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ab32:	2300      	movs	r3, #0
 801ab34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ab36:	4b28      	ldr	r3, [pc, #160]	; (801abd8 <ip_reass_remove_oldest_datagram+0xc0>)
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ab3c:	e030      	b.n	801aba0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab40:	695a      	ldr	r2, [r3, #20]
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	68db      	ldr	r3, [r3, #12]
 801ab46:	429a      	cmp	r2, r3
 801ab48:	d10c      	bne.n	801ab64 <ip_reass_remove_oldest_datagram+0x4c>
 801ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab4c:	699a      	ldr	r2, [r3, #24]
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	691b      	ldr	r3, [r3, #16]
 801ab52:	429a      	cmp	r2, r3
 801ab54:	d106      	bne.n	801ab64 <ip_reass_remove_oldest_datagram+0x4c>
 801ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab58:	899a      	ldrh	r2, [r3, #12]
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	889b      	ldrh	r3, [r3, #4]
 801ab5e:	b29b      	uxth	r3, r3
 801ab60:	429a      	cmp	r2, r3
 801ab62:	d014      	beq.n	801ab8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ab64:	693b      	ldr	r3, [r7, #16]
 801ab66:	3301      	adds	r3, #1
 801ab68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ab6a:	6a3b      	ldr	r3, [r7, #32]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d104      	bne.n	801ab7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ab74:	69fb      	ldr	r3, [r7, #28]
 801ab76:	61bb      	str	r3, [r7, #24]
 801ab78:	e009      	b.n	801ab8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab7c:	7fda      	ldrb	r2, [r3, #31]
 801ab7e:	6a3b      	ldr	r3, [r7, #32]
 801ab80:	7fdb      	ldrb	r3, [r3, #31]
 801ab82:	429a      	cmp	r2, r3
 801ab84:	d803      	bhi.n	801ab8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ab8a:	69fb      	ldr	r3, [r7, #28]
 801ab8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ab8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d001      	beq.n	801ab9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d1cb      	bne.n	801ab3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801aba6:	6a3b      	ldr	r3, [r7, #32]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d008      	beq.n	801abbe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801abac:	69b9      	ldr	r1, [r7, #24]
 801abae:	6a38      	ldr	r0, [r7, #32]
 801abb0:	f7ff ff0e 	bl	801a9d0 <ip_reass_free_complete_datagram>
 801abb4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801abb6:	697a      	ldr	r2, [r7, #20]
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	4413      	add	r3, r2
 801abbc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801abbe:	697a      	ldr	r2, [r7, #20]
 801abc0:	683b      	ldr	r3, [r7, #0]
 801abc2:	429a      	cmp	r2, r3
 801abc4:	da02      	bge.n	801abcc <ip_reass_remove_oldest_datagram+0xb4>
 801abc6:	693b      	ldr	r3, [r7, #16]
 801abc8:	2b01      	cmp	r3, #1
 801abca:	dcac      	bgt.n	801ab26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801abcc:	697b      	ldr	r3, [r7, #20]
}
 801abce:	4618      	mov	r0, r3
 801abd0:	3728      	adds	r7, #40	; 0x28
 801abd2:	46bd      	mov	sp, r7
 801abd4:	bd80      	pop	{r7, pc}
 801abd6:	bf00      	nop
 801abd8:	2000b138 	.word	0x2000b138

0801abdc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b084      	sub	sp, #16
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
 801abe4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801abe6:	2004      	movs	r0, #4
 801abe8:	f7f6 fd00 	bl	80115ec <memp_malloc>
 801abec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d110      	bne.n	801ac16 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801abf4:	6839      	ldr	r1, [r7, #0]
 801abf6:	6878      	ldr	r0, [r7, #4]
 801abf8:	f7ff ff8e 	bl	801ab18 <ip_reass_remove_oldest_datagram>
 801abfc:	4602      	mov	r2, r0
 801abfe:	683b      	ldr	r3, [r7, #0]
 801ac00:	4293      	cmp	r3, r2
 801ac02:	dc03      	bgt.n	801ac0c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ac04:	2004      	movs	r0, #4
 801ac06:	f7f6 fcf1 	bl	80115ec <memp_malloc>
 801ac0a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d101      	bne.n	801ac16 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ac12:	2300      	movs	r3, #0
 801ac14:	e016      	b.n	801ac44 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ac16:	2220      	movs	r2, #32
 801ac18:	2100      	movs	r1, #0
 801ac1a:	68f8      	ldr	r0, [r7, #12]
 801ac1c:	f001 f9f2 	bl	801c004 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	220f      	movs	r2, #15
 801ac24:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ac26:	4b09      	ldr	r3, [pc, #36]	; (801ac4c <ip_reass_enqueue_new_datagram+0x70>)
 801ac28:	681a      	ldr	r2, [r3, #0]
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ac2e:	4a07      	ldr	r2, [pc, #28]	; (801ac4c <ip_reass_enqueue_new_datagram+0x70>)
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	3308      	adds	r3, #8
 801ac38:	2214      	movs	r2, #20
 801ac3a:	6879      	ldr	r1, [r7, #4]
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	f001 fa7a 	bl	801c136 <memcpy>
  return ipr;
 801ac42:	68fb      	ldr	r3, [r7, #12]
}
 801ac44:	4618      	mov	r0, r3
 801ac46:	3710      	adds	r7, #16
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	bd80      	pop	{r7, pc}
 801ac4c:	2000b138 	.word	0x2000b138

0801ac50 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b082      	sub	sp, #8
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	6078      	str	r0, [r7, #4]
 801ac58:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ac5a:	4b10      	ldr	r3, [pc, #64]	; (801ac9c <ip_reass_dequeue_datagram+0x4c>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	687a      	ldr	r2, [r7, #4]
 801ac60:	429a      	cmp	r2, r3
 801ac62:	d104      	bne.n	801ac6e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	4a0c      	ldr	r2, [pc, #48]	; (801ac9c <ip_reass_dequeue_datagram+0x4c>)
 801ac6a:	6013      	str	r3, [r2, #0]
 801ac6c:	e00d      	b.n	801ac8a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ac6e:	683b      	ldr	r3, [r7, #0]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d106      	bne.n	801ac82 <ip_reass_dequeue_datagram+0x32>
 801ac74:	4b0a      	ldr	r3, [pc, #40]	; (801aca0 <ip_reass_dequeue_datagram+0x50>)
 801ac76:	f240 1245 	movw	r2, #325	; 0x145
 801ac7a:	490a      	ldr	r1, [pc, #40]	; (801aca4 <ip_reass_dequeue_datagram+0x54>)
 801ac7c:	480a      	ldr	r0, [pc, #40]	; (801aca8 <ip_reass_dequeue_datagram+0x58>)
 801ac7e:	f001 f8e9 	bl	801be54 <iprintf>
    prev->next = ipr->next;
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	681a      	ldr	r2, [r3, #0]
 801ac86:	683b      	ldr	r3, [r7, #0]
 801ac88:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ac8a:	6879      	ldr	r1, [r7, #4]
 801ac8c:	2004      	movs	r0, #4
 801ac8e:	f7f6 fd1d 	bl	80116cc <memp_free>
}
 801ac92:	bf00      	nop
 801ac94:	3708      	adds	r7, #8
 801ac96:	46bd      	mov	sp, r7
 801ac98:	bd80      	pop	{r7, pc}
 801ac9a:	bf00      	nop
 801ac9c:	2000b138 	.word	0x2000b138
 801aca0:	0801fb08 	.word	0x0801fb08
 801aca4:	0801fbd0 	.word	0x0801fbd0
 801aca8:	0801fb50 	.word	0x0801fb50

0801acac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801acac:	b580      	push	{r7, lr}
 801acae:	b08c      	sub	sp, #48	; 0x30
 801acb0:	af00      	add	r7, sp, #0
 801acb2:	60f8      	str	r0, [r7, #12]
 801acb4:	60b9      	str	r1, [r7, #8]
 801acb6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801acb8:	2300      	movs	r3, #0
 801acba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801acbc:	2301      	movs	r3, #1
 801acbe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801acc0:	68bb      	ldr	r3, [r7, #8]
 801acc2:	685b      	ldr	r3, [r3, #4]
 801acc4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801acc6:	69fb      	ldr	r3, [r7, #28]
 801acc8:	885b      	ldrh	r3, [r3, #2]
 801acca:	b29b      	uxth	r3, r3
 801accc:	4618      	mov	r0, r3
 801acce:	f7f5 ffaa 	bl	8010c26 <lwip_htons>
 801acd2:	4603      	mov	r3, r0
 801acd4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801acd6:	69fb      	ldr	r3, [r7, #28]
 801acd8:	781b      	ldrb	r3, [r3, #0]
 801acda:	f003 030f 	and.w	r3, r3, #15
 801acde:	b2db      	uxtb	r3, r3
 801ace0:	009b      	lsls	r3, r3, #2
 801ace2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ace4:	7e7b      	ldrb	r3, [r7, #25]
 801ace6:	b29b      	uxth	r3, r3
 801ace8:	8b7a      	ldrh	r2, [r7, #26]
 801acea:	429a      	cmp	r2, r3
 801acec:	d202      	bcs.n	801acf4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801acee:	f04f 33ff 	mov.w	r3, #4294967295
 801acf2:	e135      	b.n	801af60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801acf4:	7e7b      	ldrb	r3, [r7, #25]
 801acf6:	b29b      	uxth	r3, r3
 801acf8:	8b7a      	ldrh	r2, [r7, #26]
 801acfa:	1ad3      	subs	r3, r2, r3
 801acfc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801acfe:	69fb      	ldr	r3, [r7, #28]
 801ad00:	88db      	ldrh	r3, [r3, #6]
 801ad02:	b29b      	uxth	r3, r3
 801ad04:	4618      	mov	r0, r3
 801ad06:	f7f5 ff8e 	bl	8010c26 <lwip_htons>
 801ad0a:	4603      	mov	r3, r0
 801ad0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ad10:	b29b      	uxth	r3, r3
 801ad12:	00db      	lsls	r3, r3, #3
 801ad14:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ad16:	68bb      	ldr	r3, [r7, #8]
 801ad18:	685b      	ldr	r3, [r3, #4]
 801ad1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad1e:	2200      	movs	r2, #0
 801ad20:	701a      	strb	r2, [r3, #0]
 801ad22:	2200      	movs	r2, #0
 801ad24:	705a      	strb	r2, [r3, #1]
 801ad26:	2200      	movs	r2, #0
 801ad28:	709a      	strb	r2, [r3, #2]
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad30:	8afa      	ldrh	r2, [r7, #22]
 801ad32:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ad34:	8afa      	ldrh	r2, [r7, #22]
 801ad36:	8b7b      	ldrh	r3, [r7, #26]
 801ad38:	4413      	add	r3, r2
 801ad3a:	b29a      	uxth	r2, r3
 801ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad3e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ad40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad42:	88db      	ldrh	r3, [r3, #6]
 801ad44:	b29b      	uxth	r3, r3
 801ad46:	8afa      	ldrh	r2, [r7, #22]
 801ad48:	429a      	cmp	r2, r3
 801ad4a:	d902      	bls.n	801ad52 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ad4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ad50:	e106      	b.n	801af60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	685b      	ldr	r3, [r3, #4]
 801ad56:	627b      	str	r3, [r7, #36]	; 0x24
 801ad58:	e068      	b.n	801ae2c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad5c:	685b      	ldr	r3, [r3, #4]
 801ad5e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801ad60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad62:	889b      	ldrh	r3, [r3, #4]
 801ad64:	b29a      	uxth	r2, r3
 801ad66:	693b      	ldr	r3, [r7, #16]
 801ad68:	889b      	ldrh	r3, [r3, #4]
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	429a      	cmp	r2, r3
 801ad6e:	d235      	bcs.n	801addc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad74:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d020      	beq.n	801adbe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ad7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad7e:	889b      	ldrh	r3, [r3, #4]
 801ad80:	b29a      	uxth	r2, r3
 801ad82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad84:	88db      	ldrh	r3, [r3, #6]
 801ad86:	b29b      	uxth	r3, r3
 801ad88:	429a      	cmp	r2, r3
 801ad8a:	d307      	bcc.n	801ad9c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad8e:	88db      	ldrh	r3, [r3, #6]
 801ad90:	b29a      	uxth	r2, r3
 801ad92:	693b      	ldr	r3, [r7, #16]
 801ad94:	889b      	ldrh	r3, [r3, #4]
 801ad96:	b29b      	uxth	r3, r3
 801ad98:	429a      	cmp	r2, r3
 801ad9a:	d902      	bls.n	801ada2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ad9c:	f04f 33ff 	mov.w	r3, #4294967295
 801ada0:	e0de      	b.n	801af60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ada4:	68ba      	ldr	r2, [r7, #8]
 801ada6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adaa:	88db      	ldrh	r3, [r3, #6]
 801adac:	b29a      	uxth	r2, r3
 801adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adb0:	889b      	ldrh	r3, [r3, #4]
 801adb2:	b29b      	uxth	r3, r3
 801adb4:	429a      	cmp	r2, r3
 801adb6:	d03d      	beq.n	801ae34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801adb8:	2300      	movs	r3, #0
 801adba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801adbc:	e03a      	b.n	801ae34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adc0:	88db      	ldrh	r3, [r3, #6]
 801adc2:	b29a      	uxth	r2, r3
 801adc4:	693b      	ldr	r3, [r7, #16]
 801adc6:	889b      	ldrh	r3, [r3, #4]
 801adc8:	b29b      	uxth	r3, r3
 801adca:	429a      	cmp	r2, r3
 801adcc:	d902      	bls.n	801add4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801adce:	f04f 33ff 	mov.w	r3, #4294967295
 801add2:	e0c5      	b.n	801af60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	68ba      	ldr	r2, [r7, #8]
 801add8:	605a      	str	r2, [r3, #4]
      break;
 801adda:	e02b      	b.n	801ae34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801addc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adde:	889b      	ldrh	r3, [r3, #4]
 801ade0:	b29a      	uxth	r2, r3
 801ade2:	693b      	ldr	r3, [r7, #16]
 801ade4:	889b      	ldrh	r3, [r3, #4]
 801ade6:	b29b      	uxth	r3, r3
 801ade8:	429a      	cmp	r2, r3
 801adea:	d102      	bne.n	801adf2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801adec:	f04f 33ff 	mov.w	r3, #4294967295
 801adf0:	e0b6      	b.n	801af60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801adf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adf4:	889b      	ldrh	r3, [r3, #4]
 801adf6:	b29a      	uxth	r2, r3
 801adf8:	693b      	ldr	r3, [r7, #16]
 801adfa:	88db      	ldrh	r3, [r3, #6]
 801adfc:	b29b      	uxth	r3, r3
 801adfe:	429a      	cmp	r2, r3
 801ae00:	d202      	bcs.n	801ae08 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ae02:	f04f 33ff 	mov.w	r3, #4294967295
 801ae06:	e0ab      	b.n	801af60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d009      	beq.n	801ae22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae10:	88db      	ldrh	r3, [r3, #6]
 801ae12:	b29a      	uxth	r2, r3
 801ae14:	693b      	ldr	r3, [r7, #16]
 801ae16:	889b      	ldrh	r3, [r3, #4]
 801ae18:	b29b      	uxth	r3, r3
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	d001      	beq.n	801ae22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ae1e:	2300      	movs	r3, #0
 801ae20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ae22:	693b      	ldr	r3, [r7, #16]
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ae28:	693b      	ldr	r3, [r7, #16]
 801ae2a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d193      	bne.n	801ad5a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ae32:	e000      	b.n	801ae36 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ae34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d12d      	bne.n	801ae98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d01c      	beq.n	801ae7c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae44:	88db      	ldrh	r3, [r3, #6]
 801ae46:	b29a      	uxth	r2, r3
 801ae48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae4a:	889b      	ldrh	r3, [r3, #4]
 801ae4c:	b29b      	uxth	r3, r3
 801ae4e:	429a      	cmp	r2, r3
 801ae50:	d906      	bls.n	801ae60 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801ae52:	4b45      	ldr	r3, [pc, #276]	; (801af68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ae54:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801ae58:	4944      	ldr	r1, [pc, #272]	; (801af6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ae5a:	4845      	ldr	r0, [pc, #276]	; (801af70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ae5c:	f000 fffa 	bl	801be54 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae62:	68ba      	ldr	r2, [r7, #8]
 801ae64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ae66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae68:	88db      	ldrh	r3, [r3, #6]
 801ae6a:	b29a      	uxth	r2, r3
 801ae6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae6e:	889b      	ldrh	r3, [r3, #4]
 801ae70:	b29b      	uxth	r3, r3
 801ae72:	429a      	cmp	r2, r3
 801ae74:	d010      	beq.n	801ae98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801ae76:	2300      	movs	r3, #0
 801ae78:	623b      	str	r3, [r7, #32]
 801ae7a:	e00d      	b.n	801ae98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801ae7c:	68fb      	ldr	r3, [r7, #12]
 801ae7e:	685b      	ldr	r3, [r3, #4]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d006      	beq.n	801ae92 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801ae84:	4b38      	ldr	r3, [pc, #224]	; (801af68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ae86:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801ae8a:	493a      	ldr	r1, [pc, #232]	; (801af74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801ae8c:	4838      	ldr	r0, [pc, #224]	; (801af70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ae8e:	f000 ffe1 	bl	801be54 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	68ba      	ldr	r2, [r7, #8]
 801ae96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d105      	bne.n	801aeaa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	7f9b      	ldrb	r3, [r3, #30]
 801aea2:	f003 0301 	and.w	r3, r3, #1
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d059      	beq.n	801af5e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801aeaa:	6a3b      	ldr	r3, [r7, #32]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d04f      	beq.n	801af50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	685b      	ldr	r3, [r3, #4]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d006      	beq.n	801aec6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	685b      	ldr	r3, [r3, #4]
 801aebc:	685b      	ldr	r3, [r3, #4]
 801aebe:	889b      	ldrh	r3, [r3, #4]
 801aec0:	b29b      	uxth	r3, r3
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d002      	beq.n	801aecc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801aec6:	2300      	movs	r3, #0
 801aec8:	623b      	str	r3, [r7, #32]
 801aeca:	e041      	b.n	801af50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aece:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801aed6:	e012      	b.n	801aefe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeda:	685b      	ldr	r3, [r3, #4]
 801aedc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aee0:	88db      	ldrh	r3, [r3, #6]
 801aee2:	b29a      	uxth	r2, r3
 801aee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aee6:	889b      	ldrh	r3, [r3, #4]
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	429a      	cmp	r2, r3
 801aeec:	d002      	beq.n	801aef4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801aeee:	2300      	movs	r3, #0
 801aef0:	623b      	str	r3, [r7, #32]
            break;
 801aef2:	e007      	b.n	801af04 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801aef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aef6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af00:	2b00      	cmp	r3, #0
 801af02:	d1e9      	bne.n	801aed8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801af04:	6a3b      	ldr	r3, [r7, #32]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d022      	beq.n	801af50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	685b      	ldr	r3, [r3, #4]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d106      	bne.n	801af20 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801af12:	4b15      	ldr	r3, [pc, #84]	; (801af68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801af14:	f240 12df 	movw	r2, #479	; 0x1df
 801af18:	4917      	ldr	r1, [pc, #92]	; (801af78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801af1a:	4815      	ldr	r0, [pc, #84]	; (801af70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801af1c:	f000 ff9a 	bl	801be54 <iprintf>
          LWIP_ASSERT("sanity check",
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	685b      	ldr	r3, [r3, #4]
 801af24:	685b      	ldr	r3, [r3, #4]
 801af26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801af28:	429a      	cmp	r2, r3
 801af2a:	d106      	bne.n	801af3a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801af2c:	4b0e      	ldr	r3, [pc, #56]	; (801af68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801af2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801af32:	4911      	ldr	r1, [pc, #68]	; (801af78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801af34:	480e      	ldr	r0, [pc, #56]	; (801af70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801af36:	f000 ff8d 	bl	801be54 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801af3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d006      	beq.n	801af50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801af42:	4b09      	ldr	r3, [pc, #36]	; (801af68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801af44:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801af48:	490c      	ldr	r1, [pc, #48]	; (801af7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801af4a:	4809      	ldr	r0, [pc, #36]	; (801af70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801af4c:	f000 ff82 	bl	801be54 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801af50:	6a3b      	ldr	r3, [r7, #32]
 801af52:	2b00      	cmp	r3, #0
 801af54:	bf14      	ite	ne
 801af56:	2301      	movne	r3, #1
 801af58:	2300      	moveq	r3, #0
 801af5a:	b2db      	uxtb	r3, r3
 801af5c:	e000      	b.n	801af60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801af5e:	2300      	movs	r3, #0
}
 801af60:	4618      	mov	r0, r3
 801af62:	3730      	adds	r7, #48	; 0x30
 801af64:	46bd      	mov	sp, r7
 801af66:	bd80      	pop	{r7, pc}
 801af68:	0801fb08 	.word	0x0801fb08
 801af6c:	0801fbec 	.word	0x0801fbec
 801af70:	0801fb50 	.word	0x0801fb50
 801af74:	0801fc0c 	.word	0x0801fc0c
 801af78:	0801fc44 	.word	0x0801fc44
 801af7c:	0801fc54 	.word	0x0801fc54

0801af80 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801af80:	b580      	push	{r7, lr}
 801af82:	b08e      	sub	sp, #56	; 0x38
 801af84:	af00      	add	r7, sp, #0
 801af86:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	685b      	ldr	r3, [r3, #4]
 801af8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af90:	781b      	ldrb	r3, [r3, #0]
 801af92:	f003 030f 	and.w	r3, r3, #15
 801af96:	b2db      	uxtb	r3, r3
 801af98:	009b      	lsls	r3, r3, #2
 801af9a:	b2db      	uxtb	r3, r3
 801af9c:	2b14      	cmp	r3, #20
 801af9e:	f040 8171 	bne.w	801b284 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afa4:	88db      	ldrh	r3, [r3, #6]
 801afa6:	b29b      	uxth	r3, r3
 801afa8:	4618      	mov	r0, r3
 801afaa:	f7f5 fe3c 	bl	8010c26 <lwip_htons>
 801afae:	4603      	mov	r3, r0
 801afb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801afb4:	b29b      	uxth	r3, r3
 801afb6:	00db      	lsls	r3, r3, #3
 801afb8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801afba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afbc:	885b      	ldrh	r3, [r3, #2]
 801afbe:	b29b      	uxth	r3, r3
 801afc0:	4618      	mov	r0, r3
 801afc2:	f7f5 fe30 	bl	8010c26 <lwip_htons>
 801afc6:	4603      	mov	r3, r0
 801afc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afcc:	781b      	ldrb	r3, [r3, #0]
 801afce:	f003 030f 	and.w	r3, r3, #15
 801afd2:	b2db      	uxtb	r3, r3
 801afd4:	009b      	lsls	r3, r3, #2
 801afd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801afda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801afde:	b29b      	uxth	r3, r3
 801afe0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801afe2:	429a      	cmp	r2, r3
 801afe4:	f0c0 8150 	bcc.w	801b288 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801afe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801afec:	b29b      	uxth	r3, r3
 801afee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801aff0:	1ad3      	subs	r3, r2, r3
 801aff2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801aff4:	6878      	ldr	r0, [r7, #4]
 801aff6:	f7f7 fa67 	bl	80124c8 <pbuf_clen>
 801affa:	4603      	mov	r3, r0
 801affc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801affe:	4b8c      	ldr	r3, [pc, #560]	; (801b230 <ip4_reass+0x2b0>)
 801b000:	881b      	ldrh	r3, [r3, #0]
 801b002:	461a      	mov	r2, r3
 801b004:	8c3b      	ldrh	r3, [r7, #32]
 801b006:	4413      	add	r3, r2
 801b008:	2b0a      	cmp	r3, #10
 801b00a:	dd10      	ble.n	801b02e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b00c:	8c3b      	ldrh	r3, [r7, #32]
 801b00e:	4619      	mov	r1, r3
 801b010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b012:	f7ff fd81 	bl	801ab18 <ip_reass_remove_oldest_datagram>
 801b016:	4603      	mov	r3, r0
 801b018:	2b00      	cmp	r3, #0
 801b01a:	f000 8137 	beq.w	801b28c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b01e:	4b84      	ldr	r3, [pc, #528]	; (801b230 <ip4_reass+0x2b0>)
 801b020:	881b      	ldrh	r3, [r3, #0]
 801b022:	461a      	mov	r2, r3
 801b024:	8c3b      	ldrh	r3, [r7, #32]
 801b026:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b028:	2b0a      	cmp	r3, #10
 801b02a:	f300 812f 	bgt.w	801b28c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b02e:	4b81      	ldr	r3, [pc, #516]	; (801b234 <ip4_reass+0x2b4>)
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	633b      	str	r3, [r7, #48]	; 0x30
 801b034:	e015      	b.n	801b062 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b038:	695a      	ldr	r2, [r3, #20]
 801b03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b03c:	68db      	ldr	r3, [r3, #12]
 801b03e:	429a      	cmp	r2, r3
 801b040:	d10c      	bne.n	801b05c <ip4_reass+0xdc>
 801b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b044:	699a      	ldr	r2, [r3, #24]
 801b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b048:	691b      	ldr	r3, [r3, #16]
 801b04a:	429a      	cmp	r2, r3
 801b04c:	d106      	bne.n	801b05c <ip4_reass+0xdc>
 801b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b050:	899a      	ldrh	r2, [r3, #12]
 801b052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b054:	889b      	ldrh	r3, [r3, #4]
 801b056:	b29b      	uxth	r3, r3
 801b058:	429a      	cmp	r2, r3
 801b05a:	d006      	beq.n	801b06a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	633b      	str	r3, [r7, #48]	; 0x30
 801b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b064:	2b00      	cmp	r3, #0
 801b066:	d1e6      	bne.n	801b036 <ip4_reass+0xb6>
 801b068:	e000      	b.n	801b06c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b06a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d109      	bne.n	801b086 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b072:	8c3b      	ldrh	r3, [r7, #32]
 801b074:	4619      	mov	r1, r3
 801b076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b078:	f7ff fdb0 	bl	801abdc <ip_reass_enqueue_new_datagram>
 801b07c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b080:	2b00      	cmp	r3, #0
 801b082:	d11c      	bne.n	801b0be <ip4_reass+0x13e>
      goto nullreturn;
 801b084:	e105      	b.n	801b292 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b088:	88db      	ldrh	r3, [r3, #6]
 801b08a:	b29b      	uxth	r3, r3
 801b08c:	4618      	mov	r0, r3
 801b08e:	f7f5 fdca 	bl	8010c26 <lwip_htons>
 801b092:	4603      	mov	r3, r0
 801b094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d110      	bne.n	801b0be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b09e:	89db      	ldrh	r3, [r3, #14]
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	f7f5 fdc0 	bl	8010c26 <lwip_htons>
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d006      	beq.n	801b0be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0b2:	3308      	adds	r3, #8
 801b0b4:	2214      	movs	r2, #20
 801b0b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b0b8:	4618      	mov	r0, r3
 801b0ba:	f001 f83c 	bl	801c136 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0c0:	88db      	ldrh	r3, [r3, #6]
 801b0c2:	b29b      	uxth	r3, r3
 801b0c4:	f003 0320 	and.w	r3, r3, #32
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	bf0c      	ite	eq
 801b0cc:	2301      	moveq	r3, #1
 801b0ce:	2300      	movne	r3, #0
 801b0d0:	b2db      	uxtb	r3, r3
 801b0d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b0d4:	69fb      	ldr	r3, [r7, #28]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d00e      	beq.n	801b0f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b0da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b0de:	4413      	add	r3, r2
 801b0e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b0e2:	8b7a      	ldrh	r2, [r7, #26]
 801b0e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b0e6:	429a      	cmp	r2, r3
 801b0e8:	f0c0 80a0 	bcc.w	801b22c <ip4_reass+0x2ac>
 801b0ec:	8b7b      	ldrh	r3, [r7, #26]
 801b0ee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b0f2:	4293      	cmp	r3, r2
 801b0f4:	f200 809a 	bhi.w	801b22c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b0f8:	69fa      	ldr	r2, [r7, #28]
 801b0fa:	6879      	ldr	r1, [r7, #4]
 801b0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b0fe:	f7ff fdd5 	bl	801acac <ip_reass_chain_frag_into_datagram_and_validate>
 801b102:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b104:	697b      	ldr	r3, [r7, #20]
 801b106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b10a:	f000 809b 	beq.w	801b244 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b10e:	4b48      	ldr	r3, [pc, #288]	; (801b230 <ip4_reass+0x2b0>)
 801b110:	881a      	ldrh	r2, [r3, #0]
 801b112:	8c3b      	ldrh	r3, [r7, #32]
 801b114:	4413      	add	r3, r2
 801b116:	b29a      	uxth	r2, r3
 801b118:	4b45      	ldr	r3, [pc, #276]	; (801b230 <ip4_reass+0x2b0>)
 801b11a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b11c:	69fb      	ldr	r3, [r7, #28]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d00d      	beq.n	801b13e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b122:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b126:	4413      	add	r3, r2
 801b128:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b12c:	8a7a      	ldrh	r2, [r7, #18]
 801b12e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b132:	7f9b      	ldrb	r3, [r3, #30]
 801b134:	f043 0301 	orr.w	r3, r3, #1
 801b138:	b2da      	uxtb	r2, r3
 801b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b13c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b13e:	697b      	ldr	r3, [r7, #20]
 801b140:	2b01      	cmp	r3, #1
 801b142:	d171      	bne.n	801b228 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b146:	8b9b      	ldrh	r3, [r3, #28]
 801b148:	3314      	adds	r3, #20
 801b14a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b14e:	685b      	ldr	r3, [r3, #4]
 801b150:	685b      	ldr	r3, [r3, #4]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b158:	685b      	ldr	r3, [r3, #4]
 801b15a:	685b      	ldr	r3, [r3, #4]
 801b15c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b160:	3308      	adds	r3, #8
 801b162:	2214      	movs	r2, #20
 801b164:	4619      	mov	r1, r3
 801b166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b168:	f000 ffe5 	bl	801c136 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b16c:	8a3b      	ldrh	r3, [r7, #16]
 801b16e:	4618      	mov	r0, r3
 801b170:	f7f5 fd59 	bl	8010c26 <lwip_htons>
 801b174:	4603      	mov	r3, r0
 801b176:	461a      	mov	r2, r3
 801b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b17a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b17e:	2200      	movs	r2, #0
 801b180:	719a      	strb	r2, [r3, #6]
 801b182:	2200      	movs	r2, #0
 801b184:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b188:	2200      	movs	r2, #0
 801b18a:	729a      	strb	r2, [r3, #10]
 801b18c:	2200      	movs	r2, #0
 801b18e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b192:	685b      	ldr	r3, [r3, #4]
 801b194:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b196:	e00d      	b.n	801b1b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b19a:	685b      	ldr	r3, [r3, #4]
 801b19c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b19e:	2114      	movs	r1, #20
 801b1a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b1a2:	f7f7 f883 	bl	80122ac <pbuf_remove_header>
      pbuf_cat(p, r);
 801b1a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b1a8:	6878      	ldr	r0, [r7, #4]
 801b1aa:	f7f7 f9c7 	bl	801253c <pbuf_cat>
      r = iprh->next_pbuf;
 801b1ae:	68fb      	ldr	r3, [r7, #12]
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d1ee      	bne.n	801b198 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b1ba:	4b1e      	ldr	r3, [pc, #120]	; (801b234 <ip4_reass+0x2b4>)
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b1c0:	429a      	cmp	r2, r3
 801b1c2:	d102      	bne.n	801b1ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b1c4:	2300      	movs	r3, #0
 801b1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b1c8:	e010      	b.n	801b1ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b1ca:	4b1a      	ldr	r3, [pc, #104]	; (801b234 <ip4_reass+0x2b4>)
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b1d0:	e007      	b.n	801b1e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b1d8:	429a      	cmp	r2, r3
 801b1da:	d006      	beq.n	801b1ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d1f4      	bne.n	801b1d2 <ip4_reass+0x252>
 801b1e8:	e000      	b.n	801b1ec <ip4_reass+0x26c>
          break;
 801b1ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b1ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b1ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b1f0:	f7ff fd2e 	bl	801ac50 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b1f4:	6878      	ldr	r0, [r7, #4]
 801b1f6:	f7f7 f967 	bl	80124c8 <pbuf_clen>
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b1fe:	4b0c      	ldr	r3, [pc, #48]	; (801b230 <ip4_reass+0x2b0>)
 801b200:	881b      	ldrh	r3, [r3, #0]
 801b202:	8c3a      	ldrh	r2, [r7, #32]
 801b204:	429a      	cmp	r2, r3
 801b206:	d906      	bls.n	801b216 <ip4_reass+0x296>
 801b208:	4b0b      	ldr	r3, [pc, #44]	; (801b238 <ip4_reass+0x2b8>)
 801b20a:	f240 229b 	movw	r2, #667	; 0x29b
 801b20e:	490b      	ldr	r1, [pc, #44]	; (801b23c <ip4_reass+0x2bc>)
 801b210:	480b      	ldr	r0, [pc, #44]	; (801b240 <ip4_reass+0x2c0>)
 801b212:	f000 fe1f 	bl	801be54 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b216:	4b06      	ldr	r3, [pc, #24]	; (801b230 <ip4_reass+0x2b0>)
 801b218:	881a      	ldrh	r2, [r3, #0]
 801b21a:	8c3b      	ldrh	r3, [r7, #32]
 801b21c:	1ad3      	subs	r3, r2, r3
 801b21e:	b29a      	uxth	r2, r3
 801b220:	4b03      	ldr	r3, [pc, #12]	; (801b230 <ip4_reass+0x2b0>)
 801b222:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	e038      	b.n	801b29a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b228:	2300      	movs	r3, #0
 801b22a:	e036      	b.n	801b29a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801b22c:	bf00      	nop
 801b22e:	e00a      	b.n	801b246 <ip4_reass+0x2c6>
 801b230:	2000b13c 	.word	0x2000b13c
 801b234:	2000b138 	.word	0x2000b138
 801b238:	0801fb08 	.word	0x0801fb08
 801b23c:	0801fc78 	.word	0x0801fc78
 801b240:	0801fb50 	.word	0x0801fb50
    goto nullreturn_ipr;
 801b244:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d106      	bne.n	801b25a <ip4_reass+0x2da>
 801b24c:	4b15      	ldr	r3, [pc, #84]	; (801b2a4 <ip4_reass+0x324>)
 801b24e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b252:	4915      	ldr	r1, [pc, #84]	; (801b2a8 <ip4_reass+0x328>)
 801b254:	4815      	ldr	r0, [pc, #84]	; (801b2ac <ip4_reass+0x32c>)
 801b256:	f000 fdfd 	bl	801be54 <iprintf>
  if (ipr->p == NULL) {
 801b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b25c:	685b      	ldr	r3, [r3, #4]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d116      	bne.n	801b290 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b262:	4b13      	ldr	r3, [pc, #76]	; (801b2b0 <ip4_reass+0x330>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b268:	429a      	cmp	r2, r3
 801b26a:	d006      	beq.n	801b27a <ip4_reass+0x2fa>
 801b26c:	4b0d      	ldr	r3, [pc, #52]	; (801b2a4 <ip4_reass+0x324>)
 801b26e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b272:	4910      	ldr	r1, [pc, #64]	; (801b2b4 <ip4_reass+0x334>)
 801b274:	480d      	ldr	r0, [pc, #52]	; (801b2ac <ip4_reass+0x32c>)
 801b276:	f000 fded 	bl	801be54 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b27a:	2100      	movs	r1, #0
 801b27c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b27e:	f7ff fce7 	bl	801ac50 <ip_reass_dequeue_datagram>
 801b282:	e006      	b.n	801b292 <ip4_reass+0x312>
    goto nullreturn;
 801b284:	bf00      	nop
 801b286:	e004      	b.n	801b292 <ip4_reass+0x312>
    goto nullreturn;
 801b288:	bf00      	nop
 801b28a:	e002      	b.n	801b292 <ip4_reass+0x312>
      goto nullreturn;
 801b28c:	bf00      	nop
 801b28e:	e000      	b.n	801b292 <ip4_reass+0x312>
  }

nullreturn:
 801b290:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b292:	6878      	ldr	r0, [r7, #4]
 801b294:	f7f7 f890 	bl	80123b8 <pbuf_free>
  return NULL;
 801b298:	2300      	movs	r3, #0
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	3738      	adds	r7, #56	; 0x38
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	0801fb08 	.word	0x0801fb08
 801b2a8:	0801fc94 	.word	0x0801fc94
 801b2ac:	0801fb50 	.word	0x0801fb50
 801b2b0:	2000b138 	.word	0x2000b138
 801b2b4:	0801fca0 	.word	0x0801fca0

0801b2b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b2bc:	2005      	movs	r0, #5
 801b2be:	f7f6 f995 	bl	80115ec <memp_malloc>
 801b2c2:	4603      	mov	r3, r0
}
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	bd80      	pop	{r7, pc}

0801b2c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b082      	sub	sp, #8
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d106      	bne.n	801b2e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b2d6:	4b07      	ldr	r3, [pc, #28]	; (801b2f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b2d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b2dc:	4906      	ldr	r1, [pc, #24]	; (801b2f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b2de:	4807      	ldr	r0, [pc, #28]	; (801b2fc <ip_frag_free_pbuf_custom_ref+0x34>)
 801b2e0:	f000 fdb8 	bl	801be54 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b2e4:	6879      	ldr	r1, [r7, #4]
 801b2e6:	2005      	movs	r0, #5
 801b2e8:	f7f6 f9f0 	bl	80116cc <memp_free>
}
 801b2ec:	bf00      	nop
 801b2ee:	3708      	adds	r7, #8
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}
 801b2f4:	0801fb08 	.word	0x0801fb08
 801b2f8:	0801fcc0 	.word	0x0801fcc0
 801b2fc:	0801fb50 	.word	0x0801fb50

0801b300 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b300:	b580      	push	{r7, lr}
 801b302:	b084      	sub	sp, #16
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d106      	bne.n	801b320 <ipfrag_free_pbuf_custom+0x20>
 801b312:	4b11      	ldr	r3, [pc, #68]	; (801b358 <ipfrag_free_pbuf_custom+0x58>)
 801b314:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b318:	4910      	ldr	r1, [pc, #64]	; (801b35c <ipfrag_free_pbuf_custom+0x5c>)
 801b31a:	4811      	ldr	r0, [pc, #68]	; (801b360 <ipfrag_free_pbuf_custom+0x60>)
 801b31c:	f000 fd9a 	bl	801be54 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b320:	68fa      	ldr	r2, [r7, #12]
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	429a      	cmp	r2, r3
 801b326:	d006      	beq.n	801b336 <ipfrag_free_pbuf_custom+0x36>
 801b328:	4b0b      	ldr	r3, [pc, #44]	; (801b358 <ipfrag_free_pbuf_custom+0x58>)
 801b32a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b32e:	490d      	ldr	r1, [pc, #52]	; (801b364 <ipfrag_free_pbuf_custom+0x64>)
 801b330:	480b      	ldr	r0, [pc, #44]	; (801b360 <ipfrag_free_pbuf_custom+0x60>)
 801b332:	f000 fd8f 	bl	801be54 <iprintf>
  if (pcr->original != NULL) {
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	695b      	ldr	r3, [r3, #20]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d004      	beq.n	801b348 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	695b      	ldr	r3, [r3, #20]
 801b342:	4618      	mov	r0, r3
 801b344:	f7f7 f838 	bl	80123b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b348:	68f8      	ldr	r0, [r7, #12]
 801b34a:	f7ff ffbd 	bl	801b2c8 <ip_frag_free_pbuf_custom_ref>
}
 801b34e:	bf00      	nop
 801b350:	3710      	adds	r7, #16
 801b352:	46bd      	mov	sp, r7
 801b354:	bd80      	pop	{r7, pc}
 801b356:	bf00      	nop
 801b358:	0801fb08 	.word	0x0801fb08
 801b35c:	0801fccc 	.word	0x0801fccc
 801b360:	0801fb50 	.word	0x0801fb50
 801b364:	0801fcd8 	.word	0x0801fcd8

0801b368 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b368:	b580      	push	{r7, lr}
 801b36a:	b094      	sub	sp, #80	; 0x50
 801b36c:	af02      	add	r7, sp, #8
 801b36e:	60f8      	str	r0, [r7, #12]
 801b370:	60b9      	str	r1, [r7, #8]
 801b372:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b374:	2300      	movs	r3, #0
 801b376:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b37a:	68bb      	ldr	r3, [r7, #8]
 801b37c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b37e:	3b14      	subs	r3, #20
 801b380:	2b00      	cmp	r3, #0
 801b382:	da00      	bge.n	801b386 <ip4_frag+0x1e>
 801b384:	3307      	adds	r3, #7
 801b386:	10db      	asrs	r3, r3, #3
 801b388:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b38a:	2314      	movs	r3, #20
 801b38c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	685b      	ldr	r3, [r3, #4]
 801b392:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b396:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b39a:	781b      	ldrb	r3, [r3, #0]
 801b39c:	f003 030f 	and.w	r3, r3, #15
 801b3a0:	b2db      	uxtb	r3, r3
 801b3a2:	009b      	lsls	r3, r3, #2
 801b3a4:	b2db      	uxtb	r3, r3
 801b3a6:	2b14      	cmp	r3, #20
 801b3a8:	d002      	beq.n	801b3b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b3aa:	f06f 0305 	mvn.w	r3, #5
 801b3ae:	e110      	b.n	801b5d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	895b      	ldrh	r3, [r3, #10]
 801b3b4:	2b13      	cmp	r3, #19
 801b3b6:	d809      	bhi.n	801b3cc <ip4_frag+0x64>
 801b3b8:	4b88      	ldr	r3, [pc, #544]	; (801b5dc <ip4_frag+0x274>)
 801b3ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b3be:	4988      	ldr	r1, [pc, #544]	; (801b5e0 <ip4_frag+0x278>)
 801b3c0:	4888      	ldr	r0, [pc, #544]	; (801b5e4 <ip4_frag+0x27c>)
 801b3c2:	f000 fd47 	bl	801be54 <iprintf>
 801b3c6:	f06f 0305 	mvn.w	r3, #5
 801b3ca:	e102      	b.n	801b5d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b3ce:	88db      	ldrh	r3, [r3, #6]
 801b3d0:	b29b      	uxth	r3, r3
 801b3d2:	4618      	mov	r0, r3
 801b3d4:	f7f5 fc27 	bl	8010c26 <lwip_htons>
 801b3d8:	4603      	mov	r3, r0
 801b3da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b3dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b3de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b3e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b3e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b3e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b3ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	891b      	ldrh	r3, [r3, #8]
 801b3f2:	3b14      	subs	r3, #20
 801b3f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b3f8:	e0e1      	b.n	801b5be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b3fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b3fc:	00db      	lsls	r3, r3, #3
 801b3fe:	b29b      	uxth	r3, r3
 801b400:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b404:	4293      	cmp	r3, r2
 801b406:	bf28      	it	cs
 801b408:	4613      	movcs	r3, r2
 801b40a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b40c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b410:	2114      	movs	r1, #20
 801b412:	200e      	movs	r0, #14
 801b414:	f7f6 fcec 	bl	8011df0 <pbuf_alloc>
 801b418:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	f000 80d5 	beq.w	801b5cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b424:	895b      	ldrh	r3, [r3, #10]
 801b426:	2b13      	cmp	r3, #19
 801b428:	d806      	bhi.n	801b438 <ip4_frag+0xd0>
 801b42a:	4b6c      	ldr	r3, [pc, #432]	; (801b5dc <ip4_frag+0x274>)
 801b42c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b430:	496d      	ldr	r1, [pc, #436]	; (801b5e8 <ip4_frag+0x280>)
 801b432:	486c      	ldr	r0, [pc, #432]	; (801b5e4 <ip4_frag+0x27c>)
 801b434:	f000 fd0e 	bl	801be54 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b43a:	685b      	ldr	r3, [r3, #4]
 801b43c:	2214      	movs	r2, #20
 801b43e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b440:	4618      	mov	r0, r3
 801b442:	f000 fe78 	bl	801c136 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b448:	685b      	ldr	r3, [r3, #4]
 801b44a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b44c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b44e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b452:	e064      	b.n	801b51e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b454:	68fb      	ldr	r3, [r7, #12]
 801b456:	895a      	ldrh	r2, [r3, #10]
 801b458:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b45a:	1ad3      	subs	r3, r2, r3
 801b45c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b45e:	68fb      	ldr	r3, [r7, #12]
 801b460:	895b      	ldrh	r3, [r3, #10]
 801b462:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b464:	429a      	cmp	r2, r3
 801b466:	d906      	bls.n	801b476 <ip4_frag+0x10e>
 801b468:	4b5c      	ldr	r3, [pc, #368]	; (801b5dc <ip4_frag+0x274>)
 801b46a:	f240 322d 	movw	r2, #813	; 0x32d
 801b46e:	495f      	ldr	r1, [pc, #380]	; (801b5ec <ip4_frag+0x284>)
 801b470:	485c      	ldr	r0, [pc, #368]	; (801b5e4 <ip4_frag+0x27c>)
 801b472:	f000 fcef 	bl	801be54 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b476:	8bfa      	ldrh	r2, [r7, #30]
 801b478:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b47c:	4293      	cmp	r3, r2
 801b47e:	bf28      	it	cs
 801b480:	4613      	movcs	r3, r2
 801b482:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b486:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d105      	bne.n	801b49a <ip4_frag+0x132>
        poff = 0;
 801b48e:	2300      	movs	r3, #0
 801b490:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	60fb      	str	r3, [r7, #12]
        continue;
 801b498:	e041      	b.n	801b51e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b49a:	f7ff ff0d 	bl	801b2b8 <ip_frag_alloc_pbuf_custom_ref>
 801b49e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b4a0:	69bb      	ldr	r3, [r7, #24]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d103      	bne.n	801b4ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b4a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b4a8:	f7f6 ff86 	bl	80123b8 <pbuf_free>
        goto memerr;
 801b4ac:	e08f      	b.n	801b5ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b4ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b4b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b4b6:	4413      	add	r3, r2
 801b4b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b4bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b4c0:	9201      	str	r2, [sp, #4]
 801b4c2:	9300      	str	r3, [sp, #0]
 801b4c4:	4603      	mov	r3, r0
 801b4c6:	2241      	movs	r2, #65	; 0x41
 801b4c8:	2000      	movs	r0, #0
 801b4ca:	f7f6 fdbb 	bl	8012044 <pbuf_alloced_custom>
 801b4ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b4d0:	697b      	ldr	r3, [r7, #20]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d106      	bne.n	801b4e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b4d6:	69b8      	ldr	r0, [r7, #24]
 801b4d8:	f7ff fef6 	bl	801b2c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b4dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b4de:	f7f6 ff6b 	bl	80123b8 <pbuf_free>
        goto memerr;
 801b4e2:	e074      	b.n	801b5ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b4e4:	68f8      	ldr	r0, [r7, #12]
 801b4e6:	f7f7 f807 	bl	80124f8 <pbuf_ref>
      pcr->original = p;
 801b4ea:	69bb      	ldr	r3, [r7, #24]
 801b4ec:	68fa      	ldr	r2, [r7, #12]
 801b4ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b4f0:	69bb      	ldr	r3, [r7, #24]
 801b4f2:	4a3f      	ldr	r2, [pc, #252]	; (801b5f0 <ip4_frag+0x288>)
 801b4f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b4f6:	6979      	ldr	r1, [r7, #20]
 801b4f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b4fa:	f7f7 f81f 	bl	801253c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b4fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b502:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b506:	1ad3      	subs	r3, r2, r3
 801b508:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b50c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b510:	2b00      	cmp	r3, #0
 801b512:	d004      	beq.n	801b51e <ip4_frag+0x1b6>
        poff = 0;
 801b514:	2300      	movs	r3, #0
 801b516:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b51e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b522:	2b00      	cmp	r3, #0
 801b524:	d196      	bne.n	801b454 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b526:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b528:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b52c:	4413      	add	r3, r2
 801b52e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b530:	68bb      	ldr	r3, [r7, #8]
 801b532:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b534:	f1a3 0213 	sub.w	r2, r3, #19
 801b538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b53c:	429a      	cmp	r2, r3
 801b53e:	bfcc      	ite	gt
 801b540:	2301      	movgt	r3, #1
 801b542:	2300      	movle	r3, #0
 801b544:	b2db      	uxtb	r3, r3
 801b546:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b548:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b54c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b550:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b552:	6a3b      	ldr	r3, [r7, #32]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d002      	beq.n	801b55e <ip4_frag+0x1f6>
 801b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d003      	beq.n	801b566 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b55e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b564:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b566:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b568:	4618      	mov	r0, r3
 801b56a:	f7f5 fb5c 	bl	8010c26 <lwip_htons>
 801b56e:	4603      	mov	r3, r0
 801b570:	461a      	mov	r2, r3
 801b572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b574:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b576:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b578:	3314      	adds	r3, #20
 801b57a:	b29b      	uxth	r3, r3
 801b57c:	4618      	mov	r0, r3
 801b57e:	f7f5 fb52 	bl	8010c26 <lwip_htons>
 801b582:	4603      	mov	r3, r0
 801b584:	461a      	mov	r2, r3
 801b586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b588:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b58c:	2200      	movs	r2, #0
 801b58e:	729a      	strb	r2, [r3, #10]
 801b590:	2200      	movs	r2, #0
 801b592:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b594:	68bb      	ldr	r3, [r7, #8]
 801b596:	695b      	ldr	r3, [r3, #20]
 801b598:	687a      	ldr	r2, [r7, #4]
 801b59a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b59c:	68b8      	ldr	r0, [r7, #8]
 801b59e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b5a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b5a2:	f7f6 ff09 	bl	80123b8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b5a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b5aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b5ac:	1ad3      	subs	r3, r2, r3
 801b5ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b5b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b5b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b5b8:	4413      	add	r3, r2
 801b5ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b5be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	f47f af19 	bne.w	801b3fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	e002      	b.n	801b5d2 <ip4_frag+0x26a>
      goto memerr;
 801b5cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b5ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	3748      	adds	r7, #72	; 0x48
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	bd80      	pop	{r7, pc}
 801b5da:	bf00      	nop
 801b5dc:	0801fb08 	.word	0x0801fb08
 801b5e0:	0801fce4 	.word	0x0801fce4
 801b5e4:	0801fb50 	.word	0x0801fb50
 801b5e8:	0801fd00 	.word	0x0801fd00
 801b5ec:	0801fd20 	.word	0x0801fd20
 801b5f0:	0801b301 	.word	0x0801b301

0801b5f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b5f4:	b580      	push	{r7, lr}
 801b5f6:	b086      	sub	sp, #24
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	6078      	str	r0, [r7, #4]
 801b5fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b5fe:	230e      	movs	r3, #14
 801b600:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	895b      	ldrh	r3, [r3, #10]
 801b606:	2b0e      	cmp	r3, #14
 801b608:	d96e      	bls.n	801b6e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	7bdb      	ldrb	r3, [r3, #15]
 801b60e:	2b00      	cmp	r3, #0
 801b610:	d106      	bne.n	801b620 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b612:	683b      	ldr	r3, [r7, #0]
 801b614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b618:	3301      	adds	r3, #1
 801b61a:	b2da      	uxtb	r2, r3
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	685b      	ldr	r3, [r3, #4]
 801b624:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b626:	693b      	ldr	r3, [r7, #16]
 801b628:	7b1a      	ldrb	r2, [r3, #12]
 801b62a:	7b5b      	ldrb	r3, [r3, #13]
 801b62c:	021b      	lsls	r3, r3, #8
 801b62e:	4313      	orrs	r3, r2
 801b630:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b632:	693b      	ldr	r3, [r7, #16]
 801b634:	781b      	ldrb	r3, [r3, #0]
 801b636:	f003 0301 	and.w	r3, r3, #1
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d023      	beq.n	801b686 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b63e:	693b      	ldr	r3, [r7, #16]
 801b640:	781b      	ldrb	r3, [r3, #0]
 801b642:	2b01      	cmp	r3, #1
 801b644:	d10f      	bne.n	801b666 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b646:	693b      	ldr	r3, [r7, #16]
 801b648:	785b      	ldrb	r3, [r3, #1]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d11b      	bne.n	801b686 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b64e:	693b      	ldr	r3, [r7, #16]
 801b650:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b652:	2b5e      	cmp	r3, #94	; 0x5e
 801b654:	d117      	bne.n	801b686 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	7b5b      	ldrb	r3, [r3, #13]
 801b65a:	f043 0310 	orr.w	r3, r3, #16
 801b65e:	b2da      	uxtb	r2, r3
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	735a      	strb	r2, [r3, #13]
 801b664:	e00f      	b.n	801b686 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b666:	693b      	ldr	r3, [r7, #16]
 801b668:	2206      	movs	r2, #6
 801b66a:	4928      	ldr	r1, [pc, #160]	; (801b70c <ethernet_input+0x118>)
 801b66c:	4618      	mov	r0, r3
 801b66e:	f000 fc9f 	bl	801bfb0 <memcmp>
 801b672:	4603      	mov	r3, r0
 801b674:	2b00      	cmp	r3, #0
 801b676:	d106      	bne.n	801b686 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	7b5b      	ldrb	r3, [r3, #13]
 801b67c:	f043 0308 	orr.w	r3, r3, #8
 801b680:	b2da      	uxtb	r2, r3
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b686:	89fb      	ldrh	r3, [r7, #14]
 801b688:	2b08      	cmp	r3, #8
 801b68a:	d003      	beq.n	801b694 <ethernet_input+0xa0>
 801b68c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b690:	d014      	beq.n	801b6bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b692:	e032      	b.n	801b6fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b694:	683b      	ldr	r3, [r7, #0]
 801b696:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b69a:	f003 0308 	and.w	r3, r3, #8
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d024      	beq.n	801b6ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b6a2:	8afb      	ldrh	r3, [r7, #22]
 801b6a4:	4619      	mov	r1, r3
 801b6a6:	6878      	ldr	r0, [r7, #4]
 801b6a8:	f7f6 fe00 	bl	80122ac <pbuf_remove_header>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d11e      	bne.n	801b6f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b6b2:	6839      	ldr	r1, [r7, #0]
 801b6b4:	6878      	ldr	r0, [r7, #4]
 801b6b6:	f7fe ff21 	bl	801a4fc <ip4_input>
      break;
 801b6ba:	e013      	b.n	801b6e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b6bc:	683b      	ldr	r3, [r7, #0]
 801b6be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b6c2:	f003 0308 	and.w	r3, r3, #8
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d014      	beq.n	801b6f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b6ca:	8afb      	ldrh	r3, [r7, #22]
 801b6cc:	4619      	mov	r1, r3
 801b6ce:	6878      	ldr	r0, [r7, #4]
 801b6d0:	f7f6 fdec 	bl	80122ac <pbuf_remove_header>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d10e      	bne.n	801b6f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b6da:	6839      	ldr	r1, [r7, #0]
 801b6dc:	6878      	ldr	r0, [r7, #4]
 801b6de:	f7fe f8a5 	bl	801982c <etharp_input>
      break;
 801b6e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	e00c      	b.n	801b702 <ethernet_input+0x10e>
    goto free_and_return;
 801b6e8:	bf00      	nop
 801b6ea:	e006      	b.n	801b6fa <ethernet_input+0x106>
        goto free_and_return;
 801b6ec:	bf00      	nop
 801b6ee:	e004      	b.n	801b6fa <ethernet_input+0x106>
        goto free_and_return;
 801b6f0:	bf00      	nop
 801b6f2:	e002      	b.n	801b6fa <ethernet_input+0x106>
        goto free_and_return;
 801b6f4:	bf00      	nop
 801b6f6:	e000      	b.n	801b6fa <ethernet_input+0x106>
        goto free_and_return;
 801b6f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b6fa:	6878      	ldr	r0, [r7, #4]
 801b6fc:	f7f6 fe5c 	bl	80123b8 <pbuf_free>
  return ERR_OK;
 801b700:	2300      	movs	r3, #0
}
 801b702:	4618      	mov	r0, r3
 801b704:	3718      	adds	r7, #24
 801b706:	46bd      	mov	sp, r7
 801b708:	bd80      	pop	{r7, pc}
 801b70a:	bf00      	nop
 801b70c:	0802005c 	.word	0x0802005c

0801b710 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b710:	b580      	push	{r7, lr}
 801b712:	b086      	sub	sp, #24
 801b714:	af00      	add	r7, sp, #0
 801b716:	60f8      	str	r0, [r7, #12]
 801b718:	60b9      	str	r1, [r7, #8]
 801b71a:	607a      	str	r2, [r7, #4]
 801b71c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b71e:	8c3b      	ldrh	r3, [r7, #32]
 801b720:	4618      	mov	r0, r3
 801b722:	f7f5 fa80 	bl	8010c26 <lwip_htons>
 801b726:	4603      	mov	r3, r0
 801b728:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b72a:	210e      	movs	r1, #14
 801b72c:	68b8      	ldr	r0, [r7, #8]
 801b72e:	f7f6 fdad 	bl	801228c <pbuf_add_header>
 801b732:	4603      	mov	r3, r0
 801b734:	2b00      	cmp	r3, #0
 801b736:	d125      	bne.n	801b784 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b738:	68bb      	ldr	r3, [r7, #8]
 801b73a:	685b      	ldr	r3, [r3, #4]
 801b73c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b73e:	693b      	ldr	r3, [r7, #16]
 801b740:	8afa      	ldrh	r2, [r7, #22]
 801b742:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b744:	693b      	ldr	r3, [r7, #16]
 801b746:	2206      	movs	r2, #6
 801b748:	6839      	ldr	r1, [r7, #0]
 801b74a:	4618      	mov	r0, r3
 801b74c:	f000 fcf3 	bl	801c136 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b750:	693b      	ldr	r3, [r7, #16]
 801b752:	3306      	adds	r3, #6
 801b754:	2206      	movs	r2, #6
 801b756:	6879      	ldr	r1, [r7, #4]
 801b758:	4618      	mov	r0, r3
 801b75a:	f000 fcec 	bl	801c136 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b75e:	68fb      	ldr	r3, [r7, #12]
 801b760:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b764:	2b06      	cmp	r3, #6
 801b766:	d006      	beq.n	801b776 <ethernet_output+0x66>
 801b768:	4b0a      	ldr	r3, [pc, #40]	; (801b794 <ethernet_output+0x84>)
 801b76a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b76e:	490a      	ldr	r1, [pc, #40]	; (801b798 <ethernet_output+0x88>)
 801b770:	480a      	ldr	r0, [pc, #40]	; (801b79c <ethernet_output+0x8c>)
 801b772:	f000 fb6f 	bl	801be54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b776:	68fb      	ldr	r3, [r7, #12]
 801b778:	699b      	ldr	r3, [r3, #24]
 801b77a:	68b9      	ldr	r1, [r7, #8]
 801b77c:	68f8      	ldr	r0, [r7, #12]
 801b77e:	4798      	blx	r3
 801b780:	4603      	mov	r3, r0
 801b782:	e002      	b.n	801b78a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b784:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b786:	f06f 0301 	mvn.w	r3, #1
}
 801b78a:	4618      	mov	r0, r3
 801b78c:	3718      	adds	r7, #24
 801b78e:	46bd      	mov	sp, r7
 801b790:	bd80      	pop	{r7, pc}
 801b792:	bf00      	nop
 801b794:	0801fd30 	.word	0x0801fd30
 801b798:	0801fd68 	.word	0x0801fd68
 801b79c:	0801fd9c 	.word	0x0801fd9c

0801b7a0 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 801b7a0:	b580      	push	{r7, lr}
 801b7a2:	b084      	sub	sp, #16
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	60f8      	str	r0, [r7, #12]
 801b7a8:	60b9      	str	r1, [r7, #8]
 801b7aa:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d005      	beq.n	801b7be <lwrb_init+0x1e>
 801b7b2:	68bb      	ldr	r3, [r7, #8]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d002      	beq.n	801b7be <lwrb_init+0x1e>
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d101      	bne.n	801b7c2 <lwrb_init+0x22>
        return 0;
 801b7be:	2300      	movs	r3, #0
 801b7c0:	e00b      	b.n	801b7da <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 801b7c2:	2214      	movs	r2, #20
 801b7c4:	2100      	movs	r1, #0
 801b7c6:	68f8      	ldr	r0, [r7, #12]
 801b7c8:	f000 fc1c 	bl	801c004 <memset>

    buff->size = size;
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	687a      	ldr	r2, [r7, #4]
 801b7d0:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	68ba      	ldr	r2, [r7, #8]
 801b7d6:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 801b7d8:	2301      	movs	r3, #1
}
 801b7da:	4618      	mov	r0, r3
 801b7dc:	3710      	adds	r7, #16
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	bd80      	pop	{r7, pc}

0801b7e2 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 801b7e2:	b480      	push	{r7}
 801b7e4:	b083      	sub	sp, #12
 801b7e6:	af00      	add	r7, sp, #0
 801b7e8:	6078      	str	r0, [r7, #4]
 801b7ea:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d00a      	beq.n	801b808 <lwrb_set_evt_fn+0x26>
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d006      	beq.n	801b808 <lwrb_set_evt_fn+0x26>
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	685b      	ldr	r3, [r3, #4]
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d002      	beq.n	801b808 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	683a      	ldr	r2, [r7, #0]
 801b806:	611a      	str	r2, [r3, #16]
    }
}
 801b808:	bf00      	nop
 801b80a:	370c      	adds	r7, #12
 801b80c:	46bd      	mov	sp, r7
 801b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b812:	4770      	bx	lr

0801b814 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 801b814:	b580      	push	{r7, lr}
 801b816:	b088      	sub	sp, #32
 801b818:	af00      	add	r7, sp, #0
 801b81a:	60f8      	str	r0, [r7, #12]
 801b81c:	60b9      	str	r1, [r7, #8]
 801b81e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d00d      	beq.n	801b846 <lwrb_write+0x32>
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d009      	beq.n	801b846 <lwrb_write+0x32>
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	685b      	ldr	r3, [r3, #4]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d005      	beq.n	801b846 <lwrb_write+0x32>
 801b83a:	68bb      	ldr	r3, [r7, #8]
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d002      	beq.n	801b846 <lwrb_write+0x32>
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	2b00      	cmp	r3, #0
 801b844:	d101      	bne.n	801b84a <lwrb_write+0x36>
        return 0;
 801b846:	2300      	movs	r3, #0
 801b848:	e059      	b.n	801b8fe <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 801b84a:	68f8      	ldr	r0, [r7, #12]
 801b84c:	f000 f85b 	bl	801b906 <lwrb_get_free>
 801b850:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 801b852:	69fa      	ldr	r2, [r7, #28]
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	429a      	cmp	r2, r3
 801b858:	d20d      	bcs.n	801b876 <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	691b      	ldr	r3, [r3, #16]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d005      	beq.n	801b86e <lwrb_write+0x5a>
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	691b      	ldr	r3, [r3, #16]
 801b866:	69fa      	ldr	r2, [r7, #28]
 801b868:	2102      	movs	r1, #2
 801b86a:	68f8      	ldr	r0, [r7, #12]
 801b86c:	4798      	blx	r3
			free = lwrb_get_free(buff);
 801b86e:	68f8      	ldr	r0, [r7, #12]
 801b870:	f000 f849 	bl	801b906 <lwrb_get_free>
 801b874:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 801b876:	687a      	ldr	r2, [r7, #4]
 801b878:	69fb      	ldr	r3, [r7, #28]
 801b87a:	4293      	cmp	r3, r2
 801b87c:	bf28      	it	cs
 801b87e:	4613      	movcs	r3, r2
 801b880:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d101      	bne.n	801b88c <lwrb_write+0x78>
        return 0;
 801b888:	2300      	movs	r3, #0
 801b88a:	e038      	b.n	801b8fe <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 801b88c:	68fb      	ldr	r3, [r7, #12]
 801b88e:	685a      	ldr	r2, [r3, #4]
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	68db      	ldr	r3, [r3, #12]
 801b894:	1ad3      	subs	r3, r2, r3
 801b896:	687a      	ldr	r2, [r7, #4]
 801b898:	4293      	cmp	r3, r2
 801b89a:	bf28      	it	cs
 801b89c:	4613      	movcs	r3, r2
 801b89e:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	681a      	ldr	r2, [r3, #0]
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	68db      	ldr	r3, [r3, #12]
 801b8a8:	4413      	add	r3, r2
 801b8aa:	697a      	ldr	r2, [r7, #20]
 801b8ac:	69b9      	ldr	r1, [r7, #24]
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	f000 fc41 	bl	801c136 <memcpy>
    buff->w += tocopy;
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	68da      	ldr	r2, [r3, #12]
 801b8b8:	697b      	ldr	r3, [r7, #20]
 801b8ba:	441a      	add	r2, r3
 801b8bc:	68fb      	ldr	r3, [r7, #12]
 801b8be:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 801b8c0:	687a      	ldr	r2, [r7, #4]
 801b8c2:	697b      	ldr	r3, [r7, #20]
 801b8c4:	1ad3      	subs	r3, r2, r3
 801b8c6:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d00b      	beq.n	801b8e6 <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	6818      	ldr	r0, [r3, #0]
 801b8d2:	69ba      	ldr	r2, [r7, #24]
 801b8d4:	697b      	ldr	r3, [r7, #20]
 801b8d6:	4413      	add	r3, r2
 801b8d8:	687a      	ldr	r2, [r7, #4]
 801b8da:	4619      	mov	r1, r3
 801b8dc:	f000 fc2b 	bl	801c136 <memcpy>
        buff->w = btw;
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	687a      	ldr	r2, [r7, #4]
 801b8e4:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	68da      	ldr	r2, [r3, #12]
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	685b      	ldr	r3, [r3, #4]
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d302      	bcc.n	801b8f8 <lwrb_write+0xe4>
        buff->w = 0;
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 801b8f8:	697a      	ldr	r2, [r7, #20]
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	4413      	add	r3, r2
}
 801b8fe:	4618      	mov	r0, r3
 801b900:	3720      	adds	r7, #32
 801b902:	46bd      	mov	sp, r7
 801b904:	bd80      	pop	{r7, pc}

0801b906 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 801b906:	b480      	push	{r7}
 801b908:	b087      	sub	sp, #28
 801b90a:	af00      	add	r7, sp, #0
 801b90c:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	2b00      	cmp	r3, #0
 801b912:	d007      	beq.n	801b924 <lwrb_get_free+0x1e>
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d003      	beq.n	801b924 <lwrb_get_free+0x1e>
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	685b      	ldr	r3, [r3, #4]
 801b920:	2b00      	cmp	r3, #0
 801b922:	d101      	bne.n	801b928 <lwrb_get_free+0x22>
        return 0;
 801b924:	2300      	movs	r3, #0
 801b926:	e01f      	b.n	801b968 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	68db      	ldr	r3, [r3, #12]
 801b92c:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	689b      	ldr	r3, [r3, #8]
 801b932:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 801b934:	693a      	ldr	r2, [r7, #16]
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	429a      	cmp	r2, r3
 801b93a:	d103      	bne.n	801b944 <lwrb_get_free+0x3e>
        size = buff->size;
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	685b      	ldr	r3, [r3, #4]
 801b940:	617b      	str	r3, [r7, #20]
 801b942:	e00f      	b.n	801b964 <lwrb_get_free+0x5e>
    } else if (r > w) {
 801b944:	68fa      	ldr	r2, [r7, #12]
 801b946:	693b      	ldr	r3, [r7, #16]
 801b948:	429a      	cmp	r2, r3
 801b94a:	d904      	bls.n	801b956 <lwrb_get_free+0x50>
        size = r - w;
 801b94c:	68fa      	ldr	r2, [r7, #12]
 801b94e:	693b      	ldr	r3, [r7, #16]
 801b950:	1ad3      	subs	r3, r2, r3
 801b952:	617b      	str	r3, [r7, #20]
 801b954:	e006      	b.n	801b964 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	685a      	ldr	r2, [r3, #4]
 801b95a:	68f9      	ldr	r1, [r7, #12]
 801b95c:	693b      	ldr	r3, [r7, #16]
 801b95e:	1acb      	subs	r3, r1, r3
 801b960:	4413      	add	r3, r2
 801b962:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 801b964:	697b      	ldr	r3, [r7, #20]
 801b966:	3b01      	subs	r3, #1
}
 801b968:	4618      	mov	r0, r3
 801b96a:	371c      	adds	r7, #28
 801b96c:	46bd      	mov	sp, r7
 801b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b972:	4770      	bx	lr

0801b974 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 801b974:	b480      	push	{r7}
 801b976:	b087      	sub	sp, #28
 801b978:	af00      	add	r7, sp, #0
 801b97a:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d007      	beq.n	801b992 <lwrb_get_full+0x1e>
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	2b00      	cmp	r3, #0
 801b988:	d003      	beq.n	801b992 <lwrb_get_full+0x1e>
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	685b      	ldr	r3, [r3, #4]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d101      	bne.n	801b996 <lwrb_get_full+0x22>
        return 0;
 801b992:	2300      	movs	r3, #0
 801b994:	e01d      	b.n	801b9d2 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	68db      	ldr	r3, [r3, #12]
 801b99a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	689b      	ldr	r3, [r3, #8]
 801b9a0:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 801b9a2:	693a      	ldr	r2, [r7, #16]
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	429a      	cmp	r2, r3
 801b9a8:	d102      	bne.n	801b9b0 <lwrb_get_full+0x3c>
        size = 0;
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	617b      	str	r3, [r7, #20]
 801b9ae:	e00f      	b.n	801b9d0 <lwrb_get_full+0x5c>
    } else if (w > r) {
 801b9b0:	693a      	ldr	r2, [r7, #16]
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	429a      	cmp	r2, r3
 801b9b6:	d904      	bls.n	801b9c2 <lwrb_get_full+0x4e>
        size = w - r;
 801b9b8:	693a      	ldr	r2, [r7, #16]
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	1ad3      	subs	r3, r2, r3
 801b9be:	617b      	str	r3, [r7, #20]
 801b9c0:	e006      	b.n	801b9d0 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	685a      	ldr	r2, [r3, #4]
 801b9c6:	6939      	ldr	r1, [r7, #16]
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	1acb      	subs	r3, r1, r3
 801b9cc:	4413      	add	r3, r2
 801b9ce:	617b      	str	r3, [r7, #20]
    }
    return size;
 801b9d0:	697b      	ldr	r3, [r7, #20]
}
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	371c      	adds	r7, #28
 801b9d6:	46bd      	mov	sp, r7
 801b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9dc:	4770      	bx	lr

0801b9de <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 801b9de:	b480      	push	{r7}
 801b9e0:	b083      	sub	sp, #12
 801b9e2:	af00      	add	r7, sp, #0
 801b9e4:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d007      	beq.n	801b9fc <lwrb_get_linear_block_read_address+0x1e>
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d003      	beq.n	801b9fc <lwrb_get_linear_block_read_address+0x1e>
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	685b      	ldr	r3, [r3, #4]
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d101      	bne.n	801ba00 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 801b9fc:	2300      	movs	r3, #0
 801b9fe:	e004      	b.n	801ba0a <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	681a      	ldr	r2, [r3, #0]
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	689b      	ldr	r3, [r3, #8]
 801ba08:	4413      	add	r3, r2
}
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	370c      	adds	r7, #12
 801ba0e:	46bd      	mov	sp, r7
 801ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba14:	4770      	bx	lr

0801ba16 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 801ba16:	b480      	push	{r7}
 801ba18:	b087      	sub	sp, #28
 801ba1a:	af00      	add	r7, sp, #0
 801ba1c:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d007      	beq.n	801ba34 <lwrb_get_linear_block_read_length+0x1e>
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d003      	beq.n	801ba34 <lwrb_get_linear_block_read_length+0x1e>
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	685b      	ldr	r3, [r3, #4]
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d101      	bne.n	801ba38 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 801ba34:	2300      	movs	r3, #0
 801ba36:	e01b      	b.n	801ba70 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	68db      	ldr	r3, [r3, #12]
 801ba3c:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	689b      	ldr	r3, [r3, #8]
 801ba42:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 801ba44:	693a      	ldr	r2, [r7, #16]
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	429a      	cmp	r2, r3
 801ba4a:	d904      	bls.n	801ba56 <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 801ba4c:	693a      	ldr	r2, [r7, #16]
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	1ad3      	subs	r3, r2, r3
 801ba52:	617b      	str	r3, [r7, #20]
 801ba54:	e00b      	b.n	801ba6e <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 801ba56:	68fa      	ldr	r2, [r7, #12]
 801ba58:	693b      	ldr	r3, [r7, #16]
 801ba5a:	429a      	cmp	r2, r3
 801ba5c:	d905      	bls.n	801ba6a <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	685a      	ldr	r2, [r3, #4]
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	1ad3      	subs	r3, r2, r3
 801ba66:	617b      	str	r3, [r7, #20]
 801ba68:	e001      	b.n	801ba6e <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	617b      	str	r3, [r7, #20]
    }
    return len;
 801ba6e:	697b      	ldr	r3, [r7, #20]
}
 801ba70:	4618      	mov	r0, r3
 801ba72:	371c      	adds	r7, #28
 801ba74:	46bd      	mov	sp, r7
 801ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba7a:	4770      	bx	lr

0801ba7c <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b084      	sub	sp, #16
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	6078      	str	r0, [r7, #4]
 801ba84:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d00a      	beq.n	801baa2 <lwrb_skip+0x26>
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d006      	beq.n	801baa2 <lwrb_skip+0x26>
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	685b      	ldr	r3, [r3, #4]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d002      	beq.n	801baa2 <lwrb_skip+0x26>
 801ba9c:	683b      	ldr	r3, [r7, #0]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d101      	bne.n	801baa6 <lwrb_skip+0x2a>
        return 0;
 801baa2:	2300      	movs	r3, #0
 801baa4:	e01d      	b.n	801bae2 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 801baa6:	6878      	ldr	r0, [r7, #4]
 801baa8:	f7ff ff64 	bl	801b974 <lwrb_get_full>
 801baac:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 801baae:	683a      	ldr	r2, [r7, #0]
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	4293      	cmp	r3, r2
 801bab4:	bf28      	it	cs
 801bab6:	4613      	movcs	r3, r2
 801bab8:	603b      	str	r3, [r7, #0]
    buff->r += len;
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	689a      	ldr	r2, [r3, #8]
 801babe:	683b      	ldr	r3, [r7, #0]
 801bac0:	441a      	add	r2, r3
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	689a      	ldr	r2, [r3, #8]
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	685b      	ldr	r3, [r3, #4]
 801bace:	429a      	cmp	r2, r3
 801bad0:	d306      	bcc.n	801bae0 <lwrb_skip+0x64>
        buff->r -= buff->size;
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	689a      	ldr	r2, [r3, #8]
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	685b      	ldr	r3, [r3, #4]
 801bada:	1ad2      	subs	r2, r2, r3
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 801bae0:	683b      	ldr	r3, [r7, #0]
}
 801bae2:	4618      	mov	r0, r3
 801bae4:	3710      	adds	r7, #16
 801bae6:	46bd      	mov	sp, r7
 801bae8:	bd80      	pop	{r7, pc}
	...

0801baec <malloc>:
 801baec:	4b02      	ldr	r3, [pc, #8]	; (801baf8 <malloc+0xc>)
 801baee:	4601      	mov	r1, r0
 801baf0:	6818      	ldr	r0, [r3, #0]
 801baf2:	f000 b823 	b.w	801bb3c <_malloc_r>
 801baf6:	bf00      	nop
 801baf8:	200000dc 	.word	0x200000dc

0801bafc <sbrk_aligned>:
 801bafc:	b570      	push	{r4, r5, r6, lr}
 801bafe:	4e0e      	ldr	r6, [pc, #56]	; (801bb38 <sbrk_aligned+0x3c>)
 801bb00:	460c      	mov	r4, r1
 801bb02:	4605      	mov	r5, r0
 801bb04:	6831      	ldr	r1, [r6, #0]
 801bb06:	b911      	cbnz	r1, 801bb0e <sbrk_aligned+0x12>
 801bb08:	f000 facc 	bl	801c0a4 <_sbrk_r>
 801bb0c:	6030      	str	r0, [r6, #0]
 801bb0e:	4621      	mov	r1, r4
 801bb10:	4628      	mov	r0, r5
 801bb12:	f000 fac7 	bl	801c0a4 <_sbrk_r>
 801bb16:	1c43      	adds	r3, r0, #1
 801bb18:	d00a      	beq.n	801bb30 <sbrk_aligned+0x34>
 801bb1a:	1cc4      	adds	r4, r0, #3
 801bb1c:	f024 0403 	bic.w	r4, r4, #3
 801bb20:	42a0      	cmp	r0, r4
 801bb22:	d007      	beq.n	801bb34 <sbrk_aligned+0x38>
 801bb24:	1a21      	subs	r1, r4, r0
 801bb26:	4628      	mov	r0, r5
 801bb28:	f000 fabc 	bl	801c0a4 <_sbrk_r>
 801bb2c:	3001      	adds	r0, #1
 801bb2e:	d101      	bne.n	801bb34 <sbrk_aligned+0x38>
 801bb30:	f04f 34ff 	mov.w	r4, #4294967295
 801bb34:	4620      	mov	r0, r4
 801bb36:	bd70      	pop	{r4, r5, r6, pc}
 801bb38:	2000b144 	.word	0x2000b144

0801bb3c <_malloc_r>:
 801bb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb40:	1ccd      	adds	r5, r1, #3
 801bb42:	4607      	mov	r7, r0
 801bb44:	f025 0503 	bic.w	r5, r5, #3
 801bb48:	3508      	adds	r5, #8
 801bb4a:	2d0c      	cmp	r5, #12
 801bb4c:	bf38      	it	cc
 801bb4e:	250c      	movcc	r5, #12
 801bb50:	2d00      	cmp	r5, #0
 801bb52:	db01      	blt.n	801bb58 <_malloc_r+0x1c>
 801bb54:	42a9      	cmp	r1, r5
 801bb56:	d905      	bls.n	801bb64 <_malloc_r+0x28>
 801bb58:	230c      	movs	r3, #12
 801bb5a:	2600      	movs	r6, #0
 801bb5c:	603b      	str	r3, [r7, #0]
 801bb5e:	4630      	mov	r0, r6
 801bb60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801bc38 <_malloc_r+0xfc>
 801bb68:	f000 f868 	bl	801bc3c <__malloc_lock>
 801bb6c:	f8d8 3000 	ldr.w	r3, [r8]
 801bb70:	461c      	mov	r4, r3
 801bb72:	bb5c      	cbnz	r4, 801bbcc <_malloc_r+0x90>
 801bb74:	4629      	mov	r1, r5
 801bb76:	4638      	mov	r0, r7
 801bb78:	f7ff ffc0 	bl	801bafc <sbrk_aligned>
 801bb7c:	1c43      	adds	r3, r0, #1
 801bb7e:	4604      	mov	r4, r0
 801bb80:	d155      	bne.n	801bc2e <_malloc_r+0xf2>
 801bb82:	f8d8 4000 	ldr.w	r4, [r8]
 801bb86:	4626      	mov	r6, r4
 801bb88:	2e00      	cmp	r6, #0
 801bb8a:	d145      	bne.n	801bc18 <_malloc_r+0xdc>
 801bb8c:	2c00      	cmp	r4, #0
 801bb8e:	d048      	beq.n	801bc22 <_malloc_r+0xe6>
 801bb90:	6823      	ldr	r3, [r4, #0]
 801bb92:	4631      	mov	r1, r6
 801bb94:	4638      	mov	r0, r7
 801bb96:	eb04 0903 	add.w	r9, r4, r3
 801bb9a:	f000 fa83 	bl	801c0a4 <_sbrk_r>
 801bb9e:	4581      	cmp	r9, r0
 801bba0:	d13f      	bne.n	801bc22 <_malloc_r+0xe6>
 801bba2:	6821      	ldr	r1, [r4, #0]
 801bba4:	4638      	mov	r0, r7
 801bba6:	1a6d      	subs	r5, r5, r1
 801bba8:	4629      	mov	r1, r5
 801bbaa:	f7ff ffa7 	bl	801bafc <sbrk_aligned>
 801bbae:	3001      	adds	r0, #1
 801bbb0:	d037      	beq.n	801bc22 <_malloc_r+0xe6>
 801bbb2:	6823      	ldr	r3, [r4, #0]
 801bbb4:	442b      	add	r3, r5
 801bbb6:	6023      	str	r3, [r4, #0]
 801bbb8:	f8d8 3000 	ldr.w	r3, [r8]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d038      	beq.n	801bc32 <_malloc_r+0xf6>
 801bbc0:	685a      	ldr	r2, [r3, #4]
 801bbc2:	42a2      	cmp	r2, r4
 801bbc4:	d12b      	bne.n	801bc1e <_malloc_r+0xe2>
 801bbc6:	2200      	movs	r2, #0
 801bbc8:	605a      	str	r2, [r3, #4]
 801bbca:	e00f      	b.n	801bbec <_malloc_r+0xb0>
 801bbcc:	6822      	ldr	r2, [r4, #0]
 801bbce:	1b52      	subs	r2, r2, r5
 801bbd0:	d41f      	bmi.n	801bc12 <_malloc_r+0xd6>
 801bbd2:	2a0b      	cmp	r2, #11
 801bbd4:	d917      	bls.n	801bc06 <_malloc_r+0xca>
 801bbd6:	1961      	adds	r1, r4, r5
 801bbd8:	42a3      	cmp	r3, r4
 801bbda:	6025      	str	r5, [r4, #0]
 801bbdc:	bf18      	it	ne
 801bbde:	6059      	strne	r1, [r3, #4]
 801bbe0:	6863      	ldr	r3, [r4, #4]
 801bbe2:	bf08      	it	eq
 801bbe4:	f8c8 1000 	streq.w	r1, [r8]
 801bbe8:	5162      	str	r2, [r4, r5]
 801bbea:	604b      	str	r3, [r1, #4]
 801bbec:	f104 060b 	add.w	r6, r4, #11
 801bbf0:	4638      	mov	r0, r7
 801bbf2:	f000 f829 	bl	801bc48 <__malloc_unlock>
 801bbf6:	1d23      	adds	r3, r4, #4
 801bbf8:	f026 0607 	bic.w	r6, r6, #7
 801bbfc:	1af2      	subs	r2, r6, r3
 801bbfe:	d0ae      	beq.n	801bb5e <_malloc_r+0x22>
 801bc00:	1b9b      	subs	r3, r3, r6
 801bc02:	50a3      	str	r3, [r4, r2]
 801bc04:	e7ab      	b.n	801bb5e <_malloc_r+0x22>
 801bc06:	42a3      	cmp	r3, r4
 801bc08:	6862      	ldr	r2, [r4, #4]
 801bc0a:	d1dd      	bne.n	801bbc8 <_malloc_r+0x8c>
 801bc0c:	f8c8 2000 	str.w	r2, [r8]
 801bc10:	e7ec      	b.n	801bbec <_malloc_r+0xb0>
 801bc12:	4623      	mov	r3, r4
 801bc14:	6864      	ldr	r4, [r4, #4]
 801bc16:	e7ac      	b.n	801bb72 <_malloc_r+0x36>
 801bc18:	4634      	mov	r4, r6
 801bc1a:	6876      	ldr	r6, [r6, #4]
 801bc1c:	e7b4      	b.n	801bb88 <_malloc_r+0x4c>
 801bc1e:	4613      	mov	r3, r2
 801bc20:	e7cc      	b.n	801bbbc <_malloc_r+0x80>
 801bc22:	230c      	movs	r3, #12
 801bc24:	4638      	mov	r0, r7
 801bc26:	603b      	str	r3, [r7, #0]
 801bc28:	f000 f80e 	bl	801bc48 <__malloc_unlock>
 801bc2c:	e797      	b.n	801bb5e <_malloc_r+0x22>
 801bc2e:	6025      	str	r5, [r4, #0]
 801bc30:	e7dc      	b.n	801bbec <_malloc_r+0xb0>
 801bc32:	605b      	str	r3, [r3, #4]
 801bc34:	deff      	udf	#255	; 0xff
 801bc36:	bf00      	nop
 801bc38:	2000b140 	.word	0x2000b140

0801bc3c <__malloc_lock>:
 801bc3c:	4801      	ldr	r0, [pc, #4]	; (801bc44 <__malloc_lock+0x8>)
 801bc3e:	f000 ba78 	b.w	801c132 <__retarget_lock_acquire_recursive>
 801bc42:	bf00      	nop
 801bc44:	2000b288 	.word	0x2000b288

0801bc48 <__malloc_unlock>:
 801bc48:	4801      	ldr	r0, [pc, #4]	; (801bc50 <__malloc_unlock+0x8>)
 801bc4a:	f000 ba73 	b.w	801c134 <__retarget_lock_release_recursive>
 801bc4e:	bf00      	nop
 801bc50:	2000b288 	.word	0x2000b288

0801bc54 <rand>:
 801bc54:	4b16      	ldr	r3, [pc, #88]	; (801bcb0 <rand+0x5c>)
 801bc56:	b510      	push	{r4, lr}
 801bc58:	681c      	ldr	r4, [r3, #0]
 801bc5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bc5c:	b9b3      	cbnz	r3, 801bc8c <rand+0x38>
 801bc5e:	2018      	movs	r0, #24
 801bc60:	f7ff ff44 	bl	801baec <malloc>
 801bc64:	4602      	mov	r2, r0
 801bc66:	6320      	str	r0, [r4, #48]	; 0x30
 801bc68:	b920      	cbnz	r0, 801bc74 <rand+0x20>
 801bc6a:	4b12      	ldr	r3, [pc, #72]	; (801bcb4 <rand+0x60>)
 801bc6c:	2152      	movs	r1, #82	; 0x52
 801bc6e:	4812      	ldr	r0, [pc, #72]	; (801bcb8 <rand+0x64>)
 801bc70:	f000 fa6e 	bl	801c150 <__assert_func>
 801bc74:	4911      	ldr	r1, [pc, #68]	; (801bcbc <rand+0x68>)
 801bc76:	4b12      	ldr	r3, [pc, #72]	; (801bcc0 <rand+0x6c>)
 801bc78:	e9c0 1300 	strd	r1, r3, [r0]
 801bc7c:	4b11      	ldr	r3, [pc, #68]	; (801bcc4 <rand+0x70>)
 801bc7e:	2100      	movs	r1, #0
 801bc80:	6083      	str	r3, [r0, #8]
 801bc82:	230b      	movs	r3, #11
 801bc84:	8183      	strh	r3, [r0, #12]
 801bc86:	2001      	movs	r0, #1
 801bc88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bc8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bc8e:	480e      	ldr	r0, [pc, #56]	; (801bcc8 <rand+0x74>)
 801bc90:	690b      	ldr	r3, [r1, #16]
 801bc92:	694c      	ldr	r4, [r1, #20]
 801bc94:	4a0d      	ldr	r2, [pc, #52]	; (801bccc <rand+0x78>)
 801bc96:	4358      	muls	r0, r3
 801bc98:	fb02 0004 	mla	r0, r2, r4, r0
 801bc9c:	fba3 3202 	umull	r3, r2, r3, r2
 801bca0:	3301      	adds	r3, #1
 801bca2:	eb40 0002 	adc.w	r0, r0, r2
 801bca6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801bcaa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801bcae:	bd10      	pop	{r4, pc}
 801bcb0:	200000dc 	.word	0x200000dc
 801bcb4:	0802006a 	.word	0x0802006a
 801bcb8:	08020081 	.word	0x08020081
 801bcbc:	abcd330e 	.word	0xabcd330e
 801bcc0:	e66d1234 	.word	0xe66d1234
 801bcc4:	0005deec 	.word	0x0005deec
 801bcc8:	5851f42d 	.word	0x5851f42d
 801bccc:	4c957f2d 	.word	0x4c957f2d

0801bcd0 <std>:
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	b510      	push	{r4, lr}
 801bcd4:	4604      	mov	r4, r0
 801bcd6:	6083      	str	r3, [r0, #8]
 801bcd8:	8181      	strh	r1, [r0, #12]
 801bcda:	4619      	mov	r1, r3
 801bcdc:	6643      	str	r3, [r0, #100]	; 0x64
 801bcde:	81c2      	strh	r2, [r0, #14]
 801bce0:	2208      	movs	r2, #8
 801bce2:	6183      	str	r3, [r0, #24]
 801bce4:	e9c0 3300 	strd	r3, r3, [r0]
 801bce8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bcec:	305c      	adds	r0, #92	; 0x5c
 801bcee:	f000 f989 	bl	801c004 <memset>
 801bcf2:	4b0d      	ldr	r3, [pc, #52]	; (801bd28 <std+0x58>)
 801bcf4:	6224      	str	r4, [r4, #32]
 801bcf6:	6263      	str	r3, [r4, #36]	; 0x24
 801bcf8:	4b0c      	ldr	r3, [pc, #48]	; (801bd2c <std+0x5c>)
 801bcfa:	62a3      	str	r3, [r4, #40]	; 0x28
 801bcfc:	4b0c      	ldr	r3, [pc, #48]	; (801bd30 <std+0x60>)
 801bcfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bd00:	4b0c      	ldr	r3, [pc, #48]	; (801bd34 <std+0x64>)
 801bd02:	6323      	str	r3, [r4, #48]	; 0x30
 801bd04:	4b0c      	ldr	r3, [pc, #48]	; (801bd38 <std+0x68>)
 801bd06:	429c      	cmp	r4, r3
 801bd08:	d006      	beq.n	801bd18 <std+0x48>
 801bd0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bd0e:	4294      	cmp	r4, r2
 801bd10:	d002      	beq.n	801bd18 <std+0x48>
 801bd12:	33d0      	adds	r3, #208	; 0xd0
 801bd14:	429c      	cmp	r4, r3
 801bd16:	d105      	bne.n	801bd24 <std+0x54>
 801bd18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd20:	f000 ba06 	b.w	801c130 <__retarget_lock_init_recursive>
 801bd24:	bd10      	pop	{r4, pc}
 801bd26:	bf00      	nop
 801bd28:	0801be79 	.word	0x0801be79
 801bd2c:	0801be9b 	.word	0x0801be9b
 801bd30:	0801bed3 	.word	0x0801bed3
 801bd34:	0801bef7 	.word	0x0801bef7
 801bd38:	2000b148 	.word	0x2000b148

0801bd3c <stdio_exit_handler>:
 801bd3c:	4a02      	ldr	r2, [pc, #8]	; (801bd48 <stdio_exit_handler+0xc>)
 801bd3e:	4903      	ldr	r1, [pc, #12]	; (801bd4c <stdio_exit_handler+0x10>)
 801bd40:	4803      	ldr	r0, [pc, #12]	; (801bd50 <stdio_exit_handler+0x14>)
 801bd42:	f000 b869 	b.w	801be18 <_fwalk_sglue>
 801bd46:	bf00      	nop
 801bd48:	20000084 	.word	0x20000084
 801bd4c:	0801cb89 	.word	0x0801cb89
 801bd50:	20000090 	.word	0x20000090

0801bd54 <cleanup_stdio>:
 801bd54:	6841      	ldr	r1, [r0, #4]
 801bd56:	4b0c      	ldr	r3, [pc, #48]	; (801bd88 <cleanup_stdio+0x34>)
 801bd58:	4299      	cmp	r1, r3
 801bd5a:	b510      	push	{r4, lr}
 801bd5c:	4604      	mov	r4, r0
 801bd5e:	d001      	beq.n	801bd64 <cleanup_stdio+0x10>
 801bd60:	f000 ff12 	bl	801cb88 <_fflush_r>
 801bd64:	68a1      	ldr	r1, [r4, #8]
 801bd66:	4b09      	ldr	r3, [pc, #36]	; (801bd8c <cleanup_stdio+0x38>)
 801bd68:	4299      	cmp	r1, r3
 801bd6a:	d002      	beq.n	801bd72 <cleanup_stdio+0x1e>
 801bd6c:	4620      	mov	r0, r4
 801bd6e:	f000 ff0b 	bl	801cb88 <_fflush_r>
 801bd72:	68e1      	ldr	r1, [r4, #12]
 801bd74:	4b06      	ldr	r3, [pc, #24]	; (801bd90 <cleanup_stdio+0x3c>)
 801bd76:	4299      	cmp	r1, r3
 801bd78:	d004      	beq.n	801bd84 <cleanup_stdio+0x30>
 801bd7a:	4620      	mov	r0, r4
 801bd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd80:	f000 bf02 	b.w	801cb88 <_fflush_r>
 801bd84:	bd10      	pop	{r4, pc}
 801bd86:	bf00      	nop
 801bd88:	2000b148 	.word	0x2000b148
 801bd8c:	2000b1b0 	.word	0x2000b1b0
 801bd90:	2000b218 	.word	0x2000b218

0801bd94 <global_stdio_init.part.0>:
 801bd94:	b510      	push	{r4, lr}
 801bd96:	4b0b      	ldr	r3, [pc, #44]	; (801bdc4 <global_stdio_init.part.0+0x30>)
 801bd98:	2104      	movs	r1, #4
 801bd9a:	4c0b      	ldr	r4, [pc, #44]	; (801bdc8 <global_stdio_init.part.0+0x34>)
 801bd9c:	4a0b      	ldr	r2, [pc, #44]	; (801bdcc <global_stdio_init.part.0+0x38>)
 801bd9e:	4620      	mov	r0, r4
 801bda0:	601a      	str	r2, [r3, #0]
 801bda2:	2200      	movs	r2, #0
 801bda4:	f7ff ff94 	bl	801bcd0 <std>
 801bda8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bdac:	2201      	movs	r2, #1
 801bdae:	2109      	movs	r1, #9
 801bdb0:	f7ff ff8e 	bl	801bcd0 <std>
 801bdb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bdb8:	2202      	movs	r2, #2
 801bdba:	2112      	movs	r1, #18
 801bdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdc0:	f7ff bf86 	b.w	801bcd0 <std>
 801bdc4:	2000b280 	.word	0x2000b280
 801bdc8:	2000b148 	.word	0x2000b148
 801bdcc:	0801bd3d 	.word	0x0801bd3d

0801bdd0 <__sfp_lock_acquire>:
 801bdd0:	4801      	ldr	r0, [pc, #4]	; (801bdd8 <__sfp_lock_acquire+0x8>)
 801bdd2:	f000 b9ae 	b.w	801c132 <__retarget_lock_acquire_recursive>
 801bdd6:	bf00      	nop
 801bdd8:	2000b289 	.word	0x2000b289

0801bddc <__sfp_lock_release>:
 801bddc:	4801      	ldr	r0, [pc, #4]	; (801bde4 <__sfp_lock_release+0x8>)
 801bdde:	f000 b9a9 	b.w	801c134 <__retarget_lock_release_recursive>
 801bde2:	bf00      	nop
 801bde4:	2000b289 	.word	0x2000b289

0801bde8 <__sinit>:
 801bde8:	b510      	push	{r4, lr}
 801bdea:	4604      	mov	r4, r0
 801bdec:	f7ff fff0 	bl	801bdd0 <__sfp_lock_acquire>
 801bdf0:	6a23      	ldr	r3, [r4, #32]
 801bdf2:	b11b      	cbz	r3, 801bdfc <__sinit+0x14>
 801bdf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdf8:	f7ff bff0 	b.w	801bddc <__sfp_lock_release>
 801bdfc:	4b04      	ldr	r3, [pc, #16]	; (801be10 <__sinit+0x28>)
 801bdfe:	6223      	str	r3, [r4, #32]
 801be00:	4b04      	ldr	r3, [pc, #16]	; (801be14 <__sinit+0x2c>)
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d1f5      	bne.n	801bdf4 <__sinit+0xc>
 801be08:	f7ff ffc4 	bl	801bd94 <global_stdio_init.part.0>
 801be0c:	e7f2      	b.n	801bdf4 <__sinit+0xc>
 801be0e:	bf00      	nop
 801be10:	0801bd55 	.word	0x0801bd55
 801be14:	2000b280 	.word	0x2000b280

0801be18 <_fwalk_sglue>:
 801be18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be1c:	4607      	mov	r7, r0
 801be1e:	4688      	mov	r8, r1
 801be20:	4614      	mov	r4, r2
 801be22:	2600      	movs	r6, #0
 801be24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801be28:	f1b9 0901 	subs.w	r9, r9, #1
 801be2c:	d505      	bpl.n	801be3a <_fwalk_sglue+0x22>
 801be2e:	6824      	ldr	r4, [r4, #0]
 801be30:	2c00      	cmp	r4, #0
 801be32:	d1f7      	bne.n	801be24 <_fwalk_sglue+0xc>
 801be34:	4630      	mov	r0, r6
 801be36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be3a:	89ab      	ldrh	r3, [r5, #12]
 801be3c:	2b01      	cmp	r3, #1
 801be3e:	d907      	bls.n	801be50 <_fwalk_sglue+0x38>
 801be40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801be44:	3301      	adds	r3, #1
 801be46:	d003      	beq.n	801be50 <_fwalk_sglue+0x38>
 801be48:	4629      	mov	r1, r5
 801be4a:	4638      	mov	r0, r7
 801be4c:	47c0      	blx	r8
 801be4e:	4306      	orrs	r6, r0
 801be50:	3568      	adds	r5, #104	; 0x68
 801be52:	e7e9      	b.n	801be28 <_fwalk_sglue+0x10>

0801be54 <iprintf>:
 801be54:	b40f      	push	{r0, r1, r2, r3}
 801be56:	b507      	push	{r0, r1, r2, lr}
 801be58:	4906      	ldr	r1, [pc, #24]	; (801be74 <iprintf+0x20>)
 801be5a:	ab04      	add	r3, sp, #16
 801be5c:	6808      	ldr	r0, [r1, #0]
 801be5e:	f853 2b04 	ldr.w	r2, [r3], #4
 801be62:	6881      	ldr	r1, [r0, #8]
 801be64:	9301      	str	r3, [sp, #4]
 801be66:	f000 fb5f 	bl	801c528 <_vfiprintf_r>
 801be6a:	b003      	add	sp, #12
 801be6c:	f85d eb04 	ldr.w	lr, [sp], #4
 801be70:	b004      	add	sp, #16
 801be72:	4770      	bx	lr
 801be74:	200000dc 	.word	0x200000dc

0801be78 <__sread>:
 801be78:	b510      	push	{r4, lr}
 801be7a:	460c      	mov	r4, r1
 801be7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be80:	f000 f8fe 	bl	801c080 <_read_r>
 801be84:	2800      	cmp	r0, #0
 801be86:	bfab      	itete	ge
 801be88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801be8a:	89a3      	ldrhlt	r3, [r4, #12]
 801be8c:	181b      	addge	r3, r3, r0
 801be8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801be92:	bfac      	ite	ge
 801be94:	6563      	strge	r3, [r4, #84]	; 0x54
 801be96:	81a3      	strhlt	r3, [r4, #12]
 801be98:	bd10      	pop	{r4, pc}

0801be9a <__swrite>:
 801be9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be9e:	461f      	mov	r7, r3
 801bea0:	898b      	ldrh	r3, [r1, #12]
 801bea2:	4605      	mov	r5, r0
 801bea4:	460c      	mov	r4, r1
 801bea6:	05db      	lsls	r3, r3, #23
 801bea8:	4616      	mov	r6, r2
 801beaa:	d505      	bpl.n	801beb8 <__swrite+0x1e>
 801beac:	2302      	movs	r3, #2
 801beae:	2200      	movs	r2, #0
 801beb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801beb4:	f000 f8d2 	bl	801c05c <_lseek_r>
 801beb8:	89a3      	ldrh	r3, [r4, #12]
 801beba:	4632      	mov	r2, r6
 801bebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bec0:	4628      	mov	r0, r5
 801bec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bec6:	81a3      	strh	r3, [r4, #12]
 801bec8:	463b      	mov	r3, r7
 801beca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bece:	f000 b8f9 	b.w	801c0c4 <_write_r>

0801bed2 <__sseek>:
 801bed2:	b510      	push	{r4, lr}
 801bed4:	460c      	mov	r4, r1
 801bed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801beda:	f000 f8bf 	bl	801c05c <_lseek_r>
 801bede:	1c43      	adds	r3, r0, #1
 801bee0:	89a3      	ldrh	r3, [r4, #12]
 801bee2:	bf15      	itete	ne
 801bee4:	6560      	strne	r0, [r4, #84]	; 0x54
 801bee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801beea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801beee:	81a3      	strheq	r3, [r4, #12]
 801bef0:	bf18      	it	ne
 801bef2:	81a3      	strhne	r3, [r4, #12]
 801bef4:	bd10      	pop	{r4, pc}

0801bef6 <__sclose>:
 801bef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801befa:	f000 b89f 	b.w	801c03c <_close_r>

0801befe <_vsniprintf_r>:
 801befe:	b530      	push	{r4, r5, lr}
 801bf00:	4614      	mov	r4, r2
 801bf02:	b09b      	sub	sp, #108	; 0x6c
 801bf04:	4605      	mov	r5, r0
 801bf06:	461a      	mov	r2, r3
 801bf08:	2c00      	cmp	r4, #0
 801bf0a:	da05      	bge.n	801bf18 <_vsniprintf_r+0x1a>
 801bf0c:	238b      	movs	r3, #139	; 0x8b
 801bf0e:	6003      	str	r3, [r0, #0]
 801bf10:	f04f 30ff 	mov.w	r0, #4294967295
 801bf14:	b01b      	add	sp, #108	; 0x6c
 801bf16:	bd30      	pop	{r4, r5, pc}
 801bf18:	f44f 7302 	mov.w	r3, #520	; 0x208
 801bf1c:	9100      	str	r1, [sp, #0]
 801bf1e:	9104      	str	r1, [sp, #16]
 801bf20:	4669      	mov	r1, sp
 801bf22:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bf26:	bf14      	ite	ne
 801bf28:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bf2c:	4623      	moveq	r3, r4
 801bf2e:	9302      	str	r3, [sp, #8]
 801bf30:	9305      	str	r3, [sp, #20]
 801bf32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bf36:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bf3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bf3c:	f000 f9cc 	bl	801c2d8 <_svfiprintf_r>
 801bf40:	1c43      	adds	r3, r0, #1
 801bf42:	bfbc      	itt	lt
 801bf44:	238b      	movlt	r3, #139	; 0x8b
 801bf46:	602b      	strlt	r3, [r5, #0]
 801bf48:	2c00      	cmp	r4, #0
 801bf4a:	d0e3      	beq.n	801bf14 <_vsniprintf_r+0x16>
 801bf4c:	9b00      	ldr	r3, [sp, #0]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	701a      	strb	r2, [r3, #0]
 801bf52:	e7df      	b.n	801bf14 <_vsniprintf_r+0x16>

0801bf54 <vsniprintf>:
 801bf54:	b507      	push	{r0, r1, r2, lr}
 801bf56:	9300      	str	r3, [sp, #0]
 801bf58:	4613      	mov	r3, r2
 801bf5a:	460a      	mov	r2, r1
 801bf5c:	4601      	mov	r1, r0
 801bf5e:	4803      	ldr	r0, [pc, #12]	; (801bf6c <vsniprintf+0x18>)
 801bf60:	6800      	ldr	r0, [r0, #0]
 801bf62:	f7ff ffcc 	bl	801befe <_vsniprintf_r>
 801bf66:	b003      	add	sp, #12
 801bf68:	f85d fb04 	ldr.w	pc, [sp], #4
 801bf6c:	200000dc 	.word	0x200000dc

0801bf70 <_vsiprintf_r>:
 801bf70:	b500      	push	{lr}
 801bf72:	b09b      	sub	sp, #108	; 0x6c
 801bf74:	9100      	str	r1, [sp, #0]
 801bf76:	9104      	str	r1, [sp, #16]
 801bf78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bf7c:	9105      	str	r1, [sp, #20]
 801bf7e:	9102      	str	r1, [sp, #8]
 801bf80:	4905      	ldr	r1, [pc, #20]	; (801bf98 <_vsiprintf_r+0x28>)
 801bf82:	9103      	str	r1, [sp, #12]
 801bf84:	4669      	mov	r1, sp
 801bf86:	f000 f9a7 	bl	801c2d8 <_svfiprintf_r>
 801bf8a:	9b00      	ldr	r3, [sp, #0]
 801bf8c:	2200      	movs	r2, #0
 801bf8e:	701a      	strb	r2, [r3, #0]
 801bf90:	b01b      	add	sp, #108	; 0x6c
 801bf92:	f85d fb04 	ldr.w	pc, [sp], #4
 801bf96:	bf00      	nop
 801bf98:	ffff0208 	.word	0xffff0208

0801bf9c <vsiprintf>:
 801bf9c:	4613      	mov	r3, r2
 801bf9e:	460a      	mov	r2, r1
 801bfa0:	4601      	mov	r1, r0
 801bfa2:	4802      	ldr	r0, [pc, #8]	; (801bfac <vsiprintf+0x10>)
 801bfa4:	6800      	ldr	r0, [r0, #0]
 801bfa6:	f7ff bfe3 	b.w	801bf70 <_vsiprintf_r>
 801bfaa:	bf00      	nop
 801bfac:	200000dc 	.word	0x200000dc

0801bfb0 <memcmp>:
 801bfb0:	3901      	subs	r1, #1
 801bfb2:	4402      	add	r2, r0
 801bfb4:	b510      	push	{r4, lr}
 801bfb6:	4290      	cmp	r0, r2
 801bfb8:	d101      	bne.n	801bfbe <memcmp+0xe>
 801bfba:	2000      	movs	r0, #0
 801bfbc:	e005      	b.n	801bfca <memcmp+0x1a>
 801bfbe:	7803      	ldrb	r3, [r0, #0]
 801bfc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bfc4:	42a3      	cmp	r3, r4
 801bfc6:	d001      	beq.n	801bfcc <memcmp+0x1c>
 801bfc8:	1b18      	subs	r0, r3, r4
 801bfca:	bd10      	pop	{r4, pc}
 801bfcc:	3001      	adds	r0, #1
 801bfce:	e7f2      	b.n	801bfb6 <memcmp+0x6>

0801bfd0 <memmove>:
 801bfd0:	4288      	cmp	r0, r1
 801bfd2:	b510      	push	{r4, lr}
 801bfd4:	eb01 0402 	add.w	r4, r1, r2
 801bfd8:	d902      	bls.n	801bfe0 <memmove+0x10>
 801bfda:	4284      	cmp	r4, r0
 801bfdc:	4623      	mov	r3, r4
 801bfde:	d807      	bhi.n	801bff0 <memmove+0x20>
 801bfe0:	1e43      	subs	r3, r0, #1
 801bfe2:	42a1      	cmp	r1, r4
 801bfe4:	d008      	beq.n	801bff8 <memmove+0x28>
 801bfe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bfea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bfee:	e7f8      	b.n	801bfe2 <memmove+0x12>
 801bff0:	4402      	add	r2, r0
 801bff2:	4601      	mov	r1, r0
 801bff4:	428a      	cmp	r2, r1
 801bff6:	d100      	bne.n	801bffa <memmove+0x2a>
 801bff8:	bd10      	pop	{r4, pc}
 801bffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c002:	e7f7      	b.n	801bff4 <memmove+0x24>

0801c004 <memset>:
 801c004:	4402      	add	r2, r0
 801c006:	4603      	mov	r3, r0
 801c008:	4293      	cmp	r3, r2
 801c00a:	d100      	bne.n	801c00e <memset+0xa>
 801c00c:	4770      	bx	lr
 801c00e:	f803 1b01 	strb.w	r1, [r3], #1
 801c012:	e7f9      	b.n	801c008 <memset+0x4>

0801c014 <strncpy>:
 801c014:	3901      	subs	r1, #1
 801c016:	4603      	mov	r3, r0
 801c018:	b510      	push	{r4, lr}
 801c01a:	b132      	cbz	r2, 801c02a <strncpy+0x16>
 801c01c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c020:	3a01      	subs	r2, #1
 801c022:	f803 4b01 	strb.w	r4, [r3], #1
 801c026:	2c00      	cmp	r4, #0
 801c028:	d1f7      	bne.n	801c01a <strncpy+0x6>
 801c02a:	441a      	add	r2, r3
 801c02c:	2100      	movs	r1, #0
 801c02e:	4293      	cmp	r3, r2
 801c030:	d100      	bne.n	801c034 <strncpy+0x20>
 801c032:	bd10      	pop	{r4, pc}
 801c034:	f803 1b01 	strb.w	r1, [r3], #1
 801c038:	e7f9      	b.n	801c02e <strncpy+0x1a>
	...

0801c03c <_close_r>:
 801c03c:	b538      	push	{r3, r4, r5, lr}
 801c03e:	2300      	movs	r3, #0
 801c040:	4d05      	ldr	r5, [pc, #20]	; (801c058 <_close_r+0x1c>)
 801c042:	4604      	mov	r4, r0
 801c044:	4608      	mov	r0, r1
 801c046:	602b      	str	r3, [r5, #0]
 801c048:	f7e5 f809 	bl	800105e <_close>
 801c04c:	1c43      	adds	r3, r0, #1
 801c04e:	d102      	bne.n	801c056 <_close_r+0x1a>
 801c050:	682b      	ldr	r3, [r5, #0]
 801c052:	b103      	cbz	r3, 801c056 <_close_r+0x1a>
 801c054:	6023      	str	r3, [r4, #0]
 801c056:	bd38      	pop	{r3, r4, r5, pc}
 801c058:	2000b284 	.word	0x2000b284

0801c05c <_lseek_r>:
 801c05c:	b538      	push	{r3, r4, r5, lr}
 801c05e:	4604      	mov	r4, r0
 801c060:	4d06      	ldr	r5, [pc, #24]	; (801c07c <_lseek_r+0x20>)
 801c062:	4608      	mov	r0, r1
 801c064:	4611      	mov	r1, r2
 801c066:	2200      	movs	r2, #0
 801c068:	602a      	str	r2, [r5, #0]
 801c06a:	461a      	mov	r2, r3
 801c06c:	f7e5 f81e 	bl	80010ac <_lseek>
 801c070:	1c43      	adds	r3, r0, #1
 801c072:	d102      	bne.n	801c07a <_lseek_r+0x1e>
 801c074:	682b      	ldr	r3, [r5, #0]
 801c076:	b103      	cbz	r3, 801c07a <_lseek_r+0x1e>
 801c078:	6023      	str	r3, [r4, #0]
 801c07a:	bd38      	pop	{r3, r4, r5, pc}
 801c07c:	2000b284 	.word	0x2000b284

0801c080 <_read_r>:
 801c080:	b538      	push	{r3, r4, r5, lr}
 801c082:	4604      	mov	r4, r0
 801c084:	4d06      	ldr	r5, [pc, #24]	; (801c0a0 <_read_r+0x20>)
 801c086:	4608      	mov	r0, r1
 801c088:	4611      	mov	r1, r2
 801c08a:	2200      	movs	r2, #0
 801c08c:	602a      	str	r2, [r5, #0]
 801c08e:	461a      	mov	r2, r3
 801c090:	f7e4 ffac 	bl	8000fec <_read>
 801c094:	1c43      	adds	r3, r0, #1
 801c096:	d102      	bne.n	801c09e <_read_r+0x1e>
 801c098:	682b      	ldr	r3, [r5, #0]
 801c09a:	b103      	cbz	r3, 801c09e <_read_r+0x1e>
 801c09c:	6023      	str	r3, [r4, #0]
 801c09e:	bd38      	pop	{r3, r4, r5, pc}
 801c0a0:	2000b284 	.word	0x2000b284

0801c0a4 <_sbrk_r>:
 801c0a4:	b538      	push	{r3, r4, r5, lr}
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	4d05      	ldr	r5, [pc, #20]	; (801c0c0 <_sbrk_r+0x1c>)
 801c0aa:	4604      	mov	r4, r0
 801c0ac:	4608      	mov	r0, r1
 801c0ae:	602b      	str	r3, [r5, #0]
 801c0b0:	f7e5 f80a 	bl	80010c8 <_sbrk>
 801c0b4:	1c43      	adds	r3, r0, #1
 801c0b6:	d102      	bne.n	801c0be <_sbrk_r+0x1a>
 801c0b8:	682b      	ldr	r3, [r5, #0]
 801c0ba:	b103      	cbz	r3, 801c0be <_sbrk_r+0x1a>
 801c0bc:	6023      	str	r3, [r4, #0]
 801c0be:	bd38      	pop	{r3, r4, r5, pc}
 801c0c0:	2000b284 	.word	0x2000b284

0801c0c4 <_write_r>:
 801c0c4:	b538      	push	{r3, r4, r5, lr}
 801c0c6:	4604      	mov	r4, r0
 801c0c8:	4d06      	ldr	r5, [pc, #24]	; (801c0e4 <_write_r+0x20>)
 801c0ca:	4608      	mov	r0, r1
 801c0cc:	4611      	mov	r1, r2
 801c0ce:	2200      	movs	r2, #0
 801c0d0:	602a      	str	r2, [r5, #0]
 801c0d2:	461a      	mov	r2, r3
 801c0d4:	f7e4 ffa7 	bl	8001026 <_write>
 801c0d8:	1c43      	adds	r3, r0, #1
 801c0da:	d102      	bne.n	801c0e2 <_write_r+0x1e>
 801c0dc:	682b      	ldr	r3, [r5, #0]
 801c0de:	b103      	cbz	r3, 801c0e2 <_write_r+0x1e>
 801c0e0:	6023      	str	r3, [r4, #0]
 801c0e2:	bd38      	pop	{r3, r4, r5, pc}
 801c0e4:	2000b284 	.word	0x2000b284

0801c0e8 <__libc_init_array>:
 801c0e8:	b570      	push	{r4, r5, r6, lr}
 801c0ea:	4d0d      	ldr	r5, [pc, #52]	; (801c120 <__libc_init_array+0x38>)
 801c0ec:	2600      	movs	r6, #0
 801c0ee:	4c0d      	ldr	r4, [pc, #52]	; (801c124 <__libc_init_array+0x3c>)
 801c0f0:	1b64      	subs	r4, r4, r5
 801c0f2:	10a4      	asrs	r4, r4, #2
 801c0f4:	42a6      	cmp	r6, r4
 801c0f6:	d109      	bne.n	801c10c <__libc_init_array+0x24>
 801c0f8:	4d0b      	ldr	r5, [pc, #44]	; (801c128 <__libc_init_array+0x40>)
 801c0fa:	2600      	movs	r6, #0
 801c0fc:	4c0b      	ldr	r4, [pc, #44]	; (801c12c <__libc_init_array+0x44>)
 801c0fe:	f000 ff27 	bl	801cf50 <_init>
 801c102:	1b64      	subs	r4, r4, r5
 801c104:	10a4      	asrs	r4, r4, #2
 801c106:	42a6      	cmp	r6, r4
 801c108:	d105      	bne.n	801c116 <__libc_init_array+0x2e>
 801c10a:	bd70      	pop	{r4, r5, r6, pc}
 801c10c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c110:	3601      	adds	r6, #1
 801c112:	4798      	blx	r3
 801c114:	e7ee      	b.n	801c0f4 <__libc_init_array+0xc>
 801c116:	f855 3b04 	ldr.w	r3, [r5], #4
 801c11a:	3601      	adds	r6, #1
 801c11c:	4798      	blx	r3
 801c11e:	e7f2      	b.n	801c106 <__libc_init_array+0x1e>
 801c120:	08020150 	.word	0x08020150
 801c124:	08020150 	.word	0x08020150
 801c128:	08020150 	.word	0x08020150
 801c12c:	08020154 	.word	0x08020154

0801c130 <__retarget_lock_init_recursive>:
 801c130:	4770      	bx	lr

0801c132 <__retarget_lock_acquire_recursive>:
 801c132:	4770      	bx	lr

0801c134 <__retarget_lock_release_recursive>:
 801c134:	4770      	bx	lr

0801c136 <memcpy>:
 801c136:	440a      	add	r2, r1
 801c138:	1e43      	subs	r3, r0, #1
 801c13a:	4291      	cmp	r1, r2
 801c13c:	d100      	bne.n	801c140 <memcpy+0xa>
 801c13e:	4770      	bx	lr
 801c140:	b510      	push	{r4, lr}
 801c142:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c146:	4291      	cmp	r1, r2
 801c148:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c14c:	d1f9      	bne.n	801c142 <memcpy+0xc>
 801c14e:	bd10      	pop	{r4, pc}

0801c150 <__assert_func>:
 801c150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c152:	4614      	mov	r4, r2
 801c154:	461a      	mov	r2, r3
 801c156:	4b09      	ldr	r3, [pc, #36]	; (801c17c <__assert_func+0x2c>)
 801c158:	4605      	mov	r5, r0
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	68d8      	ldr	r0, [r3, #12]
 801c15e:	b14c      	cbz	r4, 801c174 <__assert_func+0x24>
 801c160:	4b07      	ldr	r3, [pc, #28]	; (801c180 <__assert_func+0x30>)
 801c162:	9100      	str	r1, [sp, #0]
 801c164:	4907      	ldr	r1, [pc, #28]	; (801c184 <__assert_func+0x34>)
 801c166:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c16a:	462b      	mov	r3, r5
 801c16c:	f000 fd34 	bl	801cbd8 <fiprintf>
 801c170:	f000 fde8 	bl	801cd44 <abort>
 801c174:	4b04      	ldr	r3, [pc, #16]	; (801c188 <__assert_func+0x38>)
 801c176:	461c      	mov	r4, r3
 801c178:	e7f3      	b.n	801c162 <__assert_func+0x12>
 801c17a:	bf00      	nop
 801c17c:	200000dc 	.word	0x200000dc
 801c180:	080200d9 	.word	0x080200d9
 801c184:	080200e6 	.word	0x080200e6
 801c188:	08020114 	.word	0x08020114

0801c18c <_free_r>:
 801c18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c18e:	2900      	cmp	r1, #0
 801c190:	d043      	beq.n	801c21a <_free_r+0x8e>
 801c192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c196:	1f0c      	subs	r4, r1, #4
 801c198:	9001      	str	r0, [sp, #4]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	bfb8      	it	lt
 801c19e:	18e4      	addlt	r4, r4, r3
 801c1a0:	f7ff fd4c 	bl	801bc3c <__malloc_lock>
 801c1a4:	4a1e      	ldr	r2, [pc, #120]	; (801c220 <_free_r+0x94>)
 801c1a6:	9801      	ldr	r0, [sp, #4]
 801c1a8:	6813      	ldr	r3, [r2, #0]
 801c1aa:	b933      	cbnz	r3, 801c1ba <_free_r+0x2e>
 801c1ac:	6063      	str	r3, [r4, #4]
 801c1ae:	6014      	str	r4, [r2, #0]
 801c1b0:	b003      	add	sp, #12
 801c1b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c1b6:	f7ff bd47 	b.w	801bc48 <__malloc_unlock>
 801c1ba:	42a3      	cmp	r3, r4
 801c1bc:	d908      	bls.n	801c1d0 <_free_r+0x44>
 801c1be:	6825      	ldr	r5, [r4, #0]
 801c1c0:	1961      	adds	r1, r4, r5
 801c1c2:	428b      	cmp	r3, r1
 801c1c4:	bf01      	itttt	eq
 801c1c6:	6819      	ldreq	r1, [r3, #0]
 801c1c8:	685b      	ldreq	r3, [r3, #4]
 801c1ca:	1949      	addeq	r1, r1, r5
 801c1cc:	6021      	streq	r1, [r4, #0]
 801c1ce:	e7ed      	b.n	801c1ac <_free_r+0x20>
 801c1d0:	461a      	mov	r2, r3
 801c1d2:	685b      	ldr	r3, [r3, #4]
 801c1d4:	b10b      	cbz	r3, 801c1da <_free_r+0x4e>
 801c1d6:	42a3      	cmp	r3, r4
 801c1d8:	d9fa      	bls.n	801c1d0 <_free_r+0x44>
 801c1da:	6811      	ldr	r1, [r2, #0]
 801c1dc:	1855      	adds	r5, r2, r1
 801c1de:	42a5      	cmp	r5, r4
 801c1e0:	d10b      	bne.n	801c1fa <_free_r+0x6e>
 801c1e2:	6824      	ldr	r4, [r4, #0]
 801c1e4:	4421      	add	r1, r4
 801c1e6:	1854      	adds	r4, r2, r1
 801c1e8:	6011      	str	r1, [r2, #0]
 801c1ea:	42a3      	cmp	r3, r4
 801c1ec:	d1e0      	bne.n	801c1b0 <_free_r+0x24>
 801c1ee:	681c      	ldr	r4, [r3, #0]
 801c1f0:	685b      	ldr	r3, [r3, #4]
 801c1f2:	440c      	add	r4, r1
 801c1f4:	6053      	str	r3, [r2, #4]
 801c1f6:	6014      	str	r4, [r2, #0]
 801c1f8:	e7da      	b.n	801c1b0 <_free_r+0x24>
 801c1fa:	d902      	bls.n	801c202 <_free_r+0x76>
 801c1fc:	230c      	movs	r3, #12
 801c1fe:	6003      	str	r3, [r0, #0]
 801c200:	e7d6      	b.n	801c1b0 <_free_r+0x24>
 801c202:	6825      	ldr	r5, [r4, #0]
 801c204:	1961      	adds	r1, r4, r5
 801c206:	428b      	cmp	r3, r1
 801c208:	bf02      	ittt	eq
 801c20a:	6819      	ldreq	r1, [r3, #0]
 801c20c:	685b      	ldreq	r3, [r3, #4]
 801c20e:	1949      	addeq	r1, r1, r5
 801c210:	6063      	str	r3, [r4, #4]
 801c212:	bf08      	it	eq
 801c214:	6021      	streq	r1, [r4, #0]
 801c216:	6054      	str	r4, [r2, #4]
 801c218:	e7ca      	b.n	801c1b0 <_free_r+0x24>
 801c21a:	b003      	add	sp, #12
 801c21c:	bd30      	pop	{r4, r5, pc}
 801c21e:	bf00      	nop
 801c220:	2000b140 	.word	0x2000b140

0801c224 <__ssputs_r>:
 801c224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c228:	461f      	mov	r7, r3
 801c22a:	688e      	ldr	r6, [r1, #8]
 801c22c:	4682      	mov	sl, r0
 801c22e:	460c      	mov	r4, r1
 801c230:	42be      	cmp	r6, r7
 801c232:	4690      	mov	r8, r2
 801c234:	680b      	ldr	r3, [r1, #0]
 801c236:	d82c      	bhi.n	801c292 <__ssputs_r+0x6e>
 801c238:	898a      	ldrh	r2, [r1, #12]
 801c23a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c23e:	d026      	beq.n	801c28e <__ssputs_r+0x6a>
 801c240:	6965      	ldr	r5, [r4, #20]
 801c242:	6909      	ldr	r1, [r1, #16]
 801c244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c248:	eba3 0901 	sub.w	r9, r3, r1
 801c24c:	1c7b      	adds	r3, r7, #1
 801c24e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c252:	444b      	add	r3, r9
 801c254:	106d      	asrs	r5, r5, #1
 801c256:	429d      	cmp	r5, r3
 801c258:	bf38      	it	cc
 801c25a:	461d      	movcc	r5, r3
 801c25c:	0553      	lsls	r3, r2, #21
 801c25e:	d527      	bpl.n	801c2b0 <__ssputs_r+0x8c>
 801c260:	4629      	mov	r1, r5
 801c262:	f7ff fc6b 	bl	801bb3c <_malloc_r>
 801c266:	4606      	mov	r6, r0
 801c268:	b360      	cbz	r0, 801c2c4 <__ssputs_r+0xa0>
 801c26a:	464a      	mov	r2, r9
 801c26c:	6921      	ldr	r1, [r4, #16]
 801c26e:	f7ff ff62 	bl	801c136 <memcpy>
 801c272:	89a3      	ldrh	r3, [r4, #12]
 801c274:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c27c:	81a3      	strh	r3, [r4, #12]
 801c27e:	6126      	str	r6, [r4, #16]
 801c280:	444e      	add	r6, r9
 801c282:	6165      	str	r5, [r4, #20]
 801c284:	eba5 0509 	sub.w	r5, r5, r9
 801c288:	6026      	str	r6, [r4, #0]
 801c28a:	463e      	mov	r6, r7
 801c28c:	60a5      	str	r5, [r4, #8]
 801c28e:	42be      	cmp	r6, r7
 801c290:	d900      	bls.n	801c294 <__ssputs_r+0x70>
 801c292:	463e      	mov	r6, r7
 801c294:	4632      	mov	r2, r6
 801c296:	4641      	mov	r1, r8
 801c298:	6820      	ldr	r0, [r4, #0]
 801c29a:	f7ff fe99 	bl	801bfd0 <memmove>
 801c29e:	68a3      	ldr	r3, [r4, #8]
 801c2a0:	2000      	movs	r0, #0
 801c2a2:	1b9b      	subs	r3, r3, r6
 801c2a4:	60a3      	str	r3, [r4, #8]
 801c2a6:	6823      	ldr	r3, [r4, #0]
 801c2a8:	4433      	add	r3, r6
 801c2aa:	6023      	str	r3, [r4, #0]
 801c2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2b0:	462a      	mov	r2, r5
 801c2b2:	f000 fd4e 	bl	801cd52 <_realloc_r>
 801c2b6:	4606      	mov	r6, r0
 801c2b8:	2800      	cmp	r0, #0
 801c2ba:	d1e0      	bne.n	801c27e <__ssputs_r+0x5a>
 801c2bc:	6921      	ldr	r1, [r4, #16]
 801c2be:	4650      	mov	r0, sl
 801c2c0:	f7ff ff64 	bl	801c18c <_free_r>
 801c2c4:	230c      	movs	r3, #12
 801c2c6:	f04f 30ff 	mov.w	r0, #4294967295
 801c2ca:	f8ca 3000 	str.w	r3, [sl]
 801c2ce:	89a3      	ldrh	r3, [r4, #12]
 801c2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2d4:	81a3      	strh	r3, [r4, #12]
 801c2d6:	e7e9      	b.n	801c2ac <__ssputs_r+0x88>

0801c2d8 <_svfiprintf_r>:
 801c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2dc:	4698      	mov	r8, r3
 801c2de:	898b      	ldrh	r3, [r1, #12]
 801c2e0:	b09d      	sub	sp, #116	; 0x74
 801c2e2:	4607      	mov	r7, r0
 801c2e4:	061b      	lsls	r3, r3, #24
 801c2e6:	460d      	mov	r5, r1
 801c2e8:	4614      	mov	r4, r2
 801c2ea:	d50e      	bpl.n	801c30a <_svfiprintf_r+0x32>
 801c2ec:	690b      	ldr	r3, [r1, #16]
 801c2ee:	b963      	cbnz	r3, 801c30a <_svfiprintf_r+0x32>
 801c2f0:	2140      	movs	r1, #64	; 0x40
 801c2f2:	f7ff fc23 	bl	801bb3c <_malloc_r>
 801c2f6:	6028      	str	r0, [r5, #0]
 801c2f8:	6128      	str	r0, [r5, #16]
 801c2fa:	b920      	cbnz	r0, 801c306 <_svfiprintf_r+0x2e>
 801c2fc:	230c      	movs	r3, #12
 801c2fe:	603b      	str	r3, [r7, #0]
 801c300:	f04f 30ff 	mov.w	r0, #4294967295
 801c304:	e0d0      	b.n	801c4a8 <_svfiprintf_r+0x1d0>
 801c306:	2340      	movs	r3, #64	; 0x40
 801c308:	616b      	str	r3, [r5, #20]
 801c30a:	2300      	movs	r3, #0
 801c30c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c310:	f04f 0901 	mov.w	r9, #1
 801c314:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c4c0 <_svfiprintf_r+0x1e8>
 801c318:	9309      	str	r3, [sp, #36]	; 0x24
 801c31a:	2320      	movs	r3, #32
 801c31c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c320:	2330      	movs	r3, #48	; 0x30
 801c322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c326:	4623      	mov	r3, r4
 801c328:	469a      	mov	sl, r3
 801c32a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c32e:	b10a      	cbz	r2, 801c334 <_svfiprintf_r+0x5c>
 801c330:	2a25      	cmp	r2, #37	; 0x25
 801c332:	d1f9      	bne.n	801c328 <_svfiprintf_r+0x50>
 801c334:	ebba 0b04 	subs.w	fp, sl, r4
 801c338:	d00b      	beq.n	801c352 <_svfiprintf_r+0x7a>
 801c33a:	465b      	mov	r3, fp
 801c33c:	4622      	mov	r2, r4
 801c33e:	4629      	mov	r1, r5
 801c340:	4638      	mov	r0, r7
 801c342:	f7ff ff6f 	bl	801c224 <__ssputs_r>
 801c346:	3001      	adds	r0, #1
 801c348:	f000 80a9 	beq.w	801c49e <_svfiprintf_r+0x1c6>
 801c34c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c34e:	445a      	add	r2, fp
 801c350:	9209      	str	r2, [sp, #36]	; 0x24
 801c352:	f89a 3000 	ldrb.w	r3, [sl]
 801c356:	2b00      	cmp	r3, #0
 801c358:	f000 80a1 	beq.w	801c49e <_svfiprintf_r+0x1c6>
 801c35c:	2300      	movs	r3, #0
 801c35e:	f04f 32ff 	mov.w	r2, #4294967295
 801c362:	f10a 0a01 	add.w	sl, sl, #1
 801c366:	9304      	str	r3, [sp, #16]
 801c368:	9307      	str	r3, [sp, #28]
 801c36a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c36e:	931a      	str	r3, [sp, #104]	; 0x68
 801c370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c374:	4654      	mov	r4, sl
 801c376:	2205      	movs	r2, #5
 801c378:	4851      	ldr	r0, [pc, #324]	; (801c4c0 <_svfiprintf_r+0x1e8>)
 801c37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c37e:	f000 fcd3 	bl	801cd28 <memchr>
 801c382:	9a04      	ldr	r2, [sp, #16]
 801c384:	b9d8      	cbnz	r0, 801c3be <_svfiprintf_r+0xe6>
 801c386:	06d0      	lsls	r0, r2, #27
 801c388:	bf44      	itt	mi
 801c38a:	2320      	movmi	r3, #32
 801c38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c390:	0711      	lsls	r1, r2, #28
 801c392:	bf44      	itt	mi
 801c394:	232b      	movmi	r3, #43	; 0x2b
 801c396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c39a:	f89a 3000 	ldrb.w	r3, [sl]
 801c39e:	2b2a      	cmp	r3, #42	; 0x2a
 801c3a0:	d015      	beq.n	801c3ce <_svfiprintf_r+0xf6>
 801c3a2:	9a07      	ldr	r2, [sp, #28]
 801c3a4:	4654      	mov	r4, sl
 801c3a6:	2000      	movs	r0, #0
 801c3a8:	f04f 0c0a 	mov.w	ip, #10
 801c3ac:	4621      	mov	r1, r4
 801c3ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c3b2:	3b30      	subs	r3, #48	; 0x30
 801c3b4:	2b09      	cmp	r3, #9
 801c3b6:	d94d      	bls.n	801c454 <_svfiprintf_r+0x17c>
 801c3b8:	b1b0      	cbz	r0, 801c3e8 <_svfiprintf_r+0x110>
 801c3ba:	9207      	str	r2, [sp, #28]
 801c3bc:	e014      	b.n	801c3e8 <_svfiprintf_r+0x110>
 801c3be:	eba0 0308 	sub.w	r3, r0, r8
 801c3c2:	46a2      	mov	sl, r4
 801c3c4:	fa09 f303 	lsl.w	r3, r9, r3
 801c3c8:	4313      	orrs	r3, r2
 801c3ca:	9304      	str	r3, [sp, #16]
 801c3cc:	e7d2      	b.n	801c374 <_svfiprintf_r+0x9c>
 801c3ce:	9b03      	ldr	r3, [sp, #12]
 801c3d0:	1d19      	adds	r1, r3, #4
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	9103      	str	r1, [sp, #12]
 801c3d8:	bfbb      	ittet	lt
 801c3da:	425b      	neglt	r3, r3
 801c3dc:	f042 0202 	orrlt.w	r2, r2, #2
 801c3e0:	9307      	strge	r3, [sp, #28]
 801c3e2:	9307      	strlt	r3, [sp, #28]
 801c3e4:	bfb8      	it	lt
 801c3e6:	9204      	strlt	r2, [sp, #16]
 801c3e8:	7823      	ldrb	r3, [r4, #0]
 801c3ea:	2b2e      	cmp	r3, #46	; 0x2e
 801c3ec:	d10c      	bne.n	801c408 <_svfiprintf_r+0x130>
 801c3ee:	7863      	ldrb	r3, [r4, #1]
 801c3f0:	2b2a      	cmp	r3, #42	; 0x2a
 801c3f2:	d134      	bne.n	801c45e <_svfiprintf_r+0x186>
 801c3f4:	9b03      	ldr	r3, [sp, #12]
 801c3f6:	3402      	adds	r4, #2
 801c3f8:	1d1a      	adds	r2, r3, #4
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	9203      	str	r2, [sp, #12]
 801c400:	bfb8      	it	lt
 801c402:	f04f 33ff 	movlt.w	r3, #4294967295
 801c406:	9305      	str	r3, [sp, #20]
 801c408:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801c4d0 <_svfiprintf_r+0x1f8>
 801c40c:	2203      	movs	r2, #3
 801c40e:	7821      	ldrb	r1, [r4, #0]
 801c410:	4650      	mov	r0, sl
 801c412:	f000 fc89 	bl	801cd28 <memchr>
 801c416:	b138      	cbz	r0, 801c428 <_svfiprintf_r+0x150>
 801c418:	eba0 000a 	sub.w	r0, r0, sl
 801c41c:	2240      	movs	r2, #64	; 0x40
 801c41e:	9b04      	ldr	r3, [sp, #16]
 801c420:	3401      	adds	r4, #1
 801c422:	4082      	lsls	r2, r0
 801c424:	4313      	orrs	r3, r2
 801c426:	9304      	str	r3, [sp, #16]
 801c428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c42c:	2206      	movs	r2, #6
 801c42e:	4825      	ldr	r0, [pc, #148]	; (801c4c4 <_svfiprintf_r+0x1ec>)
 801c430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c434:	f000 fc78 	bl	801cd28 <memchr>
 801c438:	2800      	cmp	r0, #0
 801c43a:	d038      	beq.n	801c4ae <_svfiprintf_r+0x1d6>
 801c43c:	4b22      	ldr	r3, [pc, #136]	; (801c4c8 <_svfiprintf_r+0x1f0>)
 801c43e:	bb1b      	cbnz	r3, 801c488 <_svfiprintf_r+0x1b0>
 801c440:	9b03      	ldr	r3, [sp, #12]
 801c442:	3307      	adds	r3, #7
 801c444:	f023 0307 	bic.w	r3, r3, #7
 801c448:	3308      	adds	r3, #8
 801c44a:	9303      	str	r3, [sp, #12]
 801c44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c44e:	4433      	add	r3, r6
 801c450:	9309      	str	r3, [sp, #36]	; 0x24
 801c452:	e768      	b.n	801c326 <_svfiprintf_r+0x4e>
 801c454:	fb0c 3202 	mla	r2, ip, r2, r3
 801c458:	460c      	mov	r4, r1
 801c45a:	2001      	movs	r0, #1
 801c45c:	e7a6      	b.n	801c3ac <_svfiprintf_r+0xd4>
 801c45e:	2300      	movs	r3, #0
 801c460:	3401      	adds	r4, #1
 801c462:	f04f 0c0a 	mov.w	ip, #10
 801c466:	4619      	mov	r1, r3
 801c468:	9305      	str	r3, [sp, #20]
 801c46a:	4620      	mov	r0, r4
 801c46c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c470:	3a30      	subs	r2, #48	; 0x30
 801c472:	2a09      	cmp	r2, #9
 801c474:	d903      	bls.n	801c47e <_svfiprintf_r+0x1a6>
 801c476:	2b00      	cmp	r3, #0
 801c478:	d0c6      	beq.n	801c408 <_svfiprintf_r+0x130>
 801c47a:	9105      	str	r1, [sp, #20]
 801c47c:	e7c4      	b.n	801c408 <_svfiprintf_r+0x130>
 801c47e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c482:	4604      	mov	r4, r0
 801c484:	2301      	movs	r3, #1
 801c486:	e7f0      	b.n	801c46a <_svfiprintf_r+0x192>
 801c488:	ab03      	add	r3, sp, #12
 801c48a:	462a      	mov	r2, r5
 801c48c:	a904      	add	r1, sp, #16
 801c48e:	4638      	mov	r0, r7
 801c490:	9300      	str	r3, [sp, #0]
 801c492:	4b0e      	ldr	r3, [pc, #56]	; (801c4cc <_svfiprintf_r+0x1f4>)
 801c494:	f3af 8000 	nop.w
 801c498:	1c42      	adds	r2, r0, #1
 801c49a:	4606      	mov	r6, r0
 801c49c:	d1d6      	bne.n	801c44c <_svfiprintf_r+0x174>
 801c49e:	89ab      	ldrh	r3, [r5, #12]
 801c4a0:	065b      	lsls	r3, r3, #25
 801c4a2:	f53f af2d 	bmi.w	801c300 <_svfiprintf_r+0x28>
 801c4a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c4a8:	b01d      	add	sp, #116	; 0x74
 801c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4ae:	ab03      	add	r3, sp, #12
 801c4b0:	462a      	mov	r2, r5
 801c4b2:	a904      	add	r1, sp, #16
 801c4b4:	4638      	mov	r0, r7
 801c4b6:	9300      	str	r3, [sp, #0]
 801c4b8:	4b04      	ldr	r3, [pc, #16]	; (801c4cc <_svfiprintf_r+0x1f4>)
 801c4ba:	f000 f9c1 	bl	801c840 <_printf_i>
 801c4be:	e7eb      	b.n	801c498 <_svfiprintf_r+0x1c0>
 801c4c0:	08020115 	.word	0x08020115
 801c4c4:	0802011f 	.word	0x0802011f
 801c4c8:	00000000 	.word	0x00000000
 801c4cc:	0801c225 	.word	0x0801c225
 801c4d0:	0802011b 	.word	0x0802011b

0801c4d4 <__sfputc_r>:
 801c4d4:	6893      	ldr	r3, [r2, #8]
 801c4d6:	3b01      	subs	r3, #1
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	6093      	str	r3, [r2, #8]
 801c4dc:	b410      	push	{r4}
 801c4de:	da08      	bge.n	801c4f2 <__sfputc_r+0x1e>
 801c4e0:	6994      	ldr	r4, [r2, #24]
 801c4e2:	42a3      	cmp	r3, r4
 801c4e4:	db01      	blt.n	801c4ea <__sfputc_r+0x16>
 801c4e6:	290a      	cmp	r1, #10
 801c4e8:	d103      	bne.n	801c4f2 <__sfputc_r+0x1e>
 801c4ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4ee:	f000 bb85 	b.w	801cbfc <__swbuf_r>
 801c4f2:	6813      	ldr	r3, [r2, #0]
 801c4f4:	1c58      	adds	r0, r3, #1
 801c4f6:	6010      	str	r0, [r2, #0]
 801c4f8:	4608      	mov	r0, r1
 801c4fa:	7019      	strb	r1, [r3, #0]
 801c4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c500:	4770      	bx	lr

0801c502 <__sfputs_r>:
 801c502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c504:	4606      	mov	r6, r0
 801c506:	460f      	mov	r7, r1
 801c508:	4614      	mov	r4, r2
 801c50a:	18d5      	adds	r5, r2, r3
 801c50c:	42ac      	cmp	r4, r5
 801c50e:	d101      	bne.n	801c514 <__sfputs_r+0x12>
 801c510:	2000      	movs	r0, #0
 801c512:	e007      	b.n	801c524 <__sfputs_r+0x22>
 801c514:	463a      	mov	r2, r7
 801c516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c51a:	4630      	mov	r0, r6
 801c51c:	f7ff ffda 	bl	801c4d4 <__sfputc_r>
 801c520:	1c43      	adds	r3, r0, #1
 801c522:	d1f3      	bne.n	801c50c <__sfputs_r+0xa>
 801c524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c528 <_vfiprintf_r>:
 801c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c52c:	460d      	mov	r5, r1
 801c52e:	b09d      	sub	sp, #116	; 0x74
 801c530:	4614      	mov	r4, r2
 801c532:	4698      	mov	r8, r3
 801c534:	4606      	mov	r6, r0
 801c536:	b118      	cbz	r0, 801c540 <_vfiprintf_r+0x18>
 801c538:	6a03      	ldr	r3, [r0, #32]
 801c53a:	b90b      	cbnz	r3, 801c540 <_vfiprintf_r+0x18>
 801c53c:	f7ff fc54 	bl	801bde8 <__sinit>
 801c540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c542:	07d9      	lsls	r1, r3, #31
 801c544:	d405      	bmi.n	801c552 <_vfiprintf_r+0x2a>
 801c546:	89ab      	ldrh	r3, [r5, #12]
 801c548:	059a      	lsls	r2, r3, #22
 801c54a:	d402      	bmi.n	801c552 <_vfiprintf_r+0x2a>
 801c54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c54e:	f7ff fdf0 	bl	801c132 <__retarget_lock_acquire_recursive>
 801c552:	89ab      	ldrh	r3, [r5, #12]
 801c554:	071b      	lsls	r3, r3, #28
 801c556:	d501      	bpl.n	801c55c <_vfiprintf_r+0x34>
 801c558:	692b      	ldr	r3, [r5, #16]
 801c55a:	b99b      	cbnz	r3, 801c584 <_vfiprintf_r+0x5c>
 801c55c:	4629      	mov	r1, r5
 801c55e:	4630      	mov	r0, r6
 801c560:	f000 fb8a 	bl	801cc78 <__swsetup_r>
 801c564:	b170      	cbz	r0, 801c584 <_vfiprintf_r+0x5c>
 801c566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c568:	07dc      	lsls	r4, r3, #31
 801c56a:	d504      	bpl.n	801c576 <_vfiprintf_r+0x4e>
 801c56c:	f04f 30ff 	mov.w	r0, #4294967295
 801c570:	b01d      	add	sp, #116	; 0x74
 801c572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c576:	89ab      	ldrh	r3, [r5, #12]
 801c578:	0598      	lsls	r0, r3, #22
 801c57a:	d4f7      	bmi.n	801c56c <_vfiprintf_r+0x44>
 801c57c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c57e:	f7ff fdd9 	bl	801c134 <__retarget_lock_release_recursive>
 801c582:	e7f3      	b.n	801c56c <_vfiprintf_r+0x44>
 801c584:	2300      	movs	r3, #0
 801c586:	f8cd 800c 	str.w	r8, [sp, #12]
 801c58a:	f04f 0901 	mov.w	r9, #1
 801c58e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801c748 <_vfiprintf_r+0x220>
 801c592:	9309      	str	r3, [sp, #36]	; 0x24
 801c594:	2320      	movs	r3, #32
 801c596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c59a:	2330      	movs	r3, #48	; 0x30
 801c59c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c5a0:	4623      	mov	r3, r4
 801c5a2:	469a      	mov	sl, r3
 801c5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c5a8:	b10a      	cbz	r2, 801c5ae <_vfiprintf_r+0x86>
 801c5aa:	2a25      	cmp	r2, #37	; 0x25
 801c5ac:	d1f9      	bne.n	801c5a2 <_vfiprintf_r+0x7a>
 801c5ae:	ebba 0b04 	subs.w	fp, sl, r4
 801c5b2:	d00b      	beq.n	801c5cc <_vfiprintf_r+0xa4>
 801c5b4:	465b      	mov	r3, fp
 801c5b6:	4622      	mov	r2, r4
 801c5b8:	4629      	mov	r1, r5
 801c5ba:	4630      	mov	r0, r6
 801c5bc:	f7ff ffa1 	bl	801c502 <__sfputs_r>
 801c5c0:	3001      	adds	r0, #1
 801c5c2:	f000 80a9 	beq.w	801c718 <_vfiprintf_r+0x1f0>
 801c5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c5c8:	445a      	add	r2, fp
 801c5ca:	9209      	str	r2, [sp, #36]	; 0x24
 801c5cc:	f89a 3000 	ldrb.w	r3, [sl]
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	f000 80a1 	beq.w	801c718 <_vfiprintf_r+0x1f0>
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	f04f 32ff 	mov.w	r2, #4294967295
 801c5dc:	f10a 0a01 	add.w	sl, sl, #1
 801c5e0:	9304      	str	r3, [sp, #16]
 801c5e2:	9307      	str	r3, [sp, #28]
 801c5e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c5e8:	931a      	str	r3, [sp, #104]	; 0x68
 801c5ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c5ee:	4654      	mov	r4, sl
 801c5f0:	2205      	movs	r2, #5
 801c5f2:	4855      	ldr	r0, [pc, #340]	; (801c748 <_vfiprintf_r+0x220>)
 801c5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5f8:	f000 fb96 	bl	801cd28 <memchr>
 801c5fc:	9a04      	ldr	r2, [sp, #16]
 801c5fe:	b9d8      	cbnz	r0, 801c638 <_vfiprintf_r+0x110>
 801c600:	06d1      	lsls	r1, r2, #27
 801c602:	bf44      	itt	mi
 801c604:	2320      	movmi	r3, #32
 801c606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c60a:	0713      	lsls	r3, r2, #28
 801c60c:	bf44      	itt	mi
 801c60e:	232b      	movmi	r3, #43	; 0x2b
 801c610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c614:	f89a 3000 	ldrb.w	r3, [sl]
 801c618:	2b2a      	cmp	r3, #42	; 0x2a
 801c61a:	d015      	beq.n	801c648 <_vfiprintf_r+0x120>
 801c61c:	9a07      	ldr	r2, [sp, #28]
 801c61e:	4654      	mov	r4, sl
 801c620:	2000      	movs	r0, #0
 801c622:	f04f 0c0a 	mov.w	ip, #10
 801c626:	4621      	mov	r1, r4
 801c628:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c62c:	3b30      	subs	r3, #48	; 0x30
 801c62e:	2b09      	cmp	r3, #9
 801c630:	d94d      	bls.n	801c6ce <_vfiprintf_r+0x1a6>
 801c632:	b1b0      	cbz	r0, 801c662 <_vfiprintf_r+0x13a>
 801c634:	9207      	str	r2, [sp, #28]
 801c636:	e014      	b.n	801c662 <_vfiprintf_r+0x13a>
 801c638:	eba0 0308 	sub.w	r3, r0, r8
 801c63c:	46a2      	mov	sl, r4
 801c63e:	fa09 f303 	lsl.w	r3, r9, r3
 801c642:	4313      	orrs	r3, r2
 801c644:	9304      	str	r3, [sp, #16]
 801c646:	e7d2      	b.n	801c5ee <_vfiprintf_r+0xc6>
 801c648:	9b03      	ldr	r3, [sp, #12]
 801c64a:	1d19      	adds	r1, r3, #4
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	9103      	str	r1, [sp, #12]
 801c652:	bfbb      	ittet	lt
 801c654:	425b      	neglt	r3, r3
 801c656:	f042 0202 	orrlt.w	r2, r2, #2
 801c65a:	9307      	strge	r3, [sp, #28]
 801c65c:	9307      	strlt	r3, [sp, #28]
 801c65e:	bfb8      	it	lt
 801c660:	9204      	strlt	r2, [sp, #16]
 801c662:	7823      	ldrb	r3, [r4, #0]
 801c664:	2b2e      	cmp	r3, #46	; 0x2e
 801c666:	d10c      	bne.n	801c682 <_vfiprintf_r+0x15a>
 801c668:	7863      	ldrb	r3, [r4, #1]
 801c66a:	2b2a      	cmp	r3, #42	; 0x2a
 801c66c:	d134      	bne.n	801c6d8 <_vfiprintf_r+0x1b0>
 801c66e:	9b03      	ldr	r3, [sp, #12]
 801c670:	3402      	adds	r4, #2
 801c672:	1d1a      	adds	r2, r3, #4
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	2b00      	cmp	r3, #0
 801c678:	9203      	str	r2, [sp, #12]
 801c67a:	bfb8      	it	lt
 801c67c:	f04f 33ff 	movlt.w	r3, #4294967295
 801c680:	9305      	str	r3, [sp, #20]
 801c682:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c758 <_vfiprintf_r+0x230>
 801c686:	2203      	movs	r2, #3
 801c688:	7821      	ldrb	r1, [r4, #0]
 801c68a:	4650      	mov	r0, sl
 801c68c:	f000 fb4c 	bl	801cd28 <memchr>
 801c690:	b138      	cbz	r0, 801c6a2 <_vfiprintf_r+0x17a>
 801c692:	eba0 000a 	sub.w	r0, r0, sl
 801c696:	2240      	movs	r2, #64	; 0x40
 801c698:	9b04      	ldr	r3, [sp, #16]
 801c69a:	3401      	adds	r4, #1
 801c69c:	4082      	lsls	r2, r0
 801c69e:	4313      	orrs	r3, r2
 801c6a0:	9304      	str	r3, [sp, #16]
 801c6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c6a6:	2206      	movs	r2, #6
 801c6a8:	4828      	ldr	r0, [pc, #160]	; (801c74c <_vfiprintf_r+0x224>)
 801c6aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c6ae:	f000 fb3b 	bl	801cd28 <memchr>
 801c6b2:	2800      	cmp	r0, #0
 801c6b4:	d03f      	beq.n	801c736 <_vfiprintf_r+0x20e>
 801c6b6:	4b26      	ldr	r3, [pc, #152]	; (801c750 <_vfiprintf_r+0x228>)
 801c6b8:	bb1b      	cbnz	r3, 801c702 <_vfiprintf_r+0x1da>
 801c6ba:	9b03      	ldr	r3, [sp, #12]
 801c6bc:	3307      	adds	r3, #7
 801c6be:	f023 0307 	bic.w	r3, r3, #7
 801c6c2:	3308      	adds	r3, #8
 801c6c4:	9303      	str	r3, [sp, #12]
 801c6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6c8:	443b      	add	r3, r7
 801c6ca:	9309      	str	r3, [sp, #36]	; 0x24
 801c6cc:	e768      	b.n	801c5a0 <_vfiprintf_r+0x78>
 801c6ce:	fb0c 3202 	mla	r2, ip, r2, r3
 801c6d2:	460c      	mov	r4, r1
 801c6d4:	2001      	movs	r0, #1
 801c6d6:	e7a6      	b.n	801c626 <_vfiprintf_r+0xfe>
 801c6d8:	2300      	movs	r3, #0
 801c6da:	3401      	adds	r4, #1
 801c6dc:	f04f 0c0a 	mov.w	ip, #10
 801c6e0:	4619      	mov	r1, r3
 801c6e2:	9305      	str	r3, [sp, #20]
 801c6e4:	4620      	mov	r0, r4
 801c6e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c6ea:	3a30      	subs	r2, #48	; 0x30
 801c6ec:	2a09      	cmp	r2, #9
 801c6ee:	d903      	bls.n	801c6f8 <_vfiprintf_r+0x1d0>
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d0c6      	beq.n	801c682 <_vfiprintf_r+0x15a>
 801c6f4:	9105      	str	r1, [sp, #20]
 801c6f6:	e7c4      	b.n	801c682 <_vfiprintf_r+0x15a>
 801c6f8:	fb0c 2101 	mla	r1, ip, r1, r2
 801c6fc:	4604      	mov	r4, r0
 801c6fe:	2301      	movs	r3, #1
 801c700:	e7f0      	b.n	801c6e4 <_vfiprintf_r+0x1bc>
 801c702:	ab03      	add	r3, sp, #12
 801c704:	462a      	mov	r2, r5
 801c706:	a904      	add	r1, sp, #16
 801c708:	4630      	mov	r0, r6
 801c70a:	9300      	str	r3, [sp, #0]
 801c70c:	4b11      	ldr	r3, [pc, #68]	; (801c754 <_vfiprintf_r+0x22c>)
 801c70e:	f3af 8000 	nop.w
 801c712:	4607      	mov	r7, r0
 801c714:	1c78      	adds	r0, r7, #1
 801c716:	d1d6      	bne.n	801c6c6 <_vfiprintf_r+0x19e>
 801c718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c71a:	07d9      	lsls	r1, r3, #31
 801c71c:	d405      	bmi.n	801c72a <_vfiprintf_r+0x202>
 801c71e:	89ab      	ldrh	r3, [r5, #12]
 801c720:	059a      	lsls	r2, r3, #22
 801c722:	d402      	bmi.n	801c72a <_vfiprintf_r+0x202>
 801c724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c726:	f7ff fd05 	bl	801c134 <__retarget_lock_release_recursive>
 801c72a:	89ab      	ldrh	r3, [r5, #12]
 801c72c:	065b      	lsls	r3, r3, #25
 801c72e:	f53f af1d 	bmi.w	801c56c <_vfiprintf_r+0x44>
 801c732:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c734:	e71c      	b.n	801c570 <_vfiprintf_r+0x48>
 801c736:	ab03      	add	r3, sp, #12
 801c738:	462a      	mov	r2, r5
 801c73a:	a904      	add	r1, sp, #16
 801c73c:	4630      	mov	r0, r6
 801c73e:	9300      	str	r3, [sp, #0]
 801c740:	4b04      	ldr	r3, [pc, #16]	; (801c754 <_vfiprintf_r+0x22c>)
 801c742:	f000 f87d 	bl	801c840 <_printf_i>
 801c746:	e7e4      	b.n	801c712 <_vfiprintf_r+0x1ea>
 801c748:	08020115 	.word	0x08020115
 801c74c:	0802011f 	.word	0x0802011f
 801c750:	00000000 	.word	0x00000000
 801c754:	0801c503 	.word	0x0801c503
 801c758:	0802011b 	.word	0x0802011b

0801c75c <_printf_common>:
 801c75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c760:	4616      	mov	r6, r2
 801c762:	4699      	mov	r9, r3
 801c764:	688a      	ldr	r2, [r1, #8]
 801c766:	4607      	mov	r7, r0
 801c768:	690b      	ldr	r3, [r1, #16]
 801c76a:	460c      	mov	r4, r1
 801c76c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c770:	4293      	cmp	r3, r2
 801c772:	bfb8      	it	lt
 801c774:	4613      	movlt	r3, r2
 801c776:	6033      	str	r3, [r6, #0]
 801c778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c77c:	b10a      	cbz	r2, 801c782 <_printf_common+0x26>
 801c77e:	3301      	adds	r3, #1
 801c780:	6033      	str	r3, [r6, #0]
 801c782:	6823      	ldr	r3, [r4, #0]
 801c784:	0699      	lsls	r1, r3, #26
 801c786:	bf42      	ittt	mi
 801c788:	6833      	ldrmi	r3, [r6, #0]
 801c78a:	3302      	addmi	r3, #2
 801c78c:	6033      	strmi	r3, [r6, #0]
 801c78e:	6825      	ldr	r5, [r4, #0]
 801c790:	f015 0506 	ands.w	r5, r5, #6
 801c794:	d106      	bne.n	801c7a4 <_printf_common+0x48>
 801c796:	f104 0a19 	add.w	sl, r4, #25
 801c79a:	68e3      	ldr	r3, [r4, #12]
 801c79c:	6832      	ldr	r2, [r6, #0]
 801c79e:	1a9b      	subs	r3, r3, r2
 801c7a0:	42ab      	cmp	r3, r5
 801c7a2:	dc2b      	bgt.n	801c7fc <_printf_common+0xa0>
 801c7a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c7a8:	1e13      	subs	r3, r2, #0
 801c7aa:	6822      	ldr	r2, [r4, #0]
 801c7ac:	bf18      	it	ne
 801c7ae:	2301      	movne	r3, #1
 801c7b0:	0692      	lsls	r2, r2, #26
 801c7b2:	d430      	bmi.n	801c816 <_printf_common+0xba>
 801c7b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c7b8:	4649      	mov	r1, r9
 801c7ba:	4638      	mov	r0, r7
 801c7bc:	47c0      	blx	r8
 801c7be:	3001      	adds	r0, #1
 801c7c0:	d023      	beq.n	801c80a <_printf_common+0xae>
 801c7c2:	6823      	ldr	r3, [r4, #0]
 801c7c4:	341a      	adds	r4, #26
 801c7c6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801c7ca:	f003 0306 	and.w	r3, r3, #6
 801c7ce:	2b04      	cmp	r3, #4
 801c7d0:	bf0a      	itet	eq
 801c7d2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801c7d6:	2500      	movne	r5, #0
 801c7d8:	6833      	ldreq	r3, [r6, #0]
 801c7da:	f04f 0600 	mov.w	r6, #0
 801c7de:	bf08      	it	eq
 801c7e0:	1aed      	subeq	r5, r5, r3
 801c7e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801c7e6:	bf08      	it	eq
 801c7e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c7ec:	4293      	cmp	r3, r2
 801c7ee:	bfc4      	itt	gt
 801c7f0:	1a9b      	subgt	r3, r3, r2
 801c7f2:	18ed      	addgt	r5, r5, r3
 801c7f4:	42b5      	cmp	r5, r6
 801c7f6:	d11a      	bne.n	801c82e <_printf_common+0xd2>
 801c7f8:	2000      	movs	r0, #0
 801c7fa:	e008      	b.n	801c80e <_printf_common+0xb2>
 801c7fc:	2301      	movs	r3, #1
 801c7fe:	4652      	mov	r2, sl
 801c800:	4649      	mov	r1, r9
 801c802:	4638      	mov	r0, r7
 801c804:	47c0      	blx	r8
 801c806:	3001      	adds	r0, #1
 801c808:	d103      	bne.n	801c812 <_printf_common+0xb6>
 801c80a:	f04f 30ff 	mov.w	r0, #4294967295
 801c80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c812:	3501      	adds	r5, #1
 801c814:	e7c1      	b.n	801c79a <_printf_common+0x3e>
 801c816:	18e1      	adds	r1, r4, r3
 801c818:	1c5a      	adds	r2, r3, #1
 801c81a:	2030      	movs	r0, #48	; 0x30
 801c81c:	3302      	adds	r3, #2
 801c81e:	4422      	add	r2, r4
 801c820:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c82c:	e7c2      	b.n	801c7b4 <_printf_common+0x58>
 801c82e:	2301      	movs	r3, #1
 801c830:	4622      	mov	r2, r4
 801c832:	4649      	mov	r1, r9
 801c834:	4638      	mov	r0, r7
 801c836:	47c0      	blx	r8
 801c838:	3001      	adds	r0, #1
 801c83a:	d0e6      	beq.n	801c80a <_printf_common+0xae>
 801c83c:	3601      	adds	r6, #1
 801c83e:	e7d9      	b.n	801c7f4 <_printf_common+0x98>

0801c840 <_printf_i>:
 801c840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c844:	7e0f      	ldrb	r7, [r1, #24]
 801c846:	4691      	mov	r9, r2
 801c848:	4680      	mov	r8, r0
 801c84a:	460c      	mov	r4, r1
 801c84c:	2f78      	cmp	r7, #120	; 0x78
 801c84e:	469a      	mov	sl, r3
 801c850:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c852:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c856:	d807      	bhi.n	801c868 <_printf_i+0x28>
 801c858:	2f62      	cmp	r7, #98	; 0x62
 801c85a:	d80a      	bhi.n	801c872 <_printf_i+0x32>
 801c85c:	2f00      	cmp	r7, #0
 801c85e:	f000 80d3 	beq.w	801ca08 <_printf_i+0x1c8>
 801c862:	2f58      	cmp	r7, #88	; 0x58
 801c864:	f000 80bf 	beq.w	801c9e6 <_printf_i+0x1a6>
 801c868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c86c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c870:	e03a      	b.n	801c8e8 <_printf_i+0xa8>
 801c872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c876:	2b15      	cmp	r3, #21
 801c878:	d8f6      	bhi.n	801c868 <_printf_i+0x28>
 801c87a:	a101      	add	r1, pc, #4	; (adr r1, 801c880 <_printf_i+0x40>)
 801c87c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c880:	0801c8d9 	.word	0x0801c8d9
 801c884:	0801c8ed 	.word	0x0801c8ed
 801c888:	0801c869 	.word	0x0801c869
 801c88c:	0801c869 	.word	0x0801c869
 801c890:	0801c869 	.word	0x0801c869
 801c894:	0801c869 	.word	0x0801c869
 801c898:	0801c8ed 	.word	0x0801c8ed
 801c89c:	0801c869 	.word	0x0801c869
 801c8a0:	0801c869 	.word	0x0801c869
 801c8a4:	0801c869 	.word	0x0801c869
 801c8a8:	0801c869 	.word	0x0801c869
 801c8ac:	0801c9ef 	.word	0x0801c9ef
 801c8b0:	0801c919 	.word	0x0801c919
 801c8b4:	0801c9ab 	.word	0x0801c9ab
 801c8b8:	0801c869 	.word	0x0801c869
 801c8bc:	0801c869 	.word	0x0801c869
 801c8c0:	0801ca11 	.word	0x0801ca11
 801c8c4:	0801c869 	.word	0x0801c869
 801c8c8:	0801c919 	.word	0x0801c919
 801c8cc:	0801c869 	.word	0x0801c869
 801c8d0:	0801c869 	.word	0x0801c869
 801c8d4:	0801c9b3 	.word	0x0801c9b3
 801c8d8:	682b      	ldr	r3, [r5, #0]
 801c8da:	1d1a      	adds	r2, r3, #4
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	602a      	str	r2, [r5, #0]
 801c8e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c8e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c8e8:	2301      	movs	r3, #1
 801c8ea:	e09e      	b.n	801ca2a <_printf_i+0x1ea>
 801c8ec:	6820      	ldr	r0, [r4, #0]
 801c8ee:	682b      	ldr	r3, [r5, #0]
 801c8f0:	0607      	lsls	r7, r0, #24
 801c8f2:	f103 0104 	add.w	r1, r3, #4
 801c8f6:	6029      	str	r1, [r5, #0]
 801c8f8:	d501      	bpl.n	801c8fe <_printf_i+0xbe>
 801c8fa:	681e      	ldr	r6, [r3, #0]
 801c8fc:	e003      	b.n	801c906 <_printf_i+0xc6>
 801c8fe:	0646      	lsls	r6, r0, #25
 801c900:	d5fb      	bpl.n	801c8fa <_printf_i+0xba>
 801c902:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c906:	2e00      	cmp	r6, #0
 801c908:	da03      	bge.n	801c912 <_printf_i+0xd2>
 801c90a:	232d      	movs	r3, #45	; 0x2d
 801c90c:	4276      	negs	r6, r6
 801c90e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c912:	4859      	ldr	r0, [pc, #356]	; (801ca78 <_printf_i+0x238>)
 801c914:	230a      	movs	r3, #10
 801c916:	e012      	b.n	801c93e <_printf_i+0xfe>
 801c918:	682b      	ldr	r3, [r5, #0]
 801c91a:	6820      	ldr	r0, [r4, #0]
 801c91c:	1d19      	adds	r1, r3, #4
 801c91e:	6029      	str	r1, [r5, #0]
 801c920:	0605      	lsls	r5, r0, #24
 801c922:	d501      	bpl.n	801c928 <_printf_i+0xe8>
 801c924:	681e      	ldr	r6, [r3, #0]
 801c926:	e002      	b.n	801c92e <_printf_i+0xee>
 801c928:	0641      	lsls	r1, r0, #25
 801c92a:	d5fb      	bpl.n	801c924 <_printf_i+0xe4>
 801c92c:	881e      	ldrh	r6, [r3, #0]
 801c92e:	2f6f      	cmp	r7, #111	; 0x6f
 801c930:	4851      	ldr	r0, [pc, #324]	; (801ca78 <_printf_i+0x238>)
 801c932:	bf0c      	ite	eq
 801c934:	2308      	moveq	r3, #8
 801c936:	230a      	movne	r3, #10
 801c938:	2100      	movs	r1, #0
 801c93a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c93e:	6865      	ldr	r5, [r4, #4]
 801c940:	2d00      	cmp	r5, #0
 801c942:	60a5      	str	r5, [r4, #8]
 801c944:	bfa2      	ittt	ge
 801c946:	6821      	ldrge	r1, [r4, #0]
 801c948:	f021 0104 	bicge.w	r1, r1, #4
 801c94c:	6021      	strge	r1, [r4, #0]
 801c94e:	b90e      	cbnz	r6, 801c954 <_printf_i+0x114>
 801c950:	2d00      	cmp	r5, #0
 801c952:	d04a      	beq.n	801c9ea <_printf_i+0x1aa>
 801c954:	4615      	mov	r5, r2
 801c956:	fbb6 f1f3 	udiv	r1, r6, r3
 801c95a:	fb03 6711 	mls	r7, r3, r1, r6
 801c95e:	5dc7      	ldrb	r7, [r0, r7]
 801c960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c964:	4637      	mov	r7, r6
 801c966:	460e      	mov	r6, r1
 801c968:	42bb      	cmp	r3, r7
 801c96a:	d9f4      	bls.n	801c956 <_printf_i+0x116>
 801c96c:	2b08      	cmp	r3, #8
 801c96e:	d10b      	bne.n	801c988 <_printf_i+0x148>
 801c970:	6823      	ldr	r3, [r4, #0]
 801c972:	07de      	lsls	r6, r3, #31
 801c974:	d508      	bpl.n	801c988 <_printf_i+0x148>
 801c976:	6923      	ldr	r3, [r4, #16]
 801c978:	6861      	ldr	r1, [r4, #4]
 801c97a:	4299      	cmp	r1, r3
 801c97c:	bfde      	ittt	le
 801c97e:	2330      	movle	r3, #48	; 0x30
 801c980:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c984:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c988:	1b52      	subs	r2, r2, r5
 801c98a:	6122      	str	r2, [r4, #16]
 801c98c:	464b      	mov	r3, r9
 801c98e:	aa03      	add	r2, sp, #12
 801c990:	4621      	mov	r1, r4
 801c992:	4640      	mov	r0, r8
 801c994:	f8cd a000 	str.w	sl, [sp]
 801c998:	f7ff fee0 	bl	801c75c <_printf_common>
 801c99c:	3001      	adds	r0, #1
 801c99e:	d149      	bne.n	801ca34 <_printf_i+0x1f4>
 801c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c9a4:	b004      	add	sp, #16
 801c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c9aa:	6823      	ldr	r3, [r4, #0]
 801c9ac:	f043 0320 	orr.w	r3, r3, #32
 801c9b0:	6023      	str	r3, [r4, #0]
 801c9b2:	2778      	movs	r7, #120	; 0x78
 801c9b4:	4831      	ldr	r0, [pc, #196]	; (801ca7c <_printf_i+0x23c>)
 801c9b6:	6823      	ldr	r3, [r4, #0]
 801c9b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c9bc:	061f      	lsls	r7, r3, #24
 801c9be:	6829      	ldr	r1, [r5, #0]
 801c9c0:	f851 6b04 	ldr.w	r6, [r1], #4
 801c9c4:	d402      	bmi.n	801c9cc <_printf_i+0x18c>
 801c9c6:	065f      	lsls	r7, r3, #25
 801c9c8:	bf48      	it	mi
 801c9ca:	b2b6      	uxthmi	r6, r6
 801c9cc:	07df      	lsls	r7, r3, #31
 801c9ce:	6029      	str	r1, [r5, #0]
 801c9d0:	bf44      	itt	mi
 801c9d2:	f043 0320 	orrmi.w	r3, r3, #32
 801c9d6:	6023      	strmi	r3, [r4, #0]
 801c9d8:	b91e      	cbnz	r6, 801c9e2 <_printf_i+0x1a2>
 801c9da:	6823      	ldr	r3, [r4, #0]
 801c9dc:	f023 0320 	bic.w	r3, r3, #32
 801c9e0:	6023      	str	r3, [r4, #0]
 801c9e2:	2310      	movs	r3, #16
 801c9e4:	e7a8      	b.n	801c938 <_printf_i+0xf8>
 801c9e6:	4824      	ldr	r0, [pc, #144]	; (801ca78 <_printf_i+0x238>)
 801c9e8:	e7e5      	b.n	801c9b6 <_printf_i+0x176>
 801c9ea:	4615      	mov	r5, r2
 801c9ec:	e7be      	b.n	801c96c <_printf_i+0x12c>
 801c9ee:	682b      	ldr	r3, [r5, #0]
 801c9f0:	6826      	ldr	r6, [r4, #0]
 801c9f2:	1d18      	adds	r0, r3, #4
 801c9f4:	6961      	ldr	r1, [r4, #20]
 801c9f6:	6028      	str	r0, [r5, #0]
 801c9f8:	0635      	lsls	r5, r6, #24
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	d501      	bpl.n	801ca02 <_printf_i+0x1c2>
 801c9fe:	6019      	str	r1, [r3, #0]
 801ca00:	e002      	b.n	801ca08 <_printf_i+0x1c8>
 801ca02:	0670      	lsls	r0, r6, #25
 801ca04:	d5fb      	bpl.n	801c9fe <_printf_i+0x1be>
 801ca06:	8019      	strh	r1, [r3, #0]
 801ca08:	2300      	movs	r3, #0
 801ca0a:	4615      	mov	r5, r2
 801ca0c:	6123      	str	r3, [r4, #16]
 801ca0e:	e7bd      	b.n	801c98c <_printf_i+0x14c>
 801ca10:	682b      	ldr	r3, [r5, #0]
 801ca12:	2100      	movs	r1, #0
 801ca14:	1d1a      	adds	r2, r3, #4
 801ca16:	602a      	str	r2, [r5, #0]
 801ca18:	681d      	ldr	r5, [r3, #0]
 801ca1a:	6862      	ldr	r2, [r4, #4]
 801ca1c:	4628      	mov	r0, r5
 801ca1e:	f000 f983 	bl	801cd28 <memchr>
 801ca22:	b108      	cbz	r0, 801ca28 <_printf_i+0x1e8>
 801ca24:	1b40      	subs	r0, r0, r5
 801ca26:	6060      	str	r0, [r4, #4]
 801ca28:	6863      	ldr	r3, [r4, #4]
 801ca2a:	6123      	str	r3, [r4, #16]
 801ca2c:	2300      	movs	r3, #0
 801ca2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ca32:	e7ab      	b.n	801c98c <_printf_i+0x14c>
 801ca34:	6923      	ldr	r3, [r4, #16]
 801ca36:	462a      	mov	r2, r5
 801ca38:	4649      	mov	r1, r9
 801ca3a:	4640      	mov	r0, r8
 801ca3c:	47d0      	blx	sl
 801ca3e:	3001      	adds	r0, #1
 801ca40:	d0ae      	beq.n	801c9a0 <_printf_i+0x160>
 801ca42:	6823      	ldr	r3, [r4, #0]
 801ca44:	079b      	lsls	r3, r3, #30
 801ca46:	d413      	bmi.n	801ca70 <_printf_i+0x230>
 801ca48:	68e0      	ldr	r0, [r4, #12]
 801ca4a:	9b03      	ldr	r3, [sp, #12]
 801ca4c:	4298      	cmp	r0, r3
 801ca4e:	bfb8      	it	lt
 801ca50:	4618      	movlt	r0, r3
 801ca52:	e7a7      	b.n	801c9a4 <_printf_i+0x164>
 801ca54:	2301      	movs	r3, #1
 801ca56:	4632      	mov	r2, r6
 801ca58:	4649      	mov	r1, r9
 801ca5a:	4640      	mov	r0, r8
 801ca5c:	47d0      	blx	sl
 801ca5e:	3001      	adds	r0, #1
 801ca60:	d09e      	beq.n	801c9a0 <_printf_i+0x160>
 801ca62:	3501      	adds	r5, #1
 801ca64:	68e3      	ldr	r3, [r4, #12]
 801ca66:	9903      	ldr	r1, [sp, #12]
 801ca68:	1a5b      	subs	r3, r3, r1
 801ca6a:	42ab      	cmp	r3, r5
 801ca6c:	dcf2      	bgt.n	801ca54 <_printf_i+0x214>
 801ca6e:	e7eb      	b.n	801ca48 <_printf_i+0x208>
 801ca70:	2500      	movs	r5, #0
 801ca72:	f104 0619 	add.w	r6, r4, #25
 801ca76:	e7f5      	b.n	801ca64 <_printf_i+0x224>
 801ca78:	08020126 	.word	0x08020126
 801ca7c:	08020137 	.word	0x08020137

0801ca80 <__sflush_r>:
 801ca80:	898a      	ldrh	r2, [r1, #12]
 801ca82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca86:	4605      	mov	r5, r0
 801ca88:	0710      	lsls	r0, r2, #28
 801ca8a:	460c      	mov	r4, r1
 801ca8c:	d458      	bmi.n	801cb40 <__sflush_r+0xc0>
 801ca8e:	684b      	ldr	r3, [r1, #4]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	dc05      	bgt.n	801caa0 <__sflush_r+0x20>
 801ca94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	dc02      	bgt.n	801caa0 <__sflush_r+0x20>
 801ca9a:	2000      	movs	r0, #0
 801ca9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801caa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801caa2:	2e00      	cmp	r6, #0
 801caa4:	d0f9      	beq.n	801ca9a <__sflush_r+0x1a>
 801caa6:	2300      	movs	r3, #0
 801caa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801caac:	682f      	ldr	r7, [r5, #0]
 801caae:	6a21      	ldr	r1, [r4, #32]
 801cab0:	602b      	str	r3, [r5, #0]
 801cab2:	d032      	beq.n	801cb1a <__sflush_r+0x9a>
 801cab4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cab6:	89a3      	ldrh	r3, [r4, #12]
 801cab8:	075a      	lsls	r2, r3, #29
 801caba:	d505      	bpl.n	801cac8 <__sflush_r+0x48>
 801cabc:	6863      	ldr	r3, [r4, #4]
 801cabe:	1ac0      	subs	r0, r0, r3
 801cac0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cac2:	b10b      	cbz	r3, 801cac8 <__sflush_r+0x48>
 801cac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cac6:	1ac0      	subs	r0, r0, r3
 801cac8:	2300      	movs	r3, #0
 801caca:	4602      	mov	r2, r0
 801cacc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cace:	4628      	mov	r0, r5
 801cad0:	6a21      	ldr	r1, [r4, #32]
 801cad2:	47b0      	blx	r6
 801cad4:	1c43      	adds	r3, r0, #1
 801cad6:	89a3      	ldrh	r3, [r4, #12]
 801cad8:	d106      	bne.n	801cae8 <__sflush_r+0x68>
 801cada:	6829      	ldr	r1, [r5, #0]
 801cadc:	291d      	cmp	r1, #29
 801cade:	d82b      	bhi.n	801cb38 <__sflush_r+0xb8>
 801cae0:	4a28      	ldr	r2, [pc, #160]	; (801cb84 <__sflush_r+0x104>)
 801cae2:	410a      	asrs	r2, r1
 801cae4:	07d6      	lsls	r6, r2, #31
 801cae6:	d427      	bmi.n	801cb38 <__sflush_r+0xb8>
 801cae8:	2200      	movs	r2, #0
 801caea:	04d9      	lsls	r1, r3, #19
 801caec:	6062      	str	r2, [r4, #4]
 801caee:	6922      	ldr	r2, [r4, #16]
 801caf0:	6022      	str	r2, [r4, #0]
 801caf2:	d504      	bpl.n	801cafe <__sflush_r+0x7e>
 801caf4:	1c42      	adds	r2, r0, #1
 801caf6:	d101      	bne.n	801cafc <__sflush_r+0x7c>
 801caf8:	682b      	ldr	r3, [r5, #0]
 801cafa:	b903      	cbnz	r3, 801cafe <__sflush_r+0x7e>
 801cafc:	6560      	str	r0, [r4, #84]	; 0x54
 801cafe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cb00:	602f      	str	r7, [r5, #0]
 801cb02:	2900      	cmp	r1, #0
 801cb04:	d0c9      	beq.n	801ca9a <__sflush_r+0x1a>
 801cb06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cb0a:	4299      	cmp	r1, r3
 801cb0c:	d002      	beq.n	801cb14 <__sflush_r+0x94>
 801cb0e:	4628      	mov	r0, r5
 801cb10:	f7ff fb3c 	bl	801c18c <_free_r>
 801cb14:	2000      	movs	r0, #0
 801cb16:	6360      	str	r0, [r4, #52]	; 0x34
 801cb18:	e7c0      	b.n	801ca9c <__sflush_r+0x1c>
 801cb1a:	2301      	movs	r3, #1
 801cb1c:	4628      	mov	r0, r5
 801cb1e:	47b0      	blx	r6
 801cb20:	1c41      	adds	r1, r0, #1
 801cb22:	d1c8      	bne.n	801cab6 <__sflush_r+0x36>
 801cb24:	682b      	ldr	r3, [r5, #0]
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d0c5      	beq.n	801cab6 <__sflush_r+0x36>
 801cb2a:	2b1d      	cmp	r3, #29
 801cb2c:	d001      	beq.n	801cb32 <__sflush_r+0xb2>
 801cb2e:	2b16      	cmp	r3, #22
 801cb30:	d101      	bne.n	801cb36 <__sflush_r+0xb6>
 801cb32:	602f      	str	r7, [r5, #0]
 801cb34:	e7b1      	b.n	801ca9a <__sflush_r+0x1a>
 801cb36:	89a3      	ldrh	r3, [r4, #12]
 801cb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb3c:	81a3      	strh	r3, [r4, #12]
 801cb3e:	e7ad      	b.n	801ca9c <__sflush_r+0x1c>
 801cb40:	690f      	ldr	r7, [r1, #16]
 801cb42:	2f00      	cmp	r7, #0
 801cb44:	d0a9      	beq.n	801ca9a <__sflush_r+0x1a>
 801cb46:	0793      	lsls	r3, r2, #30
 801cb48:	680e      	ldr	r6, [r1, #0]
 801cb4a:	600f      	str	r7, [r1, #0]
 801cb4c:	bf0c      	ite	eq
 801cb4e:	694b      	ldreq	r3, [r1, #20]
 801cb50:	2300      	movne	r3, #0
 801cb52:	eba6 0807 	sub.w	r8, r6, r7
 801cb56:	608b      	str	r3, [r1, #8]
 801cb58:	f1b8 0f00 	cmp.w	r8, #0
 801cb5c:	dd9d      	ble.n	801ca9a <__sflush_r+0x1a>
 801cb5e:	4643      	mov	r3, r8
 801cb60:	463a      	mov	r2, r7
 801cb62:	6a21      	ldr	r1, [r4, #32]
 801cb64:	4628      	mov	r0, r5
 801cb66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cb68:	47b0      	blx	r6
 801cb6a:	2800      	cmp	r0, #0
 801cb6c:	dc06      	bgt.n	801cb7c <__sflush_r+0xfc>
 801cb6e:	89a3      	ldrh	r3, [r4, #12]
 801cb70:	f04f 30ff 	mov.w	r0, #4294967295
 801cb74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb78:	81a3      	strh	r3, [r4, #12]
 801cb7a:	e78f      	b.n	801ca9c <__sflush_r+0x1c>
 801cb7c:	4407      	add	r7, r0
 801cb7e:	eba8 0800 	sub.w	r8, r8, r0
 801cb82:	e7e9      	b.n	801cb58 <__sflush_r+0xd8>
 801cb84:	dfbffffe 	.word	0xdfbffffe

0801cb88 <_fflush_r>:
 801cb88:	b538      	push	{r3, r4, r5, lr}
 801cb8a:	690b      	ldr	r3, [r1, #16]
 801cb8c:	4605      	mov	r5, r0
 801cb8e:	460c      	mov	r4, r1
 801cb90:	b913      	cbnz	r3, 801cb98 <_fflush_r+0x10>
 801cb92:	2500      	movs	r5, #0
 801cb94:	4628      	mov	r0, r5
 801cb96:	bd38      	pop	{r3, r4, r5, pc}
 801cb98:	b118      	cbz	r0, 801cba2 <_fflush_r+0x1a>
 801cb9a:	6a03      	ldr	r3, [r0, #32]
 801cb9c:	b90b      	cbnz	r3, 801cba2 <_fflush_r+0x1a>
 801cb9e:	f7ff f923 	bl	801bde8 <__sinit>
 801cba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d0f3      	beq.n	801cb92 <_fflush_r+0xa>
 801cbaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cbac:	07d0      	lsls	r0, r2, #31
 801cbae:	d404      	bmi.n	801cbba <_fflush_r+0x32>
 801cbb0:	0599      	lsls	r1, r3, #22
 801cbb2:	d402      	bmi.n	801cbba <_fflush_r+0x32>
 801cbb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cbb6:	f7ff fabc 	bl	801c132 <__retarget_lock_acquire_recursive>
 801cbba:	4628      	mov	r0, r5
 801cbbc:	4621      	mov	r1, r4
 801cbbe:	f7ff ff5f 	bl	801ca80 <__sflush_r>
 801cbc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cbc4:	4605      	mov	r5, r0
 801cbc6:	07da      	lsls	r2, r3, #31
 801cbc8:	d4e4      	bmi.n	801cb94 <_fflush_r+0xc>
 801cbca:	89a3      	ldrh	r3, [r4, #12]
 801cbcc:	059b      	lsls	r3, r3, #22
 801cbce:	d4e1      	bmi.n	801cb94 <_fflush_r+0xc>
 801cbd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cbd2:	f7ff faaf 	bl	801c134 <__retarget_lock_release_recursive>
 801cbd6:	e7dd      	b.n	801cb94 <_fflush_r+0xc>

0801cbd8 <fiprintf>:
 801cbd8:	b40e      	push	{r1, r2, r3}
 801cbda:	b503      	push	{r0, r1, lr}
 801cbdc:	ab03      	add	r3, sp, #12
 801cbde:	4601      	mov	r1, r0
 801cbe0:	4805      	ldr	r0, [pc, #20]	; (801cbf8 <fiprintf+0x20>)
 801cbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbe6:	6800      	ldr	r0, [r0, #0]
 801cbe8:	9301      	str	r3, [sp, #4]
 801cbea:	f7ff fc9d 	bl	801c528 <_vfiprintf_r>
 801cbee:	b002      	add	sp, #8
 801cbf0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cbf4:	b003      	add	sp, #12
 801cbf6:	4770      	bx	lr
 801cbf8:	200000dc 	.word	0x200000dc

0801cbfc <__swbuf_r>:
 801cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbfe:	460e      	mov	r6, r1
 801cc00:	4614      	mov	r4, r2
 801cc02:	4605      	mov	r5, r0
 801cc04:	b118      	cbz	r0, 801cc0e <__swbuf_r+0x12>
 801cc06:	6a03      	ldr	r3, [r0, #32]
 801cc08:	b90b      	cbnz	r3, 801cc0e <__swbuf_r+0x12>
 801cc0a:	f7ff f8ed 	bl	801bde8 <__sinit>
 801cc0e:	69a3      	ldr	r3, [r4, #24]
 801cc10:	60a3      	str	r3, [r4, #8]
 801cc12:	89a3      	ldrh	r3, [r4, #12]
 801cc14:	071a      	lsls	r2, r3, #28
 801cc16:	d525      	bpl.n	801cc64 <__swbuf_r+0x68>
 801cc18:	6923      	ldr	r3, [r4, #16]
 801cc1a:	b31b      	cbz	r3, 801cc64 <__swbuf_r+0x68>
 801cc1c:	6823      	ldr	r3, [r4, #0]
 801cc1e:	b2f6      	uxtb	r6, r6
 801cc20:	6922      	ldr	r2, [r4, #16]
 801cc22:	4637      	mov	r7, r6
 801cc24:	1a98      	subs	r0, r3, r2
 801cc26:	6963      	ldr	r3, [r4, #20]
 801cc28:	4283      	cmp	r3, r0
 801cc2a:	dc04      	bgt.n	801cc36 <__swbuf_r+0x3a>
 801cc2c:	4621      	mov	r1, r4
 801cc2e:	4628      	mov	r0, r5
 801cc30:	f7ff ffaa 	bl	801cb88 <_fflush_r>
 801cc34:	b9e0      	cbnz	r0, 801cc70 <__swbuf_r+0x74>
 801cc36:	68a3      	ldr	r3, [r4, #8]
 801cc38:	3b01      	subs	r3, #1
 801cc3a:	60a3      	str	r3, [r4, #8]
 801cc3c:	6823      	ldr	r3, [r4, #0]
 801cc3e:	1c5a      	adds	r2, r3, #1
 801cc40:	6022      	str	r2, [r4, #0]
 801cc42:	701e      	strb	r6, [r3, #0]
 801cc44:	1c43      	adds	r3, r0, #1
 801cc46:	6962      	ldr	r2, [r4, #20]
 801cc48:	429a      	cmp	r2, r3
 801cc4a:	d004      	beq.n	801cc56 <__swbuf_r+0x5a>
 801cc4c:	89a3      	ldrh	r3, [r4, #12]
 801cc4e:	07db      	lsls	r3, r3, #31
 801cc50:	d506      	bpl.n	801cc60 <__swbuf_r+0x64>
 801cc52:	2e0a      	cmp	r6, #10
 801cc54:	d104      	bne.n	801cc60 <__swbuf_r+0x64>
 801cc56:	4621      	mov	r1, r4
 801cc58:	4628      	mov	r0, r5
 801cc5a:	f7ff ff95 	bl	801cb88 <_fflush_r>
 801cc5e:	b938      	cbnz	r0, 801cc70 <__swbuf_r+0x74>
 801cc60:	4638      	mov	r0, r7
 801cc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc64:	4621      	mov	r1, r4
 801cc66:	4628      	mov	r0, r5
 801cc68:	f000 f806 	bl	801cc78 <__swsetup_r>
 801cc6c:	2800      	cmp	r0, #0
 801cc6e:	d0d5      	beq.n	801cc1c <__swbuf_r+0x20>
 801cc70:	f04f 37ff 	mov.w	r7, #4294967295
 801cc74:	e7f4      	b.n	801cc60 <__swbuf_r+0x64>
	...

0801cc78 <__swsetup_r>:
 801cc78:	b538      	push	{r3, r4, r5, lr}
 801cc7a:	4b2a      	ldr	r3, [pc, #168]	; (801cd24 <__swsetup_r+0xac>)
 801cc7c:	4605      	mov	r5, r0
 801cc7e:	460c      	mov	r4, r1
 801cc80:	6818      	ldr	r0, [r3, #0]
 801cc82:	b118      	cbz	r0, 801cc8c <__swsetup_r+0x14>
 801cc84:	6a03      	ldr	r3, [r0, #32]
 801cc86:	b90b      	cbnz	r3, 801cc8c <__swsetup_r+0x14>
 801cc88:	f7ff f8ae 	bl	801bde8 <__sinit>
 801cc8c:	89a3      	ldrh	r3, [r4, #12]
 801cc8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cc92:	0718      	lsls	r0, r3, #28
 801cc94:	d422      	bmi.n	801ccdc <__swsetup_r+0x64>
 801cc96:	06d9      	lsls	r1, r3, #27
 801cc98:	d407      	bmi.n	801ccaa <__swsetup_r+0x32>
 801cc9a:	2309      	movs	r3, #9
 801cc9c:	602b      	str	r3, [r5, #0]
 801cc9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cca2:	f04f 30ff 	mov.w	r0, #4294967295
 801cca6:	81a3      	strh	r3, [r4, #12]
 801cca8:	e034      	b.n	801cd14 <__swsetup_r+0x9c>
 801ccaa:	0758      	lsls	r0, r3, #29
 801ccac:	d512      	bpl.n	801ccd4 <__swsetup_r+0x5c>
 801ccae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ccb0:	b141      	cbz	r1, 801ccc4 <__swsetup_r+0x4c>
 801ccb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ccb6:	4299      	cmp	r1, r3
 801ccb8:	d002      	beq.n	801ccc0 <__swsetup_r+0x48>
 801ccba:	4628      	mov	r0, r5
 801ccbc:	f7ff fa66 	bl	801c18c <_free_r>
 801ccc0:	2300      	movs	r3, #0
 801ccc2:	6363      	str	r3, [r4, #52]	; 0x34
 801ccc4:	89a3      	ldrh	r3, [r4, #12]
 801ccc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ccca:	81a3      	strh	r3, [r4, #12]
 801cccc:	2300      	movs	r3, #0
 801ccce:	6063      	str	r3, [r4, #4]
 801ccd0:	6923      	ldr	r3, [r4, #16]
 801ccd2:	6023      	str	r3, [r4, #0]
 801ccd4:	89a3      	ldrh	r3, [r4, #12]
 801ccd6:	f043 0308 	orr.w	r3, r3, #8
 801ccda:	81a3      	strh	r3, [r4, #12]
 801ccdc:	6923      	ldr	r3, [r4, #16]
 801ccde:	b94b      	cbnz	r3, 801ccf4 <__swsetup_r+0x7c>
 801cce0:	89a3      	ldrh	r3, [r4, #12]
 801cce2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ccea:	d003      	beq.n	801ccf4 <__swsetup_r+0x7c>
 801ccec:	4621      	mov	r1, r4
 801ccee:	4628      	mov	r0, r5
 801ccf0:	f000 f883 	bl	801cdfa <__smakebuf_r>
 801ccf4:	89a0      	ldrh	r0, [r4, #12]
 801ccf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ccfa:	f010 0301 	ands.w	r3, r0, #1
 801ccfe:	d00a      	beq.n	801cd16 <__swsetup_r+0x9e>
 801cd00:	2300      	movs	r3, #0
 801cd02:	60a3      	str	r3, [r4, #8]
 801cd04:	6963      	ldr	r3, [r4, #20]
 801cd06:	425b      	negs	r3, r3
 801cd08:	61a3      	str	r3, [r4, #24]
 801cd0a:	6923      	ldr	r3, [r4, #16]
 801cd0c:	b943      	cbnz	r3, 801cd20 <__swsetup_r+0xa8>
 801cd0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cd12:	d1c4      	bne.n	801cc9e <__swsetup_r+0x26>
 801cd14:	bd38      	pop	{r3, r4, r5, pc}
 801cd16:	0781      	lsls	r1, r0, #30
 801cd18:	bf58      	it	pl
 801cd1a:	6963      	ldrpl	r3, [r4, #20]
 801cd1c:	60a3      	str	r3, [r4, #8]
 801cd1e:	e7f4      	b.n	801cd0a <__swsetup_r+0x92>
 801cd20:	2000      	movs	r0, #0
 801cd22:	e7f7      	b.n	801cd14 <__swsetup_r+0x9c>
 801cd24:	200000dc 	.word	0x200000dc

0801cd28 <memchr>:
 801cd28:	b2c9      	uxtb	r1, r1
 801cd2a:	4402      	add	r2, r0
 801cd2c:	b510      	push	{r4, lr}
 801cd2e:	4290      	cmp	r0, r2
 801cd30:	4603      	mov	r3, r0
 801cd32:	d101      	bne.n	801cd38 <memchr+0x10>
 801cd34:	2300      	movs	r3, #0
 801cd36:	e003      	b.n	801cd40 <memchr+0x18>
 801cd38:	781c      	ldrb	r4, [r3, #0]
 801cd3a:	3001      	adds	r0, #1
 801cd3c:	428c      	cmp	r4, r1
 801cd3e:	d1f6      	bne.n	801cd2e <memchr+0x6>
 801cd40:	4618      	mov	r0, r3
 801cd42:	bd10      	pop	{r4, pc}

0801cd44 <abort>:
 801cd44:	2006      	movs	r0, #6
 801cd46:	b508      	push	{r3, lr}
 801cd48:	f000 f8bc 	bl	801cec4 <raise>
 801cd4c:	2001      	movs	r0, #1
 801cd4e:	f7e4 f943 	bl	8000fd8 <_exit>

0801cd52 <_realloc_r>:
 801cd52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd56:	4680      	mov	r8, r0
 801cd58:	4614      	mov	r4, r2
 801cd5a:	460e      	mov	r6, r1
 801cd5c:	b921      	cbnz	r1, 801cd68 <_realloc_r+0x16>
 801cd5e:	4611      	mov	r1, r2
 801cd60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd64:	f7fe beea 	b.w	801bb3c <_malloc_r>
 801cd68:	b92a      	cbnz	r2, 801cd76 <_realloc_r+0x24>
 801cd6a:	4625      	mov	r5, r4
 801cd6c:	f7ff fa0e 	bl	801c18c <_free_r>
 801cd70:	4628      	mov	r0, r5
 801cd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd76:	f000 f8e3 	bl	801cf40 <_malloc_usable_size_r>
 801cd7a:	4284      	cmp	r4, r0
 801cd7c:	4607      	mov	r7, r0
 801cd7e:	d802      	bhi.n	801cd86 <_realloc_r+0x34>
 801cd80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cd84:	d812      	bhi.n	801cdac <_realloc_r+0x5a>
 801cd86:	4621      	mov	r1, r4
 801cd88:	4640      	mov	r0, r8
 801cd8a:	f7fe fed7 	bl	801bb3c <_malloc_r>
 801cd8e:	4605      	mov	r5, r0
 801cd90:	2800      	cmp	r0, #0
 801cd92:	d0ed      	beq.n	801cd70 <_realloc_r+0x1e>
 801cd94:	42bc      	cmp	r4, r7
 801cd96:	4622      	mov	r2, r4
 801cd98:	4631      	mov	r1, r6
 801cd9a:	bf28      	it	cs
 801cd9c:	463a      	movcs	r2, r7
 801cd9e:	f7ff f9ca 	bl	801c136 <memcpy>
 801cda2:	4631      	mov	r1, r6
 801cda4:	4640      	mov	r0, r8
 801cda6:	f7ff f9f1 	bl	801c18c <_free_r>
 801cdaa:	e7e1      	b.n	801cd70 <_realloc_r+0x1e>
 801cdac:	4635      	mov	r5, r6
 801cdae:	e7df      	b.n	801cd70 <_realloc_r+0x1e>

0801cdb0 <__swhatbuf_r>:
 801cdb0:	b570      	push	{r4, r5, r6, lr}
 801cdb2:	460c      	mov	r4, r1
 801cdb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cdb8:	b096      	sub	sp, #88	; 0x58
 801cdba:	4615      	mov	r5, r2
 801cdbc:	2900      	cmp	r1, #0
 801cdbe:	461e      	mov	r6, r3
 801cdc0:	da0c      	bge.n	801cddc <__swhatbuf_r+0x2c>
 801cdc2:	89a3      	ldrh	r3, [r4, #12]
 801cdc4:	2100      	movs	r1, #0
 801cdc6:	f013 0f80 	tst.w	r3, #128	; 0x80
 801cdca:	bf0c      	ite	eq
 801cdcc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801cdd0:	2340      	movne	r3, #64	; 0x40
 801cdd2:	2000      	movs	r0, #0
 801cdd4:	6031      	str	r1, [r6, #0]
 801cdd6:	602b      	str	r3, [r5, #0]
 801cdd8:	b016      	add	sp, #88	; 0x58
 801cdda:	bd70      	pop	{r4, r5, r6, pc}
 801cddc:	466a      	mov	r2, sp
 801cdde:	f000 f879 	bl	801ced4 <_fstat_r>
 801cde2:	2800      	cmp	r0, #0
 801cde4:	dbed      	blt.n	801cdc2 <__swhatbuf_r+0x12>
 801cde6:	9901      	ldr	r1, [sp, #4]
 801cde8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801cdec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801cdf0:	4259      	negs	r1, r3
 801cdf2:	4159      	adcs	r1, r3
 801cdf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cdf8:	e7eb      	b.n	801cdd2 <__swhatbuf_r+0x22>

0801cdfa <__smakebuf_r>:
 801cdfa:	898b      	ldrh	r3, [r1, #12]
 801cdfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cdfe:	079d      	lsls	r5, r3, #30
 801ce00:	4606      	mov	r6, r0
 801ce02:	460c      	mov	r4, r1
 801ce04:	d507      	bpl.n	801ce16 <__smakebuf_r+0x1c>
 801ce06:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ce0a:	6023      	str	r3, [r4, #0]
 801ce0c:	6123      	str	r3, [r4, #16]
 801ce0e:	2301      	movs	r3, #1
 801ce10:	6163      	str	r3, [r4, #20]
 801ce12:	b002      	add	sp, #8
 801ce14:	bd70      	pop	{r4, r5, r6, pc}
 801ce16:	ab01      	add	r3, sp, #4
 801ce18:	466a      	mov	r2, sp
 801ce1a:	f7ff ffc9 	bl	801cdb0 <__swhatbuf_r>
 801ce1e:	9900      	ldr	r1, [sp, #0]
 801ce20:	4605      	mov	r5, r0
 801ce22:	4630      	mov	r0, r6
 801ce24:	f7fe fe8a 	bl	801bb3c <_malloc_r>
 801ce28:	b948      	cbnz	r0, 801ce3e <__smakebuf_r+0x44>
 801ce2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce2e:	059a      	lsls	r2, r3, #22
 801ce30:	d4ef      	bmi.n	801ce12 <__smakebuf_r+0x18>
 801ce32:	f023 0303 	bic.w	r3, r3, #3
 801ce36:	f043 0302 	orr.w	r3, r3, #2
 801ce3a:	81a3      	strh	r3, [r4, #12]
 801ce3c:	e7e3      	b.n	801ce06 <__smakebuf_r+0xc>
 801ce3e:	89a3      	ldrh	r3, [r4, #12]
 801ce40:	6020      	str	r0, [r4, #0]
 801ce42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce46:	6120      	str	r0, [r4, #16]
 801ce48:	81a3      	strh	r3, [r4, #12]
 801ce4a:	9b00      	ldr	r3, [sp, #0]
 801ce4c:	6163      	str	r3, [r4, #20]
 801ce4e:	9b01      	ldr	r3, [sp, #4]
 801ce50:	b15b      	cbz	r3, 801ce6a <__smakebuf_r+0x70>
 801ce52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce56:	4630      	mov	r0, r6
 801ce58:	f000 f84e 	bl	801cef8 <_isatty_r>
 801ce5c:	b128      	cbz	r0, 801ce6a <__smakebuf_r+0x70>
 801ce5e:	89a3      	ldrh	r3, [r4, #12]
 801ce60:	f023 0303 	bic.w	r3, r3, #3
 801ce64:	f043 0301 	orr.w	r3, r3, #1
 801ce68:	81a3      	strh	r3, [r4, #12]
 801ce6a:	89a3      	ldrh	r3, [r4, #12]
 801ce6c:	431d      	orrs	r5, r3
 801ce6e:	81a5      	strh	r5, [r4, #12]
 801ce70:	e7cf      	b.n	801ce12 <__smakebuf_r+0x18>

0801ce72 <_raise_r>:
 801ce72:	291f      	cmp	r1, #31
 801ce74:	b538      	push	{r3, r4, r5, lr}
 801ce76:	4604      	mov	r4, r0
 801ce78:	460d      	mov	r5, r1
 801ce7a:	d904      	bls.n	801ce86 <_raise_r+0x14>
 801ce7c:	2316      	movs	r3, #22
 801ce7e:	6003      	str	r3, [r0, #0]
 801ce80:	f04f 30ff 	mov.w	r0, #4294967295
 801ce84:	bd38      	pop	{r3, r4, r5, pc}
 801ce86:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ce88:	b112      	cbz	r2, 801ce90 <_raise_r+0x1e>
 801ce8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ce8e:	b94b      	cbnz	r3, 801cea4 <_raise_r+0x32>
 801ce90:	4620      	mov	r0, r4
 801ce92:	f000 f853 	bl	801cf3c <_getpid_r>
 801ce96:	462a      	mov	r2, r5
 801ce98:	4601      	mov	r1, r0
 801ce9a:	4620      	mov	r0, r4
 801ce9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cea0:	f000 b83a 	b.w	801cf18 <_kill_r>
 801cea4:	2b01      	cmp	r3, #1
 801cea6:	d00a      	beq.n	801cebe <_raise_r+0x4c>
 801cea8:	1c59      	adds	r1, r3, #1
 801ceaa:	d103      	bne.n	801ceb4 <_raise_r+0x42>
 801ceac:	2316      	movs	r3, #22
 801ceae:	6003      	str	r3, [r0, #0]
 801ceb0:	2001      	movs	r0, #1
 801ceb2:	e7e7      	b.n	801ce84 <_raise_r+0x12>
 801ceb4:	2400      	movs	r4, #0
 801ceb6:	4628      	mov	r0, r5
 801ceb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cebc:	4798      	blx	r3
 801cebe:	2000      	movs	r0, #0
 801cec0:	e7e0      	b.n	801ce84 <_raise_r+0x12>
	...

0801cec4 <raise>:
 801cec4:	4b02      	ldr	r3, [pc, #8]	; (801ced0 <raise+0xc>)
 801cec6:	4601      	mov	r1, r0
 801cec8:	6818      	ldr	r0, [r3, #0]
 801ceca:	f7ff bfd2 	b.w	801ce72 <_raise_r>
 801cece:	bf00      	nop
 801ced0:	200000dc 	.word	0x200000dc

0801ced4 <_fstat_r>:
 801ced4:	b538      	push	{r3, r4, r5, lr}
 801ced6:	2300      	movs	r3, #0
 801ced8:	4d06      	ldr	r5, [pc, #24]	; (801cef4 <_fstat_r+0x20>)
 801ceda:	4604      	mov	r4, r0
 801cedc:	4608      	mov	r0, r1
 801cede:	4611      	mov	r1, r2
 801cee0:	602b      	str	r3, [r5, #0]
 801cee2:	f7e4 f8c8 	bl	8001076 <_fstat>
 801cee6:	1c43      	adds	r3, r0, #1
 801cee8:	d102      	bne.n	801cef0 <_fstat_r+0x1c>
 801ceea:	682b      	ldr	r3, [r5, #0]
 801ceec:	b103      	cbz	r3, 801cef0 <_fstat_r+0x1c>
 801ceee:	6023      	str	r3, [r4, #0]
 801cef0:	bd38      	pop	{r3, r4, r5, pc}
 801cef2:	bf00      	nop
 801cef4:	2000b284 	.word	0x2000b284

0801cef8 <_isatty_r>:
 801cef8:	b538      	push	{r3, r4, r5, lr}
 801cefa:	2300      	movs	r3, #0
 801cefc:	4d05      	ldr	r5, [pc, #20]	; (801cf14 <_isatty_r+0x1c>)
 801cefe:	4604      	mov	r4, r0
 801cf00:	4608      	mov	r0, r1
 801cf02:	602b      	str	r3, [r5, #0]
 801cf04:	f7e4 f8c7 	bl	8001096 <_isatty>
 801cf08:	1c43      	adds	r3, r0, #1
 801cf0a:	d102      	bne.n	801cf12 <_isatty_r+0x1a>
 801cf0c:	682b      	ldr	r3, [r5, #0]
 801cf0e:	b103      	cbz	r3, 801cf12 <_isatty_r+0x1a>
 801cf10:	6023      	str	r3, [r4, #0]
 801cf12:	bd38      	pop	{r3, r4, r5, pc}
 801cf14:	2000b284 	.word	0x2000b284

0801cf18 <_kill_r>:
 801cf18:	b538      	push	{r3, r4, r5, lr}
 801cf1a:	2300      	movs	r3, #0
 801cf1c:	4d06      	ldr	r5, [pc, #24]	; (801cf38 <_kill_r+0x20>)
 801cf1e:	4604      	mov	r4, r0
 801cf20:	4608      	mov	r0, r1
 801cf22:	4611      	mov	r1, r2
 801cf24:	602b      	str	r3, [r5, #0]
 801cf26:	f7e4 f845 	bl	8000fb4 <_kill>
 801cf2a:	1c43      	adds	r3, r0, #1
 801cf2c:	d102      	bne.n	801cf34 <_kill_r+0x1c>
 801cf2e:	682b      	ldr	r3, [r5, #0]
 801cf30:	b103      	cbz	r3, 801cf34 <_kill_r+0x1c>
 801cf32:	6023      	str	r3, [r4, #0]
 801cf34:	bd38      	pop	{r3, r4, r5, pc}
 801cf36:	bf00      	nop
 801cf38:	2000b284 	.word	0x2000b284

0801cf3c <_getpid_r>:
 801cf3c:	f7e4 b832 	b.w	8000fa4 <_getpid>

0801cf40 <_malloc_usable_size_r>:
 801cf40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cf44:	1f18      	subs	r0, r3, #4
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	bfbc      	itt	lt
 801cf4a:	580b      	ldrlt	r3, [r1, r0]
 801cf4c:	18c0      	addlt	r0, r0, r3
 801cf4e:	4770      	bx	lr

0801cf50 <_init>:
 801cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf52:	bf00      	nop
 801cf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cf56:	bc08      	pop	{r3}
 801cf58:	469e      	mov	lr, r3
 801cf5a:	4770      	bx	lr

0801cf5c <_fini>:
 801cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf5e:	bf00      	nop
 801cf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cf62:	bc08      	pop	{r3}
 801cf64:	469e      	mov	lr, r3
 801cf66:	4770      	bx	lr
