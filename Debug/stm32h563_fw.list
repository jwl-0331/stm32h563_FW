
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fec  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000030  0801123c  0801123c  0002123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       000005f0  0801126c  0801126c  0002126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801185c  0801185c  000300bc  2**0
                  CONTENTS
  5 .ARM          00000008  0801185c  0801185c  0002185c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08011864  08011864  000300bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08011864  08011864  00021864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08011868  08011868  00021868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000bc  20000000  0801186c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00027364  200000bc  08011928  000300bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20027420  08011928  00037420  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300f2  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c17e  00000000  00000000  00030135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000618f  00000000  00000000  0005c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002558  00000000  00000000  00062448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001cd9  00000000  00000000  000649a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b806  00000000  00000000  00066679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002f6b8  00000000  00000000  000a1e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016971d  00000000  00000000  000d1537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a338  00000000  00000000  0023ac54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00244f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200000bc 	.word	0x200000bc
 800026c:	00000000 	.word	0x00000000
 8000270:	08011224 	.word	0x08011224

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200000c0 	.word	0x200000c0
 800028c:	08011224 	.word	0x08011224

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET);
  }
}

void AppMain()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
}
 80005dc:	bf00      	nop
  __enable_irq();

  RESET_Init();
 80005de:	f002 f8fd 	bl	80027dc <RESET_Init>
  LED_Init();
 80005e2:	f002 f84b 	bl	800267c <LED_Init>
  LED_SimpleAnimation();
 80005e6:	f002 f8a3 	bl	8002730 <LED_SimpleAnimation>

  svDebugInit();
 80005ea:	f002 fb0d 	bl	8002c08 <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 80005ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f2:	2000      	movs	r0, #0
 80005f4:	f002 f95a 	bl	80028ac <UART_Init>

  CAN_Init();
 80005f8:	f000 fd8e 	bl	8001118 <CAN_Init>
  CAN_Open(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
 80005fc:	2305      	movs	r3, #5
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fe0a 	bl	8001220 <CAN_Open>

  /* Init scheduler */
  osKernelInitialize();
 800060c:	f00d fd8e 	bl	800e12c <osKernelInitialize>
  //ethernetif_notify_conn_changed(&gnetif);


  // Chk Reset Count
  //uint32_t pre_time = HAL_GetTick();
  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <AppMain+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d902      	bls.n	800061e <AppMain+0x4a>
 8000618:	4808      	ldr	r0, [pc, #32]	; (800063c <AppMain+0x68>)
 800061a:	f002 fb29 	bl	8002c70 <svDebugMessage>

  g_hTaskMain = osThreadNew(TaskMain, NULL, &TaskMain_attributes);
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <AppMain+0x6c>)
 8000620:	2100      	movs	r1, #0
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <AppMain+0x70>)
 8000624:	f00d fdd2 	bl	800e1cc <osThreadNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <AppMain+0x74>)
 800062c:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800062e:	f00d fda3 	bl	800e178 <osKernelStart>
  while(1)
  {
    /* End OF ECHO SERVER  */


    svDebugProcess();
 8000632:	f002 fa91 	bl	8002b58 <svDebugProcess>
 8000636:	e7fc      	b.n	8000632 <AppMain+0x5e>
 8000638:	20000028 	.word	0x20000028
 800063c:	08011284 	.word	0x08011284
 8000640:	0801164c 	.word	0x0801164c
 8000644:	0800064d 	.word	0x0800064d
 8000648:	200000d8 	.word	0x200000d8

0800064c <TaskMain>:
    */
  }
}

void TaskMain(void* argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  LED_OnOff(LED3_RED, TRUE);
 8000654:	2101      	movs	r1, #1
 8000656:	2003      	movs	r0, #3
 8000658:	f002 f822 	bl	80026a0 <LED_OnOff>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	d103      	bne.n	800067e <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 8000676:	2101      	movs	r1, #1
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 800067a:	f004 f907 	bl	800488c <HAL_GPIO_TogglePin>
  }
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	42020400 	.word	0x42020400

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f002 fb24 	bl	8002cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f80e 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f92a 	bl	80008f0 <MX_GPIO_Init>
  MX_FLASH_Init();
 800069c:	f000 f874 	bl	8000788 <MX_FLASH_Init>
  MX_ICACHE_Init();
 80006a0:	f000 f884 	bl	80007ac <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 80006a4:	f000 f88e 	bl	80007c4 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80006a8:	f000 f8d6 	bl	8000858 <MX_USART3_UART_Init>
  /* Start scheduler */
  osKernelStart();
#endif

#if 1
  AppMain();
 80006ac:	f7ff ff92 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x24>
	...

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09c      	sub	sp, #112	; 0x70
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2250      	movs	r2, #80	; 0x50
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f010 f9d2 	bl	8010a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <SystemClock_Config+0xd0>)
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	4a29      	ldr	r2, [pc, #164]	; (8000784 <SystemClock_Config+0xd0>)
 80006e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006e4:	6113      	str	r3, [r2, #16]
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <SystemClock_Config+0xd0>)
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f2:	bf00      	nop
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemClock_Config+0xd0>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	2b08      	cmp	r3, #8
 80006fe:	d1f9      	bne.n	80006f4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000700:	2309      	movs	r3, #9
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000704:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800070a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000714:	2303      	movs	r3, #3
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 800071c:	2314      	movs	r3, #20
 800071e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800072c:	230c      	movs	r3, #12
 800072e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000730:	2300      	movs	r3, #0
 8000732:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f004 f901 	bl	8004944 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000748:	f000 f9e6 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	231f      	movs	r3, #31
 800074e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2303      	movs	r3, #3
 8000752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2103      	movs	r1, #3
 800076a:	4618      	mov	r0, r3
 800076c:	f004 fd22 	bl	80051b4 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000776:	f000 f9cf 	bl	8000b18 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3770      	adds	r7, #112	; 0x70
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	44020800 	.word	0x44020800

08000788 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 800078c:	f003 fcde 	bl	800414c <HAL_FLASH_Unlock>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 8000796:	f000 f9bf 	bl	8000b18 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 800079a:	f003 fcfd 	bl	8004198 <HAL_FLASH_Lock>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 80007a4:	f000 f9b8 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80007b0:	f004 f8b8 	bl	8004924 <HAL_ICACHE_Enable>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80007ba:	f000 f9ad 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007ca:	4a21      	ldr	r2, [pc, #132]	; (8000850 <MX_LPUART1_UART_Init+0x8c>)
 80007cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <MX_LPUART1_UART_Init+0x90>)
 80007d2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007e8:	220c      	movs	r2, #12
 80007ea:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 8000800:	2200      	movs	r2, #0
 8000802:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 8000806:	f00a fcb5 	bl	800b174 <HAL_UART_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000810:	f000 f982 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 8000818:	f00c fbeb 	bl	800cff2 <HAL_UARTEx_SetTxFifoThreshold>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000822:	f000 f979 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4808      	ldr	r0, [pc, #32]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 800082a:	f00c fc20 	bl	800d06e <HAL_UARTEx_SetRxFifoThreshold>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000834:	f000 f970 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 800083a:	f00c fba1 	bl	800cf80 <HAL_UARTEx_DisableFifoMode>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000844:	f000 f968 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000dc 	.word	0x200000dc
 8000850:	44002400 	.word	0x44002400
 8000854:	00033324 	.word	0x00033324

08000858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <MX_USART3_UART_Init+0x94>)
 8000860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 80008a2:	f00a fc67 	bl	800b174 <HAL_UART_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008ac:	f000 f934 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 80008b4:	f00c fb9d 	bl	800cff2 <HAL_UARTEx_SetTxFifoThreshold>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f92b 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 80008c6:	f00c fbd2 	bl	800d06e <HAL_UARTEx_SetRxFifoThreshold>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008d0:	f000 f922 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_USART3_UART_Init+0x90>)
 80008d6:	f00c fb53 	bl	800cf80 <HAL_UARTEx_DisableFifoMode>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008e0:	f000 f91a 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000170 	.word	0x20000170
 80008ec:	40004800 	.word	0x40004800

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800090c:	4a69      	ldr	r2, [pc, #420]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000916:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	623b      	str	r3, [r7, #32]
 8000922:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000924:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800092a:	4a62      	ldr	r2, [pc, #392]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000934:	4b5f      	ldr	r3, [pc, #380]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000942:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000948:	4a5a      	ldr	r2, [pc, #360]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000952:	4b58      	ldr	r3, [pc, #352]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000958:	f003 0320 	and.w	r3, r3, #32
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000960:	4b54      	ldr	r3, [pc, #336]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000966:	4a53      	ldr	r2, [pc, #332]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000970:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000984:	4a4b      	ldr	r2, [pc, #300]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800098e:	4b49      	ldr	r3, [pc, #292]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 800099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a2:	4a44      	ldr	r2, [pc, #272]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ac:	4b41      	ldr	r3, [pc, #260]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 80009bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c0:	4a3c      	ldr	r2, [pc, #240]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009d0:	f003 0308 	and.w	r3, r3, #8
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d8:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 80009da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009de:	4a35      	ldr	r2, [pc, #212]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <MX_GPIO_Init+0x1c4>)
 80009ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2110      	movs	r1, #16
 80009fa:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <MX_GPIO_Init+0x1c8>)
 80009fc:	f003 ff2e 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2101      	movs	r1, #1
 8000a04:	482d      	ldr	r0, [pc, #180]	; (8000abc <MX_GPIO_Init+0x1cc>)
 8000a06:	f003 ff29 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	482c      	ldr	r0, [pc, #176]	; (8000ac0 <MX_GPIO_Init+0x1d0>)
 8000a10:	f003 ff24 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <MX_GPIO_Init+0x1d4>)
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4827      	ldr	r0, [pc, #156]	; (8000ac8 <MX_GPIO_Init+0x1d8>)
 8000a2a:	f003 fdc5 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a2e:	2310      	movs	r3, #16
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <MX_GPIO_Init+0x1c8>)
 8000a46:	f003 fdb7 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <MX_GPIO_Init+0x1cc>)
 8000a62:	f003 fda9 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000a66:	2310      	movs	r3, #16
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <MX_GPIO_Init+0x1d0>)
 8000a7e:	f003 fd9b 	bl	80045b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_GPIO_Init+0x1d4>)
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <MX_GPIO_Init+0x1d0>)
 8000a96:	f003 fd8f 	bl	80045b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2105      	movs	r1, #5
 8000a9e:	2018      	movs	r0, #24
 8000aa0:	f002 fa3e 	bl	8002f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000aa4:	2018      	movs	r0, #24
 8000aa6:	f002 fa55 	bl	8002f54 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aaa:	bf00      	nop
 8000aac:	3738      	adds	r7, #56	; 0x38
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	44020c00 	.word	0x44020c00
 8000ab8:	42021400 	.word	0x42021400
 8000abc:	42020400 	.word	0x42020400
 8000ac0:	42021800 	.word	0x42021800
 8000ac4:	10110000 	.word	0x10110000
 8000ac8:	42020800 	.word	0x42020800

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f002 f923 	bl	8002d28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  timeCounter++;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000aea:	6013      	str	r3, [r2, #0]

  if(timeCounter > 1000)
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000af4:	d905      	bls.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    timeFlag = TRUE;
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
    timeCounter = 0;
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40001000 	.word	0x40001000
 8000b10:	20000208 	.word	0x20000208
 8000b14:	20000204 	.word	0x20000204

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>

08000b22 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	f06f 0001 	mvn.w	r0, #1
 8000b2e:	f002 f9f7 	bl	8002f20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0d0      	sub	sp, #320	; 0x140
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000b46:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b60:	4618      	mov	r0, r3
 8000b62:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000b66:	461a      	mov	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f00f ff7f 	bl	8010a6c <memset>
  if(huart->Instance==LPUART1)
 8000b6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b72:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a9e      	ldr	r2, [pc, #632]	; (8000df4 <HAL_UART_MspInit+0x2bc>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d15e      	bne.n	8000c3e <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b84:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000b94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b98:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 fe7e 	bl	80058a8 <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000bb2:	f7ff ffb1 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b90      	ldr	r3, [pc, #576]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000bb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000bbc:	4a8e      	ldr	r2, [pc, #568]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000bc6:	4b8c      	ldr	r3, [pc, #560]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000bc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000bcc:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000bd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bde:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000be2:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	4b84      	ldr	r3, [pc, #528]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bea:	4a83      	ldr	r2, [pc, #524]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bf4:	4b80      	ldr	r3, [pc, #512]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bfa:	f003 0202 	and.w	r2, r3, #2
 8000bfe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c0c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c10:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c12:	23c0      	movs	r3, #192	; 0xc0
 8000c14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000c34:	4619      	mov	r1, r3
 8000c36:	4871      	ldr	r0, [pc, #452]	; (8000dfc <HAL_UART_MspInit+0x2c4>)
 8000c38:	f003 fcbe 	bl	80045b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c3c:	e0d5      	b.n	8000dea <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000c3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a6d      	ldr	r2, [pc, #436]	; (8000e00 <HAL_UART_MspInit+0x2c8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d165      	bne.n	8000d1c <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c54:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000c58:	f04f 0202 	mov.w	r2, #2
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c68:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c70:	f107 0320 	add.w	r3, r7, #32
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 fe17 	bl	80058a8 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000c80:	f7ff ff4a 	bl	8000b18 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c84:	4b5c      	ldr	r3, [pc, #368]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c8a:	4a5b      	ldr	r2, [pc, #364]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000c94:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c9a:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000c9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ca2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cb0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b51      	ldr	r3, [pc, #324]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cb8:	4a4f      	ldr	r2, [pc, #316]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cc2:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cc8:	f003 0208 	and.w	r2, r3, #8
 8000ccc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000cde:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ce0:	2360      	movs	r3, #96	; 0x60
 8000ce2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfe:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000d02:	4619      	mov	r1, r3
 8000d04:	483f      	ldr	r0, [pc, #252]	; (8000e04 <HAL_UART_MspInit+0x2cc>)
 8000d06:	f003 fc57 	bl	80045b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2105      	movs	r1, #5
 8000d0e:	203b      	movs	r0, #59	; 0x3b
 8000d10:	f002 f906 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d14:	203b      	movs	r0, #59	; 0x3b
 8000d16:	f002 f91d 	bl	8002f54 <HAL_NVIC_EnableIRQ>
}
 8000d1a:	e066      	b.n	8000dea <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8000d1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d20:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a37      	ldr	r2, [pc, #220]	; (8000e08 <HAL_UART_MspInit+0x2d0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d15d      	bne.n	8000dea <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d32:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d36:	f04f 0204 	mov.w	r2, #4
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 fda8 	bl	80058a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8000d5e:	f7ff fedb 	bl	8000b18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d68:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000d6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d78:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000d7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d8a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000d8e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d96:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_UART_MspInit+0x2c0>)
 8000da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000da6:	f003 0208 	and.w	r2, r3, #8
 8000daa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000db8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000dbc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dde:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000de2:	4619      	mov	r1, r3
 8000de4:	4807      	ldr	r0, [pc, #28]	; (8000e04 <HAL_UART_MspInit+0x2cc>)
 8000de6:	f003 fbe7 	bl	80045b8 <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	44002400 	.word	0x44002400
 8000df8:	44020c00 	.word	0x44020c00
 8000dfc:	42020400 	.word	0x42020400
 8000e00:	40004400 	.word	0x40004400
 8000e04:	42020c00 	.word	0x42020c00
 8000e08:	40004800 	.word	0x40004800

08000e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e14:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <HAL_InitTick+0xd8>)
 8000e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e1a:	4a32      	ldr	r2, [pc, #200]	; (8000ee4 <HAL_InitTick+0xd8>)
 8000e1c:	f043 0310 	orr.w	r3, r3, #16
 8000e20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <HAL_InitTick+0xd8>)
 8000e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e32:	f107 020c 	add.w	r2, r7, #12
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fcfb 	bl	8005838 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d103      	bne.n	8000e54 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4c:	f004 fcb2 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8000e50:	6378      	str	r0, [r7, #52]	; 0x34
 8000e52:	e004      	b.n	8000e5e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e54:	f004 fcae 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e60:	095b      	lsrs	r3, r3, #5
 8000e62:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <HAL_InitTick+0xdc>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	09db      	lsrs	r3, r3, #7
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <HAL_InitTick+0xe0>)
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <HAL_InitTick+0xe4>)
 8000e72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_InitTick+0xe0>)
 8000e76:	2263      	movs	r2, #99	; 0x63
 8000e78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_InitTick+0xe0>)
 8000e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_InitTick+0xe0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_InitTick+0xe0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e8c:	4817      	ldr	r0, [pc, #92]	; (8000eec <HAL_InitTick+0xe0>)
 8000e8e:	f009 fd8b 	bl	800a9a8 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d118      	bne.n	8000ed2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ea0:	4812      	ldr	r0, [pc, #72]	; (8000eec <HAL_InitTick+0xe0>)
 8000ea2:	f009 fde3 	bl	800aa6c <HAL_TIM_Base_Start_IT>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10e      	bne.n	8000ed2 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	d808      	bhi.n	8000ecc <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	2031      	movs	r0, #49	; 0x31
 8000ec0:	f002 f82e 	bl	8002f20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_InitTick+0xe8>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e002      	b.n	8000ed2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000ed2:	2031      	movs	r0, #49	; 0x31
 8000ed4:	f002 f83e 	bl	8002f54 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000ed8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3738      	adds	r7, #56	; 0x38
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	44020c00 	.word	0x44020c00
 8000ee8:	0a7c5ac5 	.word	0x0a7c5ac5
 8000eec:	2000020c 	.word	0x2000020c
 8000ef0:	40001000 	.word	0x40001000
 8000ef4:	2000002c 	.word	0x2000002c

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000f28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f2c:	f003 fcc8 	bl	80048c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM6_IRQHandler+0x10>)
 8000f3a:	f009 fe45 	bl	800abc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000020c 	.word	0x2000020c

08000f48 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <USART2_IRQHandler+0x10>)
 8000f4e:	f00a fa61 	bl	800b414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000810 	.word	0x20000810

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d205      	bcs.n	8000f98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <_sbrk+0x6c>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	200a0000 	.word	0x200a0000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20000258 	.word	0x20000258
 8000fc4:	20027420 	.word	0x20027420
 8000fc8:	20027418 	.word	0x20027418

08000fcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <SystemInit+0xdc>)
 8000fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd8:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <SystemInit+0xdc>)
 8000fda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000fe2:	4b32      	ldr	r3, [pc, #200]	; (80010ac <SystemInit+0xe0>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <SystemInit+0xe0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000fee:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <SystemInit+0xe0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <SystemInit+0xe0>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	492c      	ldr	r1, [pc, #176]	; (80010ac <SystemInit+0xe0>)
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <SystemInit+0xe4>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <SystemInit+0xe0>)
 8001002:	2200      	movs	r2, #0
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <SystemInit+0xe0>)
 8001008:	2200      	movs	r2, #0
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <SystemInit+0xe0>)
 800100e:	2200      	movs	r2, #0
 8001010:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <SystemInit+0xe0>)
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <SystemInit+0xe8>)
 8001016:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <SystemInit+0xe0>)
 800101a:	2200      	movs	r2, #0
 800101c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <SystemInit+0xe0>)
 8001020:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <SystemInit+0xe8>)
 8001022:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <SystemInit+0xe0>)
 8001026:	2200      	movs	r2, #0
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <SystemInit+0xe0>)
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <SystemInit+0xe8>)
 800102e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <SystemInit+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <SystemInit+0xe0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <SystemInit+0xe0>)
 800103c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001040:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <SystemInit+0xe0>)
 8001044:	2200      	movs	r2, #0
 8001046:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <SystemInit+0xdc>)
 800104a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800104e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <SystemInit+0xec>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001058:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001060:	d003      	beq.n	800106a <SystemInit+0x9e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001068:	d117      	bne.n	800109a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <SystemInit+0xec>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <SystemInit+0xec>)
 8001078:	4a10      	ldr	r2, [pc, #64]	; (80010bc <SystemInit+0xf0>)
 800107a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <SystemInit+0xec>)
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <SystemInit+0xf4>)
 8001080:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <SystemInit+0xec>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <SystemInit+0xec>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <SystemInit+0xec>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <SystemInit+0xec>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	61d3      	str	r3, [r2, #28]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	44020c00 	.word	0x44020c00
 80010b0:	eae2eae3 	.word	0xeae2eae3
 80010b4:	01010280 	.word	0x01010280
 80010b8:	40022000 	.word	0x40022000
 80010bc:	08192a3b 	.word	0x08192a3b
 80010c0:	4c5d6e7f 	.word	0x4c5d6e7f

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c8:	f7ff ff80 	bl	8000fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	; (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f2:	f00f fce7 	bl	8010ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f6:	f7ff fac9 	bl	800068c <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001108:	0801186c 	.word	0x0801186c
  ldr r2, =_sbss
 800110c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001110:	20027420 	.word	0x20027420

08001114 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_IRQHandler>
	...

08001118 <CAN_Init>:
static volatile uint32_t err_int_cnt = 0;

static void CAN_ErrUpdate(uint8_t ch);

BOOL     CAN_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 800111e:	2301      	movs	r3, #1
 8001120:	603b      	str	r3, [r7, #0]

  for(int i=0; i<CAN_MAX_CH; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	e070      	b.n	800120a <CAN_Init+0xf2>
  {
    can_tbl[i].is_init = TRUE;
 8001128:	4a3c      	ldr	r2, [pc, #240]	; (800121c <CAN_Init+0x104>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f240 516c 	movw	r1, #1388	; 0x56c
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	4413      	add	r3, r2
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
    can_tbl[i].is_open = TRUE;
 800113a:	4a38      	ldr	r2, [pc, #224]	; (800121c <CAN_Init+0x104>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001142:	fb01 f303 	mul.w	r3, r1, r3
 8001146:	4413      	add	r3, r2
 8001148:	3304      	adds	r3, #4
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 800114e:	4a33      	ldr	r2, [pc, #204]	; (800121c <CAN_Init+0x104>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f240 516c 	movw	r1, #1388	; 0x56c
 8001156:	fb01 f303 	mul.w	r3, r1, r3
 800115a:	4413      	add	r3, r2
 800115c:	3308      	adds	r3, #8
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
    can_tbl[i].state = 0;
 8001162:	4a2e      	ldr	r2, [pc, #184]	; (800121c <CAN_Init+0x104>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f240 516c 	movw	r1, #1388	; 0x56c
 800116a:	fb01 f303 	mul.w	r3, r1, r3
 800116e:	4413      	add	r3, r2
 8001170:	330c      	adds	r3, #12
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 8001176:	4a29      	ldr	r2, [pc, #164]	; (800121c <CAN_Init+0x104>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f240 516c 	movw	r1, #1388	; 0x56c
 800117e:	fb01 f303 	mul.w	r3, r1, r3
 8001182:	4413      	add	r3, r2
 8001184:	3310      	adds	r3, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 800118a:	4a24      	ldr	r2, [pc, #144]	; (800121c <CAN_Init+0x104>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001192:	fb01 f303 	mul.w	r3, r1, r3
 8001196:	4413      	add	r3, r2
 8001198:	3314      	adds	r3, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 800119e:	4a1f      	ldr	r2, [pc, #124]	; (800121c <CAN_Init+0x104>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f240 516c 	movw	r1, #1388	; 0x56c
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	4413      	add	r3, r2
 80011ac:	3318      	adds	r3, #24
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 80011b2:	4a1a      	ldr	r2, [pc, #104]	; (800121c <CAN_Init+0x104>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f240 516c 	movw	r1, #1388	; 0x56c
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	4413      	add	r3, r2
 80011c0:	331c      	adds	r3, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <CAN_Init+0x104>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f240 516c 	movw	r1, #1388	; 0x56c
 80011ce:	fb01 f303 	mul.w	r3, r1, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	3320      	adds	r3, #32
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(CAN_MSG_t), CAN_MSG_RX_BUF_MAX);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f240 526c 	movw	r2, #1388	; 0x56c
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	3398      	adds	r3, #152	; 0x98
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <CAN_Init+0x104>)
 80011e8:	1898      	adds	r0, r3, r2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f240 526c 	movw	r2, #1388	; 0x56c
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	33a8      	adds	r3, #168	; 0xa8
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <CAN_Init+0x104>)
 80011f8:	4413      	add	r3, r2
 80011fa:	1d19      	adds	r1, r3, #4
 80011fc:	2310      	movs	r3, #16
 80011fe:	224c      	movs	r2, #76	; 0x4c
 8001200:	f00b ffc2 	bl	800d188 <qbufferCreateBySize>
  for(int i=0; i<CAN_MAX_CH; i++)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3301      	adds	r3, #1
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	dd8b      	ble.n	8001128 <CAN_Init+0x10>

  }
  return ret;
 8001210:	683b      	ldr	r3, [r7, #0]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000025c 	.word	0x2000025c

08001220 <CAN_Open>:

BOOL     CAN_Open(uint8_t ch, CAN_MODE_t mode, CAN_FRAME_t frame, CAN_BAUD_t baud, CAN_BAUD_t baud_data)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af02      	add	r7, sp, #8
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	4611      	mov	r1, r2
 800122c:	461a      	mov	r2, r3
 800122e:	4623      	mov	r3, r4
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	4603      	mov	r3, r0
 8001234:	71bb      	strb	r3, [r7, #6]
 8001236:	460b      	mov	r3, r1
 8001238:	717b      	strb	r3, [r7, #5]
 800123a:	4613      	mov	r3, r2
 800123c:	713b      	strb	r3, [r7, #4]
  BOOL ret = TRUE;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;

  p_can = &can_tbl[ch].hfdcan;
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f240 526c 	movw	r2, #1388	; 0x56c
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	3330      	adds	r3, #48	; 0x30
 800124e:	4a90      	ldr	r2, [pc, #576]	; (8001490 <CAN_Open+0x270>)
 8001250:	4413      	add	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
  if(ch >= CAN_MAX_CH) return FALSE;
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <CAN_Open+0x3e>
 800125a:	2300      	movs	r3, #0
 800125c:	e114      	b.n	8001488 <CAN_Open+0x268>

  switch(ch)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 80a8 	bne.w	80013b6 <CAN_Open+0x196>
  {
    case _DEF_CAN1:
      p_can->Instance = FDCAN1;
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4a8a      	ldr	r2, [pc, #552]	; (8001494 <CAN_Open+0x274>)
 800126a:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat = frame_tbl[frame];
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	4a88      	ldr	r2, [pc, #544]	; (8001498 <CAN_Open+0x278>)
 8001276:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode = mode_tbl[mode];
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	4a86      	ldr	r2, [pc, #536]	; (800149c <CAN_Open+0x27c>)
 8001282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission = ENABLE;
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	2201      	movs	r2, #1
 800128e:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause = ENABLE;
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2201      	movs	r2, #1
 8001294:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException = ENABLE;
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	2201      	movs	r2, #1
 800129a:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 800129c:	4b80      	ldr	r3, [pc, #512]	; (80014a0 <CAN_Open+0x280>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	793b      	ldrb	r3, [r7, #4]
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 80012ac:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <CAN_Open+0x280>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	793b      	ldrb	r3, [r7, #4]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 80012bc:	4b78      	ldr	r3, [pc, #480]	; (80014a0 <CAN_Open+0x280>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	793b      	ldrb	r3, [r7, #4]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 80012cc:	4b74      	ldr	r3, [pc, #464]	; (80014a0 <CAN_Open+0x280>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	793b      	ldrb	r3, [r7, #4]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 80012dc:	4b71      	ldr	r3, [pc, #452]	; (80014a4 <CAN_Open+0x284>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 80012ee:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <CAN_Open+0x284>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	4413      	add	r3, r2
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 8001300:	4b68      	ldr	r3, [pc, #416]	; (80014a4 <CAN_Open+0x284>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 8001312:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <CAN_Open+0x284>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr = 28;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	221c      	movs	r2, #28
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr = 8;
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2208      	movs	r2, #8
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION; //FIFO MODE
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	2200      	movs	r2, #0
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
      can_tbl[ch].mode                  = mode;
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4a55      	ldr	r2, [pc, #340]	; (8001490 <CAN_Open+0x270>)
 800133a:	f240 516c 	movw	r1, #1388	; 0x56c
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	4413      	add	r3, r2
 8001344:	332c      	adds	r3, #44	; 0x2c
 8001346:	79ba      	ldrb	r2, [r7, #6]
 8001348:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4a50      	ldr	r2, [pc, #320]	; (8001490 <CAN_Open+0x270>)
 800134e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	4413      	add	r3, r2
 8001358:	332d      	adds	r3, #45	; 0x2d
 800135a:	797a      	ldrb	r2, [r7, #5]
 800135c:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <CAN_Open+0x270>)
 8001362:	f240 516c 	movw	r1, #1388	; 0x56c
 8001366:	fb01 f303 	mul.w	r3, r1, r3
 800136a:	4413      	add	r3, r2
 800136c:	332e      	adds	r3, #46	; 0x2e
 800136e:	793a      	ldrb	r2, [r7, #4]
 8001370:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4a46      	ldr	r2, [pc, #280]	; (8001490 <CAN_Open+0x270>)
 8001376:	f240 516c 	movw	r1, #1388	; 0x56c
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	4413      	add	r3, r2
 8001380:	332f      	adds	r3, #47	; 0x2f
 8001382:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001386:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4a41      	ldr	r2, [pc, #260]	; (8001490 <CAN_Open+0x270>)
 800138c:	f240 516c 	movw	r1, #1388	; 0x56c
 8001390:	fb01 f303 	mul.w	r3, r1, r3
 8001394:	4413      	add	r3, r2
 8001396:	3324      	adds	r3, #36	; 0x24
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4a3c      	ldr	r2, [pc, #240]	; (8001490 <CAN_Open+0x270>)
 80013a0:	f240 516c 	movw	r1, #1388	; 0x56c
 80013a4:	fb01 f303 	mul.w	r3, r1, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	3328      	adds	r3, #40	; 0x28
 80013ac:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <CAN_Open+0x288>)
 80013ae:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;

      ret = TRUE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]

      break;
 80013b4:	bf00      	nop
  }

  if(ret != TRUE)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d001      	beq.n	80013c0 <CAN_Open+0x1a0>
  {
    return FALSE;
 80013bc:	2300      	movs	r3, #0
 80013be:	e063      	b.n	8001488 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 80013c0:	6938      	ldr	r0, [r7, #16]
 80013c2:	f001 fe7b 	bl	80030bc <HAL_FDCAN_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <CAN_Open+0x1b0>
  {
    return FALSE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e05b      	b.n	8001488 <CAN_Open+0x268>
  }

  CAN_ConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 80013d0:	79f8      	ldrb	r0, [r7, #7]
 80013d2:	2300      	movs	r3, #0
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	f000 f866 	bl	80014ac <CAN_ConfigFilter>
  CAN_ConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 80013e0:	79f8      	ldrb	r0, [r7, #7]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	2201      	movs	r2, #1
 80013ea:	2100      	movs	r1, #0
 80013ec:	f000 f85e 	bl	80014ac <CAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2300      	movs	r3, #0
 80013f6:	2202      	movs	r2, #2
 80013f8:	2102      	movs	r1, #2
 80013fa:	6938      	ldr	r0, [r7, #16]
 80013fc:	f002 f812 	bl	8003424 <HAL_FDCAN_ConfigGlobalFilter>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <CAN_Open+0x1ea>
  {
    return FALSE;
 8001406:	2300      	movs	r3, #0
 8001408:	e03e      	b.n	8001488 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <CAN_Open+0x270>)
 800140e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4413      	add	r3, r2
 8001418:	3328      	adds	r3, #40	; 0x28
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	6938      	ldr	r0, [r7, #16]
 8001422:	f002 fade 	bl	80039e2 <HAL_FDCAN_ActivateNotification>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <CAN_Open+0x210>
  {
    return FALSE;
 800142c:	2300      	movs	r3, #0
 800142e:	e02b      	b.n	8001488 <CAN_Open+0x268>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return FALSE;
 800143e:	2200      	movs	r2, #0
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	6938      	ldr	r0, [r7, #16]
 8001444:	f002 f81f 	bl	8003486 <HAL_FDCAN_ConfigTxDelayCompensation>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <CAN_Open+0x232>
 800144e:	2300      	movs	r3, #0
 8001450:	e01a      	b.n	8001488 <CAN_Open+0x268>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return FALSE;
 8001452:	6938      	ldr	r0, [r7, #16]
 8001454:	f002 f839 	bl	80034ca <HAL_FDCAN_EnableTxDelayCompensation>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <CAN_Open+0x242>
 800145e:	2300      	movs	r3, #0
 8001460:	e012      	b.n	8001488 <CAN_Open+0x268>

  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 8001462:	6938      	ldr	r0, [r7, #16]
 8001464:	f002 f852 	bl	800350c <HAL_FDCAN_Start>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <CAN_Open+0x252>
  {
    return FALSE;
 800146e:	2300      	movs	r3, #0
 8001470:	e00a      	b.n	8001488 <CAN_Open+0x268>
  }

  can_tbl[ch].is_open = TRUE;
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <CAN_Open+0x270>)
 8001476:	f240 516c 	movw	r1, #1388	; 0x56c
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	4413      	add	r3, r2
 8001480:	3304      	adds	r3, #4
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

  return ret;
 8001486:	697b      	ldr	r3, [r7, #20]
}
 8001488:	4618      	mov	r0, r3
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	2000025c 	.word	0x2000025c
 8001494:	4000a400 	.word	0x4000a400
 8001498:	080117d8 	.word	0x080117d8
 800149c:	080117e4 	.word	0x080117e4
 80014a0:	20000004 	.word	0x20000004
 80014a4:	20000008 	.word	0x20000008
 80014a8:	000e0007 	.word	0x000e0007

080014ac <CAN_ConfigFilter>:
void     CAN_Close(uint8_t ch)
{

}
BOOL     CAN_ConfigFilter(uint8_t ch, uint8_t index, CAN_ID_TYPE_t id_type, uint32_t id, uint32_t id_mask)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	460b      	mov	r3, r1
 80014ba:	71bb      	strb	r3, [r7, #6]
 80014bc:	4613      	mov	r3, r2
 80014be:	717b      	strb	r3, [r7, #5]
  BOOL ret = FALSE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24

  FDCAN_FilterTypeDef sFilterConfig;

  if (ch >= CAN_MAX_CH) return FALSE;
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <CAN_ConfigFilter+0x22>
 80014ca:	2300      	movs	r3, #0
 80014cc:	e034      	b.n	8001538 <CAN_ConfigFilter+0x8c>


  if (id_type == CAN_STD)
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <CAN_ConfigFilter+0x2e>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e002      	b.n	80014e0 <CAN_ConfigFilter+0x34>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80014da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014de:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <CAN_ConfigFilter+0x94>)
 80014e4:	f240 516c 	movw	r1, #1388	; 0x56c
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	3324      	adds	r3, #36	; 0x24
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b40      	cmp	r3, #64	; 0x40
 80014f4:	d102      	bne.n	80014fc <CAN_ConfigFilter+0x50>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	e001      	b.n	8001500 <CAN_ConfigFilter+0x54>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 8001500:	79bb      	ldrb	r3, [r7, #6]
 8001502:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK; //Classic filter
 8001504:	2302      	movs	r3, #2
 8001506:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 800150c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150e:	623b      	str	r3, [r7, #32]


  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f240 526c 	movw	r2, #1388	; 0x56c
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	3330      	adds	r3, #48	; 0x30
 800151c:	4a08      	ldr	r2, [pc, #32]	; (8001540 <CAN_ConfigFilter+0x94>)
 800151e:	4413      	add	r3, r2
 8001520:	f107 020c 	add.w	r2, r7, #12
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f001 ff22 	bl	8003370 <HAL_FDCAN_ConfigFilter>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <CAN_ConfigFilter+0x8a>
  {
    ret = TRUE;
 8001532:	2301      	movs	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001538:	4618      	mov	r0, r3
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000025c 	.word	0x2000025c

08001544 <CAN_MsgAvailable>:

uint32_t CAN_MsgAvailable(uint8_t ch)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d901      	bls.n	8001558 <CAN_MsgAvailable+0x14>
 8001554:	2300      	movs	r3, #0
 8001556:	e00b      	b.n	8001570 <CAN_MsgAvailable+0x2c>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f240 526c 	movw	r2, #1388	; 0x56c
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	3398      	adds	r3, #152	; 0x98
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <CAN_MsgAvailable+0x34>)
 8001566:	4413      	add	r3, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f00b fef0 	bl	800d34e <qbufferAvailable>
 800156e:	4603      	mov	r3, r0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000025c 	.word	0x2000025c

0800157c <CAN_MsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return TRUE;
}

BOOL     CAN_MsgWrite(uint8_t ch, CAN_MSG_t *p_msg, uint32_t timeout)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b090      	sub	sp, #64	; 0x40
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	73fb      	strb	r3, [r7, #15]
  {
    FDCAN_HandleTypeDef  *p_can;
    FDCAN_TxHeaderTypeDef tx_header;
    uint32_t pre_time;
    BOOL ret = TRUE;
 800158a:	2301      	movs	r3, #1
 800158c:	63fb      	str	r3, [r7, #60]	; 0x3c


    if(ch > CAN_MAX_CH) return FALSE;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d901      	bls.n	8001598 <CAN_MsgWrite+0x1c>
 8001594:	2300      	movs	r3, #0
 8001596:	e083      	b.n	80016a0 <CAN_MsgWrite+0x124>

    if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return FALSE;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	4a43      	ldr	r2, [pc, #268]	; (80016a8 <CAN_MsgWrite+0x12c>)
 800159c:	f240 516c 	movw	r1, #1388	; 0x56c
 80015a0:	fb01 f303 	mul.w	r3, r1, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	3308      	adds	r3, #8
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <CAN_MsgWrite+0x3a>
 80015b2:	2300      	movs	r3, #0
 80015b4:	e074      	b.n	80016a0 <CAN_MsgWrite+0x124>


    p_can = &can_tbl[ch].hfdcan;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	f240 526c 	movw	r2, #1388	; 0x56c
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	3330      	adds	r3, #48	; 0x30
 80015c2:	4a39      	ldr	r2, [pc, #228]	; (80016a8 <CAN_MsgWrite+0x12c>)
 80015c4:	4413      	add	r3, r2
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch(p_msg->id_type)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <CAN_MsgWrite+0x5c>
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d003      	beq.n	80015de <CAN_MsgWrite+0x62>
 80015d6:	e006      	b.n	80015e6 <CAN_MsgWrite+0x6a>
    {
      case CAN_STD :
        tx_header.IdType = FDCAN_STANDARD_ID;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
        break;
 80015dc:	e003      	b.n	80015e6 <CAN_MsgWrite+0x6a>

      case CAN_EXT :
        tx_header.IdType = FDCAN_EXTENDED_ID;
 80015de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e2:	617b      	str	r3, [r7, #20]
        break;
 80015e4:	bf00      	nop
    }

    switch(p_msg->frame)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d011      	beq.n	8001614 <CAN_MsgWrite+0x98>
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	dc16      	bgt.n	8001622 <CAN_MsgWrite+0xa6>
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <CAN_MsgWrite+0x82>
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d005      	beq.n	8001608 <CAN_MsgWrite+0x8c>
 80015fc:	e011      	b.n	8001622 <CAN_MsgWrite+0xa6>
    {
      case CAN_CLASSIC:
        tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001606:	e00c      	b.n	8001622 <CAN_MsgWrite+0xa6>

      case CAN_FD_NO_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 8001608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001612:	e006      	b.n	8001622 <CAN_MsgWrite+0xa6>

      case CAN_FD_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 8001614:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_ON;
 800161a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001620:	bf00      	nop
    }

    tx_header.Identifier          = p_msg->id;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
    tx_header.MessageMarker       = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
    tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
    tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800163e:	461a      	mov	r2, r3
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <CAN_MsgWrite+0x130>)
 8001642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001646:	61fb      	str	r3, [r7, #28]


    if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8001648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800164a:	f002 f9b8 	bl	80039be <HAL_FDCAN_GetTxFifoFreeLevel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <CAN_MsgWrite+0xdc>
    {
      return FALSE;
 8001654:	2300      	movs	r3, #0
 8001656:	e023      	b.n	80016a0 <CAN_MsgWrite+0x124>
    }


    pre_time = HAL_GetTick();
 8001658:	f001 fb7a 	bl	8002d50 <HAL_GetTick>
 800165c:	6378      	str	r0, [r7, #52]	; 0x34
    if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1d9a      	adds	r2, r3, #6
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800166a:	f001 ffe7 	bl	800363c <HAL_FDCAN_AddMessageToTxFifoQ>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d112      	bne.n	800169a <CAN_MsgWrite+0x11e>
    {
      /* Wait transmission complete */
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8001674:	e00a      	b.n	800168c <CAN_MsgWrite+0x110>
      {
        if (HAL_GetTick()-pre_time >= timeout)
 8001676:	f001 fb6b 	bl	8002d50 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	d802      	bhi.n	800168c <CAN_MsgWrite+0x110>
        {
          ret = FALSE;
 8001686:	2300      	movs	r3, #0
 8001688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800168a:	e008      	b.n	800169e <CAN_MsgWrite+0x122>
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 800168c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800168e:	f002 f996 	bl	80039be <HAL_FDCAN_GetTxFifoFreeLevel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ee      	beq.n	8001676 <CAN_MsgWrite+0xfa>
 8001698:	e001      	b.n	800169e <CAN_MsgWrite+0x122>
        }
      }
    }
    else
    {
      ret = FALSE;
 800169a:	2300      	movs	r3, #0
 800169c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    return ret;
 800169e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  }
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3740      	adds	r7, #64	; 0x40
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000025c 	.word	0x2000025c
 80016ac:	08011798 	.word	0x08011798

080016b0 <CAN_MsgRead>:
BOOL     CAN_MsgRead(uint8_t ch, CAN_MSG_t *p_msg)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  BOOL ret = TRUE;
 80016bc:	2301      	movs	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]

  if(ch > CAN_MAX_CH) return 0;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d901      	bls.n	80016ca <CAN_MsgRead+0x1a>
 80016c6:	2300      	movs	r3, #0
 80016c8:	e00e      	b.n	80016e8 <CAN_MsgRead+0x38>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f240 526c 	movw	r2, #1388	; 0x56c
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	3398      	adds	r3, #152	; 0x98
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <CAN_MsgRead+0x40>)
 80016d8:	4413      	add	r3, r2
 80016da:	2201      	movs	r2, #1
 80016dc:	6839      	ldr	r1, [r7, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f00b fdca 	bl	800d278 <qbufferRead>
 80016e4:	60f8      	str	r0, [r7, #12]

  return ret;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000025c 	.word	0x2000025c

080016f4 <CAN_GetRxErrCount>:

uint16_t CAN_GetRxErrCount(uint8_t ch)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d901      	bls.n	800170c <CAN_GetRxErrCount+0x18>
 8001708:	2300      	movs	r3, #0
 800170a:	e015      	b.n	8001738 <CAN_GetRxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f240 526c 	movw	r2, #1388	; 0x56c
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	3330      	adds	r3, #48	; 0x30
 8001718:	4a09      	ldr	r2, [pc, #36]	; (8001740 <CAN_GetRxErrCount+0x4c>)
 800171a:	4413      	add	r3, r2
 800171c:	f107 020c 	add.w	r2, r7, #12
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f002 f926 	bl	8003974 <HAL_FDCAN_GetErrorCounters>
 8001728:	4603      	mov	r3, r0
 800172a:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 800172c:	7f7b      	ldrb	r3, [r7, #29]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <CAN_GetRxErrCount+0x42>
  {
    ret = error_counters.RxErrorCnt;
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8001736:	8bfb      	ldrh	r3, [r7, #30]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000025c 	.word	0x2000025c

08001744 <CAN_GetTxErrCount>:
uint16_t CAN_GetTxErrCount(uint8_t ch)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d901      	bls.n	800175c <CAN_GetTxErrCount+0x18>
 8001758:	2300      	movs	r3, #0
 800175a:	e015      	b.n	8001788 <CAN_GetTxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f240 526c 	movw	r2, #1388	; 0x56c
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	3330      	adds	r3, #48	; 0x30
 8001768:	4a09      	ldr	r2, [pc, #36]	; (8001790 <CAN_GetTxErrCount+0x4c>)
 800176a:	4413      	add	r3, r2
 800176c:	f107 020c 	add.w	r2, r7, #12
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f002 f8fe 	bl	8003974 <HAL_FDCAN_GetErrorCounters>
 8001778:	4603      	mov	r3, r0
 800177a:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 800177c:	7f7b      	ldrb	r3, [r7, #29]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <CAN_GetTxErrCount+0x42>
  {
    ret = error_counters.TxErrorCnt;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8001786:	8bfb      	ldrh	r3, [r7, #30]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000025c 	.word	0x2000025c

08001794 <CAN_RxFifoCallback>:
  return HAL_FDCAN_GetState(&can_tbl[ch].hfdcan);
}


void CAN_RxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	; 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  CAN_MSG_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (CAN_MSG_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f240 526c 	movw	r2, #1388	; 0x56c
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	3398      	adds	r3, #152	; 0x98
 80017ac:	4a4b      	ldr	r2, [pc, #300]	; (80018dc <CAN_RxFifoCallback+0x148>)
 80017ae:	4413      	add	r3, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00b fdb9 	bl	800d328 <qbufferPeekWrite>
 80017b6:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4a48      	ldr	r2, [pc, #288]	; (80018dc <CAN_RxFifoCallback+0x148>)
 80017bc:	f240 516c 	movw	r1, #1388	; 0x56c
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	3324      	adds	r3, #36	; 0x24
 80017c8:	6819      	ldr	r1, [r3, #0]
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	3306      	adds	r3, #6
 80017ce:	f107 020c 	add.w	r2, r7, #12
 80017d2:	6838      	ldr	r0, [r7, #0]
 80017d4:	f001 ff76 	bl	80036c4 <HAL_FDCAN_GetRxMessage>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d179      	bne.n	80018d2 <CAN_RxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <CAN_RxFifoCallback+0x60>
    {
      rx_buf->id      = rx_header.Identifier;
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 80017ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80017f2:	e006      	b.n	8001802 <CAN_RxFifoCallback+0x6e>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 80017fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <CAN_RxFifoCallback+0x14c>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	b29a      	uxth	r2, r3
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800181c:	d10d      	bne.n	800183a <CAN_RxFifoCallback+0xa6>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001824:	d104      	bne.n	8001830 <CAN_RxFifoCallback+0x9c>
      {
        rx_buf->frame = CAN_FD_BRS;
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	2202      	movs	r2, #2
 800182a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800182e:	e008      	b.n	8001842 <CAN_RxFifoCallback+0xae>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 8001830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001838:	e003      	b.n	8001842 <CAN_RxFifoCallback+0xae>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != TRUE)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f240 526c 	movw	r2, #1388	; 0x56c
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	3398      	adds	r3, #152	; 0x98
 800184e:	4a23      	ldr	r2, [pc, #140]	; (80018dc <CAN_RxFifoCallback+0x148>)
 8001850:	4413      	add	r3, r2
 8001852:	2201      	movs	r2, #1
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f00b fcb5 	bl	800d1c6 <qbufferWrite>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d011      	beq.n	8001886 <CAN_RxFifoCallback+0xf2>
    {
      can_tbl[ch].q_rx_full_cnt++;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	491d      	ldr	r1, [pc, #116]	; (80018dc <CAN_RxFifoCallback+0x148>)
 8001866:	f240 526c 	movw	r2, #1388	; 0x56c
 800186a:	fb03 f202 	mul.w	r2, r3, r2
 800186e:	440a      	add	r2, r1
 8001870:	3214      	adds	r2, #20
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	3201      	adds	r2, #1
 8001876:	4919      	ldr	r1, [pc, #100]	; (80018dc <CAN_RxFifoCallback+0x148>)
 8001878:	f240 506c 	movw	r0, #1388	; 0x56c
 800187c:	fb00 f303 	mul.w	r3, r0, r3
 8001880:	440b      	add	r3, r1
 8001882:	3314      	adds	r3, #20
 8001884:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <CAN_RxFifoCallback+0x148>)
 800188a:	f240 516c 	movw	r1, #1388	; 0x56c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3394      	adds	r3, #148	; 0x94
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01a      	beq.n	80018d2 <CAN_RxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == TRUE)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <CAN_RxFifoCallback+0x148>)
 80018a0:	f240 516c 	movw	r1, #1388	; 0x56c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3394      	adds	r3, #148	; 0x94
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018b0:	4798      	blx	r3
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10c      	bne.n	80018d2 <CAN_RxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f240 526c 	movw	r2, #1388	; 0x56c
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	3398      	adds	r3, #152	; 0x98
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <CAN_RxFifoCallback+0x148>)
 80018c6:	4413      	add	r3, r2
 80018c8:	2201      	movs	r2, #1
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00b fcd3 	bl	800d278 <qbufferRead>
      }
    }
  }
}
 80018d2:	bf00      	nop
 80018d4:	3738      	adds	r7, #56	; 0x38
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000025c 	.word	0x2000025c
 80018e0:	08011758 	.word	0x08011758

080018e4 <CAN_Recovery>:

  can_tbl[ch].handler = NULL;
}

void CAN_Recovery(uint8_t ch)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d828      	bhi.n	8001946 <CAN_Recovery+0x62>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f240 526c 	movw	r2, #1388	; 0x56c
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	3330      	adds	r3, #48	; 0x30
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <CAN_Recovery+0x6c>)
 8001902:	4413      	add	r3, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f001 fe29 	bl	800355c <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f240 526c 	movw	r2, #1388	; 0x56c
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	3330      	adds	r3, #48	; 0x30
 8001916:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <CAN_Recovery+0x6c>)
 8001918:	4413      	add	r3, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fdf6 	bl	800350c <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	490b      	ldr	r1, [pc, #44]	; (8001950 <CAN_Recovery+0x6c>)
 8001924:	f240 526c 	movw	r2, #1388	; 0x56c
 8001928:	fb03 f202 	mul.w	r2, r3, r2
 800192c:	440a      	add	r2, r1
 800192e:	3210      	adds	r2, #16
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	3201      	adds	r2, #1
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <CAN_Recovery+0x6c>)
 8001936:	f240 506c 	movw	r0, #1388	; 0x56c
 800193a:	fb00 f303 	mul.w	r3, r0, r3
 800193e:	440b      	add	r3, r1
 8001940:	3310      	adds	r3, #16
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e000      	b.n	8001948 <CAN_Recovery+0x64>
  if(ch > CAN_MAX_CH) return;
 8001946:	bf00      	nop
}
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000025c 	.word	0x2000025c

08001954 <CAN_Update>:

BOOL     CAN_Update(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
  BOOL ret = FALSE;
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
  CAN_TBL_t *p_can;

  for (int i=0; i<CAN_MAX_CH; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	e02f      	b.n	80019c4 <CAN_Update+0x70>
  {
    p_can = &can_tbl[i];
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f240 526c 	movw	r2, #1388	; 0x56c
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <CAN_Update+0x80>)
 8001970:	4413      	add	r3, r2
 8001972:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7b1b      	ldrb	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <CAN_Update+0x2e>
 800197c:	2b01      	cmp	r3, #1
 800197e:	d011      	beq.n	80019a4 <CAN_Update+0x50>
 8001980:	e01d      	b.n	80019be <CAN_Update+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	2b00      	cmp	r3, #0
 800198c:	d014      	beq.n	80019b8 <CAN_Update+0x64>
        {
          CAN_Recovery(i);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ffa6 	bl	80018e4 <CAN_Recovery>
          p_can->state = 1;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	731a      	strb	r2, [r3, #12]
          ret = TRUE;
 800199e:	2301      	movs	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80019a2:	e009      	b.n	80019b8 <CAN_Update+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <CAN_Update+0x68>
        {
          p_can->state = 0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	731a      	strb	r2, [r3, #12]
        }
        break;
 80019b6:	e001      	b.n	80019bc <CAN_Update+0x68>
        break;
 80019b8:	bf00      	nop
 80019ba:	e000      	b.n	80019be <CAN_Update+0x6a>
        break;
 80019bc:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	ddcc      	ble.n	8001964 <CAN_Update+0x10>
    }
  }

  return ret;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000025c 	.word	0x2000025c

080019d8 <CAN_ErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void     CAN_ErrPrint(uint8_t ch)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d822      	bhi.n	8001a2e <CAN_ErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <CAN_ErrPrint+0x60>)
 80019ec:	f240 516c 	movw	r1, #1388	; 0x56c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3308      	adds	r3, #8
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) UART_Printf("  ERR : CAN_ERR_PASSIVE\n");
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <CAN_ErrPrint+0x34>
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <CAN_ErrPrint+0x64>)
 8001a08:	f001 f81c 	bl	8002a44 <UART_Printf>
  if (err_code & CAN_ERR_WARNING) UART_Printf("  ERR : CAN_ERR_WARNING\n");
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <CAN_ErrPrint+0x44>
 8001a16:	480a      	ldr	r0, [pc, #40]	; (8001a40 <CAN_ErrPrint+0x68>)
 8001a18:	f001 f814 	bl	8002a44 <UART_Printf>
  if (err_code & CAN_ERR_BUS_OFF) UART_Printf("  ERR : CAN_ERR_BUS_OFF\n");
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <CAN_ErrPrint+0x58>
 8001a26:	4807      	ldr	r0, [pc, #28]	; (8001a44 <CAN_ErrPrint+0x6c>)
 8001a28:	f001 f80c 	bl	8002a44 <UART_Printf>
 8001a2c:	e000      	b.n	8001a30 <CAN_ErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 8001a2e:	bf00      	nop
}
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000025c 	.word	0x2000025c
 8001a3c:	0801129c 	.word	0x0801129c
 8001a40:	080112b8 	.word	0x080112b8
 8001a44:	080112d4 	.word	0x080112d4

08001a48 <CAN_ErrUpdate>:

void CAN_ErrUpdate(uint8_t ch)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08e      	sub	sp, #56	; 0x38
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f240 526c 	movw	r2, #1388	; 0x56c
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	3330      	adds	r3, #48	; 0x30
 8001a5e:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001a60:	4413      	add	r3, r2
 8001a62:	f107 020c 	add.w	r2, r7, #12
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f001 ff33 	bl	80038d4 <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d014      	beq.n	8001a9e <CAN_ErrUpdate+0x56>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4a42      	ldr	r2, [pc, #264]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001a78:	f240 516c 	movw	r1, #1388	; 0x56c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	3308      	adds	r3, #8
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	493c      	ldr	r1, [pc, #240]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001a8e:	f240 506c 	movw	r0, #1388	; 0x56c
 8001a92:	fb00 f303 	mul.w	r3, r0, r3
 8001a96:	440b      	add	r3, r1
 8001a98:	3308      	adds	r3, #8
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e013      	b.n	8001ac6 <CAN_ErrUpdate+0x7e>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	4a37      	ldr	r2, [pc, #220]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001aa2:	f240 516c 	movw	r1, #1388	; 0x56c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3308      	adds	r3, #8
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	4932      	ldr	r1, [pc, #200]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001ab8:	f240 506c 	movw	r0, #1388	; 0x56c
 8001abc:	fb00 f303 	mul.w	r3, r0, r3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d014      	beq.n	8001af6 <CAN_ErrUpdate+0xae>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	4a2c      	ldr	r2, [pc, #176]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001ad0:	f240 516c 	movw	r1, #1388	; 0x56c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3308      	adds	r3, #8
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f042 0202 	orr.w	r2, r2, #2
 8001ae4:	4926      	ldr	r1, [pc, #152]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001ae6:	f240 506c 	movw	r0, #1388	; 0x56c
 8001aea:	fb00 f303 	mul.w	r3, r0, r3
 8001aee:	440b      	add	r3, r1
 8001af0:	3308      	adds	r3, #8
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e013      	b.n	8001b1e <CAN_ErrUpdate+0xd6>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001afa:	f240 516c 	movw	r1, #1388	; 0x56c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	3308      	adds	r3, #8
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f022 0202 	bic.w	r2, r2, #2
 8001b0e:	491c      	ldr	r1, [pc, #112]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001b10:	f240 506c 	movw	r0, #1388	; 0x56c
 8001b14:	fb00 f303 	mul.w	r3, r0, r3
 8001b18:	440b      	add	r3, r1
 8001b1a:	3308      	adds	r3, #8
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d014      	beq.n	8001b4e <CAN_ErrUpdate+0x106>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001b28:	f240 516c 	movw	r1, #1388	; 0x56c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	3308      	adds	r3, #8
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f042 0204 	orr.w	r2, r2, #4
 8001b3c:	4910      	ldr	r1, [pc, #64]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001b3e:	f240 506c 	movw	r0, #1388	; 0x56c
 8001b42:	fb00 f303 	mul.w	r3, r0, r3
 8001b46:	440b      	add	r3, r1
 8001b48:	3308      	adds	r3, #8
 8001b4a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8001b4c:	e013      	b.n	8001b76 <CAN_ErrUpdate+0x12e>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001b52:	f240 516c 	movw	r1, #1388	; 0x56c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3308      	adds	r3, #8
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f022 0204 	bic.w	r2, r2, #4
 8001b66:	4906      	ldr	r1, [pc, #24]	; (8001b80 <CAN_ErrUpdate+0x138>)
 8001b68:	f240 506c 	movw	r0, #1388	; 0x56c
 8001b6c:	fb00 f303 	mul.w	r3, r0, r3
 8001b70:	440b      	add	r3, r1
 8001b72:	3308      	adds	r3, #8
 8001b74:	601a      	str	r2, [r3, #0]
}
 8001b76:	bf00      	nop
 8001b78:	3738      	adds	r7, #56	; 0x38
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000025c 	.word	0x2000025c

08001b84 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]

  CAN_ErrUpdate(ch);
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff57 	bl	8001a48 <CAN_ErrUpdate>
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_FDCAN_ErrorCallback+0x54>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <HAL_FDCAN_ErrorCallback+0x54>)
 8001bb8:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d013      	beq.n	8001bea <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <HAL_FDCAN_ErrorCallback+0x58>)
 8001bc6:	f240 516c 	movw	r1, #1388	; 0x56c
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	f042 0210 	orr.w	r2, r2, #16
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <HAL_FDCAN_ErrorCallback+0x58>)
 8001bdc:	f240 506c 	movw	r0, #1388	; 0x56c
 8001be0:	fb00 f303 	mul.w	r3, r0, r3
 8001be4:	440b      	add	r3, r1
 8001be6:	3308      	adds	r3, #8
 8001be8:	601a      	str	r2, [r3, #0]
  }
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200007c8 	.word	0x200007c8
 8001bfc:	2000025c 	.word	0x2000025c

08001c00 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN1].hfdcan);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <FDCAN1_IT0_IRQHandler+0x10>)
 8001c06:	f001 ffd2 	bl	8003bae <HAL_FDCAN_IRQHandler>
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000028c 	.word	0x2000028c

08001c14 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    CAN_RxFifoCallback(_DEF_CAN1, hfdcan);
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff fdb2 	bl	8001794 <CAN_RxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d004      	beq.n	8001c44 <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001c42:	61d3      	str	r3, [r2, #28]
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	3301      	adds	r3, #1
 8001c54:	4a02      	ldr	r2, [pc, #8]	; (8001c60 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001c56:	6213      	str	r3, [r2, #32]
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000025c 	.word	0x2000025c

08001c64 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0cc      	sub	sp, #304	; 0x130
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c72:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c88:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001c92:	461a      	mov	r2, r3
 8001c94:	2100      	movs	r1, #0
 8001c96:	f00e fee9 	bl	8010a6c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <HAL_FDCAN_MspInit+0x120>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d166      	bne.n	8001d7a <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cb0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0304 	mov.w	r3, #4
 8001cbc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cc4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fde8 	bl	80058a8 <HAL_RCCEx_PeriphCLKConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 8001cde:	f7fe ff1b 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_FDCAN_MspInit+0x124>)
 8001ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_FDCAN_MspInit+0x124>)
 8001cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_FDCAN_MspInit+0x124>)
 8001cf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001cf8:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8001cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d0a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d0e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_FDCAN_MspInit+0x124>)
 8001d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_FDCAN_MspInit+0x124>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_FDCAN_MspInit+0x124>)
 8001d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d26:	f003 0201 	and.w	r2, r3, #1
 8001d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d38:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d3c:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001d58:	2309      	movs	r3, #9
 8001d5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001d62:	4619      	mov	r1, r3
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <HAL_FDCAN_MspInit+0x128>)
 8001d66:	f002 fc27 	bl	80045b8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2105      	movs	r1, #5
 8001d6e:	2027      	movs	r0, #39	; 0x27
 8001d70:	f001 f8d6 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001d74:	2027      	movs	r0, #39	; 0x27
 8001d76:	f001 f8ed 	bl	8002f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001d7a:	bf00      	nop
 8001d7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	4000a400 	.word	0x4000a400
 8001d88:	44020c00 	.word	0x44020c00
 8001d8c:	42020000 	.word	0x42020000

08001d90 <CLI_FDCANTest>:
}

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (CAN_TEST, "CAN", "CAN [1(INFO),2(READ),3(SEND)] [SEND ID]", CLI_FDCANTest)
static void CLI_FDCANTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b0a1      	sub	sp, #132	; 0x84
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
  BOOL ret = FALSE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (nCount == 2)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	f040 822b 	bne.w	8002200 <CLI_FDCANTest+0x470>
  {
    switch(nFirst)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	f000 80d3 	beq.w	8001f58 <CLI_FDCANTest+0x1c8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	f200 8223 	bhi.w	8002200 <CLI_FDCANTest+0x470>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d003      	beq.n	8001dc8 <CLI_FDCANTest+0x38>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d062      	beq.n	8001e8c <CLI_FDCANTest+0xfc>
          }
        }
        ret = TRUE;
    }
  }
}
 8001dc6:	e21b      	b.n	8002200 <CLI_FDCANTest+0x470>
        for (int i=0; i<CAN_MAX_CH; i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dcc:	e057      	b.n	8001e7e <CLI_FDCANTest+0xee>
          DebugMsg(DEBUGMSG_CLI,"is_open       : %d\n", can_tbl[i].is_open);
 8001dce:	4b94      	ldr	r3, [pc, #592]	; (8002020 <CLI_FDCANTest+0x290>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00c      	beq.n	8001df0 <CLI_FDCANTest+0x60>
 8001dd6:	4a93      	ldr	r2, [pc, #588]	; (8002024 <CLI_FDCANTest+0x294>)
 8001dd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dda:	f240 516c 	movw	r1, #1388	; 0x56c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	488f      	ldr	r0, [pc, #572]	; (8002028 <CLI_FDCANTest+0x298>)
 8001dec:	f000 ff40 	bl	8002c70 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8001df0:	4b8b      	ldr	r3, [pc, #556]	; (8002020 <CLI_FDCANTest+0x290>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00c      	beq.n	8001e12 <CLI_FDCANTest+0x82>
 8001df8:	4a8a      	ldr	r2, [pc, #552]	; (8002024 <CLI_FDCANTest+0x294>)
 8001dfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dfc:	f240 516c 	movw	r1, #1388	; 0x56c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3314      	adds	r3, #20
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4887      	ldr	r0, [pc, #540]	; (800202c <CLI_FDCANTest+0x29c>)
 8001e0e:	f000 ff2f 	bl	8002c70 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 8001e12:	4b83      	ldr	r3, [pc, #524]	; (8002020 <CLI_FDCANTest+0x290>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <CLI_FDCANTest+0xa4>
 8001e1a:	4a82      	ldr	r2, [pc, #520]	; (8002024 <CLI_FDCANTest+0x294>)
 8001e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e1e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3318      	adds	r3, #24
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4880      	ldr	r0, [pc, #512]	; (8002030 <CLI_FDCANTest+0x2a0>)
 8001e30:	f000 ff1e 	bl	8002c70 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 8001e34:	4b7a      	ldr	r3, [pc, #488]	; (8002020 <CLI_FDCANTest+0x290>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00c      	beq.n	8001e56 <CLI_FDCANTest+0xc6>
 8001e3c:	4a79      	ldr	r2, [pc, #484]	; (8002024 <CLI_FDCANTest+0x294>)
 8001e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e40:	f240 516c 	movw	r1, #1388	; 0x56c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	331c      	adds	r3, #28
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4878      	ldr	r0, [pc, #480]	; (8002034 <CLI_FDCANTest+0x2a4>)
 8001e52:	f000 ff0d 	bl	8002c70 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 8001e56:	4b72      	ldr	r3, [pc, #456]	; (8002020 <CLI_FDCANTest+0x290>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <CLI_FDCANTest+0xe8>
 8001e5e:	4a71      	ldr	r2, [pc, #452]	; (8002024 <CLI_FDCANTest+0x294>)
 8001e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e62:	f240 516c 	movw	r1, #1388	; 0x56c
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3320      	adds	r3, #32
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	4871      	ldr	r0, [pc, #452]	; (8002038 <CLI_FDCANTest+0x2a8>)
 8001e74:	f000 fefc 	bl	8002c70 <svDebugMessage>
        for (int i=0; i<CAN_MAX_CH; i++)
 8001e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	dda4      	ble.n	8001dce <CLI_FDCANTest+0x3e>
        ret = TRUE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 8001e88:	bf00      	nop
}
 8001e8a:	e1b9      	b.n	8002200 <CLI_FDCANTest+0x470>
        uint32_t index = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	67bb      	str	r3, [r7, #120]	; 0x78
        while(svCLI_KeepLoop())
 8001e90:	e05d      	b.n	8001f4e <CLI_FDCANTest+0x1be>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff fb56 	bl	8001544 <CAN_MsgAvailable>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d057      	beq.n	8001f4e <CLI_FDCANTest+0x1be>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff fc03 	bl	80016b0 <CAN_MsgRead>
            index %= 1000;
 8001eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eac:	4a63      	ldr	r2, [pc, #396]	; (800203c <CLI_FDCANTest+0x2ac>)
 8001eae:	fba2 1203 	umull	r1, r2, r2, r3
 8001eb2:	0992      	lsrs	r2, r2, #6
 8001eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eb8:	fb01 f202 	mul.w	r2, r1, r2
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", index++);
 8001ec0:	4b57      	ldr	r3, [pc, #348]	; (8002020 <CLI_FDCANTest+0x290>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <CLI_FDCANTest+0x146>
 8001ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	67ba      	str	r2, [r7, #120]	; 0x78
 8001ece:	4619      	mov	r1, r3
 8001ed0:	485b      	ldr	r0, [pc, #364]	; (8002040 <CLI_FDCANTest+0x2b0>)
 8001ed2:	f000 fecd 	bl	8002c70 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8001ed6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d107      	bne.n	8001eee <CLI_FDCANTest+0x15e>
              DebugMsg(DEBUGMSG_CLI,"std ");
 8001ede:	4b50      	ldr	r3, [pc, #320]	; (8002020 <CLI_FDCANTest+0x290>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <CLI_FDCANTest+0x16c>
 8001ee6:	4857      	ldr	r0, [pc, #348]	; (8002044 <CLI_FDCANTest+0x2b4>)
 8001ee8:	f000 fec2 	bl	8002c70 <svDebugMessage>
 8001eec:	e006      	b.n	8001efc <CLI_FDCANTest+0x16c>
              DebugMsg(DEBUGMSG_CLI,"ext ");
 8001eee:	4b4c      	ldr	r3, [pc, #304]	; (8002020 <CLI_FDCANTest+0x290>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <CLI_FDCANTest+0x16c>
 8001ef6:	4854      	ldr	r0, [pc, #336]	; (8002048 <CLI_FDCANTest+0x2b8>)
 8001ef8:	f000 feba 	bl	8002c70 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8001efc:	4b48      	ldr	r3, [pc, #288]	; (8002020 <CLI_FDCANTest+0x290>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <CLI_FDCANTest+0x180>
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	8aba      	ldrh	r2, [r7, #20]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4850      	ldr	r0, [pc, #320]	; (800204c <CLI_FDCANTest+0x2bc>)
 8001f0c:	f000 feb0 	bl	8002c70 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	677b      	str	r3, [r7, #116]	; 0x74
 8001f14:	e00f      	b.n	8001f36 <CLI_FDCANTest+0x1a6>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8001f16:	4b42      	ldr	r3, [pc, #264]	; (8002020 <CLI_FDCANTest+0x290>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <CLI_FDCANTest+0x1a0>
 8001f1e:	f107 0216 	add.w	r2, r7, #22
 8001f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4849      	ldr	r0, [pc, #292]	; (8002050 <CLI_FDCANTest+0x2c0>)
 8001f2c:	f000 fea0 	bl	8002c70 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8001f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f32:	3301      	adds	r3, #1
 8001f34:	677b      	str	r3, [r7, #116]	; 0x74
 8001f36:	8abb      	ldrh	r3, [r7, #20]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	dbea      	blt.n	8001f16 <CLI_FDCANTest+0x186>
            DebugMsg(DEBUGMSG_CLI,"\n");
 8001f40:	4b37      	ldr	r3, [pc, #220]	; (8002020 <CLI_FDCANTest+0x290>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <CLI_FDCANTest+0x1be>
 8001f48:	4842      	ldr	r0, [pc, #264]	; (8002054 <CLI_FDCANTest+0x2c4>)
 8001f4a:	f000 fe91 	bl	8002c70 <svDebugMessage>
        while(svCLI_KeepLoop())
 8001f4e:	f00b fb05 	bl	800d55c <svCLI_KeepLoop>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d19c      	bne.n	8001e92 <CLI_FDCANTest+0x102>
        uint32_t num = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
        err_code = can_tbl[_DEF_CAN1].err_code;
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <CLI_FDCANTest+0x294>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	66bb      	str	r3, [r7, #104]	; 0x68
        while(svCLI_KeepLoop())
 8001f62:	e145      	b.n	80021f0 <CLI_FDCANTest+0x460>
          if (HAL_GetTick()-pre_time >= 1000)
 8001f64:	f000 fef4 	bl	8002d50 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f72:	f0c0 80be 	bcc.w	80020f2 <CLI_FDCANTest+0x362>
            pre_time = HAL_GetTick();
 8001f76:	f000 feeb 	bl	8002d50 <HAL_GetTick>
 8001f7a:	6738      	str	r0, [r7, #112]	; 0x70
            msg.frame   = CAN_CLASSIC;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            msg.id_type = CAN_EXT;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg.dlc     = CAN_DLC_2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            msg.id      = nAddress;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	613b      	str	r3, [r7, #16]
            msg.length  = 2;
 8001f92:	2302      	movs	r3, #2
 8001f94:	82bb      	strh	r3, [r7, #20]
            msg.data[0] = 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75bb      	strb	r3, [r7, #22]
            msg.data[1] = 2;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	75fb      	strb	r3, [r7, #23]
            if (CAN_MsgWrite(_DEF_CAN1, &msg, 10) > 0)
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	220a      	movs	r2, #10
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff fae8 	bl	800157c <CAN_MsgWrite>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d070      	beq.n	8002094 <CLI_FDCANTest+0x304>
              index %= 1000;
 8001fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fb4:	4a21      	ldr	r2, [pc, #132]	; (800203c <CLI_FDCANTest+0x2ac>)
 8001fb6:	fba2 1203 	umull	r1, r2, r2, r3
 8001fba:	0992      	lsrs	r2, r2, #6
 8001fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fc0:	fb01 f202 	mul.w	r2, r1, r2
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	67bb      	str	r3, [r7, #120]	; 0x78
              DebugMsg(DEBUGMSG_CLI,"%03d(T) -> id ", num++);
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <CLI_FDCANTest+0x290>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <CLI_FDCANTest+0x24e>
 8001fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	481f      	ldr	r0, [pc, #124]	; (8002058 <CLI_FDCANTest+0x2c8>)
 8001fda:	f000 fe49 	bl	8002c70 <svDebugMessage>
              if (msg.id_type == CAN_STD)
 8001fde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d107      	bne.n	8001ff6 <CLI_FDCANTest+0x266>
                DebugMsg(DEBUGMSG_CLI,"std ");
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <CLI_FDCANTest+0x290>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <CLI_FDCANTest+0x274>
 8001fee:	4815      	ldr	r0, [pc, #84]	; (8002044 <CLI_FDCANTest+0x2b4>)
 8001ff0:	f000 fe3e 	bl	8002c70 <svDebugMessage>
 8001ff4:	e006      	b.n	8002004 <CLI_FDCANTest+0x274>
                DebugMsg(DEBUGMSG_CLI,"ext ");
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <CLI_FDCANTest+0x290>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <CLI_FDCANTest+0x274>
 8001ffe:	4812      	ldr	r0, [pc, #72]	; (8002048 <CLI_FDCANTest+0x2b8>)
 8002000:	f000 fe36 	bl	8002c70 <svDebugMessage>
              DebugMsg(DEBUGMSG_CLI, ": 0x%08X, L:%02d, ", msg.id, msg.length);
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <CLI_FDCANTest+0x290>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <CLI_FDCANTest+0x288>
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	8aba      	ldrh	r2, [r7, #20]
 8002010:	4619      	mov	r1, r3
 8002012:	480e      	ldr	r0, [pc, #56]	; (800204c <CLI_FDCANTest+0x2bc>)
 8002014:	f000 fe2c 	bl	8002c70 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 8002018:	2300      	movs	r3, #0
 800201a:	667b      	str	r3, [r7, #100]	; 0x64
 800201c:	e02e      	b.n	800207c <CLI_FDCANTest+0x2ec>
 800201e:	bf00      	nop
 8002020:	20000028 	.word	0x20000028
 8002024:	2000025c 	.word	0x2000025c
 8002028:	0801131c 	.word	0x0801131c
 800202c:	08011330 	.word	0x08011330
 8002030:	08011344 	.word	0x08011344
 8002034:	08011358 	.word	0x08011358
 8002038:	0801136c 	.word	0x0801136c
 800203c:	10624dd3 	.word	0x10624dd3
 8002040:	08011380 	.word	0x08011380
 8002044:	08011390 	.word	0x08011390
 8002048:	08011398 	.word	0x08011398
 800204c:	080113a0 	.word	0x080113a0
 8002050:	080113b4 	.word	0x080113b4
 8002054:	080113bc 	.word	0x080113bc
 8002058:	080113c0 	.word	0x080113c0
                DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <CLI_FDCANTest+0x478>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <CLI_FDCANTest+0x2e6>
 8002064:	f107 0216 	add.w	r2, r7, #22
 8002068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800206a:	4413      	add	r3, r2
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	4619      	mov	r1, r3
 8002070:	4866      	ldr	r0, [pc, #408]	; (800220c <CLI_FDCANTest+0x47c>)
 8002072:	f000 fdfd 	bl	8002c70 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 8002076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002078:	3301      	adds	r3, #1
 800207a:	667b      	str	r3, [r7, #100]	; 0x64
 800207c:	8abb      	ldrh	r3, [r7, #20]
 800207e:	461a      	mov	r2, r3
 8002080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002082:	4293      	cmp	r3, r2
 8002084:	dbea      	blt.n	800205c <CLI_FDCANTest+0x2cc>
              DebugMsg(DEBUGMSG_CLI,"\n");
 8002086:	4b60      	ldr	r3, [pc, #384]	; (8002208 <CLI_FDCANTest+0x478>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <CLI_FDCANTest+0x304>
 800208e:	4860      	ldr	r0, [pc, #384]	; (8002210 <CLI_FDCANTest+0x480>)
 8002090:	f000 fdee 	bl	8002c70 <svDebugMessage>
            if (CAN_GetRxErrCount(_DEF_CAN1) > 0 || CAN_GetTxErrCount(_DEF_CAN1) > 0)
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff fb2d 	bl	80016f4 <CAN_GetRxErrCount>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <CLI_FDCANTest+0x31c>
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fb4f 	bl	8001744 <CAN_GetTxErrCount>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d011      	beq.n	80020d0 <CLI_FDCANTest+0x340>
              DebugMsg(DEBUGMSG_CLI,"ErrCnt : %d, %d\n", CAN_GetRxErrCount(_DEF_CAN1), CAN_GetTxErrCount(_DEF_CAN1));
 80020ac:	4b56      	ldr	r3, [pc, #344]	; (8002208 <CLI_FDCANTest+0x478>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <CLI_FDCANTest+0x340>
 80020b4:	2000      	movs	r0, #0
 80020b6:	f7ff fb1d 	bl	80016f4 <CAN_GetRxErrCount>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461c      	mov	r4, r3
 80020be:	2000      	movs	r0, #0
 80020c0:	f7ff fb40 	bl	8001744 <CAN_GetTxErrCount>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4621      	mov	r1, r4
 80020ca:	4852      	ldr	r0, [pc, #328]	; (8002214 <CLI_FDCANTest+0x484>)
 80020cc:	f000 fdd0 	bl	8002c70 <svDebugMessage>
            if (err_int_cnt > 0)
 80020d0:	4b51      	ldr	r3, [pc, #324]	; (8002218 <CLI_FDCANTest+0x488>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00c      	beq.n	80020f2 <CLI_FDCANTest+0x362>
              DebugMsg(DEBUGMSG_CLI,"Cnt : %d\n",err_int_cnt);
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <CLI_FDCANTest+0x478>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <CLI_FDCANTest+0x35c>
 80020e0:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <CLI_FDCANTest+0x488>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	484d      	ldr	r0, [pc, #308]	; (800221c <CLI_FDCANTest+0x48c>)
 80020e8:	f000 fdc2 	bl	8002c70 <svDebugMessage>
              err_int_cnt = 0;
 80020ec:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <CLI_FDCANTest+0x488>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
          if (can_tbl[_DEF_CAN1].err_code != err_code)
 80020f2:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <CLI_FDCANTest+0x490>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d00f      	beq.n	800211c <CLI_FDCANTest+0x38c>
            DebugMsg(DEBUGMSG_CLI, "ErrCode : 0x%X\n", can_tbl[_DEF_CAN1].err_code);
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <CLI_FDCANTest+0x478>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <CLI_FDCANTest+0x380>
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <CLI_FDCANTest+0x490>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4619      	mov	r1, r3
 800210a:	4846      	ldr	r0, [pc, #280]	; (8002224 <CLI_FDCANTest+0x494>)
 800210c:	f000 fdb0 	bl	8002c70 <svDebugMessage>
            CAN_ErrPrint(_DEF_CAN1);
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff fc61 	bl	80019d8 <CAN_ErrPrint>
            err_code = can_tbl[_DEF_CAN1].err_code;
 8002116:	4b42      	ldr	r3, [pc, #264]	; (8002220 <CLI_FDCANTest+0x490>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	66bb      	str	r3, [r7, #104]	; 0x68
          if (CAN_Update())
 800211c:	f7ff fc1a 	bl	8001954 <CAN_Update>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <CLI_FDCANTest+0x3a4>
            DebugMsg(DEBUGMSG_CLI,"BusOff Recovery\n");
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <CLI_FDCANTest+0x478>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <CLI_FDCANTest+0x3a4>
 800212e:	483e      	ldr	r0, [pc, #248]	; (8002228 <CLI_FDCANTest+0x498>)
 8002130:	f000 fd9e 	bl	8002c70 <svDebugMessage>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff fa05 	bl	8001544 <CAN_MsgAvailable>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d057      	beq.n	80021f0 <CLI_FDCANTest+0x460>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff fab2 	bl	80016b0 <CAN_MsgRead>
            index %= 1000;
 800214c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800214e:	4a37      	ldr	r2, [pc, #220]	; (800222c <CLI_FDCANTest+0x49c>)
 8002150:	fba2 1203 	umull	r1, r2, r2, r3
 8002154:	0992      	lsrs	r2, r2, #6
 8002156:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800215a:	fb01 f202 	mul.w	r2, r1, r2
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", num++);
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <CLI_FDCANTest+0x478>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <CLI_FDCANTest+0x3e8>
 800216a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002170:	4619      	mov	r1, r3
 8002172:	482f      	ldr	r0, [pc, #188]	; (8002230 <CLI_FDCANTest+0x4a0>)
 8002174:	f000 fd7c 	bl	8002c70 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8002178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <CLI_FDCANTest+0x400>
              DebugMsg(DEBUGMSG_CLI, "std ");
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <CLI_FDCANTest+0x478>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <CLI_FDCANTest+0x40e>
 8002188:	482a      	ldr	r0, [pc, #168]	; (8002234 <CLI_FDCANTest+0x4a4>)
 800218a:	f000 fd71 	bl	8002c70 <svDebugMessage>
 800218e:	e006      	b.n	800219e <CLI_FDCANTest+0x40e>
              DebugMsg(DEBUGMSG_CLI, "ext ");
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <CLI_FDCANTest+0x478>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <CLI_FDCANTest+0x40e>
 8002198:	4827      	ldr	r0, [pc, #156]	; (8002238 <CLI_FDCANTest+0x4a8>)
 800219a:	f000 fd69 	bl	8002c70 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <CLI_FDCANTest+0x478>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <CLI_FDCANTest+0x422>
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	8aba      	ldrh	r2, [r7, #20]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4823      	ldr	r0, [pc, #140]	; (800223c <CLI_FDCANTest+0x4ac>)
 80021ae:	f000 fd5f 	bl	8002c70 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	663b      	str	r3, [r7, #96]	; 0x60
 80021b6:	e00f      	b.n	80021d8 <CLI_FDCANTest+0x448>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <CLI_FDCANTest+0x478>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <CLI_FDCANTest+0x442>
 80021c0:	f107 0216 	add.w	r2, r7, #22
 80021c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c6:	4413      	add	r3, r2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	480f      	ldr	r0, [pc, #60]	; (800220c <CLI_FDCANTest+0x47c>)
 80021ce:	f000 fd4f 	bl	8002c70 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80021d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d4:	3301      	adds	r3, #1
 80021d6:	663b      	str	r3, [r7, #96]	; 0x60
 80021d8:	8abb      	ldrh	r3, [r7, #20]
 80021da:	461a      	mov	r2, r3
 80021dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021de:	4293      	cmp	r3, r2
 80021e0:	dbea      	blt.n	80021b8 <CLI_FDCANTest+0x428>
            DebugMsg(DEBUGMSG_CLI,"\n");
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <CLI_FDCANTest+0x478>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <CLI_FDCANTest+0x460>
 80021ea:	4809      	ldr	r0, [pc, #36]	; (8002210 <CLI_FDCANTest+0x480>)
 80021ec:	f000 fd40 	bl	8002c70 <svDebugMessage>
        while(svCLI_KeepLoop())
 80021f0:	f00b f9b4 	bl	800d55c <svCLI_KeepLoop>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f47f aeb4 	bne.w	8001f64 <CLI_FDCANTest+0x1d4>
        ret = TRUE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	65fb      	str	r3, [r7, #92]	; 0x5c
}
 8002200:	bf00      	nop
 8002202:	3784      	adds	r7, #132	; 0x84
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	20000028 	.word	0x20000028
 800220c:	080113b4 	.word	0x080113b4
 8002210:	080113bc 	.word	0x080113bc
 8002214:	080113d0 	.word	0x080113d0
 8002218:	200007c8 	.word	0x200007c8
 800221c:	080113e4 	.word	0x080113e4
 8002220:	2000025c 	.word	0x2000025c
 8002224:	080113f0 	.word	0x080113f0
 8002228:	08011400 	.word	0x08011400
 800222c:	10624dd3 	.word	0x10624dd3
 8002230:	08011380 	.word	0x08011380
 8002234:	08011390 	.word	0x08011390
 8002238:	08011398 	.word	0x08011398
 800223c:	080113a0 	.word	0x080113a0

08002240 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	; 0x30
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 800225a:	f001 ff77 	bl	800414c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <Flash_Erase+0xb0>)
 8002260:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002264:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	623b      	str	r3, [r7, #32]
 8002276:	e013      	b.n	80022a0 <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	b29b      	uxth	r3, r3
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f837 	bl	80022f4 <Flash_InSector>
 8002286:	4603      	mov	r3, r0
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	2b00      	cmp	r3, #0
 8002290:	da01      	bge.n	8002296 <Flash_Erase+0x56>
      {
        start_sector = i;
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	3301      	adds	r3, #1
 800229e:	623b      	str	r3, [r7, #32]
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	2b7f      	cmp	r3, #127	; 0x7f
 80022a4:	dde8      	ble.n	8002278 <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db19      	blt.n	80022e0 <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80022ac:	2304      	movs	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 80022b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80022c2:	f107 0208 	add.w	r2, r7, #8
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 f86f 	bl	80043b0 <HAL_FLASHEx_Erase>
 80022d2:	4603      	mov	r3, r0
 80022d4:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 80022d6:	7ffb      	ldrb	r3, [r7, #31]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <Flash_Erase+0xa0>
    {
      ret = TRUE;
 80022dc:	2301      	movs	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 80022e0:	f001 ff5a 	bl	8004198 <HAL_FLASH_Lock>
  return ret;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3730      	adds	r7, #48	; 0x30
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40022000 	.word	0x40022000

080022f4 <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b08b      	sub	sp, #44	; 0x2c
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 8002306:	89fb      	ldrh	r3, [r7, #14]
 8002308:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800230c:	035b      	lsls	r3, r3, #13
 800230e:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8002316:	331f      	adds	r3, #31
 8002318:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	3b01      	subs	r3, #1
 8002326:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8002328:	6a3a      	ldr	r2, [r7, #32]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	429a      	cmp	r2, r3
 800232e:	d305      	bcc.n	800233c <Flash_InSector+0x48>
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	d801      	bhi.n	800233c <Flash_InSector+0x48>
  {
    ret = TRUE;
 8002338:	2301      	movs	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	429a      	cmp	r2, r3
 8002342:	d305      	bcc.n	8002350 <Flash_InSector+0x5c>
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	d801      	bhi.n	8002350 <Flash_InSector+0x5c>
  {
    ret = TRUE;
 800234c:	2301      	movs	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	429a      	cmp	r2, r3
 8002356:	d305      	bcc.n	8002364 <Flash_InSector+0x70>
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	429a      	cmp	r2, r3
 800235e:	d801      	bhi.n	8002364 <Flash_InSector+0x70>
  {
    ret = TRUE;
 8002360:	2301      	movs	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	429a      	cmp	r2, r3
 800236a:	d305      	bcc.n	8002378 <Flash_InSector+0x84>
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	429a      	cmp	r2, r3
 8002372:	d801      	bhi.n	8002378 <Flash_InSector+0x84>
  {
    ret = TRUE;
 8002374:	2301      	movs	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800237a:	4618      	mov	r0, r3
 800237c:	372c      	adds	r7, #44	; 0x2c
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b092      	sub	sp, #72	; 0x48
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 8002392:	2301      	movs	r3, #1
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 8002396:	f001 fed9 	bl	800414c <HAL_FLASH_Unlock>

  index = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 80023a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <Flash_Write+0x2e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	f200 808e 	bhi.w	80024d0 <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 80023bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	2210      	movs	r2, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f00e fba3 	bl	8010b10 <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 80023ca:	f107 0210 	add.w	r2, r7, #16
 80023ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d0:	18d0      	adds	r0, r2, r3
 80023d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d4:	f1c3 0210 	rsb	r2, r3, #16
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4293      	cmp	r3, r2
 80023dc:	bf28      	it	cs
 80023de:	4613      	movcs	r3, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	f00e fb94 	bl	8010b10 <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	461a      	mov	r2, r3
 80023ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023f0:	2002      	movs	r0, #2
 80023f2:	f001 fe33 	bl	800405c <HAL_FLASH_Program>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 80023fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <Flash_Write+0x82>
    {
      return FALSE;
 8002404:	2300      	movs	r3, #0
 8002406:	e06c      	b.n	80024e2 <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d107      	bne.n	800241e <Flash_Write+0x98>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d804      	bhi.n	800241e <Flash_Write+0x98>
    {
      index += length;
 8002414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	643b      	str	r3, [r7, #64]	; 0x40
 800241c:	e004      	b.n	8002428 <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 800241e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	3310      	adds	r3, #16
 8002426:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 8002428:	e052      	b.n	80024d0 <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b10      	cmp	r3, #16
 8002432:	bf28      	it	cs
 8002434:	2310      	movcs	r3, #16
 8002436:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	2b10      	cmp	r3, #16
 800243c:	d117      	bne.n	800246e <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002442:	18d1      	adds	r1, r2, r3
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002448:	4413      	add	r3, r2
 800244a:	461a      	mov	r2, r3
 800244c:	2002      	movs	r0, #2
 800244e:	f001 fe05 	bl	800405c <HAL_FLASH_Program>
 8002452:	4603      	mov	r3, r0
 8002454:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8002458:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <Flash_Write+0xe0>
      {
        ret = FALSE;
 8002460:	2300      	movs	r3, #0
 8002462:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002464:	e03a      	b.n	80024dc <Flash_Write+0x156>
      }
      index += write_length;
 8002466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	4413      	add	r3, r2
 800246c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002472:	429a      	cmp	r2, r3
 8002474:	d02c      	beq.n	80024d0 <Flash_Write+0x14a>
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d827      	bhi.n	80024d0 <Flash_Write+0x14a>
    {
      offset = length - index;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248c:	4413      	add	r3, r2
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8002490:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	2210      	movs	r2, #16
 8002498:	4618      	mov	r0, r3
 800249a:	f00e fb39 	bl	8010b10 <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a2:	18d1      	adds	r1, r2, r3
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00e fb30 	bl	8010b10 <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	461a      	mov	r2, r3
 80024b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024b8:	2002      	movs	r0, #2
 80024ba:	f001 fdcf 	bl	800405c <HAL_FLASH_Program>
 80024be:	4603      	mov	r3, r0
 80024c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 80024c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <Flash_Write+0x154>
      {
        return FALSE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e008      	b.n	80024e2 <Flash_Write+0x15c>
  while(index < length)
 80024d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3a8      	bcc.n	800242a <Flash_Write+0xa4>
 80024d8:	e000      	b.n	80024dc <Flash_Write+0x156>
      }
      break;
 80024da:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 80024dc:	f001 fe5c 	bl	8004198 <HAL_FLASH_Lock>
  return ret;
 80024e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3748      	adds	r7, #72	; 0x48
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b089      	sub	sp, #36	; 0x24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e00c      	b.n	800251e <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4413      	add	r3, r2
 800250a:	7819      	ldrb	r1, [r3, #0]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	4413      	add	r3, r2
 8002514:	460a      	mov	r2, r1
 8002516:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3301      	adds	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d8ee      	bhi.n	8002504 <Flash_Read+0x1a>
  }



  return ret;
 8002526:	69bb      	ldr	r3, [r7, #24]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3724      	adds	r7, #36	; 0x24
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b09a      	sub	sp, #104	; 0x68
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b02      	cmp	r3, #2
 8002546:	f040 8085 	bne.w	8002654 <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d049      	beq.n	80025e4 <CLI_FlashTest+0xb0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d871      	bhi.n	800263a <CLI_FlashTest+0x106>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d003      	beq.n	8002564 <CLI_FlashTest+0x30>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d029      	beq.n	80025b6 <CLI_FlashTest+0x82>
 8002562:	e06a      	b.n	800263a <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 8002564:	4b3d      	ldr	r3, [pc, #244]	; (800265c <CLI_FlashTest+0x128>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <CLI_FlashTest+0x3e>
 800256c:	483c      	ldr	r0, [pc, #240]	; (8002660 <CLI_FlashTest+0x12c>)
 800256e:	f000 fb7f 	bl	8002c70 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	2210      	movs	r2, #16
 8002578:	4619      	mov	r1, r3
 800257a:	6838      	ldr	r0, [r7, #0]
 800257c:	f7ff ffb5 	bl	80024ea <Flash_Read>
        for(int i=0; i<16; i++)
 8002580:	2300      	movs	r3, #0
 8002582:	667b      	str	r3, [r7, #100]	; 0x64
 8002584:	e013      	b.n	80025ae <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 8002586:	4b35      	ldr	r3, [pc, #212]	; (800265c <CLI_FlashTest+0x128>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <CLI_FlashTest+0x74>
 800258e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	18d1      	adds	r1, r2, r3
 8002594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	3368      	adds	r3, #104	; 0x68
 800259a:	443b      	add	r3, r7
 800259c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4830      	ldr	r0, [pc, #192]	; (8002664 <CLI_FlashTest+0x130>)
 80025a4:	f000 fb64 	bl	8002c70 <svDebugMessage>
        for(int i=0; i<16; i++)
 80025a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025aa:	3301      	adds	r3, #1
 80025ac:	667b      	str	r3, [r7, #100]	; 0x64
 80025ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025b0:	2b0f      	cmp	r3, #15
 80025b2:	dde8      	ble.n	8002586 <CLI_FlashTest+0x52>
        }
        break;
 80025b4:	e04e      	b.n	8002654 <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 80025b6:	2110      	movs	r1, #16
 80025b8:	6838      	ldr	r0, [r7, #0]
 80025ba:	f7ff fe41 	bl	8002240 <Flash_Erase>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <CLI_FlashTest+0x128>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d03e      	beq.n	800264a <CLI_FlashTest+0x116>
 80025cc:	4826      	ldr	r0, [pc, #152]	; (8002668 <CLI_FlashTest+0x134>)
 80025ce:	f000 fb4f 	bl	8002c70 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 80025d2:	e03a      	b.n	800264a <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 80025d4:	4b21      	ldr	r3, [pc, #132]	; (800265c <CLI_FlashTest+0x128>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d036      	beq.n	800264a <CLI_FlashTest+0x116>
 80025dc:	4823      	ldr	r0, [pc, #140]	; (800266c <CLI_FlashTest+0x138>)
 80025de:	f000 fb47 	bl	8002c70 <svDebugMessage>
        break;
 80025e2:	e032      	b.n	800264a <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	663b      	str	r3, [r7, #96]	; 0x60
 80025e8:	e00a      	b.n	8002600 <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 80025ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ec:	b2d9      	uxtb	r1, r3
 80025ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80025f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f4:	4413      	add	r3, r2
 80025f6:	460a      	mov	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 80025fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025fc:	3301      	adds	r3, #1
 80025fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002602:	2b0f      	cmp	r3, #15
 8002604:	ddf1      	ble.n	80025ea <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 8002606:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800260a:	2210      	movs	r2, #16
 800260c:	4619      	mov	r1, r3
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f7ff feb9 	bl	8002386 <Flash_Write>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <CLI_FlashTest+0x128>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d015      	beq.n	800264e <CLI_FlashTest+0x11a>
 8002622:	4813      	ldr	r0, [pc, #76]	; (8002670 <CLI_FlashTest+0x13c>)
 8002624:	f000 fb24 	bl	8002c70 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 8002628:	e011      	b.n	800264e <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <CLI_FlashTest+0x128>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <CLI_FlashTest+0x11a>
 8002632:	4810      	ldr	r0, [pc, #64]	; (8002674 <CLI_FlashTest+0x140>)
 8002634:	f000 fb1c 	bl	8002c70 <svDebugMessage>
        break;
 8002638:	e009      	b.n	800264e <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <CLI_FlashTest+0x128>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <CLI_FlashTest+0x11e>
 8002642:	480d      	ldr	r0, [pc, #52]	; (8002678 <CLI_FlashTest+0x144>)
 8002644:	f000 fb14 	bl	8002c70 <svDebugMessage>
        break;
 8002648:	e003      	b.n	8002652 <CLI_FlashTest+0x11e>
        break;
 800264a:	bf00      	nop
 800264c:	e002      	b.n	8002654 <CLI_FlashTest+0x120>
        break;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <CLI_FlashTest+0x120>
        break;
 8002652:	bf00      	nop
    }
  }
}
 8002654:	bf00      	nop
 8002656:	3768      	adds	r7, #104	; 0x68
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000028 	.word	0x20000028
 8002660:	08011458 	.word	0x08011458
 8002664:	08011488 	.word	0x08011488
 8002668:	08011498 	.word	0x08011498
 800266c:	080114a4 	.word	0x080114a4
 8002670:	080114b0 	.word	0x080114b0
 8002674:	080114bc 	.word	0x080114bc
 8002678:	080114c8 	.word	0x080114c8

0800267c <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <LED_Init+0x1c>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <LED_Init+0x20>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	200007cc 	.word	0x200007cc
 800269c:	200007d0 	.word	0x200007d0

080026a0 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <LED_OnOff+0x7c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d02d      	beq.n	8002710 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 80026b4:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <LED_OnOff+0x80>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02c      	beq.n	8002716 <LED_OnOff+0x76>
  {
    switch(eLED){
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d010      	beq.n	80026e4 <LED_OnOff+0x44>
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	dc26      	bgt.n	8002714 <LED_OnOff+0x74>
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d002      	beq.n	80026d0 <LED_OnOff+0x30>
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d005      	beq.n	80026da <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 80026ce:	e021      	b.n	8002714 <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <LED_OnOff+0x84>)
 80026d2:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 80026d4:	2301      	movs	r3, #1
 80026d6:	817b      	strh	r3, [r7, #10]
        break;
 80026d8:	e009      	b.n	80026ee <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <LED_OnOff+0x88>)
 80026dc:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 80026de:	2310      	movs	r3, #16
 80026e0:	817b      	strh	r3, [r7, #10]
        break;
 80026e2:	e004      	b.n	80026ee <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <LED_OnOff+0x8c>)
 80026e6:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 80026e8:	2310      	movs	r3, #16
 80026ea:	817b      	strh	r3, [r7, #10]
        break;
 80026ec:	bf00      	nop
        break;
    }
    if(bOn)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4619      	mov	r1, r3
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f002 f8ae 	bl	800485c <HAL_GPIO_WritePin>
 8002700:	e009      	b.n	8002716 <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	2200      	movs	r2, #0
 8002706:	4619      	mov	r1, r3
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f002 f8a7 	bl	800485c <HAL_GPIO_WritePin>
 800270e:	e002      	b.n	8002716 <LED_OnOff+0x76>
    return;
 8002710:	bf00      	nop
 8002712:	e000      	b.n	8002716 <LED_OnOff+0x76>
        return;
 8002714:	bf00      	nop
    }
  }
}
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200007d0 	.word	0x200007d0
 8002720:	200007cc 	.word	0x200007cc
 8002724:	42020400 	.word	0x42020400
 8002728:	42021400 	.word	0x42021400
 800272c:	42021800 	.word	0x42021800

08002730 <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	e02c      	b.n	8002796 <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 800273c:	2101      	movs	r1, #1
 800273e:	2001      	movs	r0, #1
 8002740:	f7ff ffae 	bl	80026a0 <LED_OnOff>
    HAL_Delay(50);
 8002744:	2032      	movs	r0, #50	; 0x32
 8002746:	f000 fb0f 	bl	8002d68 <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 800274a:	2100      	movs	r1, #0
 800274c:	2001      	movs	r0, #1
 800274e:	f7ff ffa7 	bl	80026a0 <LED_OnOff>
    HAL_Delay(50);
 8002752:	2032      	movs	r0, #50	; 0x32
 8002754:	f000 fb08 	bl	8002d68 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 8002758:	2101      	movs	r1, #1
 800275a:	2002      	movs	r0, #2
 800275c:	f7ff ffa0 	bl	80026a0 <LED_OnOff>
    HAL_Delay(50);
 8002760:	2032      	movs	r0, #50	; 0x32
 8002762:	f000 fb01 	bl	8002d68 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 8002766:	2100      	movs	r1, #0
 8002768:	2002      	movs	r0, #2
 800276a:	f7ff ff99 	bl	80026a0 <LED_OnOff>
    HAL_Delay(50);
 800276e:	2032      	movs	r0, #50	; 0x32
 8002770:	f000 fafa 	bl	8002d68 <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 8002774:	2101      	movs	r1, #1
 8002776:	2003      	movs	r0, #3
 8002778:	f7ff ff92 	bl	80026a0 <LED_OnOff>
    HAL_Delay(50);
 800277c:	2032      	movs	r0, #50	; 0x32
 800277e:	f000 faf3 	bl	8002d68 <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 8002782:	2100      	movs	r1, #0
 8002784:	2003      	movs	r0, #3
 8002786:	f7ff ff8b 	bl	80026a0 <LED_OnOff>
    HAL_Delay(50);
 800278a:	2032      	movs	r0, #50	; 0x32
 800278c:	f000 faec 	bl	8002d68 <HAL_Delay>
  for(int i =0; i<3; i++)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3301      	adds	r3, #1
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	ddcf      	ble.n	800273c <LED_SimpleAnimation+0xc>
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d10b      	bne.n	80027d2 <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	4619      	mov	r1, r3
 80027cc:	4610      	mov	r0, r2
 80027ce:	f7ff ff67 	bl	80026a0 <LED_OnOff>
  }
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 80027e2:	2301      	movs	r3, #1
 80027e4:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <RESET_Init+0x80>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 80027f6:	2301      	movs	r3, #1
 80027f8:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 80027fa:	4919      	ldr	r1, [pc, #100]	; (8002860 <RESET_Init+0x84>)
 80027fc:	2002      	movs	r0, #2
 80027fe:	f000 f845 	bl	800288c <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <RESET_Init+0x88>)
 8002804:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002808:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01c      	beq.n	800284a <RESET_Init+0x6e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d019      	beq.n	800284a <RESET_Init+0x6e>
 8002816:	2002      	movs	r0, #2
 8002818:	f000 f828 	bl	800286c <RTC_ReadBackupReg>
 800281c:	4603      	mov	r3, r0
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <RESET_Init+0x84>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d112      	bne.n	800284a <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 8002824:	2001      	movs	r0, #1
 8002826:	f000 f821 	bl	800286c <RTC_ReadBackupReg>
 800282a:	4603      	mov	r3, r0
 800282c:	3301      	adds	r3, #1
 800282e:	4619      	mov	r1, r3
 8002830:	2001      	movs	r0, #1
 8002832:	f000 f82b 	bl	800288c <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 8002836:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800283a:	f000 fa95 	bl	8002d68 <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 800283e:	2001      	movs	r0, #1
 8002840:	f000 f814 	bl	800286c <RTC_ReadBackupReg>
 8002844:	4603      	mov	r3, r0
 8002846:	4a08      	ldr	r2, [pc, #32]	; (8002868 <RESET_Init+0x8c>)
 8002848:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 800284a:	2100      	movs	r1, #0
 800284c:	2001      	movs	r0, #1
 800284e:	f000 f81d 	bl	800288c <RTC_WriteBackupReg>

  return ret;
 8002852:	683b      	ldr	r3, [r7, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	e000edf0 	.word	0xe000edf0
 8002860:	20240215 	.word	0x20240215
 8002864:	44020c00 	.word	0x44020c00
 8002868:	200007d4 	.word	0x200007d4

0800286c <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4804      	ldr	r0, [pc, #16]	; (8002888 <RTC_ReadBackupReg+0x1c>)
 8002878:	f008 f880 	bl	800a97c <HAL_RTCEx_BKUPRead>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200007d8 	.word	0x200007d8

0800288c <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4803      	ldr	r0, [pc, #12]	; (80028a8 <RTC_WriteBackupReg+0x1c>)
 800289c:	f008 f856 	bl	800a94c <HAL_RTCEx_BKUPWrite>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200007d8 	.word	0x200007d8

080028ac <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d177      	bne.n	80029ae <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 80028be:	4b3e      	ldr	r3, [pc, #248]	; (80029b8 <UART_Init+0x10c>)
 80028c0:	4a3e      	ldr	r2, [pc, #248]	; (80029bc <UART_Init+0x110>)
 80028c2:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 80028c4:	4a3c      	ldr	r2, [pc, #240]	; (80029b8 <UART_Init+0x10c>)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <UART_Init+0x10c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 80028d0:	4b39      	ldr	r3, [pc, #228]	; (80029b8 <UART_Init+0x10c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <UART_Init+0x10c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <UART_Init+0x10c>)
 80028de:	220c      	movs	r2, #12
 80028e0:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e2:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <UART_Init+0x10c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e8:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <UART_Init+0x10c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ee:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <UART_Init+0x10c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <UART_Init+0x10c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028fa:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <UART_Init+0x10c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 8002900:	482d      	ldr	r0, [pc, #180]	; (80029b8 <UART_Init+0x10c>)
 8002902:	f008 fc37 	bl	800b174 <HAL_UART_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <UART_Init+0x72>
      {
        Error_Handler();
 800290c:	f7fe f904 	bl	8000b18 <Error_Handler>
        s_bUARTConnected = FALSE;
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <UART_Init+0x114>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <UART_Init+0x118>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e031      	b.n	8002982 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800291e:	2100      	movs	r1, #0
 8002920:	4825      	ldr	r0, [pc, #148]	; (80029b8 <UART_Init+0x10c>)
 8002922:	f00a fb66 	bl	800cff2 <HAL_UARTEx_SetTxFifoThreshold>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <UART_Init+0x92>
      {
        Error_Handler();
 800292c:	f7fe f8f4 	bl	8000b18 <Error_Handler>
        s_bUARTConnected = FALSE;
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <UART_Init+0x114>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8002936:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <UART_Init+0x118>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e021      	b.n	8002982 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800293e:	2100      	movs	r1, #0
 8002940:	481d      	ldr	r0, [pc, #116]	; (80029b8 <UART_Init+0x10c>)
 8002942:	f00a fb94 	bl	800d06e <HAL_UARTEx_SetRxFifoThreshold>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <UART_Init+0xb2>
      {
        Error_Handler();
 800294c:	f7fe f8e4 	bl	8000b18 <Error_Handler>
        s_bUARTConnected = FALSE;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <UART_Init+0x114>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <UART_Init+0x118>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e011      	b.n	8002982 <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800295e:	4816      	ldr	r0, [pc, #88]	; (80029b8 <UART_Init+0x10c>)
 8002960:	f00a fb0e 	bl	800cf80 <HAL_UARTEx_DisableFifoMode>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <UART_Init+0xd0>
      {
        Error_Handler();
 800296a:	f7fe f8d5 	bl	8000b18 <Error_Handler>
        s_bUARTConnected = FALSE;
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <UART_Init+0x114>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <UART_Init+0x118>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e002      	b.n	8002982 <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 800297c:	4812      	ldr	r0, [pc, #72]	; (80029c8 <UART_Init+0x11c>)
 800297e:	f00b fb00 	bl	800df82 <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 8002982:	2201      	movs	r2, #1
 8002984:	4911      	ldr	r1, [pc, #68]	; (80029cc <UART_Init+0x120>)
 8002986:	480c      	ldr	r0, [pc, #48]	; (80029b8 <UART_Init+0x10c>)
 8002988:	f008 fce2 	bl	800b350 <HAL_UART_Receive_IT>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <UART_Init+0x114>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <UART_Init+0x118>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 800299e:	e007      	b.n	80029b0 <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <UART_Init+0x114>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <UART_Init+0x118>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
      break;
 80029ac:	e000      	b.n	80029b0 <UART_Init+0x104>
    default:
      break;
 80029ae:	bf00      	nop
  }
  return;
 80029b0:	bf00      	nop
}
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000810 	.word	0x20000810
 80029bc:	40004400 	.word	0x40004400
 80029c0:	2000080c 	.word	0x2000080c
 80029c4:	20000924 	.word	0x20000924
 80029c8:	2000000c 	.word	0x2000000c
 80029cc:	20000808 	.word	0x20000808

080029d0 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 80029da:	4b04      	ldr	r3, [pc, #16]	; (80029ec <IsUartConnected+0x1c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	2000080c 	.word	0x2000080c

080029f0 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
 80029fc:	4613      	mov	r3, r2
 80029fe:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d110      	bne.n	8002a2c <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 8002a0a:	88ba      	ldrh	r2, [r7, #4]
 8002a0c:	2364      	movs	r3, #100	; 0x64
 8002a0e:	6839      	ldr	r1, [r7, #0]
 8002a10:	480a      	ldr	r0, [pc, #40]	; (8002a3c <UART_Write+0x4c>)
 8002a12:	f008 fbff 	bl	800b214 <HAL_UART_Transmit>
 8002a16:	4603      	mov	r3, r0
 8002a18:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d107      	bne.n	8002a30 <UART_Write+0x40>
      {
        ret = Len;
 8002a20:	88bb      	ldrh	r3, [r7, #4]
 8002a22:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <UART_Write+0x50>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
      }
      break;
 8002a2a:	e001      	b.n	8002a30 <UART_Write+0x40>
    default:
      break;
 8002a2c:	bf00      	nop
 8002a2e:	e000      	b.n	8002a32 <UART_Write+0x42>
      break;
 8002a30:	bf00      	nop
  }
  return ret;
 8002a32:	68fb      	ldr	r3, [r7, #12]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000810 	.word	0x20000810
 8002a40:	20000924 	.word	0x20000924

08002a44 <UART_Printf>:
  return ret;
}


uint32_t UART_Printf(uint8_t ch, char* fmt, ...) // ... arg
{
 8002a44:	b40e      	push	{r1, r2, r3}
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b0c7      	sub	sp, #284	; 0x11c
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a52:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002a56:	701a      	strb	r2, [r3, #0]
  va_list args;

  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002a58:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002a5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a64:	601a      	str	r2, [r3, #0]
  // printf 결과를 buf 에 저장
  len = vsnprintf(buf, 256, fmt, args);
 8002a66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a6e:	f107 0010 	add.w	r0, r7, #16
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a7c:	f00d ffae 	bl	80109dc <vsniprintf>
 8002a80:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = UART_Write(ch, (uint8_t *)buf, len);
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	f107 0110 	add.w	r1, r7, #16
 8002a8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a92:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ffa9 	bl	80029f0 <UART_Write>
 8002a9e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8002aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002aac:	46bd      	mov	sp, r7
 8002aae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ab2:	b003      	add	sp, #12
 8002ab4:	4770      	bx	lr
	...

08002ab8 <Uart_Available>:

uint32_t Uart_Available(uint8_t ch)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <Uart_Available+0x1e>
  {
    case _DEF_UART1:
      ret = svRingBuffer_GetCount(&g_uartRxBuff);
 8002acc:	4804      	ldr	r0, [pc, #16]	; (8002ae0 <Uart_Available+0x28>)
 8002ace:	f00b fa36 	bl	800df3e <svRingBuffer_GetCount>
 8002ad2:	60f8      	str	r0, [r7, #12]
      break;
 8002ad4:	bf00      	nop
  }

  return ret;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	2000000c 	.word	0x2000000c

08002ae4 <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <HAL_UART_RxCpltCallback+0x40>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d112      	bne.n	8002b1c <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <HAL_UART_RxCpltCallback+0x44>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	480b      	ldr	r0, [pc, #44]	; (8002b2c <HAL_UART_RxCpltCallback+0x48>)
 8002afe:	f00b fa58 	bl	800dfb2 <svRingBuffer_Push>
 8002b02:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f113 0f02 	cmn.w	r3, #2
 8002b0a:	d102      	bne.n	8002b12 <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8002b0c:	4807      	ldr	r0, [pc, #28]	; (8002b2c <HAL_UART_RxCpltCallback+0x48>)
 8002b0e:	f00b fa38 	bl	800df82 <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8002b12:	2201      	movs	r2, #1
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <HAL_UART_RxCpltCallback+0x44>)
 8002b16:	4806      	ldr	r0, [pc, #24]	; (8002b30 <HAL_UART_RxCpltCallback+0x4c>)
 8002b18:	f008 fc1a 	bl	800b350 <HAL_UART_Receive_IT>
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40004400 	.word	0x40004400
 8002b28:	20000808 	.word	0x20000808
 8002b2c:	2000000c 	.word	0x2000000c
 8002b30:	20000810 	.word	0x20000810

08002b34 <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8002b38:	4806      	ldr	r0, [pc, #24]	; (8002b54 <svDebugRxChar+0x20>)
 8002b3a:	f00b fa00 	bl	800df3e <svRingBuffer_GetCount>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8002b44:	4803      	ldr	r0, [pc, #12]	; (8002b54 <svDebugRxChar+0x20>)
 8002b46:	f00b fa68 	bl	800e01a <svRingBuffer_Pop>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	e000      	b.n	8002b50 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8002b4e:	2300      	movs	r3, #0
	}
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	2000000c 	.word	0x2000000c

08002b58 <svDebugProcess>:

void svDebugProcess(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7ff ff36 	bl	80029d0 <IsUartConnected>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01a      	beq.n	8002ba0 <svDebugProcess+0x48>
	  svCLI_Handler();
 8002b6a:	f00b f895 	bl	800dc98 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <svDebugProcess+0x50>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d114      	bne.n	8002ba0 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8002b76:	480d      	ldr	r0, [pc, #52]	; (8002bac <svDebugProcess+0x54>)
 8002b78:	f00d fded 	bl	8010756 <lwrb_get_linear_block_read_length>
 8002b7c:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8002b84:	4809      	ldr	r0, [pc, #36]	; (8002bac <svDebugProcess+0x54>)
 8002b86:	f00d fdca 	bl	801071e <lwrb_get_linear_block_read_address>
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7ff ff2c 	bl	80029f0 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4804      	ldr	r0, [pc, #16]	; (8002bac <svDebugProcess+0x54>)
 8002b9c:	f00d fe0e 	bl	80107bc <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000924 	.word	0x20000924
 8002bac:	20000928 	.word	0x20000928

08002bb0 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8002bbe:	7afb      	ldrb	r3, [r7, #11]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d11a      	bne.n	8002bfa <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7ff ff03 	bl	80029d0 <IsUartConnected>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d014      	beq.n	8002bfa <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8002bd0:	f000 f8be 	bl	8002d50 <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8002bd6:	e003      	b.n	8002be0 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <svDebugCallback+0x54>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d006      	beq.n	8002bee <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8002be0:	6978      	ldr	r0, [r7, #20]
 8002be2:	f000 f863 	bl	8002cac <GetElapsedTime>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b63      	cmp	r3, #99	; 0x63
 8002bea:	d9f5      	bls.n	8002bd8 <svDebugCallback+0x28>
 8002bec:	e000      	b.n	8002bf0 <svDebugCallback+0x40>
					break;
 8002bee:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <svDebugCallback+0x54>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8002bf6:	f7ff ffaf 	bl	8002b58 <svDebugProcess>
		}
	}
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000924 	.word	0x20000924

08002c08 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8002c0c:	4809      	ldr	r0, [pc, #36]	; (8002c34 <svDebugInit+0x2c>)
 8002c0e:	f00b f9b8 	bl	800df82 <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8002c12:	2200      	movs	r2, #0
 8002c14:	4908      	ldr	r1, [pc, #32]	; (8002c38 <svDebugInit+0x30>)
 8002c16:	4809      	ldr	r0, [pc, #36]	; (8002c3c <svDebugInit+0x34>)
 8002c18:	f00a fbb2 	bl	800d380 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8002c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c20:	4907      	ldr	r1, [pc, #28]	; (8002c40 <svDebugInit+0x38>)
 8002c22:	4808      	ldr	r0, [pc, #32]	; (8002c44 <svDebugInit+0x3c>)
 8002c24:	f00d fc5c 	bl	80104e0 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8002c28:	4907      	ldr	r1, [pc, #28]	; (8002c48 <svDebugInit+0x40>)
 8002c2a:	4806      	ldr	r0, [pc, #24]	; (8002c44 <svDebugInit+0x3c>)
 8002c2c:	f00d fc79 	bl	8010522 <lwrb_set_evt_fn>
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	2000000c 	.word	0x2000000c
 8002c38:	08002c4d 	.word	0x08002c4d
 8002c3c:	08002b35 	.word	0x08002b35
 8002c40:	2000093c 	.word	0x2000093c
 8002c44:	20000928 	.word	0x20000928
 8002c48:	08002bb1 	.word	0x08002bb1

08002c4c <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8002c56:	1dfb      	adds	r3, r7, #7
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4803      	ldr	r0, [pc, #12]	; (8002c6c <svDebugPutChar+0x20>)
 8002c5e:	f00d fc79 	bl	8010554 <lwrb_write>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000928 	.word	0x20000928

08002c70 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8002c70:	b40f      	push	{r0, r1, r2, r3}
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	6939      	ldr	r1, [r7, #16]
 8002c82:	4808      	ldr	r0, [pc, #32]	; (8002ca4 <svDebugMessage+0x34>)
 8002c84:	f00d fece 	bl	8010a24 <vsiprintf>
 8002c88:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4905      	ldr	r1, [pc, #20]	; (8002ca4 <svDebugMessage+0x34>)
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <svDebugMessage+0x38>)
 8002c92:	f00d fc5f 	bl	8010554 <lwrb_write>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ca0:	b004      	add	sp, #16
 8002ca2:	4770      	bx	lr
 8002ca4:	20000b40 	.word	0x20000b40
 8002ca8:	20000928 	.word	0x20000928

08002cac <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8002cb4:	f000 f84c 	bl	8002d50 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d204      	bcs.n	8002ccc <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	e002      	b.n	8002cd2 <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	1ad3      	subs	r3, r2, r3
	}
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f912 	bl	8002f0a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002ce6:	f002 fc1d 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_Init+0x40>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	490a      	ldr	r1, [pc, #40]	; (8002d20 <HAL_Init+0x44>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfc:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <HAL_Init+0x48>)
 8002cfe:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d00:	200f      	movs	r0, #15
 8002d02:	f7fe f883 	bl	8000e0c <HAL_InitTick>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e002      	b.n	8002d16 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d10:	f7fd ff07 	bl	8000b22 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	44020c00 	.word	0x44020c00
 8002d20:	08011670 	.word	0x08011670
 8002d24:	20000000 	.word	0x20000000

08002d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_IncTick+0x20>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_IncTick+0x24>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <HAL_IncTick+0x24>)
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000030 	.word	0x20000030
 8002d4c:	20000bc0 	.word	0x20000bc0

08002d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return uwTick;
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_GetTick+0x14>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000bc0 	.word	0x20000bc0

08002d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7ff ffee 	bl	8002d50 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d005      	beq.n	8002d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_Delay+0x44>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d8e:	bf00      	nop
 8002d90:	f7ff ffde 	bl	8002d50 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d8f7      	bhi.n	8002d90 <HAL_Delay+0x28>
  {
  }
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000030 	.word	0x20000030

08002db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60d3      	str	r3, [r2, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <__NVIC_GetPriorityGrouping+0x18>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	f003 0307 	and.w	r3, r3, #7
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	db0b      	blt.n	8002e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4907      	ldr	r1, [pc, #28]	; (8002e4c <__NVIC_EnableIRQ+0x38>)
 8002e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2001      	movs	r0, #1
 8002e36:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000e100 	.word	0xe000e100

08002e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	db0a      	blt.n	8002e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	490c      	ldr	r1, [pc, #48]	; (8002e9c <__NVIC_SetPriority+0x4c>)
 8002e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	440b      	add	r3, r1
 8002e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e78:	e00a      	b.n	8002e90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4908      	ldr	r1, [pc, #32]	; (8002ea0 <__NVIC_SetPriority+0x50>)
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	3b04      	subs	r3, #4
 8002e88:	0112      	lsls	r2, r2, #4
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	761a      	strb	r2, [r3, #24]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000e100 	.word	0xe000e100
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f1c3 0307 	rsb	r3, r3, #7
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	bf28      	it	cs
 8002ec2:	2304      	movcs	r3, #4
 8002ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d902      	bls.n	8002ed4 <NVIC_EncodePriority+0x30>
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3b03      	subs	r3, #3
 8002ed2:	e000      	b.n	8002ed6 <NVIC_EncodePriority+0x32>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	43d9      	mvns	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	4313      	orrs	r3, r2
         );
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3724      	adds	r7, #36	; 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ff4c 	bl	8002db0 <__NVIC_SetPriorityGrouping>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2e:	f7ff ff63 	bl	8002df8 <__NVIC_GetPriorityGrouping>
 8002f32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	6978      	ldr	r0, [r7, #20]
 8002f3a:	f7ff ffb3 	bl	8002ea4 <NVIC_EncodePriority>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ff82 	bl	8002e50 <__NVIC_SetPriority>
}
 8002f4c:	bf00      	nop
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ff56 	bl	8002e14 <__NVIC_EnableIRQ>
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002f78:	f7ff feea 	bl	8002d50 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e06b      	b.n	8003060 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e05c      	b.n	8003060 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0204 	orr.w	r2, r2, #4
 8002fb4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2205      	movs	r2, #5
 8002fba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002fbe:	e020      	b.n	8003002 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002fc0:	f7ff fec6 	bl	8002d50 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d919      	bls.n	8003002 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f043 0210 	orr.w	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e02e      	b.n	8003060 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0d7      	beq.n	8002fc0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0202 	orr.w	r2, r2, #2
 800301e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2204      	movs	r2, #4
 8003024:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003030:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	2201      	movs	r2, #1
 800304c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e019      	b.n	80030ae <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d004      	beq.n	8003090 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e00e      	b.n	80030ae <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2204      	movs	r2, #4
 8003094:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e147      	b.n	800335e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fdbe 	bl	8001c64 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f8:	f7ff fe2a 	bl	8002d50 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030fe:	e012      	b.n	8003126 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003100:	f7ff fe26 	bl	8002d50 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b0a      	cmp	r3, #10
 800310c:	d90b      	bls.n	8003126 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e11b      	b.n	800335e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b08      	cmp	r3, #8
 8003132:	d0e5      	beq.n	8003100 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003144:	f7ff fe04 	bl	8002d50 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800314a:	e012      	b.n	8003172 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800314c:	f7ff fe00 	bl	8002d50 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b0a      	cmp	r3, #10
 8003158:	d90b      	bls.n	8003172 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2203      	movs	r2, #3
 800316a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0f5      	b.n	800335e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0e5      	beq.n	800314c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0202 	orr.w	r2, r2, #2
 800318e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a74      	ldr	r2, [pc, #464]	; (8003368 <HAL_FDCAN_Init+0x2ac>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d103      	bne.n	80031a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800319a:	4a74      	ldr	r2, [pc, #464]	; (800336c <HAL_FDCAN_Init+0x2b0>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7c1b      	ldrb	r3, [r3, #16]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b8:	619a      	str	r2, [r3, #24]
 80031ba:	e007      	b.n	80031cc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7c5b      	ldrb	r3, [r3, #17]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d108      	bne.n	80031e6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031e2:	619a      	str	r2, [r3, #24]
 80031e4:	e007      	b.n	80031f6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7c9b      	ldrb	r3, [r3, #18]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d108      	bne.n	8003210 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800320c:	619a      	str	r2, [r3, #24]
 800320e:	e007      	b.n	8003220 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800321e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003244:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0210 	bic.w	r2, r2, #16
 8003254:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0204 	orr.w	r2, r2, #4
 800326c:	619a      	str	r2, [r3, #24]
 800326e:	e02c      	b.n	80032ca <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d028      	beq.n	80032ca <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d01c      	beq.n	80032ba <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800328e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0210 	orr.w	r2, r2, #16
 800329e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d110      	bne.n	80032ca <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0220 	orr.w	r2, r2, #32
 80032b6:	619a      	str	r2, [r3, #24]
 80032b8:	e007      	b.n	80032ca <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0220 	orr.w	r2, r2, #32
 80032c8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032da:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80032e2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80032f2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80032f4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032fe:	d115      	bne.n	800332c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	3b01      	subs	r3, #1
 800330c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800330e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	3b01      	subs	r3, #1
 8003316:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003318:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	3b01      	subs	r3, #1
 8003322:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003328:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800332a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fdac 	bl	8003ea0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	4000a400 	.word	0x4000a400
 800336c:	4000a500 	.word	0x4000a500

08003370 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003380:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d002      	beq.n	800338e <HAL_FDCAN_ConfigFilter+0x1e>
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d13d      	bne.n	800340a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d119      	bne.n	80033ca <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80033a2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80033aa:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e01d      	b.n	8003406 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	075a      	lsls	r2, r3, #29
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	079a      	lsls	r2, r3, #30
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	3304      	adds	r3, #4
 80033fe:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e006      	b.n	8003418 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
  }
}
 8003418:	4618      	mov	r0, r3
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d116      	bne.n	800346c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003446:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	011a      	lsls	r2, r3, #4
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	431a      	orrs	r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	431a      	orrs	r2, r3
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e006      	b.n	800347a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	f043 0204 	orr.w	r2, r3, #4
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d108      	bne.n	80034b0 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	0219      	lsls	r1, r3, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e006      	b.n	80034be <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d109      	bne.n	80034f2 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034ec:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e006      	b.n	8003500 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f6:	f043 0204 	orr.w	r2, r3, #4
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d110      	bne.n	8003542 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e006      	b.n	8003550 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003546:	f043 0204 	orr.w	r2, r3, #4
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d156      	bne.n	8003622 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003584:	e011      	b.n	80035aa <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b0a      	cmp	r3, #10
 800358a:	d90b      	bls.n	80035a4 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2203      	movs	r2, #3
 800359c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e045      	b.n	8003630 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	3301      	adds	r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0e6      	beq.n	8003586 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0210 	bic.w	r2, r2, #16
 80035ca:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035cc:	e011      	b.n	80035f2 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b0a      	cmp	r3, #10
 80035d2:	d90b      	bls.n	80035ec <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2203      	movs	r2, #3
 80035e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e021      	b.n	8003630 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d0e6      	beq.n	80035ce <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0202 	orr.w	r2, r2, #2
 800360e:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e006      	b.n	8003630 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003626:	f043 0208 	orr.w	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
  }
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d12c      	bne.n	80036ae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800365c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003668:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e023      	b.n	80036bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fc6a 	bl	8003f64 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2101      	movs	r1, #1
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	fa01 f202 	lsl.w	r2, r1, r2
 800369c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80036a0:	2201      	movs	r2, #1
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e006      	b.n	80036bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b2:	f043 0208 	orr.w	r2, r3, #8
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b08b      	sub	sp, #44	; 0x2c
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036dc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80036de:	7efb      	ldrb	r3, [r7, #27]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	f040 80e8 	bne.w	80038b6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d137      	bne.n	800375c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003700:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0db      	b.n	80038c4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	0e1b      	lsrs	r3, r3, #24
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d10a      	bne.n	8003734 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003726:	0a5b      	lsrs	r3, r3, #9
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003730:	2301      	movs	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	440b      	add	r3, r1
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	e036      	b.n	80037ca <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0a3      	b.n	80038c4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d10a      	bne.n	80037a4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80037a0:	2301      	movs	r3, #1
 80037a2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	440b      	add	r3, r1
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e005      	b.n	80037fa <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	3304      	adds	r3, #4
 8003816:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	f003 020f 	and.w	r2, r3, #15
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0e1b      	lsrs	r3, r3, #24
 800384e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0fda      	lsrs	r2, r3, #31
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	3304      	adds	r3, #4
 8003864:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800386a:	2300      	movs	r3, #0
 800386c:	623b      	str	r3, [r7, #32]
 800386e:	e00a      	b.n	8003886 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	441a      	add	r2, r3
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	440b      	add	r3, r1
 800387c:	7812      	ldrb	r2, [r2, #0]
 800387e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	3301      	adds	r3, #1
 8003884:	623b      	str	r3, [r7, #32]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	4a11      	ldr	r2, [pc, #68]	; (80038d0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800388c:	5cd3      	ldrb	r3, [r2, r3]
 800388e:	461a      	mov	r2, r3
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	4293      	cmp	r3, r2
 8003894:	d3ec      	bcc.n	8003870 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d105      	bne.n	80038a8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80038a6:	e004      	b.n	80038b2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e006      	b.n	80038c4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	f043 0208 	orr.w	r2, r3, #8
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	372c      	adds	r7, #44	; 0x2c
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	080117f0 	.word	0x080117f0

080038d4 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0207 	and.w	r2, r3, #7
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f003 0207 	and.w	r2, r3, #7
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0218 	and.w	r2, r3, #24
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 0201 	and.w	r2, r3, #1
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	f003 0201 	and.w	r2, r3, #1
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	09db      	lsrs	r3, r3, #7
 8003922:	f003 0201 	and.w	r2, r3, #1
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	0adb      	lsrs	r3, r3, #11
 800392e:	f003 0201 	and.w	r2, r3, #1
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	0b1b      	lsrs	r3, r3, #12
 800393a:	f003 0201 	and.w	r2, r3, #1
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0b5b      	lsrs	r3, r3, #13
 8003946:	f003 0201 	and.w	r2, r3, #1
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	0b9b      	lsrs	r3, r3, #14
 8003952:	f003 0201 	and.w	r2, r3, #1
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	0bdb      	lsrs	r3, r3, #15
 800399e:	f003 0201 	and.w	r2, r3, #1
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80039d4:	68fb      	ldr	r3, [r7, #12]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b087      	sub	sp, #28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039f4:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d003      	beq.n	8003a04 <HAL_FDCAN_ActivateNotification+0x22>
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	f040 80c8 	bne.w	8003b94 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0a:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d03b      	beq.n	8003a98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d031      	beq.n	8003a98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d027      	beq.n	8003a98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01d      	beq.n	8003a98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d13b      	bne.n	8003b34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d131      	bne.n	8003b34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d127      	bne.n	8003b34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d004      	beq.n	8003af8 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d11d      	bne.n	8003b34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d113      	bne.n	8003b34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0202 	orr.w	r2, r2, #2
 8003b42:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e006      	b.n	8003ba2 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b98:	f043 0202 	orr.w	r2, r3, #2
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b08c      	sub	sp, #48	; 0x30
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bca:	4013      	ands	r3, r2
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be2:	4013      	ands	r3, r2
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c04:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003c08:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	4013      	ands	r3, r2
 8003c14:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c20:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00b      	beq.n	8003c60 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f916 	bl	8003e8c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d019      	beq.n	8003c9e <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d014      	beq.n	8003c9e <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c7c:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c94:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003c96:	6939      	ldr	r1, [r7, #16]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f8d8 	bl	8003e4e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003caa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003cac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f8a2 	bl	8003df8 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7fd ffa5 	bl	8001c14 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f897 	bl	8003e0e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00c      	beq.n	8003d04 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f890 	bl	8003e24 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d018      	beq.n	8003d40 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003d20:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003d38:	68f9      	ldr	r1, [r7, #12]
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f87c 	bl	8003e38 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f880 	bl	8003e64 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d80:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f878 	bl	8003e78 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00f      	beq.n	8003db2 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003da4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003daa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003dc0:	69f9      	ldr	r1, [r7, #28]
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fede 	bl	8001b84 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6a3a      	ldr	r2, [r7, #32]
 8003dd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd feda 	bl	8001ba4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003df0:	bf00      	nop
 8003df2:	3730      	adds	r7, #48	; 0x30
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003ea8:	4b2c      	ldr	r3, [pc, #176]	; (8003f5c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003eaa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d103      	bne.n	8003ebe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003ebc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ecc:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed4:	041a      	lsls	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef2:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	061a      	lsls	r2, r3, #24
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e005      	b.n	8003f40 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d3f3      	bcc.n	8003f34 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	4000ac00 	.word	0x4000ac00
 8003f60:	4000a800 	.word	0x4000a800

08003f64 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	; 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003f82:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61fb      	str	r3, [r7, #28]
 8003f8e:	e00a      	b.n	8003fa6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003f98:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003f9e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fa4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003fb0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003fb6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003fbc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	440b      	add	r3, r1
 8003fd8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e020      	b.n	800403a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3303      	adds	r3, #3
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	4413      	add	r3, r2
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3302      	adds	r3, #2
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	440b      	add	r3, r1
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004010:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3301      	adds	r3, #1
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	440b      	add	r3, r1
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800401e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	440a      	add	r2, r1
 8004026:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004028:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	3304      	adds	r3, #4
 8004032:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3304      	adds	r3, #4
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4a06      	ldr	r2, [pc, #24]	; (8004058 <FDCAN_CopyMessageToRAM+0xf4>)
 8004040:	5cd3      	ldrb	r3, [r2, r3]
 8004042:	461a      	mov	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4293      	cmp	r3, r2
 8004048:	d3d6      	bcc.n	8003ff8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	3724      	adds	r7, #36	; 0x24
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	080117f0 	.word	0x080117f0

0800405c <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <HAL_FLASH_Program+0xd8>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_FLASH_Program+0x18>
 8004070:	2302      	movs	r3, #2
 8004072:	e05a      	b.n	800412a <HAL_FLASH_Program+0xce>
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_FLASH_Program+0xd8>)
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800407a:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_FLASH_Program+0xd8>)
 800407c:	2200      	movs	r2, #0
 800407e:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004084:	f000 f8a4 	bl	80041d0 <FLASH_WaitForLastOperation>
 8004088:	4603      	mov	r3, r0
 800408a:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 800408c:	7ffb      	ldrb	r3, [r7, #31]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d147      	bne.n	8004122 <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8004092:	4a28      	ldr	r2, [pc, #160]	; (8004134 <HAL_FLASH_Program+0xd8>)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8004098:	4b27      	ldr	r3, [pc, #156]	; (8004138 <HAL_FLASH_Program+0xdc>)
 800409a:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d104      	bne.n	80040b0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	68b8      	ldr	r0, [r7, #8]
 80040aa:	f000 f8df 	bl	800426c <FLASH_Program_QuadWord>
 80040ae:	e01b      	b.n	80040e8 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a22      	ldr	r2, [pc, #136]	; (800413c <HAL_FLASH_Program+0xe0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <HAL_FLASH_Program+0x64>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <HAL_FLASH_Program+0xe4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d104      	bne.n	80040ca <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	68b8      	ldr	r0, [r7, #8]
 80040c4:	f000 f90e 	bl	80042e4 <FLASH_Program_QuadWord_OBK>
 80040c8:	e00e      	b.n	80040e8 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <HAL_FLASH_Program+0xe8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d104      	bne.n	80040e0 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	68b8      	ldr	r0, [r7, #8]
 80040da:	f000 f94f 	bl	800437c <FLASH_Program_HalfWord>
 80040de:	e003      	b.n	80040e8 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	68b8      	ldr	r0, [r7, #8]
 80040e4:	f000 f94a 	bl	800437c <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040ec:	f000 f870 	bl	80041d0 <FLASH_WaitForLastOperation>
 80040f0:	4603      	mov	r3, r0
 80040f2:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 80040fe:	f023 0304 	bic.w	r3, r3, #4
 8004102:	43db      	mvns	r3, r3
 8004104:	401a      	ands	r2, r3
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <HAL_FLASH_Program+0xe4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d107      	bne.n	8004122 <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <HAL_FLASH_Program+0xec>)
 8004114:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 0204 	bic.w	r2, r3, #4
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004122:	4b04      	ldr	r3, [pc, #16]	; (8004134 <HAL_FLASH_Program+0xd8>)
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004128:	7ffb      	ldrb	r3, [r7, #31]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000034 	.word	0x20000034
 8004138:	40022028 	.word	0x40022028
 800413c:	10000002 	.word	0x10000002
 8004140:	10000006 	.word	0x10000006
 8004144:	40000002 	.word	0x40000002
 8004148:	40022040 	.word	0x40022040

0800414c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8004156:	4b0d      	ldr	r3, [pc, #52]	; (800418c <HAL_FLASH_Unlock+0x40>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8004162:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_FLASH_Unlock+0x40>)
 8004164:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <HAL_FLASH_Unlock+0x44>)
 8004166:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <HAL_FLASH_Unlock+0x40>)
 800416a:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <HAL_FLASH_Unlock+0x48>)
 800416c:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <HAL_FLASH_Unlock+0x40>)
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800417e:	79fb      	ldrb	r3, [r7, #7]
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40022000 	.word	0x40022000
 8004190:	45670123 	.word	0x45670123
 8004194:	cdef89ab 	.word	0xcdef89ab

08004198 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 80041a2:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <HAL_FLASH_Lock+0x34>)
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	4a09      	ldr	r2, [pc, #36]	; (80041cc <HAL_FLASH_Lock+0x34>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 80041ae:	4b07      	ldr	r3, [pc, #28]	; (80041cc <HAL_FLASH_Lock+0x34>)
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 80041be:	79fb      	ldrb	r3, [r7, #7]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40022000 	.word	0x40022000

080041d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 80041d8:	f7fe fdba 	bl	8002d50 <HAL_GetTick>
 80041dc:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <FLASH_WaitForLastOperation+0x90>)
 80041e0:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 80041e2:	e010      	b.n	8004206 <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d00c      	beq.n	8004206 <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041ec:	f7fe fdb0 	bl	8002d50 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <FLASH_WaitForLastOperation+0x32>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e027      	b.n	8004256 <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030b 	and.w	r3, r3, #11
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e8      	bne.n	80041e4 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <FLASH_WaitForLastOperation+0x94>)
 8004214:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 800421e:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00c      	beq.n	8004240 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <FLASH_WaitForLastOperation+0x98>)
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4313      	orrs	r3, r2
 800422e:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <FLASH_WaitForLastOperation+0x98>)
 8004230:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e00a      	b.n	8004256 <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004252:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40022020 	.word	0x40022020
 8004264:	40022030 	.word	0x40022030
 8004268:	20000034 	.word	0x20000034

0800426c <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 800426c:	b480      	push	{r7}
 800426e:	b08b      	sub	sp, #44	; 0x2c
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8004276:	2304      	movs	r3, #4
 8004278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8004284:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <FLASH_Program_QuadWord+0x74>)
 8004286:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f043 0202 	orr.w	r2, r3, #2
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004294:	f3ef 8310 	mrs	r3, PRIMASK
 8004298:	613b      	str	r3, [r7, #16]
  return(result);
 800429a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800429c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800429e:	b672      	cpsid	i
}
 80042a0:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	3304      	adds	r3, #4
 80042ae:	623b      	str	r3, [r7, #32]
    src_addr++;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	3304      	adds	r3, #4
 80042b4:	61fb      	str	r3, [r7, #28]
    index--;
 80042b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ba:	3b01      	subs	r3, #1
 80042bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 80042c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ec      	bne.n	80042a2 <FLASH_Program_QuadWord+0x36>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80042d4:	bf00      	nop
 80042d6:	372c      	adds	r7, #44	; 0x2c
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40022028 	.word	0x40022028

080042e4 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b08b      	sub	sp, #44	; 0x2c
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 80042ee:	2304      	movs	r3, #4
 80042f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80042fc:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <FLASH_Program_QuadWord_OBK+0x8c>)
 80042fe:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8004300:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <FLASH_Program_QuadWord_OBK+0x90>)
 8004302:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f043 0202 	orr.w	r2, r3, #2
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4b18      	ldr	r3, [pc, #96]	; (8004378 <FLASH_Program_QuadWord_OBK+0x94>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	431a      	orrs	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004322:	f3ef 8310 	mrs	r3, PRIMASK
 8004326:	60fb      	str	r3, [r7, #12]
  return(result);
 8004328:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800432a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800432c:	b672      	cpsid	i
}
 800432e:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	3304      	adds	r3, #4
 800433c:	623b      	str	r3, [r7, #32]
    src_addr++;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3304      	adds	r3, #4
 8004342:	61fb      	str	r3, [r7, #28]
    index--;
 8004344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004348:	3b01      	subs	r3, #1
 800434a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 800434e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1ec      	bne.n	8004330 <FLASH_Program_QuadWord_OBK+0x4c>
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f383 8810 	msr	PRIMASK, r3
}
 8004360:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004362:	bf00      	nop
 8004364:	372c      	adds	r7, #44	; 0x2c
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40022028 	.word	0x40022028
 8004374:	40022040 	.word	0x40022040
 8004378:	20000034 	.word	0x20000034

0800437c <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <FLASH_Program_HalfWord+0x30>)
 8004388:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f043 0202 	orr.w	r2, r3, #2
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8812      	ldrh	r2, [r2, #0]
 800439c:	b292      	uxth	r2, r2
 800439e:	801a      	strh	r2, [r3, #0]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40022028 	.word	0x40022028

080043b0 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043ba:	4b3a      	ldr	r3, [pc, #232]	; (80044a4 <HAL_FLASHEx_Erase+0xf4>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_FLASHEx_Erase+0x16>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e06a      	b.n	800449c <HAL_FLASHEx_Erase+0xec>
 80043c6:	4b37      	ldr	r3, [pc, #220]	; (80044a4 <HAL_FLASHEx_Erase+0xf4>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043cc:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <HAL_FLASHEx_Erase+0xf4>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043d6:	f7ff fefb 	bl	80041d0 <FLASH_WaitForLastOperation>
 80043da:	4603      	mov	r3, r0
 80043dc:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d157      	bne.n	8004494 <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2e      	ldr	r2, [pc, #184]	; (80044a4 <HAL_FLASHEx_Erase+0xf4>)
 80043ea:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80043ec:	4b2e      	ldr	r3, [pc, #184]	; (80044a8 <HAL_FLASHEx_Erase+0xf8>)
 80043ee:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	f248 0208 	movw	r2, #32776	; 0x8008
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10b      	bne.n	8004418 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f853 	bl	80044b0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800440a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800440e:	f7ff fedf 	bl	80041d0 <FLASH_WaitForLastOperation>
 8004412:	4603      	mov	r3, r0
 8004414:	75fb      	strb	r3, [r7, #23]
 8004416:	e033      	b.n	8004480 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a23      	ldr	r2, [pc, #140]	; (80044ac <HAL_FLASHEx_Erase+0xfc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d108      	bne.n	8004434 <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8004422:	f000 f8b5 	bl	8004590 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800442a:	f7ff fed1 	bl	80041d0 <FLASH_WaitForLastOperation>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]
 8004432:	e025      	b.n	8004480 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	f04f 32ff 	mov.w	r2, #4294967295
 800443a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	e015      	b.n	8004470 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4619      	mov	r1, r3
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f000 f868 	bl	8004520 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004454:	f7ff febc 	bl	80041d0 <FLASH_WaitForLastOperation>
 8004458:	4603      	mov	r3, r0
 800445a:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	601a      	str	r2, [r3, #0]
          break;
 8004468:	e00a      	b.n	8004480 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	3301      	adds	r3, #1
 800446e:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4413      	add	r3, r2
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	429a      	cmp	r2, r3
 800447e:	d3e1      	bcc.n	8004444 <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800448c:	43db      	mvns	r3, r3
 800448e:	401a      	ands	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_FLASHEx_Erase+0xf4>)
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]

  return status;
 800449a:	7dfb      	ldrb	r3, [r7, #23]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000034 	.word	0x20000034
 80044a8:	40022028 	.word	0x40022028
 80044ac:	80000008 	.word	0x80000008

080044b0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80044b8:	4b18      	ldr	r3, [pc, #96]	; (800451c <FLASH_MassErase+0x6c>)
 80044ba:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d108      	bne.n	80044d8 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	f043 0320 	orr.w	r3, r3, #32
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 80044d6:	e01b      	b.n	8004510 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044ea:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80044ee:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004508:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	6013      	str	r3, [r2, #0]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40022028 	.word	0x40022028

08004520 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800452a:	4b18      	ldr	r3, [pc, #96]	; (800458c <FLASH_Erase_Sector+0x6c>)
 800452c:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d011      	beq.n	800455c <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004540:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	019b      	lsls	r3, r3, #6
 8004550:	4313      	orrs	r3, r2
 8004552:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 800455a:	e010      	b.n	800457e <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	019b      	lsls	r3, r3, #6
 8004570:	4313      	orrs	r3, r2
 8004572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004576:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	6013      	str	r3, [r2, #0]
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40022028 	.word	0x40022028

08004590 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <FLASH_OBKErase+0x24>)
 8004598:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f043 0208 	orr.w	r2, r3, #8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	601a      	str	r2, [r3, #0]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40022040 	.word	0x40022040

080045b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80045c6:	e136      	b.n	8004836 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	2101      	movs	r1, #1
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8128 	beq.w	8004830 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x38>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b12      	cmp	r3, #18
 80045ee:	d125      	bne.n	800463c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	08da      	lsrs	r2, r3, #3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3208      	adds	r2, #8
 80045f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	220f      	movs	r2, #15
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4013      	ands	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 020f 	and.w	r2, r3, #15
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	08da      	lsrs	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3208      	adds	r2, #8
 8004636:	6979      	ldr	r1, [r7, #20]
 8004638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	2203      	movs	r2, #3
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4013      	ands	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 0203 	and.w	r2, r3, #3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d00b      	beq.n	8004690 <HAL_GPIO_Init+0xd8>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d007      	beq.n	8004690 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004684:	2b11      	cmp	r3, #17
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b12      	cmp	r3, #18
 800468e:	d130      	bne.n	80046f2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	2203      	movs	r2, #3
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4013      	ands	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046c6:	2201      	movs	r2, #1
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4013      	ands	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f003 0201 	and.w	r2, r3, #1
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d017      	beq.n	800472a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4013      	ands	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d07c      	beq.n	8004830 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004736:	4a47      	ldr	r2, [pc, #284]	; (8004854 <HAL_GPIO_Init+0x29c>)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	3318      	adds	r3, #24
 800473e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004742:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	220f      	movs	r2, #15
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4013      	ands	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0a9a      	lsrs	r2, r3, #10
 800475e:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <HAL_GPIO_Init+0x2a0>)
 8004760:	4013      	ands	r3, r2
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	f002 0203 	and.w	r2, r2, #3
 8004768:	00d2      	lsls	r2, r2, #3
 800476a:	4093      	lsls	r3, r2
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004772:	4938      	ldr	r1, [pc, #224]	; (8004854 <HAL_GPIO_Init+0x29c>)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	3318      	adds	r3, #24
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004780:	4b34      	ldr	r3, [pc, #208]	; (8004854 <HAL_GPIO_Init+0x29c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	43db      	mvns	r3, r3
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4013      	ands	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80047a4:	4a2b      	ldr	r2, [pc, #172]	; (8004854 <HAL_GPIO_Init+0x29c>)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80047aa:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <HAL_GPIO_Init+0x29c>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4013      	ands	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80047ce:	4a21      	ldr	r2, [pc, #132]	; (8004854 <HAL_GPIO_Init+0x29c>)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80047d4:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <HAL_GPIO_Init+0x29c>)
 80047d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047da:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	43db      	mvns	r3, r3
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4013      	ands	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80047fa:	4a16      	ldr	r2, [pc, #88]	; (8004854 <HAL_GPIO_Init+0x29c>)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <HAL_GPIO_Init+0x29c>)
 8004804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004808:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	43db      	mvns	r3, r3
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4013      	ands	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004828:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <HAL_GPIO_Init+0x29c>)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	3301      	adds	r3, #1
 8004834:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	f47f aec1 	bne.w	80045c8 <HAL_GPIO_Init+0x10>
  }
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	44022000 	.word	0x44022000
 8004858:	002f7f7f 	.word	0x002f7f7f

0800485c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]
 8004868:	4613      	mov	r3, r2
 800486a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800486c:	787b      	ldrb	r3, [r7, #1]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004878:	e002      	b.n	8004880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4013      	ands	r3, r2
 80048a4:	041a      	lsls	r2, r3, #16
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	43d9      	mvns	r1, r3
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	400b      	ands	r3, r1
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	619a      	str	r2, [r3, #24]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80048d6:	4a0c      	ldr	r2, [pc, #48]	; (8004908 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fb fec0 	bl	8000664 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80048f0:	4a05      	ldr	r2, [pc, #20]	; (8004908 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80048f2:	88fb      	ldrh	r3, [r7, #6]
 80048f4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 f807 	bl	800490c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	44022000 	.word	0x44022000

0800490c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
	...

08004924 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_ICACHE_Enable+0x1c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a04      	ldr	r2, [pc, #16]	; (8004940 <HAL_ICACHE_Enable+0x1c>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40030400 	.word	0x40030400

08004944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f000 bc28 	b.w	80051a8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004958:	4b94      	ldr	r3, [pc, #592]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f003 0318 	and.w	r3, r3, #24
 8004960:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004962:	4b92      	ldr	r3, [pc, #584]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d05b      	beq.n	8004a30 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b08      	cmp	r3, #8
 800497c:	d005      	beq.n	800498a <HAL_RCC_OscConfig+0x46>
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	2b18      	cmp	r3, #24
 8004982:	d114      	bne.n	80049ae <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d111      	bne.n	80049ae <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f000 bc08 	b.w	80051a8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004998:	4b84      	ldr	r3, [pc, #528]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	4981      	ldr	r1, [pc, #516]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80049ac:	e040      	b.n	8004a30 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d023      	beq.n	80049fe <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049b6:	4b7d      	ldr	r3, [pc, #500]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a7c      	ldr	r2, [pc, #496]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c2:	f7fe f9c5 	bl	8002d50 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80049ca:	f7fe f9c1 	bl	8002d50 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e3e5      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80049dc:	4b73      	ldr	r3, [pc, #460]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80049e8:	4b70      	ldr	r3, [pc, #448]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	496d      	ldr	r1, [pc, #436]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	618b      	str	r3, [r1, #24]
 80049fc:	e018      	b.n	8004a30 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049fe:	4b6b      	ldr	r3, [pc, #428]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6a      	ldr	r2, [pc, #424]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fe f9a1 	bl	8002d50 <HAL_GetTick>
 8004a0e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004a12:	f7fe f99d 	bl	8002d50 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e3c1      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a24:	4b61      	ldr	r3, [pc, #388]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a0 	beq.w	8004b7e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	2b10      	cmp	r3, #16
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_OscConfig+0x10c>
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b18      	cmp	r3, #24
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f040 8092 	bne.w	8004b7e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e3a4      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a66:	d106      	bne.n	8004a76 <HAL_RCC_OscConfig+0x132>
 8004a68:	4b50      	ldr	r3, [pc, #320]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a4f      	ldr	r2, [pc, #316]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e058      	b.n	8004b28 <HAL_RCC_OscConfig+0x1e4>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d112      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x160>
 8004a7e:	4b4b      	ldr	r3, [pc, #300]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a4a      	ldr	r2, [pc, #296]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b48      	ldr	r3, [pc, #288]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a47      	ldr	r2, [pc, #284]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4b45      	ldr	r3, [pc, #276]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a44      	ldr	r2, [pc, #272]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e041      	b.n	8004b28 <HAL_RCC_OscConfig+0x1e4>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aac:	d112      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x190>
 8004aae:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a3e      	ldr	r2, [pc, #248]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	4b3c      	ldr	r3, [pc, #240]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a3b      	ldr	r2, [pc, #236]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004ac0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b39      	ldr	r3, [pc, #228]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a38      	ldr	r2, [pc, #224]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e029      	b.n	8004b28 <HAL_RCC_OscConfig+0x1e4>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004adc:	d112      	bne.n	8004b04 <HAL_RCC_OscConfig+0x1c0>
 8004ade:	4b33      	ldr	r3, [pc, #204]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a32      	ldr	r2, [pc, #200]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b30      	ldr	r3, [pc, #192]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2f      	ldr	r2, [pc, #188]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e011      	b.n	8004b28 <HAL_RCC_OscConfig+0x1e4>
 8004b04:	4b29      	ldr	r3, [pc, #164]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a28      	ldr	r2, [pc, #160]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b26      	ldr	r3, [pc, #152]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b23      	ldr	r3, [pc, #140]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a22      	ldr	r2, [pc, #136]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004b22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d013      	beq.n	8004b58 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fe f90e 	bl	8002d50 <HAL_GetTick>
 8004b34:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004b38:	f7fe f90a 	bl	8002d50 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e32e      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b4a:	4b18      	ldr	r3, [pc, #96]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x1f4>
 8004b56:	e012      	b.n	8004b7e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fe f8fa 	bl	8002d50 <HAL_GetTick>
 8004b5c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004b60:	f7fe f8f6 	bl	8002d50 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	; 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e31a      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 809a 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_RCC_OscConfig+0x25a>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b18      	cmp	r3, #24
 8004b96:	d149      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d146      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d104      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e2fe      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
 8004baa:	bf00      	nop
 8004bac:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d11c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004bb6:	4b9a      	ldr	r3, [pc, #616]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0218 	and.w	r2, r3, #24
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d014      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004bc6:	4b96      	ldr	r3, [pc, #600]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 0218 	bic.w	r2, r3, #24
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	4993      	ldr	r1, [pc, #588]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004bd8:	f000 fdd0 	bl	800577c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bdc:	4b91      	ldr	r3, [pc, #580]	; (8004e24 <HAL_RCC_OscConfig+0x4e0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fc f913 	bl	8000e0c <HAL_InitTick>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e2db      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fe f8ae 	bl	8002d50 <HAL_GetTick>
 8004bf4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004bf8:	f7fe f8aa 	bl	8002d50 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e2ce      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c0a:	4b85      	ldr	r3, [pc, #532]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004c16:	4b82      	ldr	r3, [pc, #520]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	497e      	ldr	r1, [pc, #504]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004c2a:	e049      	b.n	8004cc0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02c      	beq.n	8004c8e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004c34:	4b7a      	ldr	r3, [pc, #488]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f023 0218 	bic.w	r2, r3, #24
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4977      	ldr	r1, [pc, #476]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004c46:	4b76      	ldr	r3, [pc, #472]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a75      	ldr	r2, [pc, #468]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fe f87d 	bl	8002d50 <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004c5a:	f7fe f879 	bl	8002d50 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e29d      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c6c:	4b6c      	ldr	r3, [pc, #432]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004c78:	4b69      	ldr	r3, [pc, #420]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	041b      	lsls	r3, r3, #16
 8004c86:	4966      	ldr	r1, [pc, #408]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	610b      	str	r3, [r1, #16]
 8004c8c:	e018      	b.n	8004cc0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8e:	4b64      	ldr	r3, [pc, #400]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a63      	ldr	r2, [pc, #396]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fe f859 	bl	8002d50 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004ca2:	f7fe f855 	bl	8002d50 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e279      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cb4:	4b5a      	ldr	r3, [pc, #360]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d03c      	beq.n	8004d46 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01c      	beq.n	8004d0e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd4:	4b52      	ldr	r3, [pc, #328]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cda:	4a51      	ldr	r2, [pc, #324]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004cdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fe f834 	bl	8002d50 <HAL_GetTick>
 8004ce8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004cec:	f7fe f830 	bl	8002d50 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e254      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004cfe:	4b48      	ldr	r3, [pc, #288]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ef      	beq.n	8004cec <HAL_RCC_OscConfig+0x3a8>
 8004d0c:	e01b      	b.n	8004d46 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d0e:	4b44      	ldr	r3, [pc, #272]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d14:	4a42      	ldr	r2, [pc, #264]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004d16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1e:	f7fe f817 	bl	8002d50 <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004d26:	f7fe f813 	bl	8002d50 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e237      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d38:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1ef      	bne.n	8004d26 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80d2 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d54:	4b34      	ldr	r3, [pc, #208]	; (8004e28 <HAL_RCC_OscConfig+0x4e4>)
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d118      	bne.n	8004d92 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004d60:	4b31      	ldr	r3, [pc, #196]	; (8004e28 <HAL_RCC_OscConfig+0x4e4>)
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	4a30      	ldr	r2, [pc, #192]	; (8004e28 <HAL_RCC_OscConfig+0x4e4>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6c:	f7fd fff0 	bl	8002d50 <HAL_GetTick>
 8004d70:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d74:	f7fd ffec 	bl	8002d50 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e210      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d86:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <HAL_RCC_OscConfig+0x4e4>)
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d108      	bne.n	8004dac <HAL_RCC_OscConfig+0x468>
 8004d9a:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da0:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004daa:	e074      	b.n	8004e96 <HAL_RCC_OscConfig+0x552>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d118      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4a2>
 8004db4:	4b1a      	ldr	r3, [pc, #104]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dba:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004dc4:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004dd4:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dda:	4a11      	ldr	r2, [pc, #68]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004ddc:	f023 0304 	bic.w	r3, r3, #4
 8004de0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004de4:	e057      	b.n	8004e96 <HAL_RCC_OscConfig+0x552>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d11e      	bne.n	8004e2c <HAL_RCC_OscConfig+0x4e8>
 8004dee:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004df4:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004df6:	f043 0304 	orr.w	r3, r3, #4
 8004dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004dfe:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e04:	4a06      	ldr	r2, [pc, #24]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e14:	4a02      	ldr	r2, [pc, #8]	; (8004e20 <HAL_RCC_OscConfig+0x4dc>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e1e:	e03a      	b.n	8004e96 <HAL_RCC_OscConfig+0x552>
 8004e20:	44020c00 	.word	0x44020c00
 8004e24:	2000002c 	.word	0x2000002c
 8004e28:	44020800 	.word	0x44020800
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b85      	cmp	r3, #133	; 0x85
 8004e32:	d118      	bne.n	8004e66 <HAL_RCC_OscConfig+0x522>
 8004e34:	4ba2      	ldr	r3, [pc, #648]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e3a:	4aa1      	ldr	r2, [pc, #644]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e3c:	f043 0304 	orr.w	r3, r3, #4
 8004e40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e44:	4b9e      	ldr	r3, [pc, #632]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e4a:	4a9d      	ldr	r2, [pc, #628]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e54:	4b9a      	ldr	r3, [pc, #616]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e5a:	4a99      	ldr	r2, [pc, #612]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e64:	e017      	b.n	8004e96 <HAL_RCC_OscConfig+0x552>
 8004e66:	4b96      	ldr	r3, [pc, #600]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e6c:	4a94      	ldr	r2, [pc, #592]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e76:	4b92      	ldr	r3, [pc, #584]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e7c:	4a90      	ldr	r2, [pc, #576]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e7e:	f023 0304 	bic.w	r3, r3, #4
 8004e82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e86:	4b8e      	ldr	r3, [pc, #568]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e8c:	4a8c      	ldr	r2, [pc, #560]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9e:	f7fd ff57 	bl	8002d50 <HAL_GetTick>
 8004ea2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea6:	f7fd ff53 	bl	8002d50 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e175      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ebc:	4b80      	ldr	r3, [pc, #512]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ed      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x562>
 8004eca:	e015      	b.n	8004ef8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ecc:	f7fd ff40 	bl	8002d50 <HAL_GetTick>
 8004ed0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7fd ff3c 	bl	8002d50 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e15e      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eea:	4b75      	ldr	r3, [pc, #468]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1ed      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d036      	beq.n	8004f72 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d019      	beq.n	8004f40 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f0c:	4b6c      	ldr	r3, [pc, #432]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a6b      	ldr	r2, [pc, #428]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004f12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fd ff1a 	bl	8002d50 <HAL_GetTick>
 8004f1c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004f20:	f7fd ff16 	bl	8002d50 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e13a      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f32:	4b63      	ldr	r3, [pc, #396]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x5dc>
 8004f3e:	e018      	b.n	8004f72 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f40:	4b5f      	ldr	r3, [pc, #380]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5e      	ldr	r2, [pc, #376]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fd ff00 	bl	8002d50 <HAL_GetTick>
 8004f50:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004f54:	f7fd fefc 	bl	8002d50 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e120      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f66:	4b56      	ldr	r3, [pc, #344]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8115 	beq.w	80051a6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b18      	cmp	r3, #24
 8004f80:	f000 80af 	beq.w	80050e2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	f040 8086 	bne.w	800509a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004f8e:	4b4c      	ldr	r3, [pc, #304]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a4b      	ldr	r2, [pc, #300]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9a:	f7fd fed9 	bl	8002d50 <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004fa2:	f7fd fed5 	bl	8002d50 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e0f9      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004fb4:	4b42      	ldr	r3, [pc, #264]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f0      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004fc0:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fc8:	f023 0303 	bic.w	r3, r3, #3
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fd4:	0212      	lsls	r2, r2, #8
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	4939      	ldr	r1, [pc, #228]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	628b      	str	r3, [r1, #40]	; 0x28
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	3b01      	subs	r3, #1
 8004fee:	025b      	lsls	r3, r3, #9
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	3b01      	subs	r3, #1
 8005008:	061b      	lsls	r3, r3, #24
 800500a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800500e:	492c      	ldr	r1, [pc, #176]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8005010:	4313      	orrs	r3, r2
 8005012:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005014:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	4a29      	ldr	r2, [pc, #164]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 800501a:	f023 0310 	bic.w	r3, r3, #16
 800501e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005024:	4a26      	ldr	r2, [pc, #152]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800502a:	4b25      	ldr	r3, [pc, #148]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8005030:	f043 0310 	orr.w	r3, r3, #16
 8005034:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005036:	4b22      	ldr	r3, [pc, #136]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	f023 020c 	bic.w	r2, r3, #12
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	491f      	ldr	r1, [pc, #124]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8005044:	4313      	orrs	r3, r2
 8005046:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f023 0220 	bic.w	r2, r3, #32
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005054:	491a      	ldr	r1, [pc, #104]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8005056:	4313      	orrs	r3, r2
 8005058:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800505a:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005064:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005066:	4b16      	ldr	r3, [pc, #88]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a15      	ldr	r2, [pc, #84]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 800506c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fd fe6d 	bl	8002d50 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800507a:	f7fd fe69 	bl	8002d50 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e08d      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x736>
 8005098:	e085      	b.n	80051a6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <HAL_RCC_OscConfig+0x77c>)
 80050a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fd fe53 	bl	8002d50 <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050ac:	e00a      	b.n	80050c4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80050ae:	f7fd fe4f 	bl	8002d50 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d903      	bls.n	80050c4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e073      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
 80050c0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050c4:	4b3a      	ldr	r3, [pc, #232]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1ee      	bne.n	80050ae <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80050d0:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	4a36      	ldr	r2, [pc, #216]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 80050d6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	6293      	str	r3, [r2, #40]	; 0x28
 80050e0:	e061      	b.n	80051a6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80050e2:	4b33      	ldr	r3, [pc, #204]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050e8:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d031      	beq.n	800515a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f003 0203 	and.w	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d12a      	bne.n	800515a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d122      	bne.n	800515a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d11a      	bne.n	800515a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	0a5b      	lsrs	r3, r3, #9
 8005128:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d111      	bne.n	800515a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d108      	bne.n	800515a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	0e1b      	lsrs	r3, r3, #24
 800514c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d001      	beq.n	800515e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e024      	b.n	80051a8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800515e:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	08db      	lsrs	r3, r3, #3
 8005164:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800516c:	429a      	cmp	r2, r3
 800516e:	d01a      	beq.n	80051a6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	4a0e      	ldr	r2, [pc, #56]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 8005176:	f023 0310 	bic.w	r3, r3, #16
 800517a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fd fde8 	bl	8002d50 <HAL_GetTick>
 8005180:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005182:	bf00      	nop
 8005184:	f7fd fde4 	bl	8002d50 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	4293      	cmp	r3, r2
 800518e:	d0f9      	beq.n	8005184 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005194:	4a06      	ldr	r2, [pc, #24]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	4a04      	ldr	r2, [pc, #16]	; (80051b0 <HAL_RCC_OscConfig+0x86c>)
 80051a0:	f043 0310 	orr.w	r3, r3, #16
 80051a4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	44020c00 	.word	0x44020c00

080051b4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e19e      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c8:	4b83      	ldr	r3, [pc, #524]	; (80053d8 <HAL_RCC_ClockConfig+0x224>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d910      	bls.n	80051f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	4b80      	ldr	r3, [pc, #512]	; (80053d8 <HAL_RCC_ClockConfig+0x224>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 020f 	bic.w	r2, r3, #15
 80051de:	497e      	ldr	r1, [pc, #504]	; (80053d8 <HAL_RCC_ClockConfig+0x224>)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e6:	4b7c      	ldr	r3, [pc, #496]	; (80053d8 <HAL_RCC_ClockConfig+0x224>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d001      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e186      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d012      	beq.n	800522a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	4b74      	ldr	r3, [pc, #464]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005212:	429a      	cmp	r2, r3
 8005214:	d909      	bls.n	800522a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005216:	4b71      	ldr	r3, [pc, #452]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	496d      	ldr	r1, [pc, #436]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 8005226:	4313      	orrs	r3, r2
 8005228:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d012      	beq.n	800525c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	4b68      	ldr	r3, [pc, #416]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005244:	429a      	cmp	r2, r3
 8005246:	d909      	bls.n	800525c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005248:	4b64      	ldr	r3, [pc, #400]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	4961      	ldr	r1, [pc, #388]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 8005258:	4313      	orrs	r3, r2
 800525a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d010      	beq.n	800528a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005274:	429a      	cmp	r2, r3
 8005276:	d908      	bls.n	800528a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005278:	4b58      	ldr	r3, [pc, #352]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4955      	ldr	r1, [pc, #340]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 8005286:	4313      	orrs	r3, r2
 8005288:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d010      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	4b50      	ldr	r3, [pc, #320]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d908      	bls.n	80052b8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80052a6:	4b4d      	ldr	r3, [pc, #308]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 020f 	bic.w	r2, r3, #15
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	494a      	ldr	r1, [pc, #296]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8093 	beq.w	80053ec <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80052ce:	4b43      	ldr	r3, [pc, #268]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d121      	bne.n	800531e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e113      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e6:	4b3d      	ldr	r3, [pc, #244]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d115      	bne.n	800531e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e107      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80052fe:	4b37      	ldr	r3, [pc, #220]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e0fb      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800530e:	4b33      	ldr	r3, [pc, #204]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e0f3      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800531e:	4b2f      	ldr	r3, [pc, #188]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f023 0203 	bic.w	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	492c      	ldr	r1, [pc, #176]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 800532c:	4313      	orrs	r3, r2
 800532e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fd fd0e 	bl	8002d50 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b03      	cmp	r3, #3
 800533c:	d112      	bne.n	8005364 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005340:	f7fd fd06 	bl	8002d50 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	; 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0d7      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005356:	4b21      	ldr	r3, [pc, #132]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f003 0318 	and.w	r3, r3, #24
 800535e:	2b18      	cmp	r3, #24
 8005360:	d1ee      	bne.n	8005340 <HAL_RCC_ClockConfig+0x18c>
 8005362:	e043      	b.n	80053ec <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d112      	bne.n	8005392 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800536c:	e00a      	b.n	8005384 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800536e:	f7fd fcef 	bl	8002d50 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	; 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e0c0      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005384:	4b15      	ldr	r3, [pc, #84]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f003 0318 	and.w	r3, r3, #24
 800538c:	2b10      	cmp	r3, #16
 800538e:	d1ee      	bne.n	800536e <HAL_RCC_ClockConfig+0x1ba>
 8005390:	e02c      	b.n	80053ec <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d122      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800539c:	f7fd fcd8 	bl	8002d50 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e0a9      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80053b2:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <HAL_RCC_ClockConfig+0x228>)
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f003 0318 	and.w	r3, r3, #24
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d1ee      	bne.n	800539c <HAL_RCC_ClockConfig+0x1e8>
 80053be:	e015      	b.n	80053ec <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80053c0:	f7fd fcc6 	bl	8002d50 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d906      	bls.n	80053e0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e097      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
 80053d6:	bf00      	nop
 80053d8:	40022000 	.word	0x40022000
 80053dc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80053e0:	4b4b      	ldr	r3, [pc, #300]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f003 0318 	and.w	r3, r3, #24
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e9      	bne.n	80053c0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d010      	beq.n	800541a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	4b44      	ldr	r3, [pc, #272]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	429a      	cmp	r2, r3
 8005406:	d208      	bcs.n	800541a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005408:	4b41      	ldr	r3, [pc, #260]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f023 020f 	bic.w	r2, r3, #15
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	493e      	ldr	r1, [pc, #248]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800541a:	4b3e      	ldr	r3, [pc, #248]	; (8005514 <HAL_RCC_ClockConfig+0x360>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d210      	bcs.n	800544a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005428:	4b3a      	ldr	r3, [pc, #232]	; (8005514 <HAL_RCC_ClockConfig+0x360>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f023 020f 	bic.w	r2, r3, #15
 8005430:	4938      	ldr	r1, [pc, #224]	; (8005514 <HAL_RCC_ClockConfig+0x360>)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	4313      	orrs	r3, r2
 8005436:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005438:	4b36      	ldr	r3, [pc, #216]	; (8005514 <HAL_RCC_ClockConfig+0x360>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d001      	beq.n	800544a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e05d      	b.n	8005506 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005462:	429a      	cmp	r2, r3
 8005464:	d208      	bcs.n	8005478 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005466:	4b2a      	ldr	r3, [pc, #168]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	4927      	ldr	r1, [pc, #156]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d012      	beq.n	80054aa <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	4b21      	ldr	r3, [pc, #132]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005492:	429a      	cmp	r2, r3
 8005494:	d209      	bcs.n	80054aa <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005496:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	491a      	ldr	r1, [pc, #104]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d012      	beq.n	80054dc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d209      	bcs.n	80054dc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80054c8:	4b11      	ldr	r3, [pc, #68]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	490e      	ldr	r1, [pc, #56]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80054dc:	f000 f822 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 80054e0:	4602      	mov	r2, r0
 80054e2:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <HAL_RCC_ClockConfig+0x35c>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	490b      	ldr	r1, [pc, #44]	; (8005518 <HAL_RCC_ClockConfig+0x364>)
 80054ec:	5ccb      	ldrb	r3, [r1, r3]
 80054ee:	fa22 f303 	lsr.w	r3, r2, r3
 80054f2:	4a0a      	ldr	r2, [pc, #40]	; (800551c <HAL_RCC_ClockConfig+0x368>)
 80054f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <HAL_RCC_ClockConfig+0x36c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fb fc86 	bl	8000e0c <HAL_InitTick>
 8005500:	4603      	mov	r3, r0
 8005502:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005504:	7afb      	ldrb	r3, [r7, #11]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	44020c00 	.word	0x44020c00
 8005514:	40022000 	.word	0x40022000
 8005518:	08011670 	.word	0x08011670
 800551c:	20000000 	.word	0x20000000
 8005520:	2000002c 	.word	0x2000002c

08005524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005524:	b480      	push	{r7}
 8005526:	b089      	sub	sp, #36	; 0x24
 8005528:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800552a:	4b8c      	ldr	r3, [pc, #560]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 0318 	and.w	r3, r3, #24
 8005532:	2b08      	cmp	r3, #8
 8005534:	d102      	bne.n	800553c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005536:	4b8a      	ldr	r3, [pc, #552]	; (8005760 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e107      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800553c:	4b87      	ldr	r3, [pc, #540]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	f003 0318 	and.w	r3, r3, #24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d112      	bne.n	800556e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005548:	4b84      	ldr	r3, [pc, #528]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005554:	4b81      	ldr	r3, [pc, #516]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	08db      	lsrs	r3, r3, #3
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	4a81      	ldr	r2, [pc, #516]	; (8005764 <HAL_RCC_GetSysClockFreq+0x240>)
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e0f1      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005568:	4b7e      	ldr	r3, [pc, #504]	; (8005764 <HAL_RCC_GetSysClockFreq+0x240>)
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	e0ee      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800556e:	4b7b      	ldr	r3, [pc, #492]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f003 0318 	and.w	r3, r3, #24
 8005576:	2b10      	cmp	r3, #16
 8005578:	d102      	bne.n	8005580 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800557a:	4b7b      	ldr	r3, [pc, #492]	; (8005768 <HAL_RCC_GetSysClockFreq+0x244>)
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	e0e5      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005580:	4b76      	ldr	r3, [pc, #472]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f003 0318 	and.w	r3, r3, #24
 8005588:	2b18      	cmp	r3, #24
 800558a:	f040 80dd 	bne.w	8005748 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800558e:	4b73      	ldr	r3, [pc, #460]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005598:	4b70      	ldr	r3, [pc, #448]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80055a4:	4b6d      	ldr	r3, [pc, #436]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80055b0:	4b6a      	ldr	r3, [pc, #424]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80055b4:	08db      	lsrs	r3, r3, #3
 80055b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	fb02 f303 	mul.w	r3, r2, r3
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80b7 	beq.w	8005742 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d003      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0xbe>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d056      	beq.n	800568e <HAL_RCC_GetSysClockFreq+0x16a>
 80055e0:	e077      	b.n	80056d2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80055e2:	4b5e      	ldr	r3, [pc, #376]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d02d      	beq.n	800564a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055ee:	4b5b      	ldr	r3, [pc, #364]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	08db      	lsrs	r3, r3, #3
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	4a5a      	ldr	r2, [pc, #360]	; (8005764 <HAL_RCC_GetSysClockFreq+0x240>)
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005618:	4b50      	ldr	r3, [pc, #320]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005628:	ed97 6a02 	vldr	s12, [r7, #8]
 800562c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800576c <HAL_RCC_GetSysClockFreq+0x248>
 8005630:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005634:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800563c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005644:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005648:	e065      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005654:	eddf 6a46 	vldr	s13, [pc, #280]	; 8005770 <HAL_RCC_GetSysClockFreq+0x24c>
 8005658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565c:	4b3f      	ldr	r3, [pc, #252]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005664:	ee07 3a90 	vmov	s15, r3
 8005668:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800566c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005670:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800576c <HAL_RCC_GetSysClockFreq+0x248>
 8005674:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005678:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800567c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005680:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005688:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800568c:	e043      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005698:	eddf 6a36 	vldr	s13, [pc, #216]	; 8005774 <HAL_RCC_GetSysClockFreq+0x250>
 800569c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a0:	4b2e      	ldr	r3, [pc, #184]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 80056a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80056b4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800576c <HAL_RCC_GetSysClockFreq+0x248>
 80056b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056cc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80056d0:	e021      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056dc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005778 <HAL_RCC_GetSysClockFreq+0x254>
 80056e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e4:	4b1d      	ldr	r3, [pc, #116]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ec:	ee07 3a90 	vmov	s15, r3
 80056f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800576c <HAL_RCC_GetSysClockFreq+0x248>
 80056fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005700:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005708:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800570c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005710:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005714:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005716:	4b11      	ldr	r3, [pc, #68]	; (800575c <HAL_RCC_GetSysClockFreq+0x238>)
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	0a5b      	lsrs	r3, r3, #9
 800571c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005720:	3301      	adds	r3, #1
 8005722:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800572e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800573a:	ee17 3a90 	vmov	r3, s15
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	e004      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	e001      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <HAL_RCC_GetSysClockFreq+0x240>)
 800574a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800574c:	69fb      	ldr	r3, [r7, #28]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3724      	adds	r7, #36	; 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	44020c00 	.word	0x44020c00
 8005760:	003d0900 	.word	0x003d0900
 8005764:	03d09000 	.word	0x03d09000
 8005768:	007a1200 	.word	0x007a1200
 800576c:	46000000 	.word	0x46000000
 8005770:	4c742400 	.word	0x4c742400
 8005774:	4af42400 	.word	0x4af42400
 8005778:	4a742400 	.word	0x4a742400

0800577c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005780:	f7ff fed0 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 8005784:	4602      	mov	r2, r0
 8005786:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005788:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800578a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800578e:	4907      	ldr	r1, [pc, #28]	; (80057ac <HAL_RCC_GetHCLKFreq+0x30>)
 8005790:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005792:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	4a05      	ldr	r2, [pc, #20]	; (80057b0 <HAL_RCC_GetHCLKFreq+0x34>)
 800579c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <HAL_RCC_GetHCLKFreq+0x34>)
 80057a0:	681b      	ldr	r3, [r3, #0]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	44020c00 	.word	0x44020c00
 80057ac:	08011670 	.word	0x08011670
 80057b0:	20000000 	.word	0x20000000

080057b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80057b8:	f7ff ffe0 	bl	800577c <HAL_RCC_GetHCLKFreq>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	4904      	ldr	r1, [pc, #16]	; (80057dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	44020c00 	.word	0x44020c00
 80057dc:	08011680 	.word	0x08011680

080057e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80057e4:	f7ff ffca 	bl	800577c <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4904      	ldr	r1, [pc, #16]	; (8005808 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	44020c00 	.word	0x44020c00
 8005808:	08011680 	.word	0x08011680

0800580c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005810:	f7ff ffb4 	bl	800577c <HAL_RCC_GetHCLKFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	0b1b      	lsrs	r3, r3, #12
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	4904      	ldr	r1, [pc, #16]	; (8005834 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800582c:	4618      	mov	r0, r3
 800582e:	bd80      	pop	{r7, pc}
 8005830:	44020c00 	.word	0x44020c00
 8005834:	08011680 	.word	0x08011680

08005838 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	221f      	movs	r2, #31
 8005846:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005848:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <HAL_RCC_GetClockConfig+0x68>)
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f003 0203 	and.w	r2, r3, #3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8005854:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_RCC_GetClockConfig+0x68>)
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 020f 	and.w	r2, r3, #15
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	0a1b      	lsrs	r3, r3, #8
 800587e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005886:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <HAL_RCC_GetClockConfig+0x6c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 020f 	and.w	r2, r3, #15
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	601a      	str	r2, [r3, #0]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	44020c00 	.word	0x44020c00
 80058a4:	40022000 	.word	0x40022000

080058a8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b0d8      	sub	sp, #352	; 0x160
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058b4:	2300      	movs	r3, #0
 80058b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058ba:	2300      	movs	r3, #0
 80058bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80058cc:	2500      	movs	r5, #0
 80058ce:	ea54 0305 	orrs.w	r3, r4, r5
 80058d2:	d00b      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80058d4:	4bcd      	ldr	r3, [pc, #820]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80058d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058da:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80058de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	4ac9      	ldr	r2, [pc, #804]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80058e6:	430b      	orrs	r3, r1
 80058e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f002 0801 	and.w	r8, r2, #1
 80058f8:	f04f 0900 	mov.w	r9, #0
 80058fc:	ea58 0309 	orrs.w	r3, r8, r9
 8005900:	d042      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005902:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005908:	2b05      	cmp	r3, #5
 800590a:	d823      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800590c:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	0800595d 	.word	0x0800595d
 8005918:	0800592d 	.word	0x0800592d
 800591c:	08005941 	.word	0x08005941
 8005920:	0800595d 	.word	0x0800595d
 8005924:	0800595d 	.word	0x0800595d
 8005928:	0800595d 	.word	0x0800595d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800592c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005930:	3308      	adds	r3, #8
 8005932:	4618      	mov	r0, r3
 8005934:	f004 feda 	bl	800a6ec <RCCEx_PLL2_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800593e:	e00e      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005940:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005944:	3330      	adds	r3, #48	; 0x30
 8005946:	4618      	mov	r0, r3
 8005948:	f004 ff68 	bl	800a81c <RCCEx_PLL3_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005952:	e004      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800595a:	e000      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800595c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005966:	4ba9      	ldr	r3, [pc, #676]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800596c:	f023 0107 	bic.w	r1, r3, #7
 8005970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005976:	4aa5      	ldr	r2, [pc, #660]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005978:	430b      	orrs	r3, r1
 800597a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800597e:	e003      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005984:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005988:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f002 0a02 	and.w	sl, r2, #2
 8005994:	f04f 0b00 	mov.w	fp, #0
 8005998:	ea5a 030b 	orrs.w	r3, sl, fp
 800599c:	f000 8088 	beq.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80059a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a6:	2b28      	cmp	r3, #40	; 0x28
 80059a8:	d868      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	08005a85 	.word	0x08005a85
 80059b4:	08005a7d 	.word	0x08005a7d
 80059b8:	08005a7d 	.word	0x08005a7d
 80059bc:	08005a7d 	.word	0x08005a7d
 80059c0:	08005a7d 	.word	0x08005a7d
 80059c4:	08005a7d 	.word	0x08005a7d
 80059c8:	08005a7d 	.word	0x08005a7d
 80059cc:	08005a7d 	.word	0x08005a7d
 80059d0:	08005a55 	.word	0x08005a55
 80059d4:	08005a7d 	.word	0x08005a7d
 80059d8:	08005a7d 	.word	0x08005a7d
 80059dc:	08005a7d 	.word	0x08005a7d
 80059e0:	08005a7d 	.word	0x08005a7d
 80059e4:	08005a7d 	.word	0x08005a7d
 80059e8:	08005a7d 	.word	0x08005a7d
 80059ec:	08005a7d 	.word	0x08005a7d
 80059f0:	08005a69 	.word	0x08005a69
 80059f4:	08005a7d 	.word	0x08005a7d
 80059f8:	08005a7d 	.word	0x08005a7d
 80059fc:	08005a7d 	.word	0x08005a7d
 8005a00:	08005a7d 	.word	0x08005a7d
 8005a04:	08005a7d 	.word	0x08005a7d
 8005a08:	08005a7d 	.word	0x08005a7d
 8005a0c:	08005a7d 	.word	0x08005a7d
 8005a10:	08005a85 	.word	0x08005a85
 8005a14:	08005a7d 	.word	0x08005a7d
 8005a18:	08005a7d 	.word	0x08005a7d
 8005a1c:	08005a7d 	.word	0x08005a7d
 8005a20:	08005a7d 	.word	0x08005a7d
 8005a24:	08005a7d 	.word	0x08005a7d
 8005a28:	08005a7d 	.word	0x08005a7d
 8005a2c:	08005a7d 	.word	0x08005a7d
 8005a30:	08005a85 	.word	0x08005a85
 8005a34:	08005a7d 	.word	0x08005a7d
 8005a38:	08005a7d 	.word	0x08005a7d
 8005a3c:	08005a7d 	.word	0x08005a7d
 8005a40:	08005a7d 	.word	0x08005a7d
 8005a44:	08005a7d 	.word	0x08005a7d
 8005a48:	08005a7d 	.word	0x08005a7d
 8005a4c:	08005a7d 	.word	0x08005a7d
 8005a50:	08005a85 	.word	0x08005a85
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a58:	3308      	adds	r3, #8
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f004 fe46 	bl	800a6ec <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005a66:	e00e      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a6c:	3330      	adds	r3, #48	; 0x30
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f004 fed4 	bl	800a81c <RCCEx_PLL3_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005a7a:	e004      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a82:	e000      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005a8e:	4b5f      	ldr	r3, [pc, #380]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a94:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a9e:	4a5b      	ldr	r2, [pc, #364]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005aa6:	e003      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005aac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f002 0304 	and.w	r3, r2, #4
 8005abc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005ac6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8005aca:	460b      	mov	r3, r1
 8005acc:	4313      	orrs	r3, r2
 8005ace:	d04e      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ada:	d02c      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005adc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ae0:	d825      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae6:	d028      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aec:	d81f      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005aee:	2bc0      	cmp	r3, #192	; 0xc0
 8005af0:	d025      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005af2:	2bc0      	cmp	r3, #192	; 0xc0
 8005af4:	d81b      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d00f      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d817      	bhi.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01f      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d113      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f004 fded 	bl	800a6ec <RCCEx_PLL2_Config>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005b18:	e014      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b1e:	3330      	adds	r3, #48	; 0x30
 8005b20:	4618      	mov	r0, r3
 8005b22:	f004 fe7b 	bl	800a81c <RCCEx_PLL3_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005b2c:	e00a      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b34:	e006      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b36:	bf00      	nop
 8005b38:	e004      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b3a:	bf00      	nop
 8005b3c:	e002      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b3e:	bf00      	nop
 8005b40:	e000      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10c      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005b4c:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b52:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005b56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b5c:	4a2b      	ldr	r2, [pc, #172]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005b64:	e003      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b6a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f002 0308 	and.w	r3, r2, #8
 8005b7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005b84:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	d056      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005b8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b94:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005b98:	d031      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005b9a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005b9e:	d82a      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba4:	d02d      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005baa:	d824      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005bac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bb0:	d029      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005bb2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bb6:	d81e      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bbc:	d011      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc2:	d818      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d023      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bcc:	d113      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f004 fd89 	bl	800a6ec <RCCEx_PLL2_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005be0:	e017      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005be6:	3330      	adds	r3, #48	; 0x30
 8005be8:	4618      	mov	r0, r3
 8005bea:	f004 fe17 	bl	800a81c <RCCEx_PLL3_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005bf4:	e00d      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005bfc:	e009      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e007      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005c02:	bf00      	nop
 8005c04:	e005      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005c06:	bf00      	nop
 8005c08:	e003      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005c0a:	bf00      	nop
 8005c0c:	44020c00 	.word	0x44020c00
        break;
 8005c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005c1a:	4bbb      	ldr	r3, [pc, #748]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005c20:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c2a:	4ab7      	ldr	r2, [pc, #732]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005c32:	e003      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c34:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c38:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f002 0310 	and.w	r3, r2, #16
 8005c48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005c52:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8005c56:	460b      	mov	r3, r1
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	d053      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c62:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c66:	d031      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005c68:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005c6c:	d82a      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c72:	d02d      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c78:	d824      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c7e:	d029      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005c80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c84:	d81e      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8a:	d011      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c90:	d818      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d020      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9a:	d113      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f004 fd22 	bl	800a6ec <RCCEx_PLL2_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005cae:	e014      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cb4:	3330      	adds	r3, #48	; 0x30
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f004 fdb0 	bl	800a81c <RCCEx_PLL3_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005cc2:	e00a      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005cca:	e006      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005ccc:	bf00      	nop
 8005cce:	e004      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005cd0:	bf00      	nop
 8005cd2:	e002      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005cd4:	bf00      	nop
 8005cd6:	e000      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cda:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005ce2:	4b89      	ldr	r3, [pc, #548]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005ce8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf2:	4a85      	ldr	r2, [pc, #532]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005cfa:	e003      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d00:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0c:	f002 0320 	and.w	r3, r2, #32
 8005d10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005d14:	2300      	movs	r3, #0
 8005d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005d1a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4313      	orrs	r3, r2
 8005d22:	d053      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005d24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005d2e:	d031      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005d30:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005d34:	d82a      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d3a:	d02d      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d40:	d824      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d42:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005d46:	d029      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005d48:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005d4c:	d81e      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d52:	d011      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d58:	d818      	bhi.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d020      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	d113      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d68:	3308      	adds	r3, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f004 fcbe 	bl	800a6ec <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005d76:	e014      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d7c:	3330      	adds	r3, #48	; 0x30
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f004 fd4c 	bl	800a81c <RCCEx_PLL3_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d92:	e006      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d94:	bf00      	nop
 8005d96:	e004      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d98:	bf00      	nop
 8005d9a:	e002      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e000      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005daa:	4b57      	ldr	r3, [pc, #348]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005dac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005db0:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8005db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	4a53      	ldr	r2, [pc, #332]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005dc2:	e003      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dc8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005dd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005de2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8005de6:	460b      	mov	r3, r1
 8005de8:	4313      	orrs	r3, r2
 8005dea:	d053      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005df6:	d031      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005df8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005dfc:	d82a      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e02:	d02d      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e08:	d824      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e0e:	d029      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005e10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e14:	d81e      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e1a:	d011      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005e1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e20:	d818      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d020      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e2a:	d113      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e30:	3308      	adds	r3, #8
 8005e32:	4618      	mov	r0, r3
 8005e34:	f004 fc5a 	bl	800a6ec <RCCEx_PLL2_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005e3e:	e014      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e44:	3330      	adds	r3, #48	; 0x30
 8005e46:	4618      	mov	r0, r3
 8005e48:	f004 fce8 	bl	800a81c <RCCEx_PLL3_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005e52:	e00a      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e5a:	e006      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e5c:	bf00      	nop
 8005e5e:	e004      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e60:	bf00      	nop
 8005e62:	e002      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10c      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005e72:	4b25      	ldr	r3, [pc, #148]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005e74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e78:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8005e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e82:	4a21      	ldr	r2, [pc, #132]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005e84:	430b      	orrs	r3, r1
 8005e86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005e8a:	e003      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e90:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ea0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005eaa:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	d055      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ebe:	d033      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005ec0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ec4:	d82c      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eca:	d02f      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005ecc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ed0:	d826      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005ed2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ed6:	d02b      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005ed8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005edc:	d820      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee2:	d013      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee8:	d81a      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d022      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef2:	d115      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ef4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ef8:	3308      	adds	r3, #8
 8005efa:	4618      	mov	r0, r3
 8005efc:	f004 fbf6 	bl	800a6ec <RCCEx_PLL2_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005f06:	e016      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005f08:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f10:	3330      	adds	r3, #48	; 0x30
 8005f12:	4618      	mov	r0, r3
 8005f14:	f004 fc82 	bl	800a81c <RCCEx_PLL3_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005f1e:	e00a      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f26:	e006      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f28:	bf00      	nop
 8005f2a:	e004      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f2c:	bf00      	nop
 8005f2e:	e002      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f30:	bf00      	nop
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005f3e:	4bbb      	ldr	r3, [pc, #748]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005f40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f44:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f4e:	4ab7      	ldr	r2, [pc, #732]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005f50:	430b      	orrs	r3, r1
 8005f52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005f56:	e003      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f5c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005f6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f76:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	d053      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f86:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005f8a:	d031      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005f8c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005f90:	d82a      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005f92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f96:	d02d      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f9c:	d824      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005f9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fa2:	d029      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005fa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fa8:	d81e      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fae:	d011      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fb4:	d818      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d020      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005fba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fbe:	d113      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f004 fb90 	bl	800a6ec <RCCEx_PLL2_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005fd2:	e014      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fd8:	3330      	adds	r3, #48	; 0x30
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f004 fc1e 	bl	800a81c <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005fee:	e006      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005ff0:	bf00      	nop
 8005ff2:	e004      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005ff4:	bf00      	nop
 8005ff6:	e002      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005ff8:	bf00      	nop
 8005ffa:	e000      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10c      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8006006:	4b89      	ldr	r3, [pc, #548]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006008:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800600c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006010:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006016:	4a85      	ldr	r2, [pc, #532]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006018:	430b      	orrs	r3, r1
 800601a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800601e:	e003      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006020:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006024:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006028:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006034:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006038:	2300      	movs	r3, #0
 800603a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800603e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006042:	460b      	mov	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	d055      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8006048:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800604c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006050:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8006054:	d031      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x812>
 8006056:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800605a:	d82a      	bhi.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800605c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006060:	d02d      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006066:	d824      	bhi.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006068:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800606c:	d029      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800606e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006072:	d81e      	bhi.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006078:	d011      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800607a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607e:	d818      	bhi.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d020      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8006084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006088:	d113      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800608a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800608e:	3308      	adds	r3, #8
 8006090:	4618      	mov	r0, r3
 8006092:	f004 fb2b 	bl	800a6ec <RCCEx_PLL2_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800609c:	e014      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800609e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060a2:	3330      	adds	r3, #48	; 0x30
 80060a4:	4618      	mov	r0, r3
 80060a6:	f004 fbb9 	bl	800a81c <RCCEx_PLL3_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80060b0:	e00a      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80060b8:	e006      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060ba:	bf00      	nop
 80060bc:	e004      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060be:	bf00      	nop
 80060c0:	e002      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10d      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80060d0:	4b56      	ldr	r3, [pc, #344]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80060d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060d6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80060da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e2:	4a52      	ldr	r2, [pc, #328]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80060e4:	430b      	orrs	r3, r1
 80060e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80060ea:	e003      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80060f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006100:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006104:	2300      	movs	r3, #0
 8006106:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800610a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800610e:	460b      	mov	r3, r1
 8006110:	4313      	orrs	r3, r2
 8006112:	d044      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8006114:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800611c:	2b05      	cmp	r3, #5
 800611e:	d823      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	08006171 	.word	0x08006171
 800612c:	08006141 	.word	0x08006141
 8006130:	08006155 	.word	0x08006155
 8006134:	08006171 	.word	0x08006171
 8006138:	08006171 	.word	0x08006171
 800613c:	08006171 	.word	0x08006171
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006140:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006144:	3308      	adds	r3, #8
 8006146:	4618      	mov	r0, r3
 8006148:	f004 fad0 	bl	800a6ec <RCCEx_PLL2_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006152:	e00e      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006154:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006158:	3330      	adds	r3, #48	; 0x30
 800615a:	4618      	mov	r0, r3
 800615c:	f004 fb5e 	bl	800a81c <RCCEx_PLL3_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006166:	e004      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800616e:	e000      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8006170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006172:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10d      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800617a:	4b2c      	ldr	r3, [pc, #176]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800617c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006180:	f023 0107 	bic.w	r1, r3, #7
 8006184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800618c:	4a27      	ldr	r2, [pc, #156]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800618e:	430b      	orrs	r3, r1
 8006190:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006194:	e003      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006196:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800619a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800619e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80061aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061ae:	2300      	movs	r3, #0
 80061b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061b4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80061b8:	460b      	mov	r3, r1
 80061ba:	4313      	orrs	r3, r2
 80061bc:	d04f      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80061be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c6:	2b50      	cmp	r3, #80	; 0x50
 80061c8:	d029      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80061ca:	2b50      	cmp	r3, #80	; 0x50
 80061cc:	d823      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d027      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d81f      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061d6:	2b30      	cmp	r3, #48	; 0x30
 80061d8:	d025      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80061da:	2b30      	cmp	r3, #48	; 0x30
 80061dc:	d81b      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d00f      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d817      	bhi.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d022      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80061ea:	2b10      	cmp	r3, #16
 80061ec:	d113      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061f2:	3308      	adds	r3, #8
 80061f4:	4618      	mov	r0, r3
 80061f6:	f004 fa79 	bl	800a6ec <RCCEx_PLL2_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006200:	e017      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006202:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006206:	3330      	adds	r3, #48	; 0x30
 8006208:	4618      	mov	r0, r3
 800620a:	f004 fb07 	bl	800a81c <RCCEx_PLL3_Config>
 800620e:	4603      	mov	r3, r0
 8006210:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006214:	e00d      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800621c:	e009      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800621e:	bf00      	nop
 8006220:	e007      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006222:	bf00      	nop
 8006224:	e005      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006226:	bf00      	nop
 8006228:	e003      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800622a:	bf00      	nop
 800622c:	44020c00 	.word	0x44020c00
        break;
 8006230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006232:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10d      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800623a:	4baf      	ldr	r3, [pc, #700]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800623c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006240:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624c:	4aaa      	ldr	r2, [pc, #680]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800624e:	430b      	orrs	r3, r1
 8006250:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006254:	e003      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006256:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800625a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800625e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800626a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800626e:	2300      	movs	r3, #0
 8006270:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006274:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006278:	460b      	mov	r3, r1
 800627a:	4313      	orrs	r3, r2
 800627c:	d055      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800627e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006286:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800628a:	d031      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800628c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006290:	d82a      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006296:	d02d      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800629c:	d824      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800629e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062a2:	d029      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80062a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062a8:	d81e      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80062aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062ae:	d011      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80062b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062b4:	d818      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d020      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80062ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062be:	d113      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062c4:	3308      	adds	r3, #8
 80062c6:	4618      	mov	r0, r3
 80062c8:	f004 fa10 	bl	800a6ec <RCCEx_PLL2_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80062d2:	e014      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062d8:	3330      	adds	r3, #48	; 0x30
 80062da:	4618      	mov	r0, r3
 80062dc:	f004 fa9e 	bl	800a81c <RCCEx_PLL3_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80062e6:	e00a      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80062ee:	e006      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80062f0:	bf00      	nop
 80062f2:	e004      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80062f4:	bf00      	nop
 80062f6:	e002      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80062f8:	bf00      	nop
 80062fa:	e000      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80062fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10d      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006306:	4b7c      	ldr	r3, [pc, #496]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800630c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006318:	4a77      	ldr	r2, [pc, #476]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800631a:	430b      	orrs	r3, r1
 800631c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006320:	e003      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006322:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006326:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800632a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006336:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800633a:	2300      	movs	r3, #0
 800633c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006340:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006344:	460b      	mov	r3, r1
 8006346:	4313      	orrs	r3, r2
 8006348:	d03d      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800634a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006356:	d01b      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8006358:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800635c:	d814      	bhi.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800635e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006362:	d017      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8006364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006368:	d80e      	bhi.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d014      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	d109      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006378:	3330      	adds	r3, #48	; 0x30
 800637a:	4618      	mov	r0, r3
 800637c:	f004 fa4e 	bl	800a81c <RCCEx_PLL3_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006386:	e008      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800638e:	e004      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006390:	bf00      	nop
 8006392:	e002      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006394:	bf00      	nop
 8006396:	e000      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800639a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10d      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80063a2:	4b55      	ldr	r3, [pc, #340]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80063a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80063a8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80063ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b4:	4a50      	ldr	r2, [pc, #320]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80063b6:	430b      	orrs	r3, r1
 80063b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80063bc:	e003      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80063c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80063d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063d6:	2300      	movs	r3, #0
 80063d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4313      	orrs	r3, r2
 80063e4:	d03d      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80063e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063f2:	d01b      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80063f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063f8:	d814      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80063fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063fe:	d017      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006400:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006404:	d80e      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d014      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800640a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800640e:	d109      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006410:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006414:	3330      	adds	r3, #48	; 0x30
 8006416:	4618      	mov	r0, r3
 8006418:	f004 fa00 	bl	800a81c <RCCEx_PLL3_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006422:	e008      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800642a:	e004      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800642c:	bf00      	nop
 800642e:	e002      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006430:	bf00      	nop
 8006432:	e000      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006436:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10d      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800643e:	4b2e      	ldr	r3, [pc, #184]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006444:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800644c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006450:	4a29      	ldr	r2, [pc, #164]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006452:	430b      	orrs	r3, r1
 8006454:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006458:	e003      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800645e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006462:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800646e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006472:	2300      	movs	r3, #0
 8006474:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006478:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800647c:	460b      	mov	r3, r1
 800647e:	4313      	orrs	r3, r2
 8006480:	d040      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8006482:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800648a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800648e:	d01b      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8006490:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006494:	d814      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800649a:	d017      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800649c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064a0:	d80e      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d014      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80064a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064aa:	d109      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064b0:	3330      	adds	r3, #48	; 0x30
 80064b2:	4618      	mov	r0, r3
 80064b4:	f004 f9b2 	bl	800a81c <RCCEx_PLL3_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80064be:	e008      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80064c6:	e004      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80064c8:	bf00      	nop
 80064ca:	e002      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80064cc:	bf00      	nop
 80064ce:	e000      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80064d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d110      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80064da:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80064dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80064e0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064ec:	4a02      	ldr	r2, [pc, #8]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80064ee:	430b      	orrs	r3, r1
 80064f0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80064f4:	e006      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80064f6:	bf00      	nop
 80064f8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006500:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006504:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	2100      	movs	r1, #0
 800650e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800651a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800651e:	460b      	mov	r3, r1
 8006520:	4313      	orrs	r3, r2
 8006522:	d03d      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8006524:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800652c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006530:	d01b      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006532:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006536:	d814      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006538:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800653c:	d017      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800653e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006542:	d80e      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d014      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800654c:	d109      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800654e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006552:	3330      	adds	r3, #48	; 0x30
 8006554:	4618      	mov	r0, r3
 8006556:	f004 f961 	bl	800a81c <RCCEx_PLL3_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8006560:	e008      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006568:	e004      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006574:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10d      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800657c:	4bbe      	ldr	r3, [pc, #760]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800657e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006582:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006586:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800658a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800658e:	4aba      	ldr	r2, [pc, #744]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006590:	430b      	orrs	r3, r1
 8006592:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006596:	e003      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006598:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800659c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80065a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80065ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065b0:	2300      	movs	r3, #0
 80065b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80065ba:	460b      	mov	r3, r1
 80065bc:	4313      	orrs	r3, r2
 80065be:	d035      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80065c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065cc:	d015      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80065ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065d2:	d80e      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d012      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80065d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065dc:	d109      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065e2:	3330      	adds	r3, #48	; 0x30
 80065e4:	4618      	mov	r0, r3
 80065e6:	f004 f919 	bl	800a81c <RCCEx_PLL3_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80065f0:	e006      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80065f8:	e002      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80065fa:	bf00      	nop
 80065fc:	e000      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80065fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006600:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10d      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006608:	4b9b      	ldr	r3, [pc, #620]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800660a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800660e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8006612:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006616:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800661a:	4a97      	ldr	r2, [pc, #604]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800661c:	430b      	orrs	r3, r1
 800661e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006622:	e003      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006624:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006628:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800662c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	2100      	movs	r1, #0
 8006636:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800663a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800663e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006642:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006646:	460b      	mov	r3, r1
 8006648:	4313      	orrs	r3, r2
 800664a:	d00e      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800664c:	4b8a      	ldr	r3, [pc, #552]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	4a89      	ldr	r2, [pc, #548]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006652:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006656:	61d3      	str	r3, [r2, #28]
 8006658:	4b87      	ldr	r3, [pc, #540]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800665a:	69d9      	ldr	r1, [r3, #28]
 800665c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006660:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006664:	4a84      	ldr	r2, [pc, #528]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006666:	430b      	orrs	r3, r1
 8006668:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800666a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006676:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800667a:	2300      	movs	r3, #0
 800667c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006680:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006684:	460b      	mov	r3, r1
 8006686:	4313      	orrs	r3, r2
 8006688:	d055      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800668a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800668e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006692:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006696:	d031      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006698:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800669c:	d82a      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800669e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a2:	d02d      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80066a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a8:	d824      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ae:	d029      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80066b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b4:	d81e      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ba:	d011      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80066bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c0:	d818      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d020      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ca:	d113      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066d0:	3308      	adds	r3, #8
 80066d2:	4618      	mov	r0, r3
 80066d4:	f004 f80a 	bl	800a6ec <RCCEx_PLL2_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80066de:	e014      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066e4:	3330      	adds	r3, #48	; 0x30
 80066e6:	4618      	mov	r0, r3
 80066e8:	f004 f898 	bl	800a81c <RCCEx_PLL3_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80066f2:	e00a      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80066fa:	e006      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80066fc:	bf00      	nop
 80066fe:	e004      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006700:	bf00      	nop
 8006702:	e002      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006704:	bf00      	nop
 8006706:	e000      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10d      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006712:	4b59      	ldr	r3, [pc, #356]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006714:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006718:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800671c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006724:	4a54      	ldr	r2, [pc, #336]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006726:	430b      	orrs	r3, r1
 8006728:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006732:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006736:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006746:	2300      	movs	r3, #0
 8006748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800674c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d055      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006756:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800675a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800675e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006762:	d031      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8006764:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006768:	d82a      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800676a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800676e:	d02d      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8006770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006774:	d824      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006776:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800677a:	d029      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800677c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006780:	d81e      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006786:	d011      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8006788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678c:	d818      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d020      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	d113      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006798:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800679c:	3308      	adds	r3, #8
 800679e:	4618      	mov	r0, r3
 80067a0:	f003 ffa4 	bl	800a6ec <RCCEx_PLL2_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80067aa:	e014      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067b0:	3330      	adds	r3, #48	; 0x30
 80067b2:	4618      	mov	r0, r3
 80067b4:	f004 f832 	bl	800a81c <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80067be:	e00a      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80067c6:	e006      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067c8:	bf00      	nop
 80067ca:	e004      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067cc:	bf00      	nop
 80067ce:	e002      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067d0:	bf00      	nop
 80067d2:	e000      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10d      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80067de:	4b26      	ldr	r3, [pc, #152]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80067e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80067e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80067e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067f0:	4a21      	ldr	r2, [pc, #132]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80067f2:	430b      	orrs	r3, r1
 80067f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80067f8:	e003      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80067fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	2100      	movs	r1, #0
 800680c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800681c:	460b      	mov	r3, r1
 800681e:	4313      	orrs	r3, r2
 8006820:	d057      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006822:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006826:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800682a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800682e:	d033      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006834:	d82c      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800683a:	d02f      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800683c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006840:	d826      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006842:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006846:	d02b      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800684c:	d820      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800684e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006852:	d013      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006858:	d81a      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d022      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800685e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006862:	d115      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006864:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006868:	3308      	adds	r3, #8
 800686a:	4618      	mov	r0, r3
 800686c:	f003 ff3e 	bl	800a6ec <RCCEx_PLL2_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006876:	e016      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006878:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800687c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006880:	3330      	adds	r3, #48	; 0x30
 8006882:	4618      	mov	r0, r3
 8006884:	f003 ffca 	bl	800a81c <RCCEx_PLL3_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800688e:	e00a      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006896:	e006      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006898:	bf00      	nop
 800689a:	e004      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800689c:	bf00      	nop
 800689e:	e002      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80068a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10d      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80068ae:	4bbb      	ldr	r3, [pc, #748]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80068b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80068b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80068b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068c0:	4ab6      	ldr	r2, [pc, #728]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80068c2:	430b      	orrs	r3, r1
 80068c4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80068c8:	e003      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80068ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80068d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	2100      	movs	r1, #0
 80068dc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80068e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4313      	orrs	r3, r2
 80068f0:	d055      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80068f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068fa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80068fe:	d031      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006900:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006904:	d82a      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800690a:	d02d      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800690c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006910:	d824      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006916:	d029      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006918:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800691c:	d81e      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800691e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006922:	d011      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006928:	d818      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d020      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800692e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006932:	d113      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006934:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006938:	3308      	adds	r3, #8
 800693a:	4618      	mov	r0, r3
 800693c:	f003 fed6 	bl	800a6ec <RCCEx_PLL2_Config>
 8006940:	4603      	mov	r3, r0
 8006942:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006946:	e014      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006948:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800694c:	3330      	adds	r3, #48	; 0x30
 800694e:	4618      	mov	r0, r3
 8006950:	f003 ff64 	bl	800a81c <RCCEx_PLL3_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800695a:	e00a      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006962:	e006      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006964:	bf00      	nop
 8006966:	e004      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006968:	bf00      	nop
 800696a:	e002      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800696c:	bf00      	nop
 800696e:	e000      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006972:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10d      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800697a:	4b88      	ldr	r3, [pc, #544]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800697c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006980:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8006984:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800698c:	4a83      	ldr	r2, [pc, #524]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800698e:	430b      	orrs	r3, r1
 8006990:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006994:	e003      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006996:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800699a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800699e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	2100      	movs	r1, #0
 80069a8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80069ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80069b8:	460b      	mov	r3, r1
 80069ba:	4313      	orrs	r3, r2
 80069bc:	d055      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80069be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80069ca:	d031      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80069cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80069d0:	d82a      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80069d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069d6:	d02d      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80069d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069dc:	d824      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80069de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069e2:	d029      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80069e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069e8:	d81e      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80069ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ee:	d011      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80069f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f4:	d818      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d020      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80069fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069fe:	d113      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a04:	3308      	adds	r3, #8
 8006a06:	4618      	mov	r0, r3
 8006a08:	f003 fe70 	bl	800a6ec <RCCEx_PLL2_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006a12:	e014      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a18:	3330      	adds	r3, #48	; 0x30
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f003 fefe 	bl	800a81c <RCCEx_PLL3_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006a26:	e00a      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006a2e:	e006      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a30:	bf00      	nop
 8006a32:	e004      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a34:	bf00      	nop
 8006a36:	e002      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a38:	bf00      	nop
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10d      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006a46:	4b55      	ldr	r3, [pc, #340]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006a48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a4c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a58:	4a50      	ldr	r2, [pc, #320]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006a5a:	430b      	orrs	r3, r1
 8006a5c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006a60:	e003      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006a66:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	2100      	movs	r1, #0
 8006a74:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8006a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a80:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006a84:	460b      	mov	r3, r1
 8006a86:	4313      	orrs	r3, r2
 8006a88:	d055      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006a8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a96:	d031      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a9c:	d82a      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa2:	d02d      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa8:	d824      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006aae:	d029      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ab4:	d81e      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aba:	d011      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac0:	d818      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d020      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aca:	d113      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006acc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f003 fe0a 	bl	800a6ec <RCCEx_PLL2_Config>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006ade:	e014      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ae4:	3330      	adds	r3, #48	; 0x30
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f003 fe98 	bl	800a81c <RCCEx_PLL3_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006af2:	e00a      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006afa:	e006      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006afc:	bf00      	nop
 8006afe:	e004      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b00:	bf00      	nop
 8006b02:	e002      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b04:	bf00      	nop
 8006b06:	e000      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10d      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006b12:	4b22      	ldr	r3, [pc, #136]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006b18:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b26:	430b      	orrs	r3, r1
 8006b28:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006b2c:	e003      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006b32:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b46:	2300      	movs	r3, #0
 8006b48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006b4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006b50:	460b      	mov	r3, r1
 8006b52:	4313      	orrs	r3, r2
 8006b54:	d055      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006b56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b62:	d035      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006b64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b68:	d82e      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b6e:	d031      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006b70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b74:	d828      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b7a:	d01b      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b80:	d822      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8a:	d009      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006b8c:	e01c      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8e:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	4a02      	ldr	r2, [pc, #8]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b98:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006b9a:	e01c      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006b9c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f003 fda0 	bl	800a6ec <RCCEx_PLL2_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006bb2:	e010      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bb8:	3330      	adds	r3, #48	; 0x30
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f003 fe2e 	bl	800a81c <RCCEx_PLL3_Config>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006bc6:	e006      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006bce:	e002      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006bd0:	bf00      	nop
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10d      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006bde:	4bc3      	ldr	r3, [pc, #780]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006be4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006bf0:	4abe      	ldr	r2, [pc, #760]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006bf2:	430b      	orrs	r3, r1
 8006bf4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006bf8:	e003      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006bfe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c12:	2300      	movs	r3, #0
 8006c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c18:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	d051      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006c22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c2e:	d033      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c34:	d82c      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c36:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006c3a:	d02d      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006c3c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006c40:	d826      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c46:	d019      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c4c:	d820      	bhi.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8006c52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c56:	d007      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006c58:	e01a      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c5a:	4ba4      	ldr	r3, [pc, #656]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	4aa3      	ldr	r2, [pc, #652]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c64:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006c66:	e018      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f003 fd3c 	bl	800a6ec <RCCEx_PLL2_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006c7a:	e00e      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c80:	3330      	adds	r3, #48	; 0x30
 8006c82:	4618      	mov	r0, r3
 8006c84:	f003 fdca 	bl	800a81c <RCCEx_PLL3_Config>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006c8e:	e004      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006c96:	e000      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10d      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006ca2:	4b92      	ldr	r3, [pc, #584]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ca8:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8006cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cb0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006cb4:	4a8d      	ldr	r2, [pc, #564]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006cbc:	e003      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006cc2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006cd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cd8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	d032      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ce6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d80f      	bhi.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d211      	bcs.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d911      	bls.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d109      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cfe:	3308      	adds	r3, #8
 8006d00:	4618      	mov	r0, r3
 8006d02:	f003 fcf3 	bl	800a6ec <RCCEx_PLL2_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006d0c:	e006      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006d14:	e002      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006d16:	bf00      	nop
 8006d18:	e000      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10d      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006d24:	4b71      	ldr	r3, [pc, #452]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d2a:	f023 0107 	bic.w	r1, r3, #7
 8006d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006d36:	4a6d      	ldr	r2, [pc, #436]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d3e:	e003      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d44:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	2100      	movs	r1, #0
 8006d52:	6739      	str	r1, [r7, #112]	; 0x70
 8006d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d58:	677b      	str	r3, [r7, #116]	; 0x74
 8006d5a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4313      	orrs	r3, r2
 8006d62:	d024      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d005      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006d7a:	e002      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006d7c:	bf00      	nop
 8006d7e:	e000      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10d      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006d8a:	4b58      	ldr	r3, [pc, #352]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d90:	f023 0108 	bic.w	r1, r3, #8
 8006d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006d9c:	4a53      	ldr	r2, [pc, #332]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d9e:	430b      	orrs	r3, r1
 8006da0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006da4:	e003      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006daa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006dba:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dc0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f000 80b9 	beq.w	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006dcc:	4b48      	ldr	r3, [pc, #288]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	4a47      	ldr	r2, [pc, #284]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dd8:	f7fb ffba 	bl	8002d50 <HAL_GetTick>
 8006ddc:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006de0:	e00b      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006de2:	f7fb ffb5 	bl	8002d50 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d903      	bls.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006df8:	e005      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006dfa:	4b3d      	ldr	r3, [pc, #244]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0ed      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006e06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 8093 	bne.w	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e10:	4b36      	ldr	r3, [pc, #216]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006e1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d023      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e2a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8006e2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d01b      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e36:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e40:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e44:	4b29      	ldr	r3, [pc, #164]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e4a:	4a28      	ldr	r2, [pc, #160]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e54:	4b25      	ldr	r3, [pc, #148]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e5a:	4a24      	ldr	r2, [pc, #144]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e64:	4a21      	ldr	r2, [pc, #132]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d019      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7fb ff69 	bl	8002d50 <HAL_GetTick>
 8006e7e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e82:	e00d      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e84:	f7fb ff64 	bl	8002d50 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d903      	bls.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8006e9e:	e006      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ea0:	4b12      	ldr	r3, [pc, #72]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0ea      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006eae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d13a      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006eb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006eba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec6:	d115      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006ec8:	4b08      	ldr	r3, [pc, #32]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006ed0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ed4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ede:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006ee2:	4a02      	ldr	r2, [pc, #8]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	61d3      	str	r3, [r2, #28]
 8006ee8:	e00a      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006eea:	bf00      	nop
 8006eec:	44020c00 	.word	0x44020c00
 8006ef0:	44020800 	.word	0x44020800
 8006ef4:	4b9f      	ldr	r3, [pc, #636]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	4a9e      	ldr	r2, [pc, #632]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006efa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006efe:	61d3      	str	r3, [r2, #28]
 8006f00:	4b9c      	ldr	r3, [pc, #624]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f06:	4a9b      	ldr	r2, [pc, #620]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006f10:	4b98      	ldr	r3, [pc, #608]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f12:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8006f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f1a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f22:	4a94      	ldr	r2, [pc, #592]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f24:	430b      	orrs	r3, r1
 8006f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006f2a:	e008      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f2c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f30:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8006f34:	e003      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f3a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8006f50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006f54:	460b      	mov	r3, r1
 8006f56:	4313      	orrs	r3, r2
 8006f58:	d035      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006f5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006f62:	2b30      	cmp	r3, #48	; 0x30
 8006f64:	d014      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006f66:	2b30      	cmp	r3, #48	; 0x30
 8006f68:	d80e      	bhi.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	d012      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d80a      	bhi.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d010      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d106      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f7a:	4b7e      	ldr	r3, [pc, #504]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	4a7d      	ldr	r2, [pc, #500]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f84:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f86:	e008      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006f8e:	e004      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006f90:	bf00      	nop
 8006f92:	e002      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006f94:	bf00      	nop
 8006f96:	e000      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10d      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006fa2:	4b74      	ldr	r3, [pc, #464]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fa8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fb0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006fb4:	4a6f      	ldr	r2, [pc, #444]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006fbc:	e003      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006fc2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006fc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006fd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	d033      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fe6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d007      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006ff2:	e010      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff4:	4b5f      	ldr	r3, [pc, #380]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	4a5e      	ldr	r2, [pc, #376]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ffe:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007000:	e00d      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007002:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007006:	3308      	adds	r3, #8
 8007008:	4618      	mov	r0, r3
 800700a:	f003 fb6f 	bl	800a6ec <RCCEx_PLL2_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007014:	e003      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800701c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10d      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007026:	4b53      	ldr	r3, [pc, #332]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007028:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800702c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8007030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007034:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8007038:	4a4e      	ldr	r2, [pc, #312]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800703a:	430b      	orrs	r3, r1
 800703c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007040:	e003      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007042:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007046:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800704a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007056:	653b      	str	r3, [r7, #80]	; 0x50
 8007058:	2300      	movs	r3, #0
 800705a:	657b      	str	r3, [r7, #84]	; 0x54
 800705c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007060:	460b      	mov	r3, r1
 8007062:	4313      	orrs	r3, r2
 8007064:	d033      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8007066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800706a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d007      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8007076:	e010      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007078:	4b3e      	ldr	r3, [pc, #248]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	4a3d      	ldr	r2, [pc, #244]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800707e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007082:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007084:	e00d      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007086:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800708a:	3308      	adds	r3, #8
 800708c:	4618      	mov	r0, r3
 800708e:	f003 fb2d 	bl	800a6ec <RCCEx_PLL2_Config>
 8007092:	4603      	mov	r3, r0
 8007094:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007098:	e003      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80070a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10d      	bne.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80070aa:	4b32      	ldr	r3, [pc, #200]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80070b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80070b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070b8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80070bc:	4a2d      	ldr	r2, [pc, #180]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070be:	430b      	orrs	r3, r1
 80070c0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80070c4:	e003      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80070ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80070ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80070da:	64bb      	str	r3, [r7, #72]	; 0x48
 80070dc:	2300      	movs	r3, #0
 80070de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80070e4:	460b      	mov	r3, r1
 80070e6:	4313      	orrs	r3, r2
 80070e8:	d04a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80070ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d827      	bhi.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	08007111 	.word	0x08007111
 8007100:	0800711f 	.word	0x0800711f
 8007104:	08007133 	.word	0x08007133
 8007108:	0800714f 	.word	0x0800714f
 800710c:	0800714f 	.word	0x0800714f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007110:	4b18      	ldr	r3, [pc, #96]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	4a17      	ldr	r2, [pc, #92]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800711a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800711c:	e018      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800711e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007122:	3308      	adds	r3, #8
 8007124:	4618      	mov	r0, r3
 8007126:	f003 fae1 	bl	800a6ec <RCCEx_PLL2_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007130:	e00e      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007132:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007136:	3330      	adds	r3, #48	; 0x30
 8007138:	4618      	mov	r0, r3
 800713a:	f003 fb6f 	bl	800a81c <RCCEx_PLL3_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007144:	e004      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800714c:	e000      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800714e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007150:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10f      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007158:	4b06      	ldr	r3, [pc, #24]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800715a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800715e:	f023 0107 	bic.w	r1, r3, #7
 8007162:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800716a:	4a02      	ldr	r2, [pc, #8]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800716c:	430b      	orrs	r3, r1
 800716e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007172:	e005      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8007174:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007178:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800717c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007180:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800718c:	643b      	str	r3, [r7, #64]	; 0x40
 800718e:	2300      	movs	r3, #0
 8007190:	647b      	str	r3, [r7, #68]	; 0x44
 8007192:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007196:	460b      	mov	r3, r1
 8007198:	4313      	orrs	r3, r2
 800719a:	f000 8081 	beq.w	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800719e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80071a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d85f      	bhi.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	08007235 	.word	0x08007235
 80071b4:	0800726b 	.word	0x0800726b
 80071b8:	0800726b 	.word	0x0800726b
 80071bc:	0800726b 	.word	0x0800726b
 80071c0:	0800726b 	.word	0x0800726b
 80071c4:	0800726b 	.word	0x0800726b
 80071c8:	0800726b 	.word	0x0800726b
 80071cc:	0800726b 	.word	0x0800726b
 80071d0:	08007243 	.word	0x08007243
 80071d4:	0800726b 	.word	0x0800726b
 80071d8:	0800726b 	.word	0x0800726b
 80071dc:	0800726b 	.word	0x0800726b
 80071e0:	0800726b 	.word	0x0800726b
 80071e4:	0800726b 	.word	0x0800726b
 80071e8:	0800726b 	.word	0x0800726b
 80071ec:	0800726b 	.word	0x0800726b
 80071f0:	08007257 	.word	0x08007257
 80071f4:	0800726b 	.word	0x0800726b
 80071f8:	0800726b 	.word	0x0800726b
 80071fc:	0800726b 	.word	0x0800726b
 8007200:	0800726b 	.word	0x0800726b
 8007204:	0800726b 	.word	0x0800726b
 8007208:	0800726b 	.word	0x0800726b
 800720c:	0800726b 	.word	0x0800726b
 8007210:	08007273 	.word	0x08007273
 8007214:	0800726b 	.word	0x0800726b
 8007218:	0800726b 	.word	0x0800726b
 800721c:	0800726b 	.word	0x0800726b
 8007220:	0800726b 	.word	0x0800726b
 8007224:	0800726b 	.word	0x0800726b
 8007228:	0800726b 	.word	0x0800726b
 800722c:	0800726b 	.word	0x0800726b
 8007230:	08007273 	.word	0x08007273
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007234:	4bab      	ldr	r3, [pc, #684]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	4aaa      	ldr	r2, [pc, #680]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800723a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007240:	e018      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007242:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007246:	3308      	adds	r3, #8
 8007248:	4618      	mov	r0, r3
 800724a:	f003 fa4f 	bl	800a6ec <RCCEx_PLL2_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007254:	e00e      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007256:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800725a:	3330      	adds	r3, #48	; 0x30
 800725c:	4618      	mov	r0, r3
 800725e:	f003 fadd 	bl	800a81c <RCCEx_PLL3_Config>
 8007262:	4603      	mov	r3, r0
 8007264:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007268:	e004      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007270:	e000      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8007272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007274:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10d      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800727c:	4b99      	ldr	r3, [pc, #612]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800727e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007282:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007286:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800728a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800728e:	4a95      	ldr	r2, [pc, #596]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007290:	430b      	orrs	r3, r1
 8007292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007296:	e003      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007298:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800729c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80072a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80072ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80072ae:	2300      	movs	r3, #0
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80072b6:	460b      	mov	r3, r1
 80072b8:	4313      	orrs	r3, r2
 80072ba:	d04e      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80072bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80072c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c8:	d02e      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80072ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ce:	d827      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80072d0:	2bc0      	cmp	r3, #192	; 0xc0
 80072d2:	d02b      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80072d4:	2bc0      	cmp	r3, #192	; 0xc0
 80072d6:	d823      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80072d8:	2b80      	cmp	r3, #128	; 0x80
 80072da:	d017      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d81f      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d007      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80072e8:	e01a      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ea:	4b7e      	ldr	r3, [pc, #504]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	4a7d      	ldr	r2, [pc, #500]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80072f6:	e01a      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80072fc:	3308      	adds	r3, #8
 80072fe:	4618      	mov	r0, r3
 8007300:	f003 f9f4 	bl	800a6ec <RCCEx_PLL2_Config>
 8007304:	4603      	mov	r3, r0
 8007306:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800730a:	e010      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800730c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007310:	3330      	adds	r3, #48	; 0x30
 8007312:	4618      	mov	r0, r3
 8007314:	f003 fa82 	bl	800a81c <RCCEx_PLL3_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800731e:	e006      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007326:	e002      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007328:	bf00      	nop
 800732a:	e000      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800732c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800732e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10d      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007336:	4b6b      	ldr	r3, [pc, #428]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800733c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007340:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007348:	4a66      	ldr	r2, [pc, #408]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800734a:	430b      	orrs	r3, r1
 800734c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007350:	e003      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007352:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007356:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800735a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007366:	633b      	str	r3, [r7, #48]	; 0x30
 8007368:	2300      	movs	r3, #0
 800736a:	637b      	str	r3, [r7, #52]	; 0x34
 800736c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007370:	460b      	mov	r3, r1
 8007372:	4313      	orrs	r3, r2
 8007374:	d055      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007376:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800737a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800737e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007382:	d031      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8007384:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007388:	d82a      	bhi.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800738a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800738e:	d02d      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8007390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007394:	d824      	bhi.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007396:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800739a:	d029      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800739c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80073a0:	d81e      	bhi.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80073a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a6:	d011      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80073a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ac:	d818      	bhi.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d020      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80073b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b6:	d113      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80073bc:	3308      	adds	r3, #8
 80073be:	4618      	mov	r0, r3
 80073c0:	f003 f994 	bl	800a6ec <RCCEx_PLL2_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80073ca:	e014      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80073d0:	3330      	adds	r3, #48	; 0x30
 80073d2:	4618      	mov	r0, r3
 80073d4:	f003 fa22 	bl	800a81c <RCCEx_PLL3_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80073de:	e00a      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80073e6:	e006      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80073e8:	bf00      	nop
 80073ea:	e004      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80073ec:	bf00      	nop
 80073ee:	e002      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80073f0:	bf00      	nop
 80073f2:	e000      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80073f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10d      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80073fe:	4b39      	ldr	r3, [pc, #228]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007404:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8007408:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800740c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007410:	4a34      	ldr	r2, [pc, #208]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007412:	430b      	orrs	r3, r1
 8007414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007418:	e003      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800741e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007430:	2300      	movs	r3, #0
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007434:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007438:	460b      	mov	r3, r1
 800743a:	4313      	orrs	r3, r2
 800743c:	d058      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800743e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007446:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800744a:	d031      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800744c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007450:	d82a      	bhi.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007456:	d02d      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8007458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800745c:	d824      	bhi.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800745e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007462:	d029      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007464:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007468:	d81e      	bhi.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800746a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800746e:	d011      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8007470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007474:	d818      	bhi.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d020      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800747a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747e:	d113      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007484:	3308      	adds	r3, #8
 8007486:	4618      	mov	r0, r3
 8007488:	f003 f930 	bl	800a6ec <RCCEx_PLL2_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007492:	e014      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007494:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007498:	3330      	adds	r3, #48	; 0x30
 800749a:	4618      	mov	r0, r3
 800749c:	f003 f9be 	bl	800a81c <RCCEx_PLL3_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80074a6:	e00a      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80074ae:	e006      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074b0:	bf00      	nop
 80074b2:	e004      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074b4:	bf00      	nop
 80074b6:	e002      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074b8:	bf00      	nop
 80074ba:	e000      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d110      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80074c6:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80074c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80074d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80074d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074d8:	4902      	ldr	r1, [pc, #8]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80074e0:	e006      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80074e2:	bf00      	nop
 80074e4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80074ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	2100      	movs	r1, #0
 80074fa:	6239      	str	r1, [r7, #32]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
 8007502:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007506:	460b      	mov	r3, r1
 8007508:	4313      	orrs	r3, r2
 800750a:	d055      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800750c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007514:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007518:	d031      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800751a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800751e:	d82a      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007524:	d02d      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8007526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800752a:	d824      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800752c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007530:	d029      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8007532:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007536:	d81e      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753c:	d011      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800753e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007542:	d818      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d020      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800754c:	d113      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800754e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007552:	3308      	adds	r3, #8
 8007554:	4618      	mov	r0, r3
 8007556:	f003 f8c9 	bl	800a6ec <RCCEx_PLL2_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007560:	e014      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007562:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007566:	3330      	adds	r3, #48	; 0x30
 8007568:	4618      	mov	r0, r3
 800756a:	f003 f957 	bl	800a81c <RCCEx_PLL3_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007574:	e00a      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800757c:	e006      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800757e:	bf00      	nop
 8007580:	e004      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007582:	bf00      	nop
 8007584:	e002      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007586:	bf00      	nop
 8007588:	e000      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800758a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10d      	bne.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007594:	4b88      	ldr	r3, [pc, #544]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800759a:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800759e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80075a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075a6:	4984      	ldr	r1, [pc, #528]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80075ae:	e003      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80075b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	2100      	movs	r1, #0
 80075c2:	61b9      	str	r1, [r7, #24]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	61fb      	str	r3, [r7, #28]
 80075ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80075ce:	460b      	mov	r3, r1
 80075d0:	4313      	orrs	r3, r2
 80075d2:	d03d      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80075d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80075d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d81c      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	08007623 	.word	0x08007623
 80075ec:	080075f9 	.word	0x080075f9
 80075f0:	08007607 	.word	0x08007607
 80075f4:	08007623 	.word	0x08007623
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f8:	4b6f      	ldr	r3, [pc, #444]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	4a6e      	ldr	r2, [pc, #440]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007602:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007604:	e00e      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007606:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800760a:	3308      	adds	r3, #8
 800760c:	4618      	mov	r0, r3
 800760e:	f003 f86d 	bl	800a6ec <RCCEx_PLL2_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007618:	e004      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007620:	e000      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8007622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007624:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10d      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800762c:	4b62      	ldr	r3, [pc, #392]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800762e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007632:	f023 0203 	bic.w	r2, r3, #3
 8007636:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800763a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800763e:	495e      	ldr	r1, [pc, #376]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8007646:	e003      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800764c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007650:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	2100      	movs	r1, #0
 800765a:	6139      	str	r1, [r7, #16]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007666:	460b      	mov	r3, r1
 8007668:	4313      	orrs	r3, r2
 800766a:	d03a      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800766c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007670:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007678:	d00e      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800767a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800767e:	d815      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d017      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8007684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007688:	d110      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800768a:	4b4b      	ldr	r3, [pc, #300]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768e:	4a4a      	ldr	r2, [pc, #296]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007694:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007696:	e00e      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007698:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800769c:	3308      	adds	r3, #8
 800769e:	4618      	mov	r0, r3
 80076a0:	f003 f824 	bl	800a6ec <RCCEx_PLL2_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80076aa:	e004      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80076b2:	e000      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80076b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10d      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80076be:	4b3e      	ldr	r3, [pc, #248]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80076cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80076d0:	4939      	ldr	r1, [pc, #228]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80076d8:	e003      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80076de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	2100      	movs	r1, #0
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	f003 0310 	and.w	r3, r3, #16
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80076f8:	460b      	mov	r3, r1
 80076fa:	4313      	orrs	r3, r2
 80076fc:	d038      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80076fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007702:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007706:	2b30      	cmp	r3, #48	; 0x30
 8007708:	d01b      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800770a:	2b30      	cmp	r3, #48	; 0x30
 800770c:	d815      	bhi.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800770e:	2b10      	cmp	r3, #16
 8007710:	d002      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8007712:	2b20      	cmp	r3, #32
 8007714:	d007      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8007716:	e010      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007718:	4b27      	ldr	r3, [pc, #156]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800771a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771c:	4a26      	ldr	r2, [pc, #152]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800771e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007722:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007724:	e00e      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007726:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800772a:	3330      	adds	r3, #48	; 0x30
 800772c:	4618      	mov	r0, r3
 800772e:	f003 f875 	bl	800a81c <RCCEx_PLL3_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007738:	e004      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007740:	e000      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8007742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007744:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10d      	bne.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800774c:	4b1a      	ldr	r3, [pc, #104]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800774e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007752:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007756:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800775a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800775e:	4916      	ldr	r1, [pc, #88]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8007766:	e003      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007768:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800776c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007770:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	2100      	movs	r1, #0
 800777a:	6039      	str	r1, [r7, #0]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	607b      	str	r3, [r7, #4]
 8007782:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007786:	460b      	mov	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	d00c      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800778e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007792:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007796:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800779a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800779e:	4906      	ldr	r1, [pc, #24]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80077a6:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80077b0:	46bd      	mov	sp, r7
 80077b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077b6:	bf00      	nop
 80077b8:	44020c00 	.word	0x44020c00

080077bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80077bc:	b480      	push	{r7}
 80077be:	b08b      	sub	sp, #44	; 0x2c
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80077c4:	4bad      	ldr	r3, [pc, #692]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80077c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077cc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80077ce:	4bab      	ldr	r3, [pc, #684]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80077d8:	4ba8      	ldr	r3, [pc, #672]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	0a1b      	lsrs	r3, r3, #8
 80077de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077e2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80077e4:	4ba5      	ldr	r3, [pc, #660]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80077ee:	4ba3      	ldr	r3, [pc, #652]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	08db      	lsrs	r3, r3, #3
 80077f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	fb02 f303 	mul.w	r3, r2, r3
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 8126 	beq.w	8007a5e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	2b03      	cmp	r3, #3
 8007816:	d053      	beq.n	80078c0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	2b03      	cmp	r3, #3
 800781c:	d86f      	bhi.n	80078fe <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d003      	beq.n	800782c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d02b      	beq.n	8007882 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800782a:	e068      	b.n	80078fe <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800782c:	4b93      	ldr	r3, [pc, #588]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	08db      	lsrs	r3, r3, #3
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	4a92      	ldr	r2, [pc, #584]	; (8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
 800783c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	ee07 3a90 	vmov	s15, r3
 8007844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	ee07 3a90 	vmov	s15, r3
 800785c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007860:	ed97 6a04 	vldr	s12, [r7, #16]
 8007864:	eddf 5a87 	vldr	s11, [pc, #540]	; 8007a84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007880:	e068      	b.n	8007954 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	ee07 3a90 	vmov	s15, r3
 8007888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8007a88 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789e:	ed97 6a04 	vldr	s12, [r7, #16]
 80078a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80078a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80078be:	e049      	b.n	8007954 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ca:	eddf 6a70 	vldr	s13, [pc, #448]	; 8007a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80078ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80078e0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8007a84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80078e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80078fc:	e02a      	b.n	8007954 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078fe:	4b5f      	ldr	r3, [pc, #380]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	08db      	lsrs	r3, r3, #3
 8007904:	f003 0303 	and.w	r3, r3, #3
 8007908:	4a5d      	ldr	r2, [pc, #372]	; (8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800790a:	fa22 f303 	lsr.w	r3, r2, r3
 800790e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007932:	ed97 6a04 	vldr	s12, [r7, #16]
 8007936:	eddf 5a53 	vldr	s11, [pc, #332]	; 8007a84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800793a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007952:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007954:	4b49      	ldr	r3, [pc, #292]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007960:	d121      	bne.n	80079a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007962:	4b46      	ldr	r3, [pc, #280]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d017      	beq.n	800799e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800796e:	4b43      	ldr	r3, [pc, #268]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007972:	0a5b      	lsrs	r3, r3, #9
 8007974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007978:	ee07 3a90 	vmov	s15, r3
 800797c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8007980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007984:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007988:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800798c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007994:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	e006      	b.n	80079ac <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e002      	b.n	80079ac <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079ac:	4b33      	ldr	r3, [pc, #204]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079b8:	d121      	bne.n	80079fe <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80079ba:	4b30      	ldr	r3, [pc, #192]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d017      	beq.n	80079f6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079c6:	4b2d      	ldr	r3, [pc, #180]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d0:	ee07 3a90 	vmov	s15, r3
 80079d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80079d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80079e0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80079e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ec:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	605a      	str	r2, [r3, #4]
 80079f4:	e006      	b.n	8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	605a      	str	r2, [r3, #4]
 80079fc:	e002      	b.n	8007a04 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a04:	4b1d      	ldr	r3, [pc, #116]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a10:	d121      	bne.n	8007a56 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007a12:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d017      	beq.n	8007a4e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007a1e:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a22:	0e1b      	lsrs	r3, r3, #24
 8007a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a28:	ee07 3a90 	vmov	s15, r3
 8007a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a34:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007a38:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a44:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a4c:	e010      	b.n	8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	609a      	str	r2, [r3, #8]
}
 8007a54:	e00c      	b.n	8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	609a      	str	r2, [r3, #8]
}
 8007a5c:	e008      	b.n	8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	609a      	str	r2, [r3, #8]
}
 8007a70:	bf00      	nop
 8007a72:	372c      	adds	r7, #44	; 0x2c
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	44020c00 	.word	0x44020c00
 8007a80:	03d09000 	.word	0x03d09000
 8007a84:	46000000 	.word	0x46000000
 8007a88:	4a742400 	.word	0x4a742400
 8007a8c:	4af42400 	.word	0x4af42400

08007a90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b08b      	sub	sp, #44	; 0x2c
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007a98:	4bad      	ldr	r3, [pc, #692]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007aa2:	4bab      	ldr	r3, [pc, #684]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007aac:	4ba8      	ldr	r3, [pc, #672]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	0a1b      	lsrs	r3, r3, #8
 8007ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ab6:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8007ab8:	4ba5      	ldr	r3, [pc, #660]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007ac2:	4ba3      	ldr	r3, [pc, #652]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	08db      	lsrs	r3, r3, #3
 8007ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ada:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 8126 	beq.w	8007d32 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d053      	beq.n	8007b94 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d86f      	bhi.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d003      	beq.n	8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d02b      	beq.n	8007b56 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8007afe:	e068      	b.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b00:	4b93      	ldr	r3, [pc, #588]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	08db      	lsrs	r3, r3, #3
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	4a92      	ldr	r2, [pc, #584]	; (8007d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b10:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	ee07 3a90 	vmov	s15, r3
 8007b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	ee07 3a90 	vmov	s15, r3
 8007b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b34:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b38:	eddf 5a87 	vldr	s11, [pc, #540]	; 8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007b54:	e068      	b.n	8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	ee07 3a90 	vmov	s15, r3
 8007b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b60:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8007d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b72:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007b92:	e049      	b.n	8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	ee07 3a90 	vmov	s15, r3
 8007bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb0:	ed97 6a04 	vldr	s12, [r7, #16]
 8007bb4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bcc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007bd0:	e02a      	b.n	8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bd2:	4b5f      	ldr	r3, [pc, #380]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	08db      	lsrs	r3, r3, #3
 8007bd8:	f003 0303 	and.w	r3, r3, #3
 8007bdc:	4a5d      	ldr	r2, [pc, #372]	; (8007d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007bde:	fa22 f303 	lsr.w	r3, r2, r3
 8007be2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	ee07 3a90 	vmov	s15, r3
 8007bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c06:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c0a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c22:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007c26:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c28:	4b49      	ldr	r3, [pc, #292]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c34:	d121      	bne.n	8007c7a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007c36:	4b46      	ldr	r3, [pc, #280]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d017      	beq.n	8007c72 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c42:	4b43      	ldr	r3, [pc, #268]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c46:	0a5b      	lsrs	r3, r3, #9
 8007c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c58:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007c5c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c68:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	e006      	b.n	8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	e002      	b.n	8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c80:	4b33      	ldr	r3, [pc, #204]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c8c:	d121      	bne.n	8007cd2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007c8e:	4b30      	ldr	r3, [pc, #192]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d017      	beq.n	8007cca <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c9a:	4b2d      	ldr	r3, [pc, #180]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	0c1b      	lsrs	r3, r3, #16
 8007ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007cb4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	605a      	str	r2, [r3, #4]
 8007cc8:	e006      	b.n	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	605a      	str	r2, [r3, #4]
 8007cd0:	e002      	b.n	8007cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ce4:	d121      	bne.n	8007d2a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007ce6:	4b1a      	ldr	r3, [pc, #104]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d017      	beq.n	8007d22 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007cf2:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf6:	0e1b      	lsrs	r3, r3, #24
 8007cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfc:	ee07 3a90 	vmov	s15, r3
 8007d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d08:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007d0c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d18:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d20:	e010      	b.n	8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	609a      	str	r2, [r3, #8]
}
 8007d28:	e00c      	b.n	8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	609a      	str	r2, [r3, #8]
}
 8007d30:	e008      	b.n	8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	609a      	str	r2, [r3, #8]
}
 8007d44:	bf00      	nop
 8007d46:	372c      	adds	r7, #44	; 0x2c
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	44020c00 	.word	0x44020c00
 8007d54:	03d09000 	.word	0x03d09000
 8007d58:	46000000 	.word	0x46000000
 8007d5c:	4a742400 	.word	0x4a742400
 8007d60:	4af42400 	.word	0x4af42400

08007d64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b08b      	sub	sp, #44	; 0x2c
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007d6c:	4bad      	ldr	r3, [pc, #692]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d74:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007d76:	4bab      	ldr	r3, [pc, #684]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007d80:	4ba8      	ldr	r3, [pc, #672]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d8a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8007d8c:	4ba5      	ldr	r3, [pc, #660]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	f003 0310 	and.w	r3, r3, #16
 8007d94:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007d96:	4ba3      	ldr	r3, [pc, #652]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d9a:	08db      	lsrs	r3, r3, #3
 8007d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	fb02 f303 	mul.w	r3, r2, r3
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dae:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8126 	beq.w	8008006 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d053      	beq.n	8007e68 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d86f      	bhi.n	8007ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d003      	beq.n	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d02b      	beq.n	8007e2a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8007dd2:	e068      	b.n	8007ea6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dd4:	4b93      	ldr	r3, [pc, #588]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	08db      	lsrs	r3, r3, #3
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	4a92      	ldr	r2, [pc, #584]	; (8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
 8007de4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	ee07 3a90 	vmov	s15, r3
 8007dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	ee07 3a90 	vmov	s15, r3
 8007e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e08:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e0c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800802c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007e28:	e068      	b.n	8007efc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e34:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e46:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800802c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007e66:	e049      	b.n	8007efc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e72:	eddf 6a70 	vldr	s13, [pc, #448]	; 8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e84:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e88:	eddf 5a68 	vldr	s11, [pc, #416]	; 800802c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007ea4:	e02a      	b.n	8007efc <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ea6:	4b5f      	ldr	r3, [pc, #380]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	08db      	lsrs	r3, r3, #3
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	4a5d      	ldr	r2, [pc, #372]	; (8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	ee07 3a90 	vmov	s15, r3
 8007ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	ee07 3a90 	vmov	s15, r3
 8007ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eda:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ede:	eddf 5a53 	vldr	s11, [pc, #332]	; 800802c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007efa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007efc:	4b49      	ldr	r3, [pc, #292]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f08:	d121      	bne.n	8007f4e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007f0a:	4b46      	ldr	r3, [pc, #280]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d017      	beq.n	8007f46 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f16:	4b43      	ldr	r3, [pc, #268]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1a:	0a5b      	lsrs	r3, r3, #9
 8007f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f20:	ee07 3a90 	vmov	s15, r3
 8007f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007f28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f30:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f3c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	e006      	b.n	8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	e002      	b.n	8007f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f54:	4b33      	ldr	r3, [pc, #204]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f60:	d121      	bne.n	8007fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007f62:	4b30      	ldr	r3, [pc, #192]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d017      	beq.n	8007f9e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f6e:	4b2d      	ldr	r3, [pc, #180]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	0c1b      	lsrs	r3, r3, #16
 8007f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f84:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f88:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f94:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	605a      	str	r2, [r3, #4]
 8007f9c:	e006      	b.n	8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	605a      	str	r2, [r3, #4]
 8007fa4:	e002      	b.n	8007fac <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fac:	4b1d      	ldr	r3, [pc, #116]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb8:	d121      	bne.n	8007ffe <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007fba:	4b1a      	ldr	r3, [pc, #104]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d017      	beq.n	8007ff6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007fc6:	4b17      	ldr	r3, [pc, #92]	; (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fca:	0e1b      	lsrs	r3, r3, #24
 8007fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd0:	ee07 3a90 	vmov	s15, r3
 8007fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fdc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007fe0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fec:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007ff4:	e010      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	609a      	str	r2, [r3, #8]
}
 8007ffc:	e00c      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	609a      	str	r2, [r3, #8]
}
 8008004:	e008      	b.n	8008018 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	609a      	str	r2, [r3, #8]
}
 8008018:	bf00      	nop
 800801a:	372c      	adds	r7, #44	; 0x2c
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	44020c00 	.word	0x44020c00
 8008028:	03d09000 	.word	0x03d09000
 800802c:	46000000 	.word	0x46000000
 8008030:	4a742400 	.word	0x4a742400
 8008034:	4af42400 	.word	0x4af42400

08008038 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008038:	b590      	push	{r4, r7, lr}
 800803a:	b08f      	sub	sp, #60	; 0x3c
 800803c:	af00      	add	r7, sp, #0
 800803e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008042:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008046:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800804a:	4321      	orrs	r1, r4
 800804c:	d150      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800804e:	4b26      	ldr	r3, [pc, #152]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008058:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800805a:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800805c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008060:	f003 0302 	and.w	r3, r3, #2
 8008064:	2b02      	cmp	r3, #2
 8008066:	d108      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800806e:	d104      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008074:	637b      	str	r3, [r7, #52]	; 0x34
 8008076:	f002 bb2a 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800807a:	4b1b      	ldr	r3, [pc, #108]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800807c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008088:	d108      	bne.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008090:	d104      	bne.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8008092:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
 8008098:	f002 bb19 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800809c:	4b12      	ldr	r3, [pc, #72]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080a8:	d119      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080b0:	d115      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80080b2:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80080ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080be:	d30a      	bcc.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	0a1b      	lsrs	r3, r3, #8
 80080c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ca:	4a08      	ldr	r2, [pc, #32]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80080cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80080d2:	f002 bafc 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80080da:	f002 baf8 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
 80080e2:	f002 baf4 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080e6:	bf00      	nop
 80080e8:	44020c00 	.word	0x44020c00
 80080ec:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80080f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080f4:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80080f8:	ea50 0104 	orrs.w	r1, r0, r4
 80080fc:	f001 8275 	beq.w	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8008100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008104:	2801      	cmp	r0, #1
 8008106:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800810a:	f082 82dd 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800810e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008112:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8008116:	ea50 0104 	orrs.w	r1, r0, r4
 800811a:	f001 816c 	beq.w	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800811e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008122:	2801      	cmp	r0, #1
 8008124:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8008128:	f082 82ce 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800812c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008130:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8008134:	ea50 0104 	orrs.w	r1, r0, r4
 8008138:	f001 8602 	beq.w	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800813c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008140:	2801      	cmp	r0, #1
 8008142:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8008146:	f082 82bf 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800814a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800814e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8008152:	ea50 0104 	orrs.w	r1, r0, r4
 8008156:	f001 854c 	beq.w	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800815a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800815e:	2801      	cmp	r0, #1
 8008160:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8008164:	f082 82b0 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800816c:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8008170:	ea50 0104 	orrs.w	r1, r0, r4
 8008174:	f001 849e 	beq.w	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8008178:	e9d7 0100 	ldrd	r0, r1, [r7]
 800817c:	2801      	cmp	r0, #1
 800817e:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8008182:	f082 82a1 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008186:	e9d7 0100 	ldrd	r0, r1, [r7]
 800818a:	f1a1 0420 	sub.w	r4, r1, #32
 800818e:	ea50 0104 	orrs.w	r1, r0, r4
 8008192:	f001 83e8 	beq.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8008196:	e9d7 0100 	ldrd	r0, r1, [r7]
 800819a:	2801      	cmp	r0, #1
 800819c:	f171 0120 	sbcs.w	r1, r1, #32
 80081a0:	f082 8292 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081a8:	f1a1 0410 	sub.w	r4, r1, #16
 80081ac:	ea50 0104 	orrs.w	r1, r0, r4
 80081b0:	f002 8256 	beq.w	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80081b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081b8:	2801      	cmp	r0, #1
 80081ba:	f171 0110 	sbcs.w	r1, r1, #16
 80081be:	f082 8283 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081c6:	f1a1 0408 	sub.w	r4, r1, #8
 80081ca:	ea50 0104 	orrs.w	r1, r0, r4
 80081ce:	f002 81cc 	beq.w	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80081d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081d6:	2801      	cmp	r0, #1
 80081d8:	f171 0108 	sbcs.w	r1, r1, #8
 80081dc:	f082 8274 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081e4:	1f0c      	subs	r4, r1, #4
 80081e6:	ea50 0104 	orrs.w	r1, r0, r4
 80081ea:	f001 8648 	beq.w	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80081ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081f2:	2801      	cmp	r0, #1
 80081f4:	f171 0104 	sbcs.w	r1, r1, #4
 80081f8:	f082 8266 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008200:	1e8c      	subs	r4, r1, #2
 8008202:	ea50 0104 	orrs.w	r1, r0, r4
 8008206:	f002 8143 	beq.w	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800820a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800820e:	2801      	cmp	r0, #1
 8008210:	f171 0102 	sbcs.w	r1, r1, #2
 8008214:	f082 8258 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800821c:	1e4c      	subs	r4, r1, #1
 800821e:	ea50 0104 	orrs.w	r1, r0, r4
 8008222:	f002 80ce 	beq.w	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8008226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800822a:	2801      	cmp	r0, #1
 800822c:	f171 0101 	sbcs.w	r1, r1, #1
 8008230:	f082 824a 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008234:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008238:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800823c:	4321      	orrs	r1, r4
 800823e:	f002 8059 	beq.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8008242:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008246:	4cd9      	ldr	r4, [pc, #868]	; (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008248:	42a0      	cmp	r0, r4
 800824a:	f171 0100 	sbcs.w	r1, r1, #0
 800824e:	f082 823b 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008252:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008256:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800825a:	4321      	orrs	r1, r4
 800825c:	f001 87d9 	beq.w	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8008260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008264:	4cd2      	ldr	r4, [pc, #840]	; (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008266:	42a0      	cmp	r0, r4
 8008268:	f171 0100 	sbcs.w	r1, r1, #0
 800826c:	f082 822c 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008274:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8008278:	4321      	orrs	r1, r4
 800827a:	f001 8751 	beq.w	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800827e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008282:	4ccc      	ldr	r4, [pc, #816]	; (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008284:	42a0      	cmp	r0, r4
 8008286:	f171 0100 	sbcs.w	r1, r1, #0
 800828a:	f082 821d 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800828e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008292:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8008296:	4321      	orrs	r1, r4
 8008298:	f001 869a 	beq.w	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800829c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082a0:	4cc5      	ldr	r4, [pc, #788]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80082a2:	42a0      	cmp	r0, r4
 80082a4:	f171 0100 	sbcs.w	r1, r1, #0
 80082a8:	f082 820e 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082b0:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80082b4:	4321      	orrs	r1, r4
 80082b6:	f001 8612 	beq.w	8009ede <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80082ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082be:	4cbf      	ldr	r4, [pc, #764]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80082c0:	42a0      	cmp	r0, r4
 80082c2:	f171 0100 	sbcs.w	r1, r1, #0
 80082c6:	f082 81ff 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ce:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 80082d2:	4321      	orrs	r1, r4
 80082d4:	f002 817e 	beq.w	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80082d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082dc:	4cb8      	ldr	r4, [pc, #736]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082de:	42a0      	cmp	r0, r4
 80082e0:	f171 0100 	sbcs.w	r1, r1, #0
 80082e4:	f082 81f0 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ec:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80082f0:	4321      	orrs	r1, r4
 80082f2:	f000 829e 	beq.w	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80082f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082fa:	4cb2      	ldr	r4, [pc, #712]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80082fc:	42a0      	cmp	r0, r4
 80082fe:	f171 0100 	sbcs.w	r1, r1, #0
 8008302:	f082 81e1 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008306:	e9d7 0100 	ldrd	r0, r1, [r7]
 800830a:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800830e:	4321      	orrs	r1, r4
 8008310:	f000 826d 	beq.w	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008314:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008318:	4cab      	ldr	r4, [pc, #684]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800831a:	42a0      	cmp	r0, r4
 800831c:	f171 0100 	sbcs.w	r1, r1, #0
 8008320:	f082 81d2 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008324:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008328:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800832c:	4321      	orrs	r1, r4
 800832e:	f001 800d 	beq.w	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8008332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008336:	4ca5      	ldr	r4, [pc, #660]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008338:	42a0      	cmp	r0, r4
 800833a:	f171 0100 	sbcs.w	r1, r1, #0
 800833e:	f082 81c3 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008346:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800834a:	4321      	orrs	r1, r4
 800834c:	f000 81d0 	beq.w	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8008350:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008354:	4c9e      	ldr	r4, [pc, #632]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008356:	42a0      	cmp	r0, r4
 8008358:	f171 0100 	sbcs.w	r1, r1, #0
 800835c:	f082 81b4 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008360:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008364:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8008368:	4321      	orrs	r1, r4
 800836a:	f000 8142 	beq.w	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800836e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008372:	4c98      	ldr	r4, [pc, #608]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008374:	42a0      	cmp	r0, r4
 8008376:	f171 0100 	sbcs.w	r1, r1, #0
 800837a:	f082 81a5 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800837e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008382:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8008386:	4321      	orrs	r1, r4
 8008388:	f001 824e 	beq.w	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800838c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008390:	4c91      	ldr	r4, [pc, #580]	; (80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008392:	42a0      	cmp	r0, r4
 8008394:	f171 0100 	sbcs.w	r1, r1, #0
 8008398:	f082 8196 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800839c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083a0:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 80083a4:	4321      	orrs	r1, r4
 80083a6:	f001 8197 	beq.w	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80083aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ae:	4c8b      	ldr	r4, [pc, #556]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80083b0:	42a0      	cmp	r0, r4
 80083b2:	f171 0100 	sbcs.w	r1, r1, #0
 80083b6:	f082 8187 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083be:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 80083c2:	4321      	orrs	r1, r4
 80083c4:	f001 8154 	beq.w	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80083c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083cc:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 80083d0:	f171 0100 	sbcs.w	r1, r1, #0
 80083d4:	f082 8178 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083dc:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 80083e0:	4321      	orrs	r1, r4
 80083e2:	f001 80b7 	beq.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80083e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ea:	f248 0401 	movw	r4, #32769	; 0x8001
 80083ee:	42a0      	cmp	r0, r4
 80083f0:	f171 0100 	sbcs.w	r1, r1, #0
 80083f4:	f082 8168 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083fc:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8008400:	4321      	orrs	r1, r4
 8008402:	f001 8064 	beq.w	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8008406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800840a:	f244 0401 	movw	r4, #16385	; 0x4001
 800840e:	42a0      	cmp	r0, r4
 8008410:	f171 0100 	sbcs.w	r1, r1, #0
 8008414:	f082 8158 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800841c:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8008420:	4321      	orrs	r1, r4
 8008422:	f001 8011 	beq.w	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8008426:	e9d7 0100 	ldrd	r0, r1, [r7]
 800842a:	f242 0401 	movw	r4, #8193	; 0x2001
 800842e:	42a0      	cmp	r0, r4
 8008430:	f171 0100 	sbcs.w	r1, r1, #0
 8008434:	f082 8148 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800843c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8008440:	4321      	orrs	r1, r4
 8008442:	f000 871e 	beq.w	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8008446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800844a:	f241 0401 	movw	r4, #4097	; 0x1001
 800844e:	42a0      	cmp	r0, r4
 8008450:	f171 0100 	sbcs.w	r1, r1, #0
 8008454:	f082 8138 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800845c:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8008460:	4321      	orrs	r1, r4
 8008462:	f000 86a8 	beq.w	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8008466:	e9d7 0100 	ldrd	r0, r1, [r7]
 800846a:	f640 0401 	movw	r4, #2049	; 0x801
 800846e:	42a0      	cmp	r0, r4
 8008470:	f171 0100 	sbcs.w	r1, r1, #0
 8008474:	f082 8128 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800847c:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8008480:	4321      	orrs	r1, r4
 8008482:	f000 8632 	beq.w	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8008486:	e9d7 0100 	ldrd	r0, r1, [r7]
 800848a:	f240 4401 	movw	r4, #1025	; 0x401
 800848e:	42a0      	cmp	r0, r4
 8008490:	f171 0100 	sbcs.w	r1, r1, #0
 8008494:	f082 8118 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800849c:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 80084a0:	4321      	orrs	r1, r4
 80084a2:	f000 85b0 	beq.w	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80084a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084aa:	f240 2401 	movw	r4, #513	; 0x201
 80084ae:	42a0      	cmp	r0, r4
 80084b0:	f171 0100 	sbcs.w	r1, r1, #0
 80084b4:	f082 8108 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084bc:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 80084c0:	4321      	orrs	r1, r4
 80084c2:	f000 8535 	beq.w	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80084c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ca:	f240 1401 	movw	r4, #257	; 0x101
 80084ce:	42a0      	cmp	r0, r4
 80084d0:	f171 0100 	sbcs.w	r1, r1, #0
 80084d4:	f082 80f8 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084dc:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 80084e0:	4321      	orrs	r1, r4
 80084e2:	f000 84ba 	beq.w	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80084e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084ea:	2881      	cmp	r0, #129	; 0x81
 80084ec:	f171 0100 	sbcs.w	r1, r1, #0
 80084f0:	f082 80ea 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084f8:	2821      	cmp	r0, #33	; 0x21
 80084fa:	f171 0100 	sbcs.w	r1, r1, #0
 80084fe:	d26f      	bcs.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008504:	4301      	orrs	r1, r0
 8008506:	f002 80df 	beq.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800850a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800850e:	1e42      	subs	r2, r0, #1
 8008510:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008514:	2a20      	cmp	r2, #32
 8008516:	f173 0100 	sbcs.w	r1, r3, #0
 800851a:	f082 80d5 	bcs.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800851e:	2a1f      	cmp	r2, #31
 8008520:	f202 80d2 	bhi.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008524:	a101      	add	r1, pc, #4	; (adr r1, 800852c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008526:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800852a:	bf00      	nop
 800852c:	0800888d 	.word	0x0800888d
 8008530:	08008959 	.word	0x08008959
 8008534:	0800a6c9 	.word	0x0800a6c9
 8008538:	08008a19 	.word	0x08008a19
 800853c:	0800a6c9 	.word	0x0800a6c9
 8008540:	0800a6c9 	.word	0x0800a6c9
 8008544:	0800a6c9 	.word	0x0800a6c9
 8008548:	08008ae9 	.word	0x08008ae9
 800854c:	0800a6c9 	.word	0x0800a6c9
 8008550:	0800a6c9 	.word	0x0800a6c9
 8008554:	0800a6c9 	.word	0x0800a6c9
 8008558:	0800a6c9 	.word	0x0800a6c9
 800855c:	0800a6c9 	.word	0x0800a6c9
 8008560:	0800a6c9 	.word	0x0800a6c9
 8008564:	0800a6c9 	.word	0x0800a6c9
 8008568:	08008bcb 	.word	0x08008bcb
 800856c:	0800a6c9 	.word	0x0800a6c9
 8008570:	0800a6c9 	.word	0x0800a6c9
 8008574:	0800a6c9 	.word	0x0800a6c9
 8008578:	0800a6c9 	.word	0x0800a6c9
 800857c:	0800a6c9 	.word	0x0800a6c9
 8008580:	0800a6c9 	.word	0x0800a6c9
 8008584:	0800a6c9 	.word	0x0800a6c9
 8008588:	0800a6c9 	.word	0x0800a6c9
 800858c:	0800a6c9 	.word	0x0800a6c9
 8008590:	0800a6c9 	.word	0x0800a6c9
 8008594:	0800a6c9 	.word	0x0800a6c9
 8008598:	0800a6c9 	.word	0x0800a6c9
 800859c:	0800a6c9 	.word	0x0800a6c9
 80085a0:	0800a6c9 	.word	0x0800a6c9
 80085a4:	0800a6c9 	.word	0x0800a6c9
 80085a8:	08008ca1 	.word	0x08008ca1
 80085ac:	80000001 	.word	0x80000001
 80085b0:	40000001 	.word	0x40000001
 80085b4:	20000001 	.word	0x20000001
 80085b8:	10000001 	.word	0x10000001
 80085bc:	08000001 	.word	0x08000001
 80085c0:	04000001 	.word	0x04000001
 80085c4:	00800001 	.word	0x00800001
 80085c8:	00400001 	.word	0x00400001
 80085cc:	00200001 	.word	0x00200001
 80085d0:	00100001 	.word	0x00100001
 80085d4:	00080001 	.word	0x00080001
 80085d8:	00040001 	.word	0x00040001
 80085dc:	00020001 	.word	0x00020001
 80085e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085e4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80085e8:	430b      	orrs	r3, r1
 80085ea:	f000 83c4 	beq.w	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80085ee:	f002 b86b 	b.w	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80085f2:	4ba1      	ldr	r3, [pc, #644]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80085f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085f8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80085fc:	633b      	str	r3, [r7, #48]	; 0x30
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008604:	d036      	beq.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800860c:	d86b      	bhi.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008614:	d02b      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800861c:	d863      	bhi.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008624:	d01b      	beq.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862c:	d85b      	bhi.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863a:	d008      	beq.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800863c:	e053      	b.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800863e:	f107 0320 	add.w	r3, r7, #32
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff f8ba 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800864c:	e04e      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800864e:	f107 0314 	add.w	r3, r7, #20
 8008652:	4618      	mov	r0, r3
 8008654:	f7ff fa1c 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800865c:	e046      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff fb7e 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800866c:	e03e      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800866e:	4b83      	ldr	r3, [pc, #524]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008672:	e03b      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008674:	4b80      	ldr	r3, [pc, #512]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800867a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008680:	4b7d      	ldr	r3, [pc, #500]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0302 	and.w	r3, r3, #2
 8008688:	2b02      	cmp	r3, #2
 800868a:	d10c      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d109      	bne.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008692:	4b79      	ldr	r3, [pc, #484]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	08db      	lsrs	r3, r3, #3
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	4a78      	ldr	r2, [pc, #480]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800869e:	fa22 f303 	lsr.w	r3, r2, r3
 80086a2:	637b      	str	r3, [r7, #52]	; 0x34
 80086a4:	e01e      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086a6:	4b74      	ldr	r3, [pc, #464]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b2:	d106      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ba:	d102      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80086bc:	4b71      	ldr	r3, [pc, #452]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80086be:	637b      	str	r3, [r7, #52]	; 0x34
 80086c0:	e010      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086c2:	4b6d      	ldr	r3, [pc, #436]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ce:	d106      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086d6:	d102      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80086d8:	4b6b      	ldr	r3, [pc, #428]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80086da:	637b      	str	r3, [r7, #52]	; 0x34
 80086dc:	e002      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80086e2:	e003      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80086e4:	e002      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086ea:	bf00      	nop
          }
        }
        break;
 80086ec:	f001 bfef 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80086f0:	4b61      	ldr	r3, [pc, #388]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086f6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80086fa:	633b      	str	r3, [r7, #48]	; 0x30
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008702:	d036      	beq.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800870a:	d86b      	bhi.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008712:	d02b      	beq.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800871a:	d863      	bhi.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008722:	d01b      	beq.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800872a:	d85b      	bhi.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	2b00      	cmp	r3, #0
 8008730:	d004      	beq.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008738:	d008      	beq.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800873a:	e053      	b.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800873c:	f107 0320 	add.w	r3, r7, #32
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff f83b 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800874a:	e04e      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800874c:	f107 0314 	add.w	r3, r7, #20
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff f99d 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800875a:	e046      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800875c:	f107 0308 	add.w	r3, r7, #8
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff faff 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800876a:	e03e      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800876c:	4b43      	ldr	r3, [pc, #268]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800876e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008770:	e03b      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008772:	4b41      	ldr	r3, [pc, #260]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008778:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800877c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800877e:	4b3e      	ldr	r3, [pc, #248]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b02      	cmp	r3, #2
 8008788:	d10c      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008790:	4b39      	ldr	r3, [pc, #228]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	08db      	lsrs	r3, r3, #3
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	4a39      	ldr	r2, [pc, #228]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800879c:	fa22 f303 	lsr.w	r3, r2, r3
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
 80087a2:	e01e      	b.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087a4:	4b34      	ldr	r3, [pc, #208]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b0:	d106      	bne.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80087b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b8:	d102      	bne.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087ba:	4b32      	ldr	r3, [pc, #200]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80087bc:	637b      	str	r3, [r7, #52]	; 0x34
 80087be:	e010      	b.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087c0:	4b2d      	ldr	r3, [pc, #180]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087cc:	d106      	bne.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80087ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087d4:	d102      	bne.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80087d6:	4b2c      	ldr	r3, [pc, #176]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80087d8:	637b      	str	r3, [r7, #52]	; 0x34
 80087da:	e002      	b.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80087e0:	e003      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80087e2:	e002      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087e8:	bf00      	nop
          }
        }
        break;
 80087ea:	f001 bf70 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80087ee:	4b22      	ldr	r3, [pc, #136]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80087f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d108      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008800:	f107 0320 	add.w	r3, r7, #32
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe ffd9 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800880e:	f001 bf5e 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	2b40      	cmp	r3, #64	; 0x40
 8008816:	d108      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008818:	f107 0314 	add.w	r3, r7, #20
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff f937 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008826:	f001 bf52 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800882e:	f001 bf4e 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008832:	4b11      	ldr	r3, [pc, #68]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008834:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008844:	f107 0320 	add.w	r3, r7, #32
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe ffb7 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008852:	f001 bf3c 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	2b80      	cmp	r3, #128	; 0x80
 800885a:	d108      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800885c:	f107 0314 	add.w	r3, r7, #20
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff f915 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800886a:	f001 bf30 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008872:	f001 bf2c 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008876:	bf00      	nop
 8008878:	44020c00 	.word	0x44020c00
 800887c:	00bb8000 	.word	0x00bb8000
 8008880:	03d09000 	.word	0x03d09000
 8008884:	003d0900 	.word	0x003d0900
 8008888:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800888c:	4b9d      	ldr	r3, [pc, #628]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800888e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008892:	f003 0307 	and.w	r3, r3, #7
 8008896:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	2b00      	cmp	r3, #0
 800889c:	d104      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800889e:	f7fc ff9f 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 80088a2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80088a4:	f001 bf13 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80088a8:	4b96      	ldr	r3, [pc, #600]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b4:	d10a      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d107      	bne.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088bc:	f107 0314 	add.w	r3, r7, #20
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff f8e5 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
 80088ca:	e043      	b.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80088cc:	4b8d      	ldr	r3, [pc, #564]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d8:	d10a      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d107      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088e0:	f107 0308 	add.w	r3, r7, #8
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7ff fa3d 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
 80088ee:	e031      	b.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80088f0:	4b84      	ldr	r3, [pc, #528]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d10c      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d109      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008902:	4b80      	ldr	r3, [pc, #512]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	08db      	lsrs	r3, r3, #3
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	4a7e      	ldr	r2, [pc, #504]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800890e:	fa22 f303 	lsr.w	r3, r2, r3
 8008912:	637b      	str	r3, [r7, #52]	; 0x34
 8008914:	e01e      	b.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008916:	4b7b      	ldr	r3, [pc, #492]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800891e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008922:	d105      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	2b04      	cmp	r3, #4
 8008928:	d102      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800892a:	4b78      	ldr	r3, [pc, #480]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800892c:	637b      	str	r3, [r7, #52]	; 0x34
 800892e:	e011      	b.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008930:	4b74      	ldr	r3, [pc, #464]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b02      	cmp	r3, #2
 800893c:	d106      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	2b05      	cmp	r3, #5
 8008942:	d103      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
 800894a:	e003      	b.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008950:	f001 bebd 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008954:	f001 bebb 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008958:	4b6a      	ldr	r3, [pc, #424]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800895a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800895e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008962:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	2b00      	cmp	r3, #0
 8008968:	d104      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800896a:	f7fc ff23 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 800896e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008970:	f001 bead 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008974:	4b63      	ldr	r3, [pc, #396]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800897c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008980:	d10a      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	2b08      	cmp	r3, #8
 8008986:	d107      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008988:	f107 0314 	add.w	r3, r7, #20
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff f87f 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	637b      	str	r3, [r7, #52]	; 0x34
 8008996:	e03d      	b.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	2b10      	cmp	r3, #16
 800899c:	d108      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800899e:	f107 0308 	add.w	r3, r7, #8
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7ff f9de 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089ac:	f001 be8f 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80089b0:	4b54      	ldr	r3, [pc, #336]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d10c      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	2b18      	cmp	r3, #24
 80089c0:	d109      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089c2:	4b50      	ldr	r3, [pc, #320]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	08db      	lsrs	r3, r3, #3
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	4a4e      	ldr	r2, [pc, #312]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80089ce:	fa22 f303 	lsr.w	r3, r2, r3
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
 80089d4:	e01e      	b.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80089d6:	4b4b      	ldr	r3, [pc, #300]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e2:	d105      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d102      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80089ea:	4b48      	ldr	r3, [pc, #288]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80089ec:	637b      	str	r3, [r7, #52]	; 0x34
 80089ee:	e011      	b.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80089f0:	4b44      	ldr	r3, [pc, #272]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d106      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	2b28      	cmp	r3, #40	; 0x28
 8008a02:	d103      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a08:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0a:	e003      	b.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a10:	f001 be5d 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a14:	f001 be5b 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008a18:	4b3a      	ldr	r3, [pc, #232]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008a1e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008a22:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d104      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a2a:	f7fc fec3 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8008a2e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a30:	f001 be4d 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008a34:	4b33      	ldr	r3, [pc, #204]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a40:	d10a      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	2b40      	cmp	r3, #64	; 0x40
 8008a46:	d107      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a48:	f107 0314 	add.w	r3, r7, #20
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff f81f 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34
 8008a56:	e045      	b.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008a58:	4b2a      	ldr	r3, [pc, #168]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a64:	d10a      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	2b80      	cmp	r3, #128	; 0x80
 8008a6a:	d107      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a6c:	f107 0308 	add.w	r3, r7, #8
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff f977 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34
 8008a7a:	e033      	b.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008a7c:	4b21      	ldr	r3, [pc, #132]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	d10c      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8008a8c:	d109      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a8e:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	08db      	lsrs	r3, r3, #3
 8008a94:	f003 0303 	and.w	r3, r3, #3
 8008a98:	4a1b      	ldr	r2, [pc, #108]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8008aa0:	e020      	b.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008aa2:	4b18      	ldr	r3, [pc, #96]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aae:	d106      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab6:	d102      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008ab8:	4b14      	ldr	r3, [pc, #80]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34
 8008abc:	e012      	b.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008abe:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d107      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008ad2:	d103      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ada:	e003      	b.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ae0:	f001 bdf5 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ae4:	f001 bdf3 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008aea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008aee:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008af2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008afa:	f7fc fe5b 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8008afe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b00:	f001 bde5 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b04:	44020c00 	.word	0x44020c00
 8008b08:	03d09000 	.word	0x03d09000
 8008b0c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008b10:	4ba0      	ldr	r3, [pc, #640]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b1c:	d10b      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b24:	d107      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b26:	f107 0314 	add.w	r3, r7, #20
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fe ffb0 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	637b      	str	r3, [r7, #52]	; 0x34
 8008b34:	e047      	b.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008b36:	4b97      	ldr	r3, [pc, #604]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b42:	d10b      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b4a:	d107      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b4c:	f107 0308 	add.w	r3, r7, #8
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff f907 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	637b      	str	r3, [r7, #52]	; 0x34
 8008b5a:	e034      	b.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008b5c:	4b8d      	ldr	r3, [pc, #564]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d10d      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b6e:	d109      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b70:	4b88      	ldr	r3, [pc, #544]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	08db      	lsrs	r3, r3, #3
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	4a87      	ldr	r2, [pc, #540]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34
 8008b82:	e020      	b.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008b84:	4b83      	ldr	r3, [pc, #524]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b90:	d106      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b98:	d102      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008b9a:	4b80      	ldr	r3, [pc, #512]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9e:	e012      	b.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008ba0:	4b7c      	ldr	r3, [pc, #496]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d107      	bne.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008bb4:	d103      	bne.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34
 8008bbc:	e003      	b.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bc2:	f001 bd84 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bc6:	f001 bd82 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008bca:	4b72      	ldr	r3, [pc, #456]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008bd0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008bd4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bdc:	f7fc fdea 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8008be0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008be2:	f001 bd74 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008be6:	4b6b      	ldr	r3, [pc, #428]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bf2:	d10b      	bne.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bfa:	d107      	bne.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bfc:	f107 0314 	add.w	r3, r7, #20
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fe ff45 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	637b      	str	r3, [r7, #52]	; 0x34
 8008c0a:	e047      	b.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008c0c:	4b61      	ldr	r3, [pc, #388]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c18:	d10b      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c20:	d107      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c22:	f107 0308 	add.w	r3, r7, #8
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff f89c 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c30:	e034      	b.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008c32:	4b58      	ldr	r3, [pc, #352]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d10d      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c44:	d109      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c46:	4b53      	ldr	r3, [pc, #332]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	08db      	lsrs	r3, r3, #3
 8008c4c:	f003 0303 	and.w	r3, r3, #3
 8008c50:	4a51      	ldr	r2, [pc, #324]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008c52:	fa22 f303 	lsr.w	r3, r2, r3
 8008c56:	637b      	str	r3, [r7, #52]	; 0x34
 8008c58:	e020      	b.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008c5a:	4b4e      	ldr	r3, [pc, #312]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c66:	d106      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c6e:	d102      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008c70:	4b4a      	ldr	r3, [pc, #296]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008c72:	637b      	str	r3, [r7, #52]	; 0x34
 8008c74:	e012      	b.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008c76:	4b47      	ldr	r3, [pc, #284]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d107      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008c8a:	d103      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
 8008c92:	e003      	b.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c98:	f001 bd19 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c9c:	f001 bd17 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008ca0:	4b3c      	ldr	r3, [pc, #240]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008ca6:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008caa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cb2:	f7fc fd7f 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8008cb6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008cb8:	f001 bd09 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008cbc:	4b35      	ldr	r3, [pc, #212]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cc8:	d10b      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cd0:	d107      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cd2:	f107 0314 	add.w	r3, r7, #20
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe feda 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce0:	e047      	b.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008ce2:	4b2c      	ldr	r3, [pc, #176]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cee:	d10b      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cf6:	d107      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cf8:	f107 0308 	add.w	r3, r7, #8
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff f831 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	637b      	str	r3, [r7, #52]	; 0x34
 8008d06:	e034      	b.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008d08:	4b22      	ldr	r3, [pc, #136]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d10d      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d16:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008d1a:	d109      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d1c:	4b1d      	ldr	r3, [pc, #116]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	08db      	lsrs	r3, r3, #3
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	4a1c      	ldr	r2, [pc, #112]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008d28:	fa22 f303 	lsr.w	r3, r2, r3
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d2e:	e020      	b.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008d30:	4b18      	ldr	r3, [pc, #96]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d3c:	d106      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d44:	d102      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008d46:	4b15      	ldr	r3, [pc, #84]	; (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
 8008d4a:	e012      	b.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008d4c:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d107      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008d60:	d103      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8008d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d66:	637b      	str	r3, [r7, #52]	; 0x34
 8008d68:	e003      	b.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d6e:	f001 bcae 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d72:	f001 bcac 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008d76:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008d7c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8008d80:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d88:	f7fc fd14 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8008d8c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d8e:	f001 bc9e 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d92:	bf00      	nop
 8008d94:	44020c00 	.word	0x44020c00
 8008d98:	03d09000 	.word	0x03d09000
 8008d9c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008da0:	4ba0      	ldr	r3, [pc, #640]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dac:	d10b      	bne.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008db4:	d107      	bne.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db6:	f107 0314 	add.w	r3, r7, #20
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fe fe68 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc4:	e047      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008dc6:	4b97      	ldr	r3, [pc, #604]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dd2:	d10b      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008dda:	d107      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ddc:	f107 0308 	add.w	r3, r7, #8
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe ffbf 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dea:	e034      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008dec:	4b8d      	ldr	r3, [pc, #564]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d10d      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008dfe:	d109      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e00:	4b88      	ldr	r3, [pc, #544]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	08db      	lsrs	r3, r3, #3
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	4a87      	ldr	r2, [pc, #540]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e10:	637b      	str	r3, [r7, #52]	; 0x34
 8008e12:	e020      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008e14:	4b83      	ldr	r3, [pc, #524]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e20:	d106      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e28:	d102      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008e2a:	4b80      	ldr	r3, [pc, #512]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e2e:	e012      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008e30:	4b7c      	ldr	r3, [pc, #496]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d107      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008e44:	d103      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4c:	e003      	b.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e52:	f001 bc3c 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e56:	f001 bc3a 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008e5a:	4b72      	ldr	r3, [pc, #456]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008e60:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008e64:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d104      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e6c:	f7fc fca2 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8008e70:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e72:	f001 bc2c 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008e76:	4b6b      	ldr	r3, [pc, #428]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e82:	d10b      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e8a:	d107      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e8c:	f107 0314 	add.w	r3, r7, #20
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fdfd 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
 8008e9a:	e047      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008e9c:	4b61      	ldr	r3, [pc, #388]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea8:	d10b      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eb0:	d107      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eb2:	f107 0308 	add.w	r3, r7, #8
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe ff54 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec0:	e034      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008ec2:	4b58      	ldr	r3, [pc, #352]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d10d      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ed4:	d109      	bne.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ed6:	4b53      	ldr	r3, [pc, #332]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	08db      	lsrs	r3, r3, #3
 8008edc:	f003 0303 	and.w	r3, r3, #3
 8008ee0:	4a51      	ldr	r2, [pc, #324]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee8:	e020      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008eea:	4b4e      	ldr	r3, [pc, #312]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ef6:	d106      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008efe:	d102      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008f00:	4b4a      	ldr	r3, [pc, #296]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
 8008f04:	e012      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008f06:	4b47      	ldr	r3, [pc, #284]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f0c:	f003 0302 	and.w	r3, r3, #2
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d107      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008f1a:	d103      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f20:	637b      	str	r3, [r7, #52]	; 0x34
 8008f22:	e003      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f28:	f001 bbd1 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f2c:	f001 bbcf 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008f30:	4b3c      	ldr	r3, [pc, #240]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f3a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f42:	f7fc fc37 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8008f46:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f48:	f001 bbc1 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008f4c:	4b35      	ldr	r3, [pc, #212]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f58:	d10b      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f60:	d107      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f62:	f107 0314 	add.w	r3, r7, #20
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe fd92 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f70:	e047      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008f72:	4b2c      	ldr	r3, [pc, #176]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7e:	d10b      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f86:	d107      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f88:	f107 0308 	add.w	r3, r7, #8
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe fee9 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	637b      	str	r3, [r7, #52]	; 0x34
 8008f96:	e034      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008f98:	4b22      	ldr	r3, [pc, #136]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d10d      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008faa:	d109      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fac:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	08db      	lsrs	r3, r3, #3
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	4a1c      	ldr	r2, [pc, #112]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8008fbe:	e020      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008fc0:	4b18      	ldr	r3, [pc, #96]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fcc:	d106      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fd4:	d102      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008fd6:	4b15      	ldr	r3, [pc, #84]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8008fda:	e012      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008fdc:	4b11      	ldr	r3, [pc, #68]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d107      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008ff0:	d103      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff8:	e003      	b.n	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ffe:	f001 bb66 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009002:	f001 bb64 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8009006:	4b07      	ldr	r3, [pc, #28]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009008:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800900c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8009010:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10b      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009018:	f7fc fbcc 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 800901c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800901e:	f001 bb56 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009022:	bf00      	nop
 8009024:	44020c00 	.word	0x44020c00
 8009028:	03d09000 	.word	0x03d09000
 800902c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8009030:	4ba1      	ldr	r3, [pc, #644]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800903c:	d10b      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009044:	d107      	bne.n	8009056 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009046:	f107 0314 	add.w	r3, r7, #20
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe fd20 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	637b      	str	r3, [r7, #52]	; 0x34
 8009054:	e047      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8009056:	4b98      	ldr	r3, [pc, #608]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800905e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009062:	d10b      	bne.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800906a:	d107      	bne.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800906c:	f107 0308 	add.w	r3, r7, #8
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe fe77 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	637b      	str	r3, [r7, #52]	; 0x34
 800907a:	e034      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800907c:	4b8e      	ldr	r3, [pc, #568]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b02      	cmp	r3, #2
 8009086:	d10d      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800908e:	d109      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009090:	4b89      	ldr	r3, [pc, #548]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	08db      	lsrs	r3, r3, #3
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	4a88      	ldr	r2, [pc, #544]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800909c:	fa22 f303 	lsr.w	r3, r2, r3
 80090a0:	637b      	str	r3, [r7, #52]	; 0x34
 80090a2:	e020      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80090a4:	4b84      	ldr	r3, [pc, #528]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090b0:	d106      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b8:	d102      	bne.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80090ba:	4b81      	ldr	r3, [pc, #516]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80090bc:	637b      	str	r3, [r7, #52]	; 0x34
 80090be:	e012      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80090c0:	4b7d      	ldr	r3, [pc, #500]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d107      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80090d4:	d103      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80090d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090da:	637b      	str	r3, [r7, #52]	; 0x34
 80090dc:	e003      	b.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80090e2:	f001 baf4 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090e6:	f001 baf2 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80090ea:	4b73      	ldr	r3, [pc, #460]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d104      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80090fc:	f7fc fb5a 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8009100:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8009102:	f001 bae4 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8009106:	4b6c      	ldr	r3, [pc, #432]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800910e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009112:	d10a      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	2b01      	cmp	r3, #1
 8009118:	d107      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800911a:	f107 0314 	add.w	r3, r7, #20
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe fcb6 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	637b      	str	r3, [r7, #52]	; 0x34
 8009128:	e043      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800912a:	4b63      	ldr	r3, [pc, #396]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009136:	d10a      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	2b02      	cmp	r3, #2
 800913c:	d107      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800913e:	f107 0308 	add.w	r3, r7, #8
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe fe0e 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	637b      	str	r3, [r7, #52]	; 0x34
 800914c:	e031      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800914e:	4b5a      	ldr	r3, [pc, #360]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b02      	cmp	r3, #2
 8009158:	d10c      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	2b03      	cmp	r3, #3
 800915e:	d109      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009160:	4b55      	ldr	r3, [pc, #340]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	08db      	lsrs	r3, r3, #3
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	4a54      	ldr	r2, [pc, #336]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800916c:	fa22 f303 	lsr.w	r3, r2, r3
 8009170:	637b      	str	r3, [r7, #52]	; 0x34
 8009172:	e01e      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8009174:	4b50      	ldr	r3, [pc, #320]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800917c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009180:	d105      	bne.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	2b04      	cmp	r3, #4
 8009186:	d102      	bne.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8009188:	4b4d      	ldr	r3, [pc, #308]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800918a:	637b      	str	r3, [r7, #52]	; 0x34
 800918c:	e011      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800918e:	4b4a      	ldr	r3, [pc, #296]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b02      	cmp	r3, #2
 800919a:	d106      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	2b05      	cmp	r3, #5
 80091a0:	d103      	bne.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80091a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091a6:	637b      	str	r3, [r7, #52]	; 0x34
 80091a8:	e003      	b.n	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091ae:	f001 ba8e 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091b2:	f001 ba8c 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80091b6:	4b40      	ldr	r3, [pc, #256]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80091bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091c0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80091c8:	f7fc faf4 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 80091cc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80091ce:	f001 ba7e 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80091d2:	4b39      	ldr	r3, [pc, #228]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091de:	d10a      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	2b10      	cmp	r3, #16
 80091e4:	d107      	bne.n	80091f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e6:	f107 0314 	add.w	r3, r7, #20
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe fc50 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	637b      	str	r3, [r7, #52]	; 0x34
 80091f4:	e043      	b.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80091f6:	4b30      	ldr	r3, [pc, #192]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009202:	d10a      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	2b20      	cmp	r3, #32
 8009208:	d107      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800920a:	f107 0308 	add.w	r3, r7, #8
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe fda8 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	637b      	str	r3, [r7, #52]	; 0x34
 8009218:	e031      	b.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800921a:	4b27      	ldr	r3, [pc, #156]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b02      	cmp	r3, #2
 8009224:	d10c      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	2b30      	cmp	r3, #48	; 0x30
 800922a:	d109      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800922c:	4b22      	ldr	r3, [pc, #136]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	08db      	lsrs	r3, r3, #3
 8009232:	f003 0303 	and.w	r3, r3, #3
 8009236:	4a21      	ldr	r2, [pc, #132]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009238:	fa22 f303 	lsr.w	r3, r2, r3
 800923c:	637b      	str	r3, [r7, #52]	; 0x34
 800923e:	e01e      	b.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8009240:	4b1d      	ldr	r3, [pc, #116]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800924c:	d105      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	2b40      	cmp	r3, #64	; 0x40
 8009252:	d102      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8009254:	4b1a      	ldr	r3, [pc, #104]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009256:	637b      	str	r3, [r7, #52]	; 0x34
 8009258:	e011      	b.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800925a:	4b17      	ldr	r3, [pc, #92]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800925c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b02      	cmp	r3, #2
 8009266:	d106      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8009268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926a:	2b50      	cmp	r3, #80	; 0x50
 800926c:	d103      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800926e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009272:	637b      	str	r3, [r7, #52]	; 0x34
 8009274:	e003      	b.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800927a:	f001 ba28 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800927e:	f001 ba26 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009282:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009288:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800928c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	2b00      	cmp	r3, #0
 8009292:	d104      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009294:	f7fc faba 	bl	800580c <HAL_RCC_GetPCLK3Freq>
 8009298:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800929a:	f001 ba18 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092a4:	d10e      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a6:	f107 0314 	add.w	r3, r7, #20
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fbf0 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092b4:	f001 ba0b 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092b8:	44020c00 	.word	0x44020c00
 80092bc:	03d09000 	.word	0x03d09000
 80092c0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ca:	d108      	bne.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092cc:	f107 0308 	add.w	r3, r7, #8
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fe fd47 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092da:	f001 b9f8 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80092de:	4ba4      	ldr	r3, [pc, #656]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d10d      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092f0:	d109      	bne.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092f2:	4b9f      	ldr	r3, [pc, #636]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	08db      	lsrs	r3, r3, #3
 80092f8:	f003 0303 	and.w	r3, r3, #3
 80092fc:	4a9d      	ldr	r2, [pc, #628]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80092fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009302:	637b      	str	r3, [r7, #52]	; 0x34
 8009304:	e020      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009306:	4b9a      	ldr	r3, [pc, #616]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800930e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009312:	d106      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800931a:	d102      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800931c:	4b96      	ldr	r3, [pc, #600]	; (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800931e:	637b      	str	r3, [r7, #52]	; 0x34
 8009320:	e012      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009322:	4b93      	ldr	r3, [pc, #588]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b02      	cmp	r3, #2
 800932e:	d107      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009336:	d103      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8009338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800933c:	637b      	str	r3, [r7, #52]	; 0x34
 800933e:	e003      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009344:	f001 b9c3 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009348:	f001 b9c1 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800934c:	4b88      	ldr	r3, [pc, #544]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800934e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	2b00      	cmp	r3, #0
 800935c:	d104      	bne.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800935e:	f7fc fa0d 	bl	800577c <HAL_RCC_GetHCLKFreq>
 8009362:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009364:	f001 b9b3 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	2b01      	cmp	r3, #1
 800936c:	d104      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800936e:	f7fc f8d9 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 8009372:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009374:	f001 b9ab 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8009378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937a:	2b02      	cmp	r3, #2
 800937c:	d108      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800937e:	f107 0314 	add.w	r3, r7, #20
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fb84 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800938c:	f001 b99f 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009390:	4b77      	ldr	r3, [pc, #476]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800939c:	d105      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d102      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80093a4:	4b75      	ldr	r3, [pc, #468]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80093a6:	637b      	str	r3, [r7, #52]	; 0x34
 80093a8:	e023      	b.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80093aa:	4b71      	ldr	r3, [pc, #452]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d10c      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	d109      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093bc:	4b6c      	ldr	r3, [pc, #432]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	08db      	lsrs	r3, r3, #3
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	4a6b      	ldr	r2, [pc, #428]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80093c8:	fa22 f303 	lsr.w	r3, r2, r3
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
 80093ce:	e010      	b.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80093d0:	4b67      	ldr	r3, [pc, #412]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093dc:	d105      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	2b05      	cmp	r3, #5
 80093e2:	d102      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80093e4:	4b64      	ldr	r3, [pc, #400]	; (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80093e6:	637b      	str	r3, [r7, #52]	; 0x34
 80093e8:	e003      	b.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093ee:	f001 b96e 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093f2:	f001 b96c 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80093f6:	4b5e      	ldr	r3, [pc, #376]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009402:	4b5b      	ldr	r3, [pc, #364]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b02      	cmp	r3, #2
 800940e:	d106      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	2b00      	cmp	r3, #0
 8009414:	d103      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8009416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800941a:	637b      	str	r3, [r7, #52]	; 0x34
 800941c:	e012      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800941e:	4b54      	ldr	r3, [pc, #336]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800942c:	d106      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	2b08      	cmp	r3, #8
 8009432:	d103      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8009434:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009438:	637b      	str	r3, [r7, #52]	; 0x34
 800943a:	e003      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009440:	f001 b945 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009444:	f001 b943 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009448:	4b49      	ldr	r3, [pc, #292]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800944a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800944e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009452:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800945a:	f7fc f9ab 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 800945e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009460:	f001 b935 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800946a:	d108      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800946c:	f107 0308 	add.w	r3, r7, #8
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fc77 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800947a:	f001 b928 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800947e:	4b3c      	ldr	r3, [pc, #240]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0302 	and.w	r3, r3, #2
 8009486:	2b02      	cmp	r3, #2
 8009488:	d10d      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009490:	d109      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009492:	4b37      	ldr	r3, [pc, #220]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	08db      	lsrs	r3, r3, #3
 8009498:	f003 0303 	and.w	r3, r3, #3
 800949c:	4a35      	ldr	r2, [pc, #212]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800949e:	fa22 f303 	lsr.w	r3, r2, r3
 80094a2:	637b      	str	r3, [r7, #52]	; 0x34
 80094a4:	e011      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80094a6:	4b32      	ldr	r3, [pc, #200]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094b2:	d106      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094ba:	d102      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80094bc:	4b2e      	ldr	r3, [pc, #184]	; (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80094be:	637b      	str	r3, [r7, #52]	; 0x34
 80094c0:	e003      	b.n	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094c6:	f001 b902 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094ca:	f001 b900 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80094ce:	4b28      	ldr	r3, [pc, #160]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80094d8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d104      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80094e0:	f7fc f968 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 80094e4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80094e6:	f001 b8f2 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094f0:	d108      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094f2:	f107 0308 	add.w	r3, r7, #8
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fc34 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009500:	f001 b8e5 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009504:	4b1a      	ldr	r3, [pc, #104]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 0302 	and.w	r3, r3, #2
 800950c:	2b02      	cmp	r3, #2
 800950e:	d10d      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009516:	d109      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009518:	4b15      	ldr	r3, [pc, #84]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	08db      	lsrs	r3, r3, #3
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	4a14      	ldr	r2, [pc, #80]	; (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009524:	fa22 f303 	lsr.w	r3, r2, r3
 8009528:	637b      	str	r3, [r7, #52]	; 0x34
 800952a:	e011      	b.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800952c:	4b10      	ldr	r3, [pc, #64]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009538:	d106      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009540:	d102      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009544:	637b      	str	r3, [r7, #52]	; 0x34
 8009546:	e003      	b.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800954c:	f001 b8bf 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009550:	f001 b8bd 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009556:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800955a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800955e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10c      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009566:	f7fc f951 	bl	800580c <HAL_RCC_GetPCLK3Freq>
 800956a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800956c:	f001 b8af 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009570:	44020c00 	.word	0x44020c00
 8009574:	03d09000 	.word	0x03d09000
 8009578:	003d0900 	.word	0x003d0900
 800957c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009586:	d108      	bne.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009588:	f107 0308 	add.w	r3, r7, #8
 800958c:	4618      	mov	r0, r3
 800958e:	f7fe fbe9 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009596:	f001 b89a 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800959a:	4b9f      	ldr	r3, [pc, #636]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d10d      	bne.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095ac:	d109      	bne.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095ae:	4b9a      	ldr	r3, [pc, #616]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	08db      	lsrs	r3, r3, #3
 80095b4:	f003 0303 	and.w	r3, r3, #3
 80095b8:	4a98      	ldr	r2, [pc, #608]	; (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80095ba:	fa22 f303 	lsr.w	r3, r2, r3
 80095be:	637b      	str	r3, [r7, #52]	; 0x34
 80095c0:	e011      	b.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80095c2:	4b95      	ldr	r3, [pc, #596]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ce:	d106      	bne.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095d6:	d102      	bne.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80095d8:	4b91      	ldr	r3, [pc, #580]	; (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80095da:	637b      	str	r3, [r7, #52]	; 0x34
 80095dc:	e003      	b.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095e2:	f001 b874 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095e6:	f001 b872 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80095ea:	4b8b      	ldr	r3, [pc, #556]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80095f0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80095f4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d104      	bne.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095fc:	f7fc f906 	bl	800580c <HAL_RCC_GetPCLK3Freq>
 8009600:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009602:	f001 b864 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800960c:	d108      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800960e:	f107 0308 	add.w	r3, r7, #8
 8009612:	4618      	mov	r0, r3
 8009614:	f7fe fba6 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800961c:	f001 b857 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009620:	4b7d      	ldr	r3, [pc, #500]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0302 	and.w	r3, r3, #2
 8009628:	2b02      	cmp	r3, #2
 800962a:	d10d      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009632:	d109      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009634:	4b78      	ldr	r3, [pc, #480]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	08db      	lsrs	r3, r3, #3
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	4a77      	ldr	r2, [pc, #476]	; (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
 8009644:	637b      	str	r3, [r7, #52]	; 0x34
 8009646:	e011      	b.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8009648:	4b73      	ldr	r3, [pc, #460]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009654:	d106      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800965c:	d102      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800965e:	4b70      	ldr	r3, [pc, #448]	; (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009660:	637b      	str	r3, [r7, #52]	; 0x34
 8009662:	e003      	b.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8009664:	2300      	movs	r3, #0
 8009666:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009668:	f001 b831 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800966c:	f001 b82f 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009670:	4b69      	ldr	r3, [pc, #420]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009672:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009676:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800967a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	2b00      	cmp	r3, #0
 8009680:	d104      	bne.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009682:	f7fc f897 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8009686:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009688:	f001 b821 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009692:	d108      	bne.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009694:	f107 0308 	add.w	r3, r7, #8
 8009698:	4618      	mov	r0, r3
 800969a:	f7fe fb63 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096a2:	f001 b814 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80096a6:	4b5c      	ldr	r3, [pc, #368]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d10e      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096b8:	d10a      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096ba:	4b57      	ldr	r3, [pc, #348]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	08db      	lsrs	r3, r3, #3
 80096c0:	f003 0303 	and.w	r3, r3, #3
 80096c4:	4a55      	ldr	r2, [pc, #340]	; (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80096c6:	fa22 f303 	lsr.w	r3, r2, r3
 80096ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096cc:	f000 bfff 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096d4:	f000 bffb 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80096d8:	4b4f      	ldr	r3, [pc, #316]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80096de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096e2:	633b      	str	r3, [r7, #48]	; 0x30
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80096ea:	d056      	beq.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80096f2:	f200 808b 	bhi.w	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096fc:	d03e      	beq.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009704:	f200 8082 	bhi.w	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800970e:	d027      	beq.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009716:	d879      	bhi.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800971e:	d017      	beq.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009726:	d871      	bhi.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	2b00      	cmp	r3, #0
 800972c:	d004      	beq.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009734:	d004      	beq.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8009736:	e069      	b.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009738:	f7fc f868 	bl	800580c <HAL_RCC_GetPCLK3Freq>
 800973c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800973e:	e068      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009740:	f107 0314 	add.w	r3, r7, #20
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe f9a3 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800974e:	e060      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009750:	f107 0308 	add.w	r3, r7, #8
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe fb05 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800975e:	e058      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009760:	4b2d      	ldr	r3, [pc, #180]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b02      	cmp	r3, #2
 800976c:	d103      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800976e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009774:	e04d      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800977a:	e04a      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800977c:	4b26      	ldr	r3, [pc, #152]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800977e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800978a:	d103      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800978c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009790:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009792:	e03e      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009798:	e03b      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800979a:	4b1f      	ldr	r3, [pc, #124]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800979c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80097a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097a6:	4b1c      	ldr	r3, [pc, #112]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d10c      	bne.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80097b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d109      	bne.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097b8:	4b17      	ldr	r3, [pc, #92]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	08db      	lsrs	r3, r3, #3
 80097be:	f003 0303 	and.w	r3, r3, #3
 80097c2:	4a16      	ldr	r2, [pc, #88]	; (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80097c4:	fa22 f303 	lsr.w	r3, r2, r3
 80097c8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ca:	e01e      	b.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097cc:	4b12      	ldr	r3, [pc, #72]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d8:	d106      	bne.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80097da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e0:	d102      	bne.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097e2:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80097e4:	637b      	str	r3, [r7, #52]	; 0x34
 80097e6:	e010      	b.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097e8:	4b0b      	ldr	r3, [pc, #44]	; (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097f4:	d106      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097fc:	d102      	bne.n	8009804 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009800:	637b      	str	r3, [r7, #52]	; 0x34
 8009802:	e002      	b.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009808:	e003      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800980a:	e002      	b.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009810:	bf00      	nop
          }
        }
        break;
 8009812:	f000 bf5c 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009816:	bf00      	nop
 8009818:	44020c00 	.word	0x44020c00
 800981c:	03d09000 	.word	0x03d09000
 8009820:	003d0900 	.word	0x003d0900
 8009824:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009828:	4b9e      	ldr	r3, [pc, #632]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800982a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800982e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009832:	633b      	str	r3, [r7, #48]	; 0x30
 8009834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009836:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800983a:	d056      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009842:	f200 808b 	bhi.w	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800984c:	d03e      	beq.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009854:	f200 8082 	bhi.w	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800985e:	d027      	beq.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009862:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009866:	d879      	bhi.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800986e:	d017      	beq.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009876:	d871      	bhi.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009884:	d004      	beq.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8009886:	e069      	b.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009888:	f7fb ff94 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 800988c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800988e:	e068      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009890:	f107 0314 	add.w	r3, r7, #20
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe f8fb 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800989e:	e060      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098a0:	f107 0308 	add.w	r3, r7, #8
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fa5d 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80098ae:	e058      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80098b0:	4b7c      	ldr	r3, [pc, #496]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d103      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80098be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098c2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80098c4:	e04d      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80098ca:	e04a      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80098cc:	4b75      	ldr	r3, [pc, #468]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80098d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098da:	d103      	bne.n	80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80098dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80098e0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80098e2:	e03e      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80098e8:	e03b      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098ea:	4b6e      	ldr	r3, [pc, #440]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80098f4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098f6:	4b6b      	ldr	r3, [pc, #428]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0302 	and.w	r3, r3, #2
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d10c      	bne.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8009902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d109      	bne.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009908:	4b66      	ldr	r3, [pc, #408]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	08db      	lsrs	r3, r3, #3
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	4a65      	ldr	r2, [pc, #404]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009914:	fa22 f303 	lsr.w	r3, r2, r3
 8009918:	637b      	str	r3, [r7, #52]	; 0x34
 800991a:	e01e      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800991c:	4b61      	ldr	r3, [pc, #388]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009928:	d106      	bne.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009930:	d102      	bne.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009932:	4b5e      	ldr	r3, [pc, #376]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009934:	637b      	str	r3, [r7, #52]	; 0x34
 8009936:	e010      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009938:	4b5a      	ldr	r3, [pc, #360]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009944:	d106      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800994c:	d102      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800994e:	4b58      	ldr	r3, [pc, #352]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009950:	637b      	str	r3, [r7, #52]	; 0x34
 8009952:	e002      	b.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009958:	e003      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800995a:	e002      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800995c:	2300      	movs	r3, #0
 800995e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009960:	bf00      	nop
          }
        }
        break;
 8009962:	f000 beb4 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009966:	4b4f      	ldr	r3, [pc, #316]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009968:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800996c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009970:	633b      	str	r3, [r7, #48]	; 0x30
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009978:	d056      	beq.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009980:	f200 808b 	bhi.w	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800998a:	d03e      	beq.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009992:	f200 8082 	bhi.w	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800999c:	d027      	beq.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099a4:	d879      	bhi.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ac:	d017      	beq.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099b4:	d871      	bhi.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d004      	beq.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c2:	d004      	beq.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80099c4:	e069      	b.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80099c6:	f7fb ff21 	bl	800580c <HAL_RCC_GetPCLK3Freq>
 80099ca:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80099cc:	e068      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ce:	f107 0314 	add.w	r3, r7, #20
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe f85c 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80099dc:	e060      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099de:	f107 0308 	add.w	r3, r7, #8
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe f9be 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80099ec:	e058      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80099ee:	4b2d      	ldr	r3, [pc, #180]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80099f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d103      	bne.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80099fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009a02:	e04d      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a08:	e04a      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009a0a:	4b26      	ldr	r3, [pc, #152]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a18:	d103      	bne.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8009a1a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009a1e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009a20:	e03e      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a26:	e03b      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a28:	4b1e      	ldr	r3, [pc, #120]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a2e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009a32:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a34:	4b1b      	ldr	r3, [pc, #108]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 0302 	and.w	r3, r3, #2
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d10c      	bne.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d109      	bne.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a46:	4b17      	ldr	r3, [pc, #92]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	08db      	lsrs	r3, r3, #3
 8009a4c:	f003 0303 	and.w	r3, r3, #3
 8009a50:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009a52:	fa22 f303 	lsr.w	r3, r2, r3
 8009a56:	637b      	str	r3, [r7, #52]	; 0x34
 8009a58:	e01e      	b.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a5a:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a66:	d106      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a6e:	d102      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a70:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009a72:	637b      	str	r3, [r7, #52]	; 0x34
 8009a74:	e010      	b.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a82:	d106      	bne.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a8a:	d102      	bne.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a8c:	4b08      	ldr	r3, [pc, #32]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a90:	e002      	b.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009a96:	e003      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009a98:	e002      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009a9e:	bf00      	nop
          }
        }
        break;
 8009aa0:	f000 be15 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009aa4:	44020c00 	.word	0x44020c00
 8009aa8:	03d09000 	.word	0x03d09000
 8009aac:	003d0900 	.word	0x003d0900
 8009ab0:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009ab4:	4b9e      	ldr	r3, [pc, #632]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ab6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009aba:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8009abe:	633b      	str	r3, [r7, #48]	; 0x30
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009ac6:	d056      	beq.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009ace:	f200 808b 	bhi.w	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ad8:	d03e      	beq.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ae0:	f200 8082 	bhi.w	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009aea:	d027      	beq.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009af2:	d879      	bhi.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009afa:	d017      	beq.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b02:	d871      	bhi.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d004      	beq.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b10:	d004      	beq.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009b12:	e069      	b.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009b14:	f7fb fe7a 	bl	800580c <HAL_RCC_GetPCLK3Freq>
 8009b18:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009b1a:	e068      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b1c:	f107 0314 	add.w	r3, r7, #20
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fd ffb5 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b2a:	e060      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b2c:	f107 0308 	add.w	r3, r7, #8
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe f917 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b3a:	e058      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009b3c:	4b7c      	ldr	r3, [pc, #496]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b42:	f003 0302 	and.w	r3, r3, #2
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d103      	bne.n	8009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b4e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b50:	e04d      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b56:	e04a      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009b58:	4b75      	ldr	r3, [pc, #468]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b66:	d103      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009b68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009b6c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b6e:	e03e      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b74:	e03b      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b76:	4b6e      	ldr	r3, [pc, #440]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b7c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009b80:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b82:	4b6b      	ldr	r3, [pc, #428]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0302 	and.w	r3, r3, #2
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d10c      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d109      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b94:	4b66      	ldr	r3, [pc, #408]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	08db      	lsrs	r3, r3, #3
 8009b9a:	f003 0303 	and.w	r3, r3, #3
 8009b9e:	4a65      	ldr	r2, [pc, #404]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ba6:	e01e      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ba8:	4b61      	ldr	r3, [pc, #388]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bb4:	d106      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bbc:	d102      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009bbe:	4b5e      	ldr	r3, [pc, #376]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc2:	e010      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bc4:	4b5a      	ldr	r3, [pc, #360]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bd0:	d106      	bne.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bd8:	d102      	bne.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009bda:	4b58      	ldr	r3, [pc, #352]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8009bde:	e002      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009be4:	e003      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009be6:	e002      	b.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009bec:	bf00      	nop
          }
        }
        break;
 8009bee:	f000 bd6e 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009bf2:	4b4f      	ldr	r3, [pc, #316]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bf4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009bf8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009c04:	d056      	beq.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009c0c:	f200 808b 	bhi.w	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c16:	d03e      	beq.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c1e:	f200 8082 	bhi.w	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c28:	d027      	beq.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c30:	d879      	bhi.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c38:	d017      	beq.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c40:	d871      	bhi.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c4e:	d004      	beq.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009c50:	e069      	b.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009c52:	f7fb fddb 	bl	800580c <HAL_RCC_GetPCLK3Freq>
 8009c56:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009c58:	e068      	b.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c5a:	f107 0314 	add.w	r3, r7, #20
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fd ff16 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c68:	e060      	b.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c6a:	f107 0308 	add.w	r3, r7, #8
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe f878 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c78:	e058      	b.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009c7a:	4b2d      	ldr	r3, [pc, #180]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d103      	bne.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c8c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009c8e:	e04d      	b.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009c90:	2300      	movs	r3, #0
 8009c92:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c94:	e04a      	b.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009c96:	4b26      	ldr	r3, [pc, #152]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ca4:	d103      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009ca6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009caa:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009cac:	e03e      	b.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009cb2:	e03b      	b.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cb4:	4b1e      	ldr	r3, [pc, #120]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009cba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cc0:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d10c      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d109      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cd2:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	08db      	lsrs	r3, r3, #3
 8009cd8:	f003 0303 	and.w	r3, r3, #3
 8009cdc:	4a15      	ldr	r2, [pc, #84]	; (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009cde:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce4:	e01e      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ce6:	4b12      	ldr	r3, [pc, #72]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cf2:	d106      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cfa:	d102      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009cfc:	4b0e      	ldr	r3, [pc, #56]	; (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8009d00:	e010      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d02:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d0e:	d106      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d16:	d102      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d18:	4b08      	ldr	r3, [pc, #32]	; (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d1c:	e002      	b.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009d22:	e003      	b.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009d24:	e002      	b.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009d2a:	bf00      	nop
          }
        }
        break;
 8009d2c:	f000 bccf 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d30:	44020c00 	.word	0x44020c00
 8009d34:	03d09000 	.word	0x03d09000
 8009d38:	003d0900 	.word	0x003d0900
 8009d3c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009d40:	4b9e      	ldr	r3, [pc, #632]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009d46:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d52:	d056      	beq.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d5a:	f200 808b 	bhi.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d64:	d03e      	beq.n	8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6c:	f200 8082 	bhi.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d76:	d027      	beq.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d7e:	d879      	bhi.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d86:	d017      	beq.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d8e:	d871      	bhi.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d9c:	d004      	beq.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009d9e:	e069      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009da0:	f7fb fd34 	bl	800580c <HAL_RCC_GetPCLK3Freq>
 8009da4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009da6:	e068      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009da8:	f107 0314 	add.w	r3, r7, #20
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fd fe6f 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009db6:	e060      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009db8:	f107 0308 	add.w	r3, r7, #8
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fd ffd1 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009dc6:	e058      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009dc8:	4b7c      	ldr	r3, [pc, #496]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d103      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dda:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009ddc:	e04d      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009de2:	e04a      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009de4:	4b75      	ldr	r3, [pc, #468]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009df2:	d103      	bne.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009df4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009df8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009dfa:	e03e      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009e00:	e03b      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e02:	4b6e      	ldr	r3, [pc, #440]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e08:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009e0c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e0e:	4b6b      	ldr	r3, [pc, #428]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d10c      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d109      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e20:	4b66      	ldr	r3, [pc, #408]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	08db      	lsrs	r3, r3, #3
 8009e26:	f003 0303 	and.w	r3, r3, #3
 8009e2a:	4a65      	ldr	r2, [pc, #404]	; (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e30:	637b      	str	r3, [r7, #52]	; 0x34
 8009e32:	e01e      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e34:	4b61      	ldr	r3, [pc, #388]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e40:	d106      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e48:	d102      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e4a:	4b5e      	ldr	r3, [pc, #376]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e4e:	e010      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e50:	4b5a      	ldr	r3, [pc, #360]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e5c:	d106      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e64:	d102      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e66:	4b58      	ldr	r3, [pc, #352]	; (8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009e68:	637b      	str	r3, [r7, #52]	; 0x34
 8009e6a:	e002      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009e70:	e003      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009e72:	e002      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009e78:	bf00      	nop
          }
        }
        break;
 8009e7a:	f000 bc28 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009e7e:	4b4f      	ldr	r3, [pc, #316]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e88:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009e8a:	4b4c      	ldr	r3, [pc, #304]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e96:	d106      	bne.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d103      	bne.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009e9e:	4b4a      	ldr	r3, [pc, #296]	; (8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009ea0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009ea2:	f000 bc14 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eac:	d108      	bne.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eae:	f107 0320 	add.w	r3, r7, #32
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fd fc82 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ebc:	f000 bc07 	b.w	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ec6:	d107      	bne.n	8009ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec8:	f107 0314 	add.w	r3, r7, #20
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fd fddf 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ed6:	e3fa      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009edc:	e3f7      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009ede:	4b37      	ldr	r3, [pc, #220]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ee4:	f003 0307 	and.w	r3, r3, #7
 8009ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d861      	bhi.n	8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009ef0:	a201      	add	r2, pc, #4	; (adr r2, 8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef6:	bf00      	nop
 8009ef8:	08009f0d 	.word	0x08009f0d
 8009efc:	08009f1d 	.word	0x08009f1d
 8009f00:	08009f2d 	.word	0x08009f2d
 8009f04:	08009f3d 	.word	0x08009f3d
 8009f08:	08009f43 	.word	0x08009f43
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f0c:	f107 0320 	add.w	r3, r7, #32
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fd fc53 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f1a:	e04e      	b.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1c:	f107 0314 	add.w	r3, r7, #20
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fd fdb5 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f2a:	e046      	b.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f2c:	f107 0308 	add.w	r3, r7, #8
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fd ff17 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f3a:	e03e      	b.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009f3c:	4b23      	ldr	r3, [pc, #140]	; (8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009f3e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f40:	e03b      	b.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f42:	4b1e      	ldr	r3, [pc, #120]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f48:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f4e:	4b1b      	ldr	r3, [pc, #108]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 0302 	and.w	r3, r3, #2
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d10c      	bne.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d109      	bne.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f60:	4b16      	ldr	r3, [pc, #88]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	08db      	lsrs	r3, r3, #3
 8009f66:	f003 0303 	and.w	r3, r3, #3
 8009f6a:	4a15      	ldr	r2, [pc, #84]	; (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f70:	637b      	str	r3, [r7, #52]	; 0x34
 8009f72:	e01e      	b.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f74:	4b11      	ldr	r3, [pc, #68]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f80:	d106      	bne.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f88:	d102      	bne.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009f8a:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f8e:	e010      	b.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f90:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f9c:	d106      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fa4:	d102      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009fa6:	4b08      	ldr	r3, [pc, #32]	; (8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8009faa:	e002      	b.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009fb0:	e003      	b.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009fb2:	e002      	b.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009fb8:	bf00      	nop
          }
        }
        break;
 8009fba:	e388      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009fbc:	44020c00 	.word	0x44020c00
 8009fc0:	03d09000 	.word	0x03d09000
 8009fc4:	003d0900 	.word	0x003d0900
 8009fc8:	007a1200 	.word	0x007a1200
 8009fcc:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009fd0:	4ba9      	ldr	r3, [pc, #676]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fda:	633b      	str	r3, [r7, #48]	; 0x30
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	f200 809a 	bhi.w	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	0800a071 	.word	0x0800a071
 8009ff0:	0800a119 	.word	0x0800a119
 8009ff4:	0800a119 	.word	0x0800a119
 8009ff8:	0800a119 	.word	0x0800a119
 8009ffc:	0800a119 	.word	0x0800a119
 800a000:	0800a119 	.word	0x0800a119
 800a004:	0800a119 	.word	0x0800a119
 800a008:	0800a119 	.word	0x0800a119
 800a00c:	0800a081 	.word	0x0800a081
 800a010:	0800a119 	.word	0x0800a119
 800a014:	0800a119 	.word	0x0800a119
 800a018:	0800a119 	.word	0x0800a119
 800a01c:	0800a119 	.word	0x0800a119
 800a020:	0800a119 	.word	0x0800a119
 800a024:	0800a119 	.word	0x0800a119
 800a028:	0800a119 	.word	0x0800a119
 800a02c:	0800a091 	.word	0x0800a091
 800a030:	0800a119 	.word	0x0800a119
 800a034:	0800a119 	.word	0x0800a119
 800a038:	0800a119 	.word	0x0800a119
 800a03c:	0800a119 	.word	0x0800a119
 800a040:	0800a119 	.word	0x0800a119
 800a044:	0800a119 	.word	0x0800a119
 800a048:	0800a119 	.word	0x0800a119
 800a04c:	0800a0a1 	.word	0x0800a0a1
 800a050:	0800a119 	.word	0x0800a119
 800a054:	0800a119 	.word	0x0800a119
 800a058:	0800a119 	.word	0x0800a119
 800a05c:	0800a119 	.word	0x0800a119
 800a060:	0800a119 	.word	0x0800a119
 800a064:	0800a119 	.word	0x0800a119
 800a068:	0800a119 	.word	0x0800a119
 800a06c:	0800a0a7 	.word	0x0800a0a7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a070:	f107 0320 	add.w	r3, r7, #32
 800a074:	4618      	mov	r0, r3
 800a076:	f7fd fba1 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a07e:	e04e      	b.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a080:	f107 0314 	add.w	r3, r7, #20
 800a084:	4618      	mov	r0, r3
 800a086:	f7fd fd03 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a08e:	e046      	b.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a090:	f107 0308 	add.w	r3, r7, #8
 800a094:	4618      	mov	r0, r3
 800a096:	f7fd fe65 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a09e:	e03e      	b.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a0a0:	4b76      	ldr	r3, [pc, #472]	; (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a0a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a0a4:	e03b      	b.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0a6:	4b74      	ldr	r3, [pc, #464]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a0ac:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a0b0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0b2:	4b71      	ldr	r3, [pc, #452]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d10c      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d109      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0c4:	4b6c      	ldr	r3, [pc, #432]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	08db      	lsrs	r3, r3, #3
 800a0ca:	f003 0303 	and.w	r3, r3, #3
 800a0ce:	4a6c      	ldr	r2, [pc, #432]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0d6:	e01e      	b.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0d8:	4b67      	ldr	r3, [pc, #412]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0e4:	d106      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ec:	d102      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a0ee:	4b65      	ldr	r3, [pc, #404]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a0f2:	e010      	b.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0f4:	4b60      	ldr	r3, [pc, #384]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a100:	d106      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a108:	d102      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a10a:	4b5f      	ldr	r3, [pc, #380]	; (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a10c:	637b      	str	r3, [r7, #52]	; 0x34
 800a10e:	e002      	b.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a114:	e003      	b.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800a116:	e002      	b.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a11c:	bf00      	nop
          }
        }
        break;
 800a11e:	e2d6      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a120:	4b55      	ldr	r3, [pc, #340]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a126:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a12a:	633b      	str	r3, [r7, #48]	; 0x30
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a132:	d031      	beq.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800a134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a13a:	d866      	bhi.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	2bc0      	cmp	r3, #192	; 0xc0
 800a140:	d027      	beq.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	2bc0      	cmp	r3, #192	; 0xc0
 800a146:	d860      	bhi.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	2b80      	cmp	r3, #128	; 0x80
 800a14c:	d019      	beq.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	2b80      	cmp	r3, #128	; 0x80
 800a152:	d85a      	bhi.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	2b40      	cmp	r3, #64	; 0x40
 800a15e:	d008      	beq.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800a160:	e053      	b.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a162:	f107 0320 	add.w	r3, r7, #32
 800a166:	4618      	mov	r0, r3
 800a168:	f7fd fb28 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a170:	e04e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a172:	f107 0314 	add.w	r3, r7, #20
 800a176:	4618      	mov	r0, r3
 800a178:	f7fd fc8a 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a180:	e046      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a182:	f107 0308 	add.w	r3, r7, #8
 800a186:	4618      	mov	r0, r3
 800a188:	f7fd fdec 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a190:	e03e      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a192:	4b3a      	ldr	r3, [pc, #232]	; (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a194:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a196:	e03b      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a198:	4b37      	ldr	r3, [pc, #220]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a19a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a19e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a1a2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1a4:	4b34      	ldr	r3, [pc, #208]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 0302 	and.w	r3, r3, #2
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d10c      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d109      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1b6:	4b30      	ldr	r3, [pc, #192]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	08db      	lsrs	r3, r3, #3
 800a1bc:	f003 0303 	and.w	r3, r3, #3
 800a1c0:	4a2f      	ldr	r2, [pc, #188]	; (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a1c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a1c8:	e01e      	b.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1ca:	4b2b      	ldr	r3, [pc, #172]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d6:	d106      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1de:	d102      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a1e0:	4b28      	ldr	r3, [pc, #160]	; (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a1e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a1e4:	e010      	b.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1e6:	4b24      	ldr	r3, [pc, #144]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1f2:	d106      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1fa:	d102      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a1fc:	4b22      	ldr	r3, [pc, #136]	; (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a1fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a200:	e002      	b.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a206:	e003      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800a208:	e002      	b.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a20e:	bf00      	nop
          }
        }
        break;
 800a210:	e25d      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a212:	4b19      	ldr	r3, [pc, #100]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a218:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800a21c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	2b00      	cmp	r3, #0
 800a222:	d103      	bne.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a224:	f7fb fadc 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 800a228:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a22a:	e250      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a22c:	4b12      	ldr	r3, [pc, #72]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a238:	d10b      	bne.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a240:	d107      	bne.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a242:	f107 0314 	add.w	r3, r7, #20
 800a246:	4618      	mov	r0, r3
 800a248:	f7fd fc22 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	637b      	str	r3, [r7, #52]	; 0x34
 800a250:	e04f      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a25a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a25e:	d115      	bne.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a266:	d111      	bne.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a268:	f107 0308 	add.w	r3, r7, #8
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fd fd79 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	637b      	str	r3, [r7, #52]	; 0x34
 800a276:	e03c      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800a278:	44020c00 	.word	0x44020c00
 800a27c:	00bb8000 	.word	0x00bb8000
 800a280:	03d09000 	.word	0x03d09000
 800a284:	003d0900 	.word	0x003d0900
 800a288:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800a28c:	4b94      	ldr	r3, [pc, #592]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0302 	and.w	r3, r3, #2
 800a294:	2b02      	cmp	r3, #2
 800a296:	d10d      	bne.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a29e:	d109      	bne.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a2a0:	4b8f      	ldr	r3, [pc, #572]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	08db      	lsrs	r3, r3, #3
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	4a8e      	ldr	r2, [pc, #568]	; (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2b2:	e01e      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800a2b4:	4b8a      	ldr	r3, [pc, #552]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2c0:	d106      	bne.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2c8:	d102      	bne.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800a2ca:	4b87      	ldr	r3, [pc, #540]	; (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ce:	e010      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800a2d0:	4b83      	ldr	r3, [pc, #524]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2dc:	d106      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a2e4:	d102      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800a2e6:	4b81      	ldr	r3, [pc, #516]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a2e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ea:	e002      	b.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2f0:	e1ed      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a2f2:	e1ec      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800a2f4:	4b7a      	ldr	r3, [pc, #488]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2fa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a2fe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	2b00      	cmp	r3, #0
 800a304:	d103      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a306:	f7fb fa81 	bl	800580c <HAL_RCC_GetPCLK3Freq>
 800a30a:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a30c:	e1df      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800a30e:	4b74      	ldr	r3, [pc, #464]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a31a:	d10b      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a322:	d107      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a324:	f107 0314 	add.w	r3, r7, #20
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fd fbb1 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	637b      	str	r3, [r7, #52]	; 0x34
 800a332:	e045      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800a334:	4b6a      	ldr	r3, [pc, #424]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a33c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a340:	d10b      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a348:	d107      	bne.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a34a:	f107 0308 	add.w	r3, r7, #8
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fd fd08 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	637b      	str	r3, [r7, #52]	; 0x34
 800a358:	e032      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800a35a:	4b61      	ldr	r3, [pc, #388]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0302 	and.w	r3, r3, #2
 800a362:	2b02      	cmp	r3, #2
 800a364:	d10d      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800a366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a368:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a36c:	d109      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a36e:	4b5c      	ldr	r3, [pc, #368]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	08db      	lsrs	r3, r3, #3
 800a374:	f003 0303 	and.w	r3, r3, #3
 800a378:	4a5a      	ldr	r2, [pc, #360]	; (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a37a:	fa22 f303 	lsr.w	r3, r2, r3
 800a37e:	637b      	str	r3, [r7, #52]	; 0x34
 800a380:	e01e      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800a382:	4b57      	ldr	r3, [pc, #348]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a38a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a38e:	d106      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a396:	d102      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800a398:	4b53      	ldr	r3, [pc, #332]	; (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a39a:	637b      	str	r3, [r7, #52]	; 0x34
 800a39c:	e010      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a39e:	4b50      	ldr	r3, [pc, #320]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3aa:	d106      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a3b2:	d102      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800a3b4:	4b4d      	ldr	r3, [pc, #308]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a3b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a3b8:	e002      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a3be:	e186      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3c0:	e185      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a3c2:	4b47      	ldr	r3, [pc, #284]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3c8:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800a3cc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d103      	bne.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a3d4:	f7fb fa04 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 800a3d8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a3da:	e178      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800a3dc:	4b40      	ldr	r3, [pc, #256]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3e8:	d10b      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3f0:	d107      	bne.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f2:	f107 0314 	add.w	r3, r7, #20
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fd fb4a 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a400:	e045      	b.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800a402:	4b37      	ldr	r3, [pc, #220]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a40a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a40e:	d10b      	bne.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a416:	d107      	bne.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a418:	f107 0308 	add.w	r3, r7, #8
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fd fca1 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
 800a426:	e032      	b.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a428:	4b2d      	ldr	r3, [pc, #180]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b02      	cmp	r3, #2
 800a432:	d10d      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a436:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800a43a:	d109      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a43c:	4b28      	ldr	r3, [pc, #160]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	08db      	lsrs	r3, r3, #3
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	4a27      	ldr	r2, [pc, #156]	; (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a448:	fa22 f303 	lsr.w	r3, r2, r3
 800a44c:	637b      	str	r3, [r7, #52]	; 0x34
 800a44e:	e01e      	b.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a450:	4b23      	ldr	r3, [pc, #140]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a45c:	d106      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a464:	d102      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a466:	4b20      	ldr	r3, [pc, #128]	; (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a468:	637b      	str	r3, [r7, #52]	; 0x34
 800a46a:	e010      	b.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a46c:	4b1c      	ldr	r3, [pc, #112]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a478:	d106      	bne.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800a480:	d102      	bne.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a482:	4b1a      	ldr	r3, [pc, #104]	; (800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a484:	637b      	str	r3, [r7, #52]	; 0x34
 800a486:	e002      	b.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a48c:	e11f      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a48e:	e11e      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a490:	4b13      	ldr	r3, [pc, #76]	; (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a492:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a496:	f003 0303 	and.w	r3, r3, #3
 800a49a:	633b      	str	r3, [r7, #48]	; 0x30
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d85f      	bhi.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4b9 	.word	0x0800a4b9
 800a4ac:	0800a4c1 	.word	0x0800a4c1
 800a4b0:	0800a4d1 	.word	0x0800a4d1
 800a4b4:	0800a4f1 	.word	0x0800a4f1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a4b8:	f7fb f960 	bl	800577c <HAL_RCC_GetHCLKFreq>
 800a4bc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800a4be:	e053      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4c0:	f107 0320 	add.w	r3, r7, #32
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fd f979 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4ce:	e04b      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4d0:	f107 0314 	add.w	r3, r7, #20
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fd fadb 	bl	8007a90 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4de:	e043      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a4e0:	44020c00 	.word	0x44020c00
 800a4e4:	03d09000 	.word	0x03d09000
 800a4e8:	003d0900 	.word	0x003d0900
 800a4ec:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4f0:	4b79      	ldr	r3, [pc, #484]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a4f6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4fc:	4b76      	ldr	r3, [pc, #472]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	2b02      	cmp	r3, #2
 800a506:	d10c      	bne.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d109      	bne.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a50e:	4b72      	ldr	r3, [pc, #456]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	08db      	lsrs	r3, r3, #3
 800a514:	f003 0303 	and.w	r3, r3, #3
 800a518:	4a70      	ldr	r2, [pc, #448]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a51a:	fa22 f303 	lsr.w	r3, r2, r3
 800a51e:	637b      	str	r3, [r7, #52]	; 0x34
 800a520:	e01e      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a522:	4b6d      	ldr	r3, [pc, #436]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a52a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a52e:	d106      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a536:	d102      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a538:	4b69      	ldr	r3, [pc, #420]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a53a:	637b      	str	r3, [r7, #52]	; 0x34
 800a53c:	e010      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a53e:	4b66      	ldr	r3, [pc, #408]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a54a:	d106      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a552:	d102      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a554:	4b63      	ldr	r3, [pc, #396]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a556:	637b      	str	r3, [r7, #52]	; 0x34
 800a558:	e002      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a55e:	e003      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a560:	e002      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a562:	2300      	movs	r3, #0
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a566:	bf00      	nop
          }
        }
        break;
 800a568:	e0b1      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a56a:	4b5b      	ldr	r3, [pc, #364]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a56c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a570:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a574:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a576:	4b58      	ldr	r3, [pc, #352]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a57c:	f003 0302 	and.w	r3, r3, #2
 800a580:	2b02      	cmp	r3, #2
 800a582:	d106      	bne.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	2b00      	cmp	r3, #0
 800a588:	d103      	bne.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a58a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a58e:	637b      	str	r3, [r7, #52]	; 0x34
 800a590:	e01f      	b.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a592:	4b51      	ldr	r3, [pc, #324]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a59c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5a0:	d106      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	2b40      	cmp	r3, #64	; 0x40
 800a5a6:	d103      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a5a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ae:	e010      	b.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a5b0:	4b49      	ldr	r3, [pc, #292]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5bc:	d106      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	2b80      	cmp	r3, #128	; 0x80
 800a5c2:	d103      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a5c4:	f248 0312 	movw	r3, #32786	; 0x8012
 800a5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ca:	e002      	b.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800a5d0:	e07d      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a5d2:	e07c      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a5d4:	4b40      	ldr	r3, [pc, #256]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a5de:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a5e0:	4b3d      	ldr	r3, [pc, #244]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ec:	d105      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a5f4:	4b3c      	ldr	r3, [pc, #240]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5f8:	e031      	b.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a5fa:	4b37      	ldr	r3, [pc, #220]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a606:	d10a      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	2b10      	cmp	r3, #16
 800a60c:	d107      	bne.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a60e:	f107 0320 	add.w	r3, r7, #32
 800a612:	4618      	mov	r0, r3
 800a614:	f7fd f8d2 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	637b      	str	r3, [r7, #52]	; 0x34
 800a61c:	e01f      	b.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a61e:	4b2e      	ldr	r3, [pc, #184]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a624:	f003 0302 	and.w	r3, r3, #2
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d106      	bne.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d103      	bne.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a636:	637b      	str	r3, [r7, #52]	; 0x34
 800a638:	e011      	b.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a63a:	4b27      	ldr	r3, [pc, #156]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a63c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a648:	d106      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	2b30      	cmp	r3, #48	; 0x30
 800a64e:	d103      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a650:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a654:	637b      	str	r3, [r7, #52]	; 0x34
 800a656:	e002      	b.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800a65c:	e037      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a65e:	e036      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a660:	4b1d      	ldr	r3, [pc, #116]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a662:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a666:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a66a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	2b10      	cmp	r3, #16
 800a670:	d107      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a672:	f107 0320 	add.w	r3, r7, #32
 800a676:	4618      	mov	r0, r3
 800a678:	f7fd f8a0 	bl	80077bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800a680:	e025      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a68a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a68e:	d10a      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	2b20      	cmp	r3, #32
 800a694:	d107      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a696:	f107 0308 	add.w	r3, r7, #8
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fd fb62 	bl	8007d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6a4:	e00f      	b.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a6a6:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b2:	d105      	bne.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	2b30      	cmp	r3, #48	; 0x30
 800a6b8:	d102      	bne.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a6ba:	4b0b      	ldr	r3, [pc, #44]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a6be:	e002      	b.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800a6c4:	e003      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6c6:	e002      	b.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a6cc:	bf00      	nop
    }
  }

  return (frequency);
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	373c      	adds	r7, #60	; 0x3c
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd90      	pop	{r4, r7, pc}
 800a6d8:	44020c00 	.word	0x44020c00
 800a6dc:	03d09000 	.word	0x03d09000
 800a6e0:	003d0900 	.word	0x003d0900
 800a6e4:	007a1200 	.word	0x007a1200
 800a6e8:	02dc6c00 	.word	0x02dc6c00

0800a6ec <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a6f4:	4b48      	ldr	r3, [pc, #288]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a47      	ldr	r2, [pc, #284]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a6fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a700:	f7f8 fb26 	bl	8002d50 <HAL_GetTick>
 800a704:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a706:	e008      	b.n	800a71a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a708:	f7f8 fb22 	bl	8002d50 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d901      	bls.n	800a71a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e07a      	b.n	800a810 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a71a:	4b3f      	ldr	r3, [pc, #252]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1f0      	bne.n	800a708 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a726:	4b3c      	ldr	r3, [pc, #240]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a72e:	f023 0303 	bic.w	r3, r3, #3
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6811      	ldr	r1, [r2, #0]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	6852      	ldr	r2, [r2, #4]
 800a73a:	0212      	lsls	r2, r2, #8
 800a73c:	430a      	orrs	r2, r1
 800a73e:	4936      	ldr	r1, [pc, #216]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a740:	4313      	orrs	r3, r2
 800a742:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	3b01      	subs	r3, #1
 800a74a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	3b01      	subs	r3, #1
 800a754:	025b      	lsls	r3, r3, #9
 800a756:	b29b      	uxth	r3, r3
 800a758:	431a      	orrs	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	3b01      	subs	r3, #1
 800a760:	041b      	lsls	r3, r3, #16
 800a762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a766:	431a      	orrs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	061b      	lsls	r3, r3, #24
 800a770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a774:	4928      	ldr	r1, [pc, #160]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a776:	4313      	orrs	r3, r2
 800a778:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a77a:	4b27      	ldr	r3, [pc, #156]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77e:	f023 020c 	bic.w	r2, r3, #12
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	4924      	ldr	r1, [pc, #144]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a788:	4313      	orrs	r3, r2
 800a78a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a78c:	4b22      	ldr	r3, [pc, #136]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	f023 0220 	bic.w	r2, r3, #32
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	69db      	ldr	r3, [r3, #28]
 800a798:	491f      	ldr	r1, [pc, #124]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a79e:	4b1e      	ldr	r3, [pc, #120]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	491c      	ldr	r1, [pc, #112]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a7ac:	4b1a      	ldr	r3, [pc, #104]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	4a19      	ldr	r2, [pc, #100]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7b2:	f023 0310 	bic.w	r3, r3, #16
 800a7b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a7b8:	4b17      	ldr	r3, [pc, #92]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	6a12      	ldr	r2, [r2, #32]
 800a7c8:	00d2      	lsls	r2, r2, #3
 800a7ca:	4913      	ldr	r1, [pc, #76]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a7d0:	4b11      	ldr	r3, [pc, #68]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	4a10      	ldr	r2, [pc, #64]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7d6:	f043 0310 	orr.w	r3, r3, #16
 800a7da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a7dc:	4b0e      	ldr	r3, [pc, #56]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a0d      	ldr	r2, [pc, #52]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a7e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a7e8:	f7f8 fab2 	bl	8002d50 <HAL_GetTick>
 800a7ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7ee:	e008      	b.n	800a802 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a7f0:	f7f8 faae 	bl	8002d50 <HAL_GetTick>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d901      	bls.n	800a802 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e006      	b.n	800a810 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a802:	4b05      	ldr	r3, [pc, #20]	; (800a818 <RCCEx_PLL2_Config+0x12c>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0f0      	beq.n	800a7f0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a80e:	2300      	movs	r3, #0

}
 800a810:	4618      	mov	r0, r3
 800a812:	3710      	adds	r7, #16
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	44020c00 	.word	0x44020c00

0800a81c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a824:	4b48      	ldr	r3, [pc, #288]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a47      	ldr	r2, [pc, #284]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a82a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a82e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a830:	f7f8 fa8e 	bl	8002d50 <HAL_GetTick>
 800a834:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a836:	e008      	b.n	800a84a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a838:	f7f8 fa8a 	bl	8002d50 <HAL_GetTick>
 800a83c:	4602      	mov	r2, r0
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	2b02      	cmp	r3, #2
 800a844:	d901      	bls.n	800a84a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e07a      	b.n	800a940 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a84a:	4b3f      	ldr	r3, [pc, #252]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f0      	bne.n	800a838 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a856:	4b3c      	ldr	r3, [pc, #240]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a85e:	f023 0303 	bic.w	r3, r3, #3
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6811      	ldr	r1, [r2, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6852      	ldr	r2, [r2, #4]
 800a86a:	0212      	lsls	r2, r2, #8
 800a86c:	430a      	orrs	r2, r1
 800a86e:	4936      	ldr	r1, [pc, #216]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a870:	4313      	orrs	r3, r2
 800a872:	630b      	str	r3, [r1, #48]	; 0x30
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	3b01      	subs	r3, #1
 800a87a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	3b01      	subs	r3, #1
 800a884:	025b      	lsls	r3, r3, #9
 800a886:	b29b      	uxth	r3, r3
 800a888:	431a      	orrs	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	3b01      	subs	r3, #1
 800a890:	041b      	lsls	r3, r3, #16
 800a892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a896:	431a      	orrs	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	061b      	lsls	r3, r3, #24
 800a8a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8a4:	4928      	ldr	r1, [pc, #160]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8aa:	4b27      	ldr	r3, [pc, #156]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ae:	f023 020c 	bic.w	r2, r3, #12
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	4924      	ldr	r1, [pc, #144]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a8bc:	4b22      	ldr	r3, [pc, #136]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c0:	f023 0220 	bic.w	r2, r3, #32
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	491f      	ldr	r1, [pc, #124]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a8ce:	4b1e      	ldr	r3, [pc, #120]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	491c      	ldr	r1, [pc, #112]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a8dc:	4b1a      	ldr	r3, [pc, #104]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e0:	4a19      	ldr	r2, [pc, #100]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8e2:	f023 0310 	bic.w	r3, r3, #16
 800a8e6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a8e8:	4b17      	ldr	r3, [pc, #92]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6a12      	ldr	r2, [r2, #32]
 800a8f8:	00d2      	lsls	r2, r2, #3
 800a8fa:	4913      	ldr	r1, [pc, #76]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a900:	4b11      	ldr	r3, [pc, #68]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a904:	4a10      	ldr	r2, [pc, #64]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a906:	f043 0310 	orr.w	r3, r3, #16
 800a90a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a90c:	4b0e      	ldr	r3, [pc, #56]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a0d      	ldr	r2, [pc, #52]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a916:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a918:	f7f8 fa1a 	bl	8002d50 <HAL_GetTick>
 800a91c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a91e:	e008      	b.n	800a932 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a920:	f7f8 fa16 	bl	8002d50 <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d901      	bls.n	800a932 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e006      	b.n	800a940 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a932:	4b05      	ldr	r3, [pc, #20]	; (800a948 <RCCEx_PLL3_Config+0x12c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0f0      	beq.n	800a920 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	44020c00 	.word	0x44020c00

0800a94c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800a958:	4b07      	ldr	r3, [pc, #28]	; (800a978 <HAL_RTCEx_BKUPWrite+0x2c>)
 800a95a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	4413      	add	r3, r2
 800a964:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	601a      	str	r2, [r3, #0]
}
 800a96c:	bf00      	nop
 800a96e:	371c      	adds	r7, #28
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	44007d00 	.word	0x44007d00

0800a97c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800a986:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <HAL_RTCEx_BKUPRead+0x28>)
 800a988:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	4413      	add	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	44007d00 	.word	0x44007d00

0800a9a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d101      	bne.n	800a9ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e049      	b.n	800aa4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d106      	bne.n	800a9d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f841 	bl	800aa56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	f000 fa60 	bl	800aeac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800aa5e:	bf00      	nop
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
	...

0800aa6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d001      	beq.n	800aa84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e07c      	b.n	800ab7e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2202      	movs	r2, #2
 800aa88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 0201 	orr.w	r2, r2, #1
 800aa9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a3a      	ldr	r2, [pc, #232]	; (800ab8c <HAL_TIM_Base_Start_IT+0x120>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d04a      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a39      	ldr	r2, [pc, #228]	; (800ab90 <HAL_TIM_Base_Start_IT+0x124>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d045      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab8:	d040      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aac2:	d03b      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a32      	ldr	r2, [pc, #200]	; (800ab94 <HAL_TIM_Base_Start_IT+0x128>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d036      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a31      	ldr	r2, [pc, #196]	; (800ab98 <HAL_TIM_Base_Start_IT+0x12c>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d031      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a2f      	ldr	r2, [pc, #188]	; (800ab9c <HAL_TIM_Base_Start_IT+0x130>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d02c      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a2e      	ldr	r2, [pc, #184]	; (800aba0 <HAL_TIM_Base_Start_IT+0x134>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d027      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a2c      	ldr	r2, [pc, #176]	; (800aba4 <HAL_TIM_Base_Start_IT+0x138>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d022      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a2b      	ldr	r2, [pc, #172]	; (800aba8 <HAL_TIM_Base_Start_IT+0x13c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d01d      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a29      	ldr	r2, [pc, #164]	; (800abac <HAL_TIM_Base_Start_IT+0x140>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d018      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a28      	ldr	r2, [pc, #160]	; (800abb0 <HAL_TIM_Base_Start_IT+0x144>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d013      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a26      	ldr	r2, [pc, #152]	; (800abb4 <HAL_TIM_Base_Start_IT+0x148>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d00e      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a25      	ldr	r2, [pc, #148]	; (800abb8 <HAL_TIM_Base_Start_IT+0x14c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d009      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a23      	ldr	r2, [pc, #140]	; (800abbc <HAL_TIM_Base_Start_IT+0x150>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d004      	beq.n	800ab3c <HAL_TIM_Base_Start_IT+0xd0>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a22      	ldr	r2, [pc, #136]	; (800abc0 <HAL_TIM_Base_Start_IT+0x154>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d115      	bne.n	800ab68 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689a      	ldr	r2, [r3, #8]
 800ab42:	4b20      	ldr	r3, [pc, #128]	; (800abc4 <HAL_TIM_Base_Start_IT+0x158>)
 800ab44:	4013      	ands	r3, r2
 800ab46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b06      	cmp	r3, #6
 800ab4c:	d015      	beq.n	800ab7a <HAL_TIM_Base_Start_IT+0x10e>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab54:	d011      	beq.n	800ab7a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f042 0201 	orr.w	r2, r2, #1
 800ab64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab66:	e008      	b.n	800ab7a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f042 0201 	orr.w	r2, r2, #1
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	e000      	b.n	800ab7c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	40012c00 	.word	0x40012c00
 800ab90:	50012c00 	.word	0x50012c00
 800ab94:	40000400 	.word	0x40000400
 800ab98:	50000400 	.word	0x50000400
 800ab9c:	40000800 	.word	0x40000800
 800aba0:	50000800 	.word	0x50000800
 800aba4:	40000c00 	.word	0x40000c00
 800aba8:	50000c00 	.word	0x50000c00
 800abac:	40013400 	.word	0x40013400
 800abb0:	50013400 	.word	0x50013400
 800abb4:	40001800 	.word	0x40001800
 800abb8:	50001800 	.word	0x50001800
 800abbc:	40014000 	.word	0x40014000
 800abc0:	50014000 	.word	0x50014000
 800abc4:	00010007 	.word	0x00010007

0800abc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	f003 0302 	and.w	r3, r3, #2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d020      	beq.n	800ac2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f003 0302 	and.w	r3, r3, #2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d01b      	beq.n	800ac2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f06f 0202 	mvn.w	r2, #2
 800abfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f92c 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800ac18:	e005      	b.n	800ac26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f91e 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f92f 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f003 0304 	and.w	r3, r3, #4
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d020      	beq.n	800ac78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f003 0304 	and.w	r3, r3, #4
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d01b      	beq.n	800ac78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f06f 0204 	mvn.w	r2, #4
 800ac48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f906 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800ac64:	e005      	b.n	800ac72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f8f8 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f909 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f003 0308 	and.w	r3, r3, #8
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d020      	beq.n	800acc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f003 0308 	and.w	r3, r3, #8
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01b      	beq.n	800acc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f06f 0208 	mvn.w	r2, #8
 800ac94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2204      	movs	r2, #4
 800ac9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	f003 0303 	and.w	r3, r3, #3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f8e0 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800acb0:	e005      	b.n	800acbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f8d2 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f8e3 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f003 0310 	and.w	r3, r3, #16
 800acca:	2b00      	cmp	r3, #0
 800accc:	d020      	beq.n	800ad10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f003 0310 	and.w	r3, r3, #16
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d01b      	beq.n	800ad10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f06f 0210 	mvn.w	r2, #16
 800ace0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2208      	movs	r2, #8
 800ace6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f8ba 	bl	800ae70 <HAL_TIM_IC_CaptureCallback>
 800acfc:	e005      	b.n	800ad0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f8ac 	bl	800ae5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f8bd 	bl	800ae84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00c      	beq.n	800ad34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f003 0301 	and.w	r3, r3, #1
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d007      	beq.n	800ad34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f06f 0201 	mvn.w	r2, #1
 800ad2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7f5 fecc 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00c      	beq.n	800ad58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d007      	beq.n	800ad58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f9d2 	bl	800b0fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00c      	beq.n	800ad7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d007      	beq.n	800ad7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ad74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f9ca 	bl	800b110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00c      	beq.n	800ada0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d007      	beq.n	800ada0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f87c 	bl	800ae98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	f003 0320 	and.w	r3, r3, #32
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00c      	beq.n	800adc4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f003 0320 	and.w	r3, r3, #32
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d007      	beq.n	800adc4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f06f 0220 	mvn.w	r2, #32
 800adbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f992 	bl	800b0e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00c      	beq.n	800ade8 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d007      	beq.n	800ade8 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ade0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f99e 	bl	800b124 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00c      	beq.n	800ae0c <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d007      	beq.n	800ae0c <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ae04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f996 	bl	800b138 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00c      	beq.n	800ae30 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d007      	beq.n	800ae30 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ae28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f98e 	bl	800b14c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00c      	beq.n	800ae54 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d007      	beq.n	800ae54 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ae4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f986 	bl	800b160 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae54:	bf00      	nop
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a74      	ldr	r2, [pc, #464]	; (800b090 <TIM_Base_SetConfig+0x1e4>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d02b      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a73      	ldr	r2, [pc, #460]	; (800b094 <TIM_Base_SetConfig+0x1e8>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d027      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aed2:	d023      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeda:	d01f      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a6e      	ldr	r2, [pc, #440]	; (800b098 <TIM_Base_SetConfig+0x1ec>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d01b      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a6d      	ldr	r2, [pc, #436]	; (800b09c <TIM_Base_SetConfig+0x1f0>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d017      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a6c      	ldr	r2, [pc, #432]	; (800b0a0 <TIM_Base_SetConfig+0x1f4>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d013      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a6b      	ldr	r2, [pc, #428]	; (800b0a4 <TIM_Base_SetConfig+0x1f8>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d00f      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a6a      	ldr	r2, [pc, #424]	; (800b0a8 <TIM_Base_SetConfig+0x1fc>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d00b      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a69      	ldr	r2, [pc, #420]	; (800b0ac <TIM_Base_SetConfig+0x200>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d007      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a68      	ldr	r2, [pc, #416]	; (800b0b0 <TIM_Base_SetConfig+0x204>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d003      	beq.n	800af1c <TIM_Base_SetConfig+0x70>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a67      	ldr	r2, [pc, #412]	; (800b0b4 <TIM_Base_SetConfig+0x208>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d108      	bne.n	800af2e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a57      	ldr	r2, [pc, #348]	; (800b090 <TIM_Base_SetConfig+0x1e4>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d05b      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a56      	ldr	r2, [pc, #344]	; (800b094 <TIM_Base_SetConfig+0x1e8>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d057      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af44:	d053      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af4c:	d04f      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a51      	ldr	r2, [pc, #324]	; (800b098 <TIM_Base_SetConfig+0x1ec>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d04b      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a50      	ldr	r2, [pc, #320]	; (800b09c <TIM_Base_SetConfig+0x1f0>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d047      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a4f      	ldr	r2, [pc, #316]	; (800b0a0 <TIM_Base_SetConfig+0x1f4>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d043      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a4e      	ldr	r2, [pc, #312]	; (800b0a4 <TIM_Base_SetConfig+0x1f8>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d03f      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a4d      	ldr	r2, [pc, #308]	; (800b0a8 <TIM_Base_SetConfig+0x1fc>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d03b      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a4c      	ldr	r2, [pc, #304]	; (800b0ac <TIM_Base_SetConfig+0x200>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d037      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a4b      	ldr	r2, [pc, #300]	; (800b0b0 <TIM_Base_SetConfig+0x204>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d033      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a4a      	ldr	r2, [pc, #296]	; (800b0b4 <TIM_Base_SetConfig+0x208>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d02f      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a49      	ldr	r2, [pc, #292]	; (800b0b8 <TIM_Base_SetConfig+0x20c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d02b      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a48      	ldr	r2, [pc, #288]	; (800b0bc <TIM_Base_SetConfig+0x210>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d027      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a47      	ldr	r2, [pc, #284]	; (800b0c0 <TIM_Base_SetConfig+0x214>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d023      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a46      	ldr	r2, [pc, #280]	; (800b0c4 <TIM_Base_SetConfig+0x218>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d01f      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a45      	ldr	r2, [pc, #276]	; (800b0c8 <TIM_Base_SetConfig+0x21c>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d01b      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a44      	ldr	r2, [pc, #272]	; (800b0cc <TIM_Base_SetConfig+0x220>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d017      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a43      	ldr	r2, [pc, #268]	; (800b0d0 <TIM_Base_SetConfig+0x224>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d013      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a42      	ldr	r2, [pc, #264]	; (800b0d4 <TIM_Base_SetConfig+0x228>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d00f      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a41      	ldr	r2, [pc, #260]	; (800b0d8 <TIM_Base_SetConfig+0x22c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d00b      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a40      	ldr	r2, [pc, #256]	; (800b0dc <TIM_Base_SetConfig+0x230>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d007      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a3f      	ldr	r2, [pc, #252]	; (800b0e0 <TIM_Base_SetConfig+0x234>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d003      	beq.n	800afee <TIM_Base_SetConfig+0x142>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a3e      	ldr	r2, [pc, #248]	; (800b0e4 <TIM_Base_SetConfig+0x238>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d108      	bne.n	800b000 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	4313      	orrs	r3, r2
 800affe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	689a      	ldr	r2, [r3, #8]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a1a      	ldr	r2, [pc, #104]	; (800b090 <TIM_Base_SetConfig+0x1e4>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d023      	beq.n	800b074 <TIM_Base_SetConfig+0x1c8>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a19      	ldr	r2, [pc, #100]	; (800b094 <TIM_Base_SetConfig+0x1e8>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d01f      	beq.n	800b074 <TIM_Base_SetConfig+0x1c8>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a1e      	ldr	r2, [pc, #120]	; (800b0b0 <TIM_Base_SetConfig+0x204>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d01b      	beq.n	800b074 <TIM_Base_SetConfig+0x1c8>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a1d      	ldr	r2, [pc, #116]	; (800b0b4 <TIM_Base_SetConfig+0x208>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d017      	beq.n	800b074 <TIM_Base_SetConfig+0x1c8>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a22      	ldr	r2, [pc, #136]	; (800b0d0 <TIM_Base_SetConfig+0x224>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d013      	beq.n	800b074 <TIM_Base_SetConfig+0x1c8>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a21      	ldr	r2, [pc, #132]	; (800b0d4 <TIM_Base_SetConfig+0x228>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d00f      	beq.n	800b074 <TIM_Base_SetConfig+0x1c8>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a20      	ldr	r2, [pc, #128]	; (800b0d8 <TIM_Base_SetConfig+0x22c>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d00b      	beq.n	800b074 <TIM_Base_SetConfig+0x1c8>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a1f      	ldr	r2, [pc, #124]	; (800b0dc <TIM_Base_SetConfig+0x230>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d007      	beq.n	800b074 <TIM_Base_SetConfig+0x1c8>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a1e      	ldr	r2, [pc, #120]	; (800b0e0 <TIM_Base_SetConfig+0x234>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d003      	beq.n	800b074 <TIM_Base_SetConfig+0x1c8>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <TIM_Base_SetConfig+0x238>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d103      	bne.n	800b07c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	691a      	ldr	r2, [r3, #16]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	615a      	str	r2, [r3, #20]
}
 800b082:	bf00      	nop
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	40012c00 	.word	0x40012c00
 800b094:	50012c00 	.word	0x50012c00
 800b098:	40000400 	.word	0x40000400
 800b09c:	50000400 	.word	0x50000400
 800b0a0:	40000800 	.word	0x40000800
 800b0a4:	50000800 	.word	0x50000800
 800b0a8:	40000c00 	.word	0x40000c00
 800b0ac:	50000c00 	.word	0x50000c00
 800b0b0:	40013400 	.word	0x40013400
 800b0b4:	50013400 	.word	0x50013400
 800b0b8:	40001800 	.word	0x40001800
 800b0bc:	50001800 	.word	0x50001800
 800b0c0:	40001c00 	.word	0x40001c00
 800b0c4:	50001c00 	.word	0x50001c00
 800b0c8:	40002000 	.word	0x40002000
 800b0cc:	50002000 	.word	0x50002000
 800b0d0:	40014000 	.word	0x40014000
 800b0d4:	50014000 	.word	0x50014000
 800b0d8:	40014400 	.word	0x40014400
 800b0dc:	50014400 	.word	0x50014400
 800b0e0:	40014800 	.word	0x40014800
 800b0e4:	50014800 	.word	0x50014800

0800b0e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d101      	bne.n	800b186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	e042      	b.n	800b20c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d106      	bne.n	800b19e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7f5 fccd 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2224      	movs	r2, #36	; 0x24
 800b1a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f022 0201 	bic.w	r2, r2, #1
 800b1b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fe0a 	bl	800bdd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fc19 	bl	800b9fc <UART_SetConfig>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d101      	bne.n	800b1d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e01b      	b.n	800b20c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685a      	ldr	r2, [r3, #4]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	689a      	ldr	r2, [r3, #8]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f042 0201 	orr.w	r2, r2, #1
 800b202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fe89 	bl	800bf1c <UART_CheckIdleState>
 800b20a:	4603      	mov	r3, r0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08a      	sub	sp, #40	; 0x28
 800b218:	af02      	add	r7, sp, #8
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	603b      	str	r3, [r7, #0]
 800b220:	4613      	mov	r3, r2
 800b222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b22a:	2b20      	cmp	r3, #32
 800b22c:	f040 808b 	bne.w	800b346 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <HAL_UART_Transmit+0x28>
 800b236:	88fb      	ldrh	r3, [r7, #6]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d101      	bne.n	800b240 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e083      	b.n	800b348 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b24a:	2b80      	cmp	r3, #128	; 0x80
 800b24c:	d107      	bne.n	800b25e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b25c:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2221      	movs	r2, #33	; 0x21
 800b26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b26e:	f7f7 fd6f 	bl	8002d50 <HAL_GetTick>
 800b272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	88fa      	ldrh	r2, [r7, #6]
 800b278:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	88fa      	ldrh	r2, [r7, #6]
 800b280:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b28c:	d108      	bne.n	800b2a0 <HAL_UART_Transmit+0x8c>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d104      	bne.n	800b2a0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b296:	2300      	movs	r3, #0
 800b298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	61bb      	str	r3, [r7, #24]
 800b29e:	e003      	b.n	800b2a8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b2a8:	e030      	b.n	800b30c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	2180      	movs	r1, #128	; 0x80
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f000 fedb 	bl	800c070 <UART_WaitOnFlagUntilTimeout>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d005      	beq.n	800b2cc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e03d      	b.n	800b348 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10b      	bne.n	800b2ea <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	3302      	adds	r3, #2
 800b2e6:	61bb      	str	r3, [r7, #24]
 800b2e8:	e007      	b.n	800b2fa <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b300:	b29b      	uxth	r3, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	b29a      	uxth	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b312:	b29b      	uxth	r3, r3
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1c8      	bne.n	800b2aa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2200      	movs	r2, #0
 800b320:	2140      	movs	r1, #64	; 0x40
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f000 fea4 	bl	800c070 <UART_WaitOnFlagUntilTimeout>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d005      	beq.n	800b33a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2220      	movs	r2, #32
 800b332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	e006      	b.n	800b348 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2220      	movs	r2, #32
 800b33e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	e000      	b.n	800b348 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b346:	2302      	movs	r3, #2
  }
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3720      	adds	r7, #32
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08a      	sub	sp, #40	; 0x28
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	4613      	mov	r3, r2
 800b35c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b364:	2b20      	cmp	r3, #32
 800b366:	d14b      	bne.n	800b400 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <HAL_UART_Receive_IT+0x24>
 800b36e:	88fb      	ldrh	r3, [r7, #6]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e044      	b.n	800b402 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b388:	2b40      	cmp	r3, #64	; 0x40
 800b38a:	d107      	bne.n	800b39c <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b39a:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a1a      	ldr	r2, [pc, #104]	; (800b40c <HAL_UART_Receive_IT+0xbc>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d024      	beq.n	800b3f0 <HAL_UART_Receive_IT+0xa0>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a19      	ldr	r2, [pc, #100]	; (800b410 <HAL_UART_Receive_IT+0xc0>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d01f      	beq.n	800b3f0 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d018      	beq.n	800b3f0 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	e853 3f00 	ldrex	r3, [r3]
 800b3ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	623b      	str	r3, [r7, #32]
 800b3de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e0:	69f9      	ldr	r1, [r7, #28]
 800b3e2:	6a3a      	ldr	r2, [r7, #32]
 800b3e4:	e841 2300 	strex	r3, r2, [r1]
 800b3e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e6      	bne.n	800b3be <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b3f0:	88fb      	ldrh	r3, [r7, #6]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	68b9      	ldr	r1, [r7, #8]
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f000 fea2 	bl	800c140 <UART_Start_Receive_IT>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	e000      	b.n	800b402 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b400:	2302      	movs	r3, #2
  }
}
 800b402:	4618      	mov	r0, r3
 800b404:	3728      	adds	r7, #40	; 0x28
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	44002400 	.word	0x44002400
 800b410:	54002400 	.word	0x54002400

0800b414 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b0ae      	sub	sp, #184	; 0xb8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	69db      	ldr	r3, [r3, #28]
 800b422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b43a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b43e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b442:	4013      	ands	r3, r2
 800b444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800b448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d11b      	bne.n	800b488 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b454:	f003 0320 	and.w	r3, r3, #32
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d015      	beq.n	800b488 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b45c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b460:	f003 0320 	and.w	r3, r3, #32
 800b464:	2b00      	cmp	r3, #0
 800b466:	d105      	bne.n	800b474 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b46c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d009      	beq.n	800b488 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f000 8293 	beq.w	800b9a4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	4798      	blx	r3
      }
      return;
 800b486:	e28d      	b.n	800b9a4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b488:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 80fd 	beq.w	800b68c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b492:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b496:	4b7a      	ldr	r3, [pc, #488]	; (800b680 <HAL_UART_IRQHandler+0x26c>)
 800b498:	4013      	ands	r3, r2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b49e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b4a2:	4b78      	ldr	r3, [pc, #480]	; (800b684 <HAL_UART_IRQHandler+0x270>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 80f0 	beq.w	800b68c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4b0:	f003 0301 	and.w	r3, r3, #1
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d011      	beq.n	800b4dc <HAL_UART_IRQHandler+0xc8>
 800b4b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4d2:	f043 0201 	orr.w	r2, r3, #1
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4e0:	f003 0302 	and.w	r3, r3, #2
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d011      	beq.n	800b50c <HAL_UART_IRQHandler+0xf8>
 800b4e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4ec:	f003 0301 	and.w	r3, r3, #1
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00b      	beq.n	800b50c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b502:	f043 0204 	orr.w	r2, r3, #4
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b50c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	d011      	beq.n	800b53c <HAL_UART_IRQHandler+0x128>
 800b518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00b      	beq.n	800b53c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2204      	movs	r2, #4
 800b52a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b532:	f043 0202 	orr.w	r2, r3, #2
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b53c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b540:	f003 0308 	and.w	r3, r3, #8
 800b544:	2b00      	cmp	r3, #0
 800b546:	d017      	beq.n	800b578 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b548:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b54c:	f003 0320 	and.w	r3, r3, #32
 800b550:	2b00      	cmp	r3, #0
 800b552:	d105      	bne.n	800b560 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b558:	4b49      	ldr	r3, [pc, #292]	; (800b680 <HAL_UART_IRQHandler+0x26c>)
 800b55a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2208      	movs	r2, #8
 800b566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b56e:	f043 0208 	orr.w	r2, r3, #8
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b57c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b580:	2b00      	cmp	r3, #0
 800b582:	d012      	beq.n	800b5aa <HAL_UART_IRQHandler+0x196>
 800b584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00c      	beq.n	800b5aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5a0:	f043 0220 	orr.w	r2, r3, #32
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 81f9 	beq.w	800b9a8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d013      	beq.n	800b5ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b5c6:	f003 0320 	and.w	r3, r3, #32
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d105      	bne.n	800b5da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d007      	beq.n	800b5ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5fe:	2b40      	cmp	r3, #64	; 0x40
 800b600:	d005      	beq.n	800b60e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b606:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d02e      	beq.n	800b66c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 feb8 	bl	800c384 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b61e:	2b40      	cmp	r3, #64	; 0x40
 800b620:	d120      	bne.n	800b664 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d017      	beq.n	800b65c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b632:	4a15      	ldr	r2, [pc, #84]	; (800b688 <HAL_UART_IRQHandler+0x274>)
 800b634:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7f7 fd13 	bl	8003068 <HAL_DMA_Abort_IT>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d019      	beq.n	800b67c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b656:	4610      	mov	r0, r2
 800b658:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b65a:	e00f      	b.n	800b67c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f9b7 	bl	800b9d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b662:	e00b      	b.n	800b67c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f9b3 	bl	800b9d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b66a:	e007      	b.n	800b67c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f9af 	bl	800b9d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b67a:	e195      	b.n	800b9a8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b67c:	bf00      	nop
    return;
 800b67e:	e193      	b.n	800b9a8 <HAL_UART_IRQHandler+0x594>
 800b680:	10000001 	.word	0x10000001
 800b684:	04000120 	.word	0x04000120
 800b688:	0800c451 	.word	0x0800c451

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b690:	2b01      	cmp	r3, #1
 800b692:	f040 8129 	bne.w	800b8e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b69a:	f003 0310 	and.w	r3, r3, #16
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f000 8122 	beq.w	800b8e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b6a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b6a8:	f003 0310 	and.w	r3, r3, #16
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 811b 	beq.w	800b8e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2210      	movs	r2, #16
 800b6b8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c4:	2b40      	cmp	r3, #64	; 0x40
 800b6c6:	f040 8091 	bne.w	800b7ec <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6d4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800b6d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 8165 	beq.w	800b9ac <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b6e8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	f080 815d 	bcs.w	800b9ac <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800b6f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b704:	2b81      	cmp	r3, #129	; 0x81
 800b706:	d060      	beq.n	800b7ca <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b71c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b72a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b72e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b730:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b732:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b73c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e2      	bne.n	800b708 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3308      	adds	r3, #8
 800b748:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b754:	f023 0301 	bic.w	r3, r3, #1
 800b758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3308      	adds	r3, #8
 800b762:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b766:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b768:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b76c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b76e:	e841 2300 	strex	r3, r2, [r1]
 800b772:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1e3      	bne.n	800b742 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b790:	e853 3f00 	ldrex	r3, [r3]
 800b794:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b798:	f023 0310 	bic.w	r3, r3, #16
 800b79c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b7b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7b2:	e841 2300 	strex	r3, r2, [r1]
 800b7b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b7b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1e4      	bne.n	800b788 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7f7 fbd3 	bl	8002f70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f8fd 	bl	800b9e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7ea:	e0df      	b.n	800b9ac <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b806:	b29b      	uxth	r3, r3
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 80d1 	beq.w	800b9b0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800b80e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 80cc 	beq.w	800b9b0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b820:	e853 3f00 	ldrex	r3, [r3]
 800b824:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b82c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	461a      	mov	r2, r3
 800b836:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b83a:	647b      	str	r3, [r7, #68]	; 0x44
 800b83c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b842:	e841 2300 	strex	r3, r2, [r1]
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1e4      	bne.n	800b818 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	3308      	adds	r3, #8
 800b854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	e853 3f00 	ldrex	r3, [r3]
 800b85c:	623b      	str	r3, [r7, #32]
   return(result);
 800b85e:	6a3b      	ldr	r3, [r7, #32]
 800b860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b864:	f023 0301 	bic.w	r3, r3, #1
 800b868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3308      	adds	r3, #8
 800b872:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b876:	633a      	str	r2, [r7, #48]	; 0x30
 800b878:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e1      	bne.n	800b84e <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	e853 3f00 	ldrex	r3, [r3]
 800b8aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f023 0310 	bic.w	r3, r3, #16
 800b8b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b8c0:	61fb      	str	r3, [r7, #28]
 800b8c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c4:	69b9      	ldr	r1, [r7, #24]
 800b8c6:	69fa      	ldr	r2, [r7, #28]
 800b8c8:	e841 2300 	strex	r3, r2, [r1]
 800b8cc:	617b      	str	r3, [r7, #20]
   return(result);
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e4      	bne.n	800b89e <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8da:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f87f 	bl	800b9e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8e6:	e063      	b.n	800b9b0 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b8ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00e      	beq.n	800b912 <HAL_UART_IRQHandler+0x4fe>
 800b8f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d008      	beq.n	800b912 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 fb1a 	bl	800cf44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b910:	e051      	b.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d014      	beq.n	800b948 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b91e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b926:	2b00      	cmp	r3, #0
 800b928:	d105      	bne.n	800b936 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b92a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b92e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b932:	2b00      	cmp	r3, #0
 800b934:	d008      	beq.n	800b948 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d03a      	beq.n	800b9b4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
    }
    return;
 800b946:	e035      	b.n	800b9b4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b948:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b950:	2b00      	cmp	r3, #0
 800b952:	d009      	beq.n	800b968 <HAL_UART_IRQHandler+0x554>
 800b954:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fd8b 	bl	800c47c <UART_EndTransmit_IT>
    return;
 800b966:	e026      	b.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b968:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b96c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d009      	beq.n	800b988 <HAL_UART_IRQHandler+0x574>
 800b974:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b978:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d003      	beq.n	800b988 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f001 faf3 	bl	800cf6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b986:	e016      	b.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b98c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d010      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
 800b994:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	da0c      	bge.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f001 fadb 	bl	800cf58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9a2:	e008      	b.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800b9a4:	bf00      	nop
 800b9a6:	e006      	b.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
    return;
 800b9a8:	bf00      	nop
 800b9aa:	e004      	b.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800b9ac:	bf00      	nop
 800b9ae:	e002      	b.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
      return;
 800b9b0:	bf00      	nop
 800b9b2:	e000      	b.n	800b9b6 <HAL_UART_IRQHandler+0x5a2>
    return;
 800b9b4:	bf00      	nop
  }
}
 800b9b6:	37b8      	adds	r7, #184	; 0xb8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba00:	b094      	sub	sp, #80	; 0x50
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	4b78      	ldr	r3, [pc, #480]	; (800bbf4 <UART_SetConfig+0x1f8>)
 800ba12:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	431a      	orrs	r2, r3
 800ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4971      	ldr	r1, [pc, #452]	; (800bbf8 <UART_SetConfig+0x1fc>)
 800ba34:	4019      	ands	r1, r3
 800ba36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba3c:	430b      	orrs	r3, r1
 800ba3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ba4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4c:	68d9      	ldr	r1, [r3, #12]
 800ba4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	ea40 0301 	orr.w	r3, r0, r1
 800ba56:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	4b64      	ldr	r3, [pc, #400]	; (800bbf4 <UART_SetConfig+0x1f8>)
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d009      	beq.n	800ba7c <UART_SetConfig+0x80>
 800ba68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	4b63      	ldr	r3, [pc, #396]	; (800bbfc <UART_SetConfig+0x200>)
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d004      	beq.n	800ba7c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba74:	6a1a      	ldr	r2, [r3, #32]
 800ba76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800ba86:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800ba8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba90:	430b      	orrs	r3, r1
 800ba92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9a:	f023 000f 	bic.w	r0, r3, #15
 800ba9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	ea40 0301 	orr.w	r3, r0, r1
 800baaa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	4b53      	ldr	r3, [pc, #332]	; (800bc00 <UART_SetConfig+0x204>)
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d102      	bne.n	800babc <UART_SetConfig+0xc0>
 800bab6:	2301      	movs	r3, #1
 800bab8:	64bb      	str	r3, [r7, #72]	; 0x48
 800baba:	e066      	b.n	800bb8a <UART_SetConfig+0x18e>
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	4b50      	ldr	r3, [pc, #320]	; (800bc04 <UART_SetConfig+0x208>)
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d102      	bne.n	800bacc <UART_SetConfig+0xd0>
 800bac6:	2302      	movs	r3, #2
 800bac8:	64bb      	str	r3, [r7, #72]	; 0x48
 800baca:	e05e      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	4b4d      	ldr	r3, [pc, #308]	; (800bc08 <UART_SetConfig+0x20c>)
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d102      	bne.n	800badc <UART_SetConfig+0xe0>
 800bad6:	2304      	movs	r3, #4
 800bad8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bada:	e056      	b.n	800bb8a <UART_SetConfig+0x18e>
 800badc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	4b4a      	ldr	r3, [pc, #296]	; (800bc0c <UART_SetConfig+0x210>)
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d102      	bne.n	800baec <UART_SetConfig+0xf0>
 800bae6:	2308      	movs	r3, #8
 800bae8:	64bb      	str	r3, [r7, #72]	; 0x48
 800baea:	e04e      	b.n	800bb8a <UART_SetConfig+0x18e>
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	4b47      	ldr	r3, [pc, #284]	; (800bc10 <UART_SetConfig+0x214>)
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d102      	bne.n	800bafc <UART_SetConfig+0x100>
 800baf6:	2310      	movs	r3, #16
 800baf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bafa:	e046      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	4b44      	ldr	r3, [pc, #272]	; (800bc14 <UART_SetConfig+0x218>)
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d102      	bne.n	800bb0c <UART_SetConfig+0x110>
 800bb06:	2320      	movs	r3, #32
 800bb08:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb0a:	e03e      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	4b41      	ldr	r3, [pc, #260]	; (800bc18 <UART_SetConfig+0x21c>)
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d102      	bne.n	800bb1c <UART_SetConfig+0x120>
 800bb16:	2340      	movs	r3, #64	; 0x40
 800bb18:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb1a:	e036      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	4b3e      	ldr	r3, [pc, #248]	; (800bc1c <UART_SetConfig+0x220>)
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d102      	bne.n	800bb2c <UART_SetConfig+0x130>
 800bb26:	2380      	movs	r3, #128	; 0x80
 800bb28:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb2a:	e02e      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	4b3b      	ldr	r3, [pc, #236]	; (800bc20 <UART_SetConfig+0x224>)
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d103      	bne.n	800bb3e <UART_SetConfig+0x142>
 800bb36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb3c:	e025      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	4b38      	ldr	r3, [pc, #224]	; (800bc24 <UART_SetConfig+0x228>)
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d103      	bne.n	800bb50 <UART_SetConfig+0x154>
 800bb48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb4e:	e01c      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	4b34      	ldr	r3, [pc, #208]	; (800bc28 <UART_SetConfig+0x22c>)
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d103      	bne.n	800bb62 <UART_SetConfig+0x166>
 800bb5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb60:	e013      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	4b31      	ldr	r3, [pc, #196]	; (800bc2c <UART_SetConfig+0x230>)
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d103      	bne.n	800bb74 <UART_SetConfig+0x178>
 800bb6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb70:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb72:	e00a      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	4b1e      	ldr	r3, [pc, #120]	; (800bbf4 <UART_SetConfig+0x1f8>)
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d103      	bne.n	800bb86 <UART_SetConfig+0x18a>
 800bb7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb82:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb84:	e001      	b.n	800bb8a <UART_SetConfig+0x18e>
 800bb86:	2300      	movs	r3, #0
 800bb88:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	4b19      	ldr	r3, [pc, #100]	; (800bbf4 <UART_SetConfig+0x1f8>)
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d005      	beq.n	800bba0 <UART_SetConfig+0x1a4>
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	4b18      	ldr	r3, [pc, #96]	; (800bbfc <UART_SetConfig+0x200>)
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	f040 8094 	bne.w	800bcc8 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bba2:	2200      	movs	r2, #0
 800bba4:	623b      	str	r3, [r7, #32]
 800bba6:	627a      	str	r2, [r7, #36]	; 0x24
 800bba8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bbac:	f7fc fa44 	bl	8008038 <HAL_RCCEx_GetPeriphCLKFreq>
 800bbb0:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 80f7 	beq.w	800bda8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbe:	4a1c      	ldr	r2, [pc, #112]	; (800bc30 <UART_SetConfig+0x234>)
 800bbc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbcc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	4413      	add	r3, r2
 800bbd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d305      	bcc.n	800bbea <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d924      	bls.n	800bc34 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bbf0:	e069      	b.n	800bcc6 <UART_SetConfig+0x2ca>
 800bbf2:	bf00      	nop
 800bbf4:	44002400 	.word	0x44002400
 800bbf8:	cfff69f3 	.word	0xcfff69f3
 800bbfc:	54002400 	.word	0x54002400
 800bc00:	40013800 	.word	0x40013800
 800bc04:	40004400 	.word	0x40004400
 800bc08:	40004800 	.word	0x40004800
 800bc0c:	40004c00 	.word	0x40004c00
 800bc10:	40005000 	.word	0x40005000
 800bc14:	40006400 	.word	0x40006400
 800bc18:	40007800 	.word	0x40007800
 800bc1c:	40007c00 	.word	0x40007c00
 800bc20:	40008000 	.word	0x40008000
 800bc24:	40006800 	.word	0x40006800
 800bc28:	40006c00 	.word	0x40006c00
 800bc2c:	40008400 	.word	0x40008400
 800bc30:	08011800 	.word	0x08011800
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc36:	2200      	movs	r2, #0
 800bc38:	61bb      	str	r3, [r7, #24]
 800bc3a:	61fa      	str	r2, [r7, #28]
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	4a64      	ldr	r2, [pc, #400]	; (800bdd4 <UART_SetConfig+0x3d8>)
 800bc42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	2200      	movs	r2, #0
 800bc4a:	613b      	str	r3, [r7, #16]
 800bc4c:	617a      	str	r2, [r7, #20]
 800bc4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bc56:	f7f4 fb2d 	bl	80002b4 <__aeabi_uldivmod>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4610      	mov	r0, r2
 800bc60:	4619      	mov	r1, r3
 800bc62:	f04f 0200 	mov.w	r2, #0
 800bc66:	f04f 0300 	mov.w	r3, #0
 800bc6a:	020b      	lsls	r3, r1, #8
 800bc6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc70:	0202      	lsls	r2, r0, #8
 800bc72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc74:	6849      	ldr	r1, [r1, #4]
 800bc76:	0849      	lsrs	r1, r1, #1
 800bc78:	2000      	movs	r0, #0
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	eb12 0804 	adds.w	r8, r2, r4
 800bc82:	eb43 0905 	adc.w	r9, r3, r5
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	60bb      	str	r3, [r7, #8]
 800bc8e:	60fa      	str	r2, [r7, #12]
 800bc90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc94:	4640      	mov	r0, r8
 800bc96:	4649      	mov	r1, r9
 800bc98:	f7f4 fb0c 	bl	80002b4 <__aeabi_uldivmod>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4613      	mov	r3, r2
 800bca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcaa:	d308      	bcc.n	800bcbe <UART_SetConfig+0x2c2>
 800bcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb2:	d204      	bcs.n	800bcbe <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800bcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcba:	60da      	str	r2, [r3, #12]
 800bcbc:	e003      	b.n	800bcc6 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800bcc4:	e070      	b.n	800bda8 <UART_SetConfig+0x3ac>
 800bcc6:	e06f      	b.n	800bda8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcd0:	d13c      	bne.n	800bd4c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bcd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	603b      	str	r3, [r7, #0]
 800bcd8:	607a      	str	r2, [r7, #4]
 800bcda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bcde:	f7fc f9ab 	bl	8008038 <HAL_RCCEx_GetPeriphCLKFreq>
 800bce2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d05e      	beq.n	800bda8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	4a39      	ldr	r2, [pc, #228]	; (800bdd4 <UART_SetConfig+0x3d8>)
 800bcf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcfc:	005a      	lsls	r2, r3, #1
 800bcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	085b      	lsrs	r3, r3, #1
 800bd04:	441a      	add	r2, r3
 800bd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd12:	2b0f      	cmp	r3, #15
 800bd14:	d916      	bls.n	800bd44 <UART_SetConfig+0x348>
 800bd16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd1c:	d212      	bcs.n	800bd44 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	f023 030f 	bic.w	r3, r3, #15
 800bd26:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2a:	085b      	lsrs	r3, r3, #1
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	f003 0307 	and.w	r3, r3, #7
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bd36:	4313      	orrs	r3, r2
 800bd38:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd40:	60da      	str	r2, [r3, #12]
 800bd42:	e031      	b.n	800bda8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bd4a:	e02d      	b.n	800bda8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd4e:	2200      	movs	r2, #0
 800bd50:	469a      	mov	sl, r3
 800bd52:	4693      	mov	fp, r2
 800bd54:	4650      	mov	r0, sl
 800bd56:	4659      	mov	r1, fp
 800bd58:	f7fc f96e 	bl	8008038 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd5c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800bd5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d021      	beq.n	800bda8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd68:	4a1a      	ldr	r2, [pc, #104]	; (800bdd4 <UART_SetConfig+0x3d8>)
 800bd6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd72:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	085b      	lsrs	r3, r3, #1
 800bd7c:	441a      	add	r2, r3
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd8a:	2b0f      	cmp	r3, #15
 800bd8c:	d909      	bls.n	800bda2 <UART_SetConfig+0x3a6>
 800bd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd94:	d205      	bcs.n	800bda2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	60da      	str	r2, [r3, #12]
 800bda0:	e002      	b.n	800bda8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	2200      	movs	r2, #0
 800bdbc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bdc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3750      	adds	r7, #80	; 0x50
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdd2:	bf00      	nop
 800bdd4:	08011800 	.word	0x08011800

0800bdd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde4:	f003 0308 	and.w	r3, r3, #8
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00a      	beq.n	800be02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	430a      	orrs	r2, r1
 800be00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00a      	beq.n	800be24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	430a      	orrs	r2, r1
 800be22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be28:	f003 0302 	and.w	r3, r3, #2
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00a      	beq.n	800be46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	430a      	orrs	r2, r1
 800be44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4a:	f003 0304 	and.w	r3, r3, #4
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00a      	beq.n	800be68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	430a      	orrs	r2, r1
 800be66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be6c:	f003 0310 	and.w	r3, r3, #16
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00a      	beq.n	800be8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	430a      	orrs	r2, r1
 800be88:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8e:	f003 0320 	and.w	r3, r3, #32
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00a      	beq.n	800beac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	430a      	orrs	r2, r1
 800beaa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d01a      	beq.n	800beee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	430a      	orrs	r2, r1
 800becc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bed6:	d10a      	bne.n	800beee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	430a      	orrs	r2, r1
 800beec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00a      	beq.n	800bf10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	430a      	orrs	r2, r1
 800bf0e:	605a      	str	r2, [r3, #4]
  }
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b098      	sub	sp, #96	; 0x60
 800bf20:	af02      	add	r7, sp, #8
 800bf22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf2c:	f7f6 ff10 	bl	8002d50 <HAL_GetTick>
 800bf30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0308 	and.w	r3, r3, #8
 800bf3c:	2b08      	cmp	r3, #8
 800bf3e:	d12f      	bne.n	800bfa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f88e 	bl	800c070 <UART_WaitOnFlagUntilTimeout>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d022      	beq.n	800bfa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf62:	e853 3f00 	ldrex	r3, [r3]
 800bf66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf6e:	653b      	str	r3, [r7, #80]	; 0x50
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	461a      	mov	r2, r3
 800bf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf78:	647b      	str	r3, [r7, #68]	; 0x44
 800bf7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf80:	e841 2300 	strex	r3, r2, [r1]
 800bf84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1e6      	bne.n	800bf5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e063      	b.n	800c068 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 0304 	and.w	r3, r3, #4
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	d149      	bne.n	800c042 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 f857 	bl	800c070 <UART_WaitOnFlagUntilTimeout>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d03c      	beq.n	800c042 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	e853 3f00 	ldrex	r3, [r3]
 800bfd4:	623b      	str	r3, [r7, #32]
   return(result);
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfe6:	633b      	str	r3, [r7, #48]	; 0x30
 800bfe8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfee:	e841 2300 	strex	r3, r2, [r1]
 800bff2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1e6      	bne.n	800bfc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3308      	adds	r3, #8
 800c000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	e853 3f00 	ldrex	r3, [r3]
 800c008:	60fb      	str	r3, [r7, #12]
   return(result);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f023 0301 	bic.w	r3, r3, #1
 800c010:	64bb      	str	r3, [r7, #72]	; 0x48
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	3308      	adds	r3, #8
 800c018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c01a:	61fa      	str	r2, [r7, #28]
 800c01c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01e:	69b9      	ldr	r1, [r7, #24]
 800c020:	69fa      	ldr	r2, [r7, #28]
 800c022:	e841 2300 	strex	r3, r2, [r1]
 800c026:	617b      	str	r3, [r7, #20]
   return(result);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1e5      	bne.n	800bffa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2220      	movs	r2, #32
 800c032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e012      	b.n	800c068 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2220      	movs	r2, #32
 800c046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2220      	movs	r2, #32
 800c04e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3758      	adds	r7, #88	; 0x58
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	603b      	str	r3, [r7, #0]
 800c07c:	4613      	mov	r3, r2
 800c07e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c080:	e049      	b.n	800c116 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c088:	d045      	beq.n	800c116 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c08a:	f7f6 fe61 	bl	8002d50 <HAL_GetTick>
 800c08e:	4602      	mov	r2, r0
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	69ba      	ldr	r2, [r7, #24]
 800c096:	429a      	cmp	r2, r3
 800c098:	d302      	bcc.n	800c0a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	e048      	b.n	800c136 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0304 	and.w	r3, r3, #4
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d031      	beq.n	800c116 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	69db      	ldr	r3, [r3, #28]
 800c0b8:	f003 0308 	and.w	r3, r3, #8
 800c0bc:	2b08      	cmp	r3, #8
 800c0be:	d110      	bne.n	800c0e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2208      	movs	r2, #8
 800c0c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f000 f95b 	bl	800c384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2208      	movs	r2, #8
 800c0d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	e029      	b.n	800c136 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	69db      	ldr	r3, [r3, #28]
 800c0e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0f0:	d111      	bne.n	800c116 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 f941 	bl	800c384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2220      	movs	r2, #32
 800c106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c112:	2303      	movs	r3, #3
 800c114:	e00f      	b.n	800c136 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	69da      	ldr	r2, [r3, #28]
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	4013      	ands	r3, r2
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	429a      	cmp	r2, r3
 800c124:	bf0c      	ite	eq
 800c126:	2301      	moveq	r3, #1
 800c128:	2300      	movne	r3, #0
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	461a      	mov	r2, r3
 800c12e:	79fb      	ldrb	r3, [r7, #7]
 800c130:	429a      	cmp	r2, r3
 800c132:	d0a6      	beq.n	800c082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
	...

0800c140 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c140:	b480      	push	{r7}
 800c142:	b0a3      	sub	sp, #140	; 0x8c
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	4613      	mov	r3, r2
 800c14c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	88fa      	ldrh	r2, [r7, #6]
 800c158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	88fa      	ldrh	r2, [r7, #6]
 800c160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c172:	d10e      	bne.n	800c192 <UART_Start_Receive_IT+0x52>
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d105      	bne.n	800c188 <UART_Start_Receive_IT+0x48>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c182:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c186:	e02d      	b.n	800c1e4 <UART_Start_Receive_IT+0xa4>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	22ff      	movs	r2, #255	; 0xff
 800c18c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c190:	e028      	b.n	800c1e4 <UART_Start_Receive_IT+0xa4>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10d      	bne.n	800c1b6 <UART_Start_Receive_IT+0x76>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d104      	bne.n	800c1ac <UART_Start_Receive_IT+0x6c>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	22ff      	movs	r2, #255	; 0xff
 800c1a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1aa:	e01b      	b.n	800c1e4 <UART_Start_Receive_IT+0xa4>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	227f      	movs	r2, #127	; 0x7f
 800c1b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1b4:	e016      	b.n	800c1e4 <UART_Start_Receive_IT+0xa4>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1be:	d10d      	bne.n	800c1dc <UART_Start_Receive_IT+0x9c>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d104      	bne.n	800c1d2 <UART_Start_Receive_IT+0x92>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	227f      	movs	r2, #127	; 0x7f
 800c1cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1d0:	e008      	b.n	800c1e4 <UART_Start_Receive_IT+0xa4>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	223f      	movs	r2, #63	; 0x3f
 800c1d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1da:	e003      	b.n	800c1e4 <UART_Start_Receive_IT+0xa4>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2222      	movs	r2, #34	; 0x22
 800c1f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3308      	adds	r3, #8
 800c1fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1fe:	e853 3f00 	ldrex	r3, [r3]
 800c202:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c206:	f043 0301 	orr.w	r3, r3, #1
 800c20a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3308      	adds	r3, #8
 800c214:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c218:	673a      	str	r2, [r7, #112]	; 0x70
 800c21a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c21e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c220:	e841 2300 	strex	r3, r2, [r1]
 800c224:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1e3      	bne.n	800c1f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c234:	d14f      	bne.n	800c2d6 <UART_Start_Receive_IT+0x196>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c23c:	88fa      	ldrh	r2, [r7, #6]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d349      	bcc.n	800c2d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c24a:	d107      	bne.n	800c25c <UART_Start_Receive_IT+0x11c>
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d103      	bne.n	800c25c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4a47      	ldr	r2, [pc, #284]	; (800c374 <UART_Start_Receive_IT+0x234>)
 800c258:	675a      	str	r2, [r3, #116]	; 0x74
 800c25a:	e002      	b.n	800c262 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	4a46      	ldr	r2, [pc, #280]	; (800c378 <UART_Start_Receive_IT+0x238>)
 800c260:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d01a      	beq.n	800c2a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c272:	e853 3f00 	ldrex	r3, [r3]
 800c276:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c27a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c27e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	461a      	mov	r2, r3
 800c288:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c28c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c28e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c292:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c29a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e4      	bne.n	800c26a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2aa:	e853 3f00 	ldrex	r3, [r3]
 800c2ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3308      	adds	r3, #8
 800c2be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c2c0:	64ba      	str	r2, [r7, #72]	; 0x48
 800c2c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2c8:	e841 2300 	strex	r3, r2, [r1]
 800c2cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1e5      	bne.n	800c2a0 <UART_Start_Receive_IT+0x160>
 800c2d4:	e046      	b.n	800c364 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2de:	d107      	bne.n	800c2f0 <UART_Start_Receive_IT+0x1b0>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d103      	bne.n	800c2f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	4a24      	ldr	r2, [pc, #144]	; (800c37c <UART_Start_Receive_IT+0x23c>)
 800c2ec:	675a      	str	r2, [r3, #116]	; 0x74
 800c2ee:	e002      	b.n	800c2f6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4a23      	ldr	r2, [pc, #140]	; (800c380 <UART_Start_Receive_IT+0x240>)
 800c2f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d019      	beq.n	800c332 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c306:	e853 3f00 	ldrex	r3, [r3]
 800c30a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c312:	677b      	str	r3, [r7, #116]	; 0x74
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	461a      	mov	r2, r3
 800c31a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c31c:	637b      	str	r3, [r7, #52]	; 0x34
 800c31e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c324:	e841 2300 	strex	r3, r2, [r1]
 800c328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1e6      	bne.n	800c2fe <UART_Start_Receive_IT+0x1be>
 800c330:	e018      	b.n	800c364 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	e853 3f00 	ldrex	r3, [r3]
 800c33e:	613b      	str	r3, [r7, #16]
   return(result);
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	f043 0320 	orr.w	r3, r3, #32
 800c346:	67bb      	str	r3, [r7, #120]	; 0x78
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	461a      	mov	r2, r3
 800c34e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c350:	623b      	str	r3, [r7, #32]
 800c352:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c354:	69f9      	ldr	r1, [r7, #28]
 800c356:	6a3a      	ldr	r2, [r7, #32]
 800c358:	e841 2300 	strex	r3, r2, [r1]
 800c35c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1e6      	bne.n	800c332 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	378c      	adds	r7, #140	; 0x8c
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	0800cbcd 	.word	0x0800cbcd
 800c378:	0800c85d 	.word	0x0800c85d
 800c37c:	0800c699 	.word	0x0800c699
 800c380:	0800c4d5 	.word	0x0800c4d5

0800c384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c384:	b480      	push	{r7}
 800c386:	b095      	sub	sp, #84	; 0x54
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3aa:	643b      	str	r3, [r7, #64]	; 0x40
 800c3ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3b2:	e841 2300 	strex	r3, r2, [r1]
 800c3b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1e6      	bne.n	800c38c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c6:	6a3b      	ldr	r3, [r7, #32]
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3d4:	f023 0301 	bic.w	r3, r3, #1
 800c3d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e3      	bne.n	800c3be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d118      	bne.n	800c430 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	e853 3f00 	ldrex	r3, [r3]
 800c40a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	f023 0310 	bic.w	r3, r3, #16
 800c412:	647b      	str	r3, [r7, #68]	; 0x44
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	461a      	mov	r2, r3
 800c41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c41c:	61bb      	str	r3, [r7, #24]
 800c41e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c420:	6979      	ldr	r1, [r7, #20]
 800c422:	69ba      	ldr	r2, [r7, #24]
 800c424:	e841 2300 	strex	r3, r2, [r1]
 800c428:	613b      	str	r3, [r7, #16]
   return(result);
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1e6      	bne.n	800c3fe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2220      	movs	r2, #32
 800c434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c444:	bf00      	nop
 800c446:	3754      	adds	r7, #84	; 0x54
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c45c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f7ff faae 	bl	800b9d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c474:	bf00      	nop
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	e853 3f00 	ldrex	r3, [r3]
 800c490:	60bb      	str	r3, [r7, #8]
   return(result);
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c498:	61fb      	str	r3, [r7, #28]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	61bb      	str	r3, [r7, #24]
 800c4a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a6:	6979      	ldr	r1, [r7, #20]
 800c4a8:	69ba      	ldr	r2, [r7, #24]
 800c4aa:	e841 2300 	strex	r3, r2, [r1]
 800c4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1e6      	bne.n	800c484 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2220      	movs	r2, #32
 800c4ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7ff fa79 	bl	800b9bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4ca:	bf00      	nop
 800c4cc:	3720      	adds	r7, #32
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b09c      	sub	sp, #112	; 0x70
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ec:	2b22      	cmp	r3, #34	; 0x22
 800c4ee:	f040 80c3 	bne.w	800c678 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c4fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c500:	b2d9      	uxtb	r1, r3
 800c502:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c506:	b2da      	uxtb	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c50c:	400a      	ands	r2, r1
 800c50e:	b2d2      	uxtb	r2, r2
 800c510:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c522:	b29b      	uxth	r3, r3
 800c524:	3b01      	subs	r3, #1
 800c526:	b29a      	uxth	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c534:	b29b      	uxth	r3, r3
 800c536:	2b00      	cmp	r3, #0
 800c538:	f040 80a6 	bne.w	800c688 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c54a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c54c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c550:	66bb      	str	r3, [r7, #104]	; 0x68
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	461a      	mov	r2, r3
 800c558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c55a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c55c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c560:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e6      	bne.n	800c53c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3308      	adds	r3, #8
 800c574:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c578:	e853 3f00 	ldrex	r3, [r3]
 800c57c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c580:	f023 0301 	bic.w	r3, r3, #1
 800c584:	667b      	str	r3, [r7, #100]	; 0x64
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3308      	adds	r3, #8
 800c58c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c58e:	647a      	str	r2, [r7, #68]	; 0x44
 800c590:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c596:	e841 2300 	strex	r3, r2, [r1]
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1e5      	bne.n	800c56e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a35      	ldr	r2, [pc, #212]	; (800c690 <UART_RxISR_8BIT+0x1bc>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d024      	beq.n	800c60a <UART_RxISR_8BIT+0x136>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a33      	ldr	r2, [pc, #204]	; (800c694 <UART_RxISR_8BIT+0x1c0>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d01f      	beq.n	800c60a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d018      	beq.n	800c60a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e0:	e853 3f00 	ldrex	r3, [r3]
 800c5e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5ec:	663b      	str	r3, [r7, #96]	; 0x60
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5f6:	633b      	str	r3, [r7, #48]	; 0x30
 800c5f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5fe:	e841 2300 	strex	r3, r2, [r1]
 800c602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1e6      	bne.n	800c5d8 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d12e      	bne.n	800c670 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	e853 3f00 	ldrex	r3, [r3]
 800c624:	60fb      	str	r3, [r7, #12]
   return(result);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f023 0310 	bic.w	r3, r3, #16
 800c62c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	461a      	mov	r2, r3
 800c634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c636:	61fb      	str	r3, [r7, #28]
 800c638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63a:	69b9      	ldr	r1, [r7, #24]
 800c63c:	69fa      	ldr	r2, [r7, #28]
 800c63e:	e841 2300 	strex	r3, r2, [r1]
 800c642:	617b      	str	r3, [r7, #20]
   return(result);
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1e6      	bne.n	800c618 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	69db      	ldr	r3, [r3, #28]
 800c650:	f003 0310 	and.w	r3, r3, #16
 800c654:	2b10      	cmp	r3, #16
 800c656:	d103      	bne.n	800c660 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2210      	movs	r2, #16
 800c65e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c666:	4619      	mov	r1, r3
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff f9bb 	bl	800b9e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c66e:	e00b      	b.n	800c688 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7f6 fa37 	bl	8002ae4 <HAL_UART_RxCpltCallback>
}
 800c676:	e007      	b.n	800c688 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	699a      	ldr	r2, [r3, #24]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f042 0208 	orr.w	r2, r2, #8
 800c686:	619a      	str	r2, [r3, #24]
}
 800c688:	bf00      	nop
 800c68a:	3770      	adds	r7, #112	; 0x70
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	44002400 	.word	0x44002400
 800c694:	54002400 	.word	0x54002400

0800c698 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b09c      	sub	sp, #112	; 0x70
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6b0:	2b22      	cmp	r3, #34	; 0x22
 800c6b2:	f040 80c3 	bne.w	800c83c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6c4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c6c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c6ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	b29a      	uxth	r2, r3
 800c6d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6da:	1c9a      	adds	r2, r3, #2
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f040 80a6 	bne.w	800c84c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c708:	e853 3f00 	ldrex	r3, [r3]
 800c70c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c714:	667b      	str	r3, [r7, #100]	; 0x64
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c71e:	657b      	str	r3, [r7, #84]	; 0x54
 800c720:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c726:	e841 2300 	strex	r3, r2, [r1]
 800c72a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1e6      	bne.n	800c700 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3308      	adds	r3, #8
 800c738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73c:	e853 3f00 	ldrex	r3, [r3]
 800c740:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c744:	f023 0301 	bic.w	r3, r3, #1
 800c748:	663b      	str	r3, [r7, #96]	; 0x60
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3308      	adds	r3, #8
 800c750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c752:	643a      	str	r2, [r7, #64]	; 0x40
 800c754:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c756:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c75a:	e841 2300 	strex	r3, r2, [r1]
 800c75e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1e5      	bne.n	800c732 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2220      	movs	r2, #32
 800c76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a35      	ldr	r2, [pc, #212]	; (800c854 <UART_RxISR_16BIT+0x1bc>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d024      	beq.n	800c7ce <UART_RxISR_16BIT+0x136>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a33      	ldr	r2, [pc, #204]	; (800c858 <UART_RxISR_16BIT+0x1c0>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d01f      	beq.n	800c7ce <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d018      	beq.n	800c7ce <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a2:	6a3b      	ldr	r3, [r7, #32]
 800c7a4:	e853 3f00 	ldrex	r3, [r3]
 800c7a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c7b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7c2:	e841 2300 	strex	r3, r2, [r1]
 800c7c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1e6      	bne.n	800c79c <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d12e      	bne.n	800c834 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	e853 3f00 	ldrex	r3, [r3]
 800c7e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	f023 0310 	bic.w	r3, r3, #16
 800c7f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c7fa:	61bb      	str	r3, [r7, #24]
 800c7fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fe:	6979      	ldr	r1, [r7, #20]
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	e841 2300 	strex	r3, r2, [r1]
 800c806:	613b      	str	r3, [r7, #16]
   return(result);
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1e6      	bne.n	800c7dc <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	69db      	ldr	r3, [r3, #28]
 800c814:	f003 0310 	and.w	r3, r3, #16
 800c818:	2b10      	cmp	r3, #16
 800c81a:	d103      	bne.n	800c824 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2210      	movs	r2, #16
 800c822:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c82a:	4619      	mov	r1, r3
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7ff f8d9 	bl	800b9e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c832:	e00b      	b.n	800c84c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7f6 f955 	bl	8002ae4 <HAL_UART_RxCpltCallback>
}
 800c83a:	e007      	b.n	800c84c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	699a      	ldr	r2, [r3, #24]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f042 0208 	orr.w	r2, r2, #8
 800c84a:	619a      	str	r2, [r3, #24]
}
 800c84c:	bf00      	nop
 800c84e:	3770      	adds	r7, #112	; 0x70
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	44002400 	.word	0x44002400
 800c858:	54002400 	.word	0x54002400

0800c85c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b0ac      	sub	sp, #176	; 0xb0
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c86a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	69db      	ldr	r3, [r3, #28]
 800c874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c892:	2b22      	cmp	r3, #34	; 0x22
 800c894:	f040 8187 	bne.w	800cba6 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c89e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8a2:	e12a      	b.n	800cafa <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8aa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c8ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c8b2:	b2d9      	uxtb	r1, r3
 800c8b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8be:	400a      	ands	r2, r1
 800c8c0:	b2d2      	uxtb	r2, r2
 800c8c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c8ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c8ee:	f003 0307 	and.w	r3, r3, #7
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d053      	beq.n	800c99e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c8fa:	f003 0301 	and.w	r3, r3, #1
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d011      	beq.n	800c926 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c902:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00b      	beq.n	800c926 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2201      	movs	r2, #1
 800c914:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c91c:	f043 0201 	orr.w	r2, r3, #1
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c92a:	f003 0302 	and.w	r3, r3, #2
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d011      	beq.n	800c956 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00b      	beq.n	800c956 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2202      	movs	r2, #2
 800c944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c94c:	f043 0204 	orr.w	r2, r3, #4
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c95a:	f003 0304 	and.w	r3, r3, #4
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d011      	beq.n	800c986 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c966:	f003 0301 	and.w	r3, r3, #1
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00b      	beq.n	800c986 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2204      	movs	r2, #4
 800c974:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c97c:	f043 0202 	orr.w	r2, r3, #2
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d006      	beq.n	800c99e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7ff f81d 	bl	800b9d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f040 80a7 	bne.w	800cafa <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9b4:	e853 3f00 	ldrex	r3, [r3]
 800c9b8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c9ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c9ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c9d0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c9d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c9d6:	e841 2300 	strex	r3, r2, [r1]
 800c9da:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c9dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1e4      	bne.n	800c9ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9ec:	e853 3f00 	ldrex	r3, [r3]
 800c9f0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c9f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9f8:	f023 0301 	bic.w	r3, r3, #1
 800c9fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3308      	adds	r3, #8
 800ca06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ca0a:	66ba      	str	r2, [r7, #104]	; 0x68
 800ca0c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ca10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca12:	e841 2300 	strex	r3, r2, [r1]
 800ca16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ca18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e1      	bne.n	800c9e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2220      	movs	r2, #32
 800ca22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a62      	ldr	r2, [pc, #392]	; (800cbc0 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d026      	beq.n	800ca8a <UART_RxISR_8BIT_FIFOEN+0x22e>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a60      	ldr	r2, [pc, #384]	; (800cbc4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d021      	beq.n	800ca8a <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d01a      	beq.n	800ca8a <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca5c:	e853 3f00 	ldrex	r3, [r3]
 800ca60:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ca62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	461a      	mov	r2, r3
 800ca72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca76:	657b      	str	r3, [r7, #84]	; 0x54
 800ca78:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca7e:	e841 2300 	strex	r3, r2, [r1]
 800ca82:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ca84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1e4      	bne.n	800ca54 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d130      	bne.n	800caf4 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa0:	e853 3f00 	ldrex	r3, [r3]
 800caa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa8:	f023 0310 	bic.w	r3, r3, #16
 800caac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	461a      	mov	r2, r3
 800cab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800caba:	643b      	str	r3, [r7, #64]	; 0x40
 800cabc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cac2:	e841 2300 	strex	r3, r2, [r1]
 800cac6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1e4      	bne.n	800ca98 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	69db      	ldr	r3, [r3, #28]
 800cad4:	f003 0310 	and.w	r3, r3, #16
 800cad8:	2b10      	cmp	r3, #16
 800cada:	d103      	bne.n	800cae4 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2210      	movs	r2, #16
 800cae2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7fe ff79 	bl	800b9e4 <HAL_UARTEx_RxEventCallback>
 800caf2:	e002      	b.n	800cafa <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7f5 fff5 	bl	8002ae4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cafa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d006      	beq.n	800cb10 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800cb02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb06:	f003 0320 	and.w	r3, r3, #32
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f47f aeca 	bne.w	800c8a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb16:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d049      	beq.n	800cbb6 <UART_RxISR_8BIT_FIFOEN+0x35a>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb28:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d242      	bcs.n	800cbb6 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3308      	adds	r3, #8
 800cb36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb38:	6a3b      	ldr	r3, [r7, #32]
 800cb3a:	e853 3f00 	ldrex	r3, [r3]
 800cb3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	3308      	adds	r3, #8
 800cb50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cb54:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb5c:	e841 2300 	strex	r3, r2, [r1]
 800cb60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1e3      	bne.n	800cb30 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a17      	ldr	r2, [pc, #92]	; (800cbc8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800cb6c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f043 0320 	orr.w	r3, r3, #32
 800cb82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cb90:	61bb      	str	r3, [r7, #24]
 800cb92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb94:	6979      	ldr	r1, [r7, #20]
 800cb96:	69ba      	ldr	r2, [r7, #24]
 800cb98:	e841 2300 	strex	r3, r2, [r1]
 800cb9c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d1e4      	bne.n	800cb6e <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cba4:	e007      	b.n	800cbb6 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	699a      	ldr	r2, [r3, #24]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f042 0208 	orr.w	r2, r2, #8
 800cbb4:	619a      	str	r2, [r3, #24]
}
 800cbb6:	bf00      	nop
 800cbb8:	37b0      	adds	r7, #176	; 0xb0
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	44002400 	.word	0x44002400
 800cbc4:	54002400 	.word	0x54002400
 800cbc8:	0800c4d5 	.word	0x0800c4d5

0800cbcc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b0ae      	sub	sp, #184	; 0xb8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbda:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	69db      	ldr	r3, [r3, #28]
 800cbe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc02:	2b22      	cmp	r3, #34	; 0x22
 800cc04:	f040 818b 	bne.w	800cf1e <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cc12:	e12e      	b.n	800ce72 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cc26:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800cc2a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800cc2e:	4013      	ands	r3, r2
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc3c:	1c9a      	adds	r2, r3, #2
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	69db      	ldr	r3, [r3, #28]
 800cc5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cc5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc62:	f003 0307 	and.w	r3, r3, #7
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d053      	beq.n	800cd12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc6e:	f003 0301 	and.w	r3, r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d011      	beq.n	800cc9a <UART_RxISR_16BIT_FIFOEN+0xce>
 800cc76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00b      	beq.n	800cc9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2201      	movs	r2, #1
 800cc88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc90:	f043 0201 	orr.w	r2, r3, #1
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc9e:	f003 0302 	and.w	r3, r3, #2
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d011      	beq.n	800ccca <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cca6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00b      	beq.n	800ccca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2202      	movs	r2, #2
 800ccb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc0:	f043 0204 	orr.w	r2, r3, #4
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ccce:	f003 0304 	and.w	r3, r3, #4
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d011      	beq.n	800ccfa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ccd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ccda:	f003 0301 	and.w	r3, r3, #1
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00b      	beq.n	800ccfa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2204      	movs	r2, #4
 800cce8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccf0:	f043 0202 	orr.w	r2, r3, #2
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d006      	beq.n	800cd12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7fe fe63 	bl	800b9d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f040 80a9 	bne.w	800ce72 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd28:	e853 3f00 	ldrex	r3, [r3]
 800cd2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cd2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd46:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd4e:	e841 2300 	strex	r3, r2, [r1]
 800cd52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e2      	bne.n	800cd20 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	3308      	adds	r3, #8
 800cd60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd64:	e853 3f00 	ldrex	r3, [r3]
 800cd68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cd6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd70:	f023 0301 	bic.w	r3, r3, #1
 800cd74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3308      	adds	r3, #8
 800cd7e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cd82:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cd84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cd88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cd8a:	e841 2300 	strex	r3, r2, [r1]
 800cd8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cd90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1e1      	bne.n	800cd5a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2220      	movs	r2, #32
 800cd9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4a62      	ldr	r2, [pc, #392]	; (800cf38 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d026      	beq.n	800ce02 <UART_RxISR_16BIT_FIFOEN+0x236>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a60      	ldr	r2, [pc, #384]	; (800cf3c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d021      	beq.n	800ce02 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d01a      	beq.n	800ce02 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdd4:	e853 3f00 	ldrex	r3, [r3]
 800cdd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cdda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cddc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cde0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	461a      	mov	r2, r3
 800cdea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cdee:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdf0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdf6:	e841 2300 	strex	r3, r2, [r1]
 800cdfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cdfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1e4      	bne.n	800cdcc <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d130      	bne.n	800ce6c <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce18:	e853 3f00 	ldrex	r3, [r3]
 800ce1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce20:	f023 0310 	bic.w	r3, r3, #16
 800ce24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ce32:	647b      	str	r3, [r7, #68]	; 0x44
 800ce34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce3a:	e841 2300 	strex	r3, r2, [r1]
 800ce3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d1e4      	bne.n	800ce10 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	69db      	ldr	r3, [r3, #28]
 800ce4c:	f003 0310 	and.w	r3, r3, #16
 800ce50:	2b10      	cmp	r3, #16
 800ce52:	d103      	bne.n	800ce5c <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2210      	movs	r2, #16
 800ce5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7fe fdbd 	bl	800b9e4 <HAL_UARTEx_RxEventCallback>
 800ce6a:	e002      	b.n	800ce72 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7f5 fe39 	bl	8002ae4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ce72:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d006      	beq.n	800ce88 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800ce7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce7e:	f003 0320 	and.w	r3, r3, #32
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f47f aec6 	bne.w	800cc14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ce92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d049      	beq.n	800cf2e <UART_RxISR_16BIT_FIFOEN+0x362>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cea0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d242      	bcs.n	800cf2e <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	3308      	adds	r3, #8
 800ceae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	e853 3f00 	ldrex	r3, [r3]
 800ceb6:	623b      	str	r3, [r7, #32]
   return(result);
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3308      	adds	r3, #8
 800cec8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cecc:	633a      	str	r2, [r7, #48]	; 0x30
 800cece:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ced2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ced4:	e841 2300 	strex	r3, r2, [r1]
 800ced8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1e3      	bne.n	800cea8 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4a17      	ldr	r2, [pc, #92]	; (800cf40 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800cee4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	e853 3f00 	ldrex	r3, [r3]
 800cef2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f043 0320 	orr.w	r3, r3, #32
 800cefa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf08:	61fb      	str	r3, [r7, #28]
 800cf0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0c:	69b9      	ldr	r1, [r7, #24]
 800cf0e:	69fa      	ldr	r2, [r7, #28]
 800cf10:	e841 2300 	strex	r3, r2, [r1]
 800cf14:	617b      	str	r3, [r7, #20]
   return(result);
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1e4      	bne.n	800cee6 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf1c:	e007      	b.n	800cf2e <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	699a      	ldr	r2, [r3, #24]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f042 0208 	orr.w	r2, r2, #8
 800cf2c:	619a      	str	r2, [r3, #24]
}
 800cf2e:	bf00      	nop
 800cf30:	37b8      	adds	r7, #184	; 0xb8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	44002400 	.word	0x44002400
 800cf3c:	54002400 	.word	0x54002400
 800cf40:	0800c699 	.word	0x0800c699

0800cf44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf4c:	bf00      	nop
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cf60:	bf00      	nop
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d101      	bne.n	800cf96 <HAL_UARTEx_DisableFifoMode+0x16>
 800cf92:	2302      	movs	r3, #2
 800cf94:	e027      	b.n	800cfe6 <HAL_UARTEx_DisableFifoMode+0x66>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2224      	movs	r2, #36	; 0x24
 800cfa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f022 0201 	bic.w	r2, r2, #1
 800cfbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cfc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2220      	movs	r2, #32
 800cfd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3714      	adds	r7, #20
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b084      	sub	sp, #16
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d002:	2b01      	cmp	r3, #1
 800d004:	d101      	bne.n	800d00a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d006:	2302      	movs	r3, #2
 800d008:	e02d      	b.n	800d066 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2201      	movs	r2, #1
 800d00e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2224      	movs	r2, #36	; 0x24
 800d016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f022 0201 	bic.w	r2, r2, #1
 800d030:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	683a      	ldr	r2, [r7, #0]
 800d042:	430a      	orrs	r2, r1
 800d044:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f850 	bl	800d0ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	68fa      	ldr	r2, [r7, #12]
 800d052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2220      	movs	r2, #32
 800d058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b084      	sub	sp, #16
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d101      	bne.n	800d086 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d082:	2302      	movs	r3, #2
 800d084:	e02d      	b.n	800d0e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2224      	movs	r2, #36	; 0x24
 800d092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f022 0201 	bic.w	r2, r2, #1
 800d0ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	430a      	orrs	r2, r1
 800d0c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f812 	bl	800d0ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2220      	movs	r2, #32
 800d0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d108      	bne.n	800d10e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d10c:	e031      	b.n	800d172 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d10e:	2308      	movs	r3, #8
 800d110:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d112:	2308      	movs	r3, #8
 800d114:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	0e5b      	lsrs	r3, r3, #25
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	f003 0307 	and.w	r3, r3, #7
 800d124:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	0f5b      	lsrs	r3, r3, #29
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	f003 0307 	and.w	r3, r3, #7
 800d134:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d136:	7bbb      	ldrb	r3, [r7, #14]
 800d138:	7b3a      	ldrb	r2, [r7, #12]
 800d13a:	4911      	ldr	r1, [pc, #68]	; (800d180 <UARTEx_SetNbDataToProcess+0x94>)
 800d13c:	5c8a      	ldrb	r2, [r1, r2]
 800d13e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d142:	7b3a      	ldrb	r2, [r7, #12]
 800d144:	490f      	ldr	r1, [pc, #60]	; (800d184 <UARTEx_SetNbDataToProcess+0x98>)
 800d146:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d148:	fb93 f3f2 	sdiv	r3, r3, r2
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	7b7a      	ldrb	r2, [r7, #13]
 800d158:	4909      	ldr	r1, [pc, #36]	; (800d180 <UARTEx_SetNbDataToProcess+0x94>)
 800d15a:	5c8a      	ldrb	r2, [r1, r2]
 800d15c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d160:	7b7a      	ldrb	r2, [r7, #13]
 800d162:	4908      	ldr	r1, [pc, #32]	; (800d184 <UARTEx_SetNbDataToProcess+0x98>)
 800d164:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d166:	fb93 f3f2 	sdiv	r3, r3, r2
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d172:	bf00      	nop
 800d174:	3714      	adds	r7, #20
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	08011818 	.word	0x08011818
 800d184:	08011820 	.word	0x08011820

0800d188 <qbufferCreateBySize>:

  return ret;
}

BOOL qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800d188:	b480      	push	{r7}
 800d18a:	b087      	sub	sp, #28
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
 800d194:	603b      	str	r3, [r7, #0]
  BOOL ret = TRUE;
 800d196:	2301      	movs	r3, #1
 800d198:	617b      	str	r3, [r7, #20]

  p_node->in    = 0;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2200      	movs	r2, #0
 800d19e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	611a      	str	r2, [r3, #16]

  return ret;
 800d1b8:	697b      	ldr	r3, [r7, #20]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	371c      	adds	r7, #28
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <qbufferWrite>:

BOOL qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800d1c6:	b480      	push	{r7}
 800d1c8:	b08b      	sub	sp, #44	; 0x2c
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	60f8      	str	r0, [r7, #12]
 800d1ce:	60b9      	str	r1, [r7, #8]
 800d1d0:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	623b      	str	r3, [r7, #32]
 800d1da:	e042      	b.n	800d262 <qbufferWrite+0x9c>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	6892      	ldr	r2, [r2, #8]
 800d1e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1ea:	fb01 f202 	mul.w	r2, r1, r2
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	69ba      	ldr	r2, [r7, #24]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d02c      	beq.n	800d256 <qbufferWrite+0x90>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d024      	beq.n	800d24e <qbufferWrite+0x88>
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d021      	beq.n	800d24e <qbufferWrite+0x88>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	691a      	ldr	r2, [r3, #16]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68f9      	ldr	r1, [r7, #12]
 800d214:	68c9      	ldr	r1, [r1, #12]
 800d216:	fb01 f303 	mul.w	r3, r1, r3
 800d21a:	4413      	add	r3, r2
 800d21c:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 800d21e:	2300      	movs	r3, #0
 800d220:	61fb      	str	r3, [r7, #28]
 800d222:	e00a      	b.n	800d23a <qbufferWrite+0x74>
        {
          p_buf[i] = p_data[i];
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	441a      	add	r2, r3
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	6979      	ldr	r1, [r7, #20]
 800d22e:	440b      	add	r3, r1
 800d230:	7812      	ldrb	r2, [r2, #0]
 800d232:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	3301      	adds	r3, #1
 800d238:	61fb      	str	r3, [r7, #28]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	68da      	ldr	r2, [r3, #12]
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	429a      	cmp	r2, r3
 800d242:	d8ef      	bhi.n	800d224 <qbufferWrite+0x5e>
        }
        p_data += p_node->size;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	68ba      	ldr	r2, [r7, #8]
 800d24a:	4413      	add	r3, r2
 800d24c:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	69ba      	ldr	r2, [r7, #24]
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	e002      	b.n	800d25c <qbufferWrite+0x96>
    }
    else
    {
      ret = FALSE;
 800d256:	2300      	movs	r3, #0
 800d258:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d25a:	e006      	b.n	800d26a <qbufferWrite+0xa4>
  for (int i=0; i<length; i++)
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	3301      	adds	r3, #1
 800d260:	623b      	str	r3, [r7, #32]
 800d262:	6a3b      	ldr	r3, [r7, #32]
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	429a      	cmp	r2, r3
 800d268:	d8b8      	bhi.n	800d1dc <qbufferWrite+0x16>
    }
  }

  return ret;
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	372c      	adds	r7, #44	; 0x2c
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <qbufferRead>:

BOOL qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800d278:	b480      	push	{r7}
 800d27a:	b089      	sub	sp, #36	; 0x24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800d284:	2301      	movs	r3, #1
 800d286:	61fb      	str	r3, [r7, #28]


  for (int i=0; i<length; i++)
 800d288:	2300      	movs	r3, #0
 800d28a:	61bb      	str	r3, [r7, #24]
 800d28c:	e041      	b.n	800d312 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d024      	beq.n	800d2e0 <qbufferRead+0x68>
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d021      	beq.n	800d2e0 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	691a      	ldr	r2, [r3, #16]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	68f9      	ldr	r1, [r7, #12]
 800d2a6:	68c9      	ldr	r1, [r1, #12]
 800d2a8:	fb01 f303 	mul.w	r3, r1, r3
 800d2ac:	4413      	add	r3, r2
 800d2ae:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	617b      	str	r3, [r7, #20]
 800d2b4:	e00a      	b.n	800d2cc <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	441a      	add	r2, r3
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	68b9      	ldr	r1, [r7, #8]
 800d2c0:	440b      	add	r3, r1
 800d2c2:	7812      	ldrb	r2, [r2, #0]
 800d2c4:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	617b      	str	r3, [r7, #20]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	68da      	ldr	r2, [r3, #12]
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d8ef      	bhi.n	800d2b6 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	68ba      	ldr	r2, [r7, #8]
 800d2dc:	4413      	add	r3, r2
 800d2de:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	685a      	ldr	r2, [r3, #4]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d00c      	beq.n	800d306 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	6892      	ldr	r2, [r2, #8]
 800d2f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2fa:	fb01 f202 	mul.w	r2, r1, r2
 800d2fe:	1a9a      	subs	r2, r3, r2
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	605a      	str	r2, [r3, #4]
 800d304:	e002      	b.n	800d30c <qbufferRead+0x94>
    }
    else
    {
      ret = FALSE;
 800d306:	2300      	movs	r3, #0
 800d308:	61fb      	str	r3, [r7, #28]
      break;
 800d30a:	e006      	b.n	800d31a <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	3301      	adds	r3, #1
 800d310:	61bb      	str	r3, [r7, #24]
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	429a      	cmp	r2, r3
 800d318:	d8b9      	bhi.n	800d28e <qbufferRead+0x16>
    }
  }

  return ret;
 800d31a:	69fb      	ldr	r3, [r7, #28]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3724      	adds	r7, #36	; 0x24
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	691a      	ldr	r2, [r3, #16]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	68c9      	ldr	r1, [r1, #12]
 800d33c:	fb01 f303 	mul.w	r3, r1, r3
 800d340:	4413      	add	r3, r2
}
 800d342:	4618      	mov	r0, r3
 800d344:	370c      	adds	r7, #12
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr

0800d34e <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800d34e:	b480      	push	{r7}
 800d350:	b085      	sub	sp, #20
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	6892      	ldr	r2, [r2, #8]
 800d364:	fbb3 f1f2 	udiv	r1, r3, r2
 800d368:	fb01 f202 	mul.w	r2, r1, r2
 800d36c:	1a9b      	subs	r3, r3, r2
 800d36e:	60fb      	str	r3, [r7, #12]

  return ret;
 800d370:	68fb      	ldr	r3, [r7, #12]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3714      	adds	r7, #20
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
	...

0800d380 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
  svGetChar = funcGetChar;
 800d38c:	4a18      	ldr	r2, [pc, #96]	; (800d3f0 <svCLI_Init+0x70>)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6013      	str	r3, [r2, #0]
  svPutChar = funcPutChar;
 800d392:	4a18      	ldr	r2, [pc, #96]	; (800d3f4 <svCLI_Init+0x74>)
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	6013      	str	r3, [r2, #0]
  svCommit = funcCommit;
 800d398:	4a17      	ldr	r2, [pc, #92]	; (800d3f8 <svCLI_Init+0x78>)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6013      	str	r3, [r2, #0]
  szCLIString[0] = 0;
 800d39e:	4b17      	ldr	r3, [pc, #92]	; (800d3fc <svCLI_Init+0x7c>)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800d3a4:	4b16      	ldr	r3, [pc, #88]	; (800d400 <svCLI_Init+0x80>)
 800d3a6:	4a17      	ldr	r2, [pc, #92]	; (800d404 <svCLI_Init+0x84>)
 800d3a8:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800d3aa:	4b17      	ldr	r3, [pc, #92]	; (800d408 <svCLI_Init+0x88>)
 800d3ac:	4a17      	ldr	r2, [pc, #92]	; (800d40c <svCLI_Init+0x8c>)
 800d3ae:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800d3b0:	4b17      	ldr	r3, [pc, #92]	; (800d410 <svCLI_Init+0x90>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00d      	beq.n	800d3d4 <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800d3b8:	4b16      	ldr	r3, [pc, #88]	; (800d414 <svCLI_Init+0x94>)
 800d3ba:	4a17      	ldr	r2, [pc, #92]	; (800d418 <svCLI_Init+0x98>)
 800d3bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d3c0:	6018      	str	r0, [r3, #0]
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	8019      	strh	r1, [r3, #0]
 800d3c6:	3302      	adds	r3, #2
 800d3c8:	0c0a      	lsrs	r2, r1, #16
 800d3ca:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800d3cc:	4b13      	ldr	r3, [pc, #76]	; (800d41c <svCLI_Init+0x9c>)
 800d3ce:	2206      	movs	r2, #6
 800d3d0:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800d3d2:	e007      	b.n	800d3e4 <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800d3d4:	4b0f      	ldr	r3, [pc, #60]	; (800d414 <svCLI_Init+0x94>)
 800d3d6:	4a12      	ldr	r2, [pc, #72]	; (800d420 <svCLI_Init+0xa0>)
 800d3d8:	ca07      	ldmia	r2, {r0, r1, r2}
 800d3da:	c303      	stmia	r3!, {r0, r1}
 800d3dc:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800d3de:	4b0f      	ldr	r3, [pc, #60]	; (800d41c <svCLI_Init+0x9c>)
 800d3e0:	2209      	movs	r2, #9
 800d3e2:	601a      	str	r2, [r3, #0]
}
 800d3e4:	bf00      	nop
 800d3e6:	3714      	adds	r7, #20
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	20000dd8 	.word	0x20000dd8
 800d3f4:	20000ddc 	.word	0x20000ddc
 800d3f8:	20000de0 	.word	0x20000de0
 800d3fc:	20000bc4 	.word	0x20000bc4
 800d400:	20000dd0 	.word	0x20000dd0
 800d404:	0801123c 	.word	0x0801123c
 800d408:	20000dd4 	.word	0x20000dd4
 800d40c:	0801126c 	.word	0x0801126c
 800d410:	20000050 	.word	0x20000050
 800d414:	20000054 	.word	0x20000054
 800d418:	08011520 	.word	0x08011520
 800d41c:	20000060 	.word	0x20000060
 800d420:	08011528 	.word	0x08011528

0800d424 <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800d424:	b40f      	push	{r0, r1, r2, r3}
 800d426:	b580      	push	{r7, lr}
 800d428:	b084      	sub	sp, #16
 800d42a:	af00      	add	r7, sp, #0
static char msg[256];
  va_list ap;
  int len;

  va_start(ap, fmt);
 800d42c:	f107 031c 	add.w	r3, r7, #28
 800d430:	607b      	str	r3, [r7, #4]
  len = vsprintf(msg, fmt, ap);
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	69b9      	ldr	r1, [r7, #24]
 800d436:	480f      	ldr	r0, [pc, #60]	; (800d474 <svCLI_Printf+0x50>)
 800d438:	f003 faf4 	bl	8010a24 <vsiprintf>
 800d43c:	60b8      	str	r0, [r7, #8]
  va_end(ap);
  for (int i=0;i<len;i++) {
 800d43e:	2300      	movs	r3, #0
 800d440:	60fb      	str	r3, [r7, #12]
 800d442:	e00a      	b.n	800d45a <svCLI_Printf+0x36>
    svPutChar(msg[i]);
 800d444:	4b0c      	ldr	r3, [pc, #48]	; (800d478 <svCLI_Printf+0x54>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	490a      	ldr	r1, [pc, #40]	; (800d474 <svCLI_Printf+0x50>)
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	440a      	add	r2, r1
 800d44e:	7812      	ldrb	r2, [r2, #0]
 800d450:	4610      	mov	r0, r2
 800d452:	4798      	blx	r3
  for (int i=0;i<len;i++) {
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	3301      	adds	r3, #1
 800d458:	60fb      	str	r3, [r7, #12]
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	429a      	cmp	r2, r3
 800d460:	dbf0      	blt.n	800d444 <svCLI_Printf+0x20>
  }
  return len;
 800d462:	68bb      	ldr	r3, [r7, #8]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3710      	adds	r7, #16
 800d468:	46bd      	mov	sp, r7
 800d46a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d46e:	b004      	add	sp, #16
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	20000df0 	.word	0x20000df0
 800d478:	20000ddc 	.word	0x20000ddc

0800d47c <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
  if (svPutChar) {
 800d482:	4b2d      	ldr	r3, [pc, #180]	; (800d538 <svCLI_ShowHelp+0xbc>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d04a      	beq.n	800d520 <svCLI_ShowHelp+0xa4>
    if (sCLITableBegin != sCLITablEnd) {
 800d48a:	4b2c      	ldr	r3, [pc, #176]	; (800d53c <svCLI_ShowHelp+0xc0>)
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	4b2c      	ldr	r3, [pc, #176]	; (800d540 <svCLI_ShowHelp+0xc4>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	429a      	cmp	r2, r3
 800d494:	d03e      	beq.n	800d514 <svCLI_ShowHelp+0x98>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 800d496:	2300      	movs	r3, #0
 800d498:	60fb      	str	r3, [r7, #12]
 800d49a:	e006      	b.n	800d4aa <svCLI_ShowHelp+0x2e>
 800d49c:	4b26      	ldr	r3, [pc, #152]	; (800d538 <svCLI_ShowHelp+0xbc>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	203d      	movs	r0, #61	; 0x3d
 800d4a2:	4798      	blx	r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	60fb      	str	r3, [r7, #12]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b4f      	cmp	r3, #79	; 0x4f
 800d4ae:	d9f5      	bls.n	800d49c <svCLI_ShowHelp+0x20>
      svCLI_Printf("\r\n");
 800d4b0:	4824      	ldr	r0, [pc, #144]	; (800d544 <svCLI_ShowHelp+0xc8>)
 800d4b2:	f7ff ffb7 	bl	800d424 <svCLI_Printf>
      SVCLI_t* pCLIEntry;
      int nCount = 1;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	607b      	str	r3, [r7, #4]
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800d4ba:	4b20      	ldr	r3, [pc, #128]	; (800d53c <svCLI_ShowHelp+0xc0>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	60bb      	str	r3, [r7, #8]
 800d4c0:	e012      	b.n	800d4e8 <svCLI_ShowHelp+0x6c>
        svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800d4c2:	6879      	ldr	r1, [r7, #4]
 800d4c4:	1c4b      	adds	r3, r1, #1
 800d4c6:	607b      	str	r3, [r7, #4]
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <svCLI_ShowHelp+0x5e>
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	e000      	b.n	800d4dc <svCLI_ShowHelp+0x60>
 800d4da:	4b1b      	ldr	r3, [pc, #108]	; (800d548 <svCLI_ShowHelp+0xcc>)
 800d4dc:	481b      	ldr	r0, [pc, #108]	; (800d54c <svCLI_ShowHelp+0xd0>)
 800d4de:	f7ff ffa1 	bl	800d424 <svCLI_Printf>
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	330c      	adds	r3, #12
 800d4e6:	60bb      	str	r3, [r7, #8]
 800d4e8:	4b15      	ldr	r3, [pc, #84]	; (800d540 <svCLI_ShowHelp+0xc4>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d3e7      	bcc.n	800d4c2 <svCLI_ShowHelp+0x46>
      }
      svCLI_Printf(AES_RESET);
 800d4f2:	4817      	ldr	r0, [pc, #92]	; (800d550 <svCLI_ShowHelp+0xd4>)
 800d4f4:	f7ff ff96 	bl	800d424 <svCLI_Printf>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	603b      	str	r3, [r7, #0]
 800d4fc:	e006      	b.n	800d50c <svCLI_ShowHelp+0x90>
 800d4fe:	4b0e      	ldr	r3, [pc, #56]	; (800d538 <svCLI_ShowHelp+0xbc>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	203d      	movs	r0, #61	; 0x3d
 800d504:	4798      	blx	r3
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	3301      	adds	r3, #1
 800d50a:	603b      	str	r3, [r7, #0]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	2b4f      	cmp	r3, #79	; 0x4f
 800d510:	d9f5      	bls.n	800d4fe <svCLI_ShowHelp+0x82>
 800d512:	e002      	b.n	800d51a <svCLI_ShowHelp+0x9e>
    }
    else {  // No CLI Entry
      svCLI_Printf("No CLI Entries !!!");
 800d514:	480f      	ldr	r0, [pc, #60]	; (800d554 <svCLI_ShowHelp+0xd8>)
 800d516:	f7ff ff85 	bl	800d424 <svCLI_Printf>
    }
    svCLI_Printf("\r\n");
 800d51a:	480a      	ldr	r0, [pc, #40]	; (800d544 <svCLI_ShowHelp+0xc8>)
 800d51c:	f7ff ff82 	bl	800d424 <svCLI_Printf>
  }
  if (svCommit) {
 800d520:	4b0d      	ldr	r3, [pc, #52]	; (800d558 <svCLI_ShowHelp+0xdc>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d002      	beq.n	800d52e <svCLI_ShowHelp+0xb2>
    svCommit();
 800d528:	4b0b      	ldr	r3, [pc, #44]	; (800d558 <svCLI_ShowHelp+0xdc>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4798      	blx	r3
  }
}
 800d52e:	bf00      	nop
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20000ddc 	.word	0x20000ddc
 800d53c:	20000dd0 	.word	0x20000dd0
 800d540:	20000dd4 	.word	0x20000dd4
 800d544:	08011534 	.word	0x08011534
 800d548:	08011538 	.word	0x08011538
 800d54c:	0801153c 	.word	0x0801153c
 800d550:	0801155c 	.word	0x0801155c
 800d554:	08011564 	.word	0x08011564
 800d558:	20000de0 	.word	0x20000de0

0800d55c <svCLI_KeepLoop>:

// FOR CAN SVCLI
BOOL svCLI_KeepLoop(void)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	af00      	add	r7, sp, #0
  if (Uart_Available(_DEF_UART1) == 0)
 800d560:	2000      	movs	r0, #0
 800d562:	f7f5 faa9 	bl	8002ab8 <Uart_Available>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d101      	bne.n	800d570 <svCLI_KeepLoop+0x14>
  {
    return TRUE;
 800d56c:	2301      	movs	r3, #1
 800d56e:	e000      	b.n	800d572 <svCLI_KeepLoop+0x16>
  }
  else
  {
    return FALSE;
 800d570:	2300      	movs	r3, #0
  }
}
 800d572:	4618      	mov	r0, r3
 800d574:	bd80      	pop	{r7, pc}

0800d576 <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800d576:	b480      	push	{r7}
 800d578:	b085      	sub	sp, #20
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  int nCount = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	60fb      	str	r3, [r7, #12]
  if ((szString == NULL) || (*szString == 0))
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d003      	beq.n	800d590 <_strlenOffspace+0x1a>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d104      	bne.n	800d59a <_strlenOffspace+0x24>
    return 0;
 800d590:	2300      	movs	r3, #0
 800d592:	e017      	b.n	800d5c4 <_strlenOffspace+0x4e>
  // Strip off first spaces
  while (*szString == ' ') szString++;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3301      	adds	r3, #1
 800d598:	607b      	str	r3, [r7, #4]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	2b20      	cmp	r3, #32
 800d5a0:	d0f8      	beq.n	800d594 <_strlenOffspace+0x1e>
  // Count
  while (*szString) {
 800d5a2:	e008      	b.n	800d5b6 <_strlenOffspace+0x40>
    if (*szString++ != ' ') {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	607a      	str	r2, [r7, #4]
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b20      	cmp	r3, #32
 800d5ae:	d007      	beq.n	800d5c0 <_strlenOffspace+0x4a>
      nCount++;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	60fb      	str	r3, [r7, #12]
  while (*szString) {
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1f2      	bne.n	800d5a4 <_strlenOffspace+0x2e>
 800d5be:	e000      	b.n	800d5c2 <_strlenOffspace+0x4c>
    }
    else
      break;
 800d5c0:	bf00      	nop
  }
  return nCount;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3714      	adds	r7, #20
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <_toLower>:

static char _toLower(char c)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800d5da:	79fb      	ldrb	r3, [r7, #7]
 800d5dc:	2b40      	cmp	r3, #64	; 0x40
 800d5de:	d905      	bls.n	800d5ec <_toLower+0x1c>
 800d5e0:	79fb      	ldrb	r3, [r7, #7]
 800d5e2:	2b5a      	cmp	r3, #90	; 0x5a
 800d5e4:	d802      	bhi.n	800d5ec <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	3320      	adds	r3, #32
 800d5ea:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <_isPrintable>:

static int _isPrintable(char c)
{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b083      	sub	sp, #12
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	4603      	mov	r3, r0
 800d602:	71fb      	strb	r3, [r7, #7]
  if ((' ' <= c) && (c <= '~'))
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	2b1f      	cmp	r3, #31
 800d608:	d904      	bls.n	800d614 <_isPrintable+0x1a>
 800d60a:	79fb      	ldrb	r3, [r7, #7]
 800d60c:	2b7e      	cmp	r3, #126	; 0x7e
 800d60e:	d801      	bhi.n	800d614 <_isPrintable+0x1a>
    return 1;
 800d610:	2301      	movs	r3, #1
 800d612:	e000      	b.n	800d616 <_isPrintable+0x1c>
  return 0;
 800d614:	2300      	movs	r3, #0
}
 800d616:	4618      	mov	r0, r3
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <_isHex>:

static int _isHex(char c)
{
 800d622:	b480      	push	{r7}
 800d624:	b083      	sub	sp, #12
 800d626:	af00      	add	r7, sp, #0
 800d628:	4603      	mov	r3, r0
 800d62a:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||       \
 800d62c:	79fb      	ldrb	r3, [r7, #7]
 800d62e:	2b2f      	cmp	r3, #47	; 0x2f
 800d630:	d902      	bls.n	800d638 <_isHex+0x16>
 800d632:	79fb      	ldrb	r3, [r7, #7]
 800d634:	2b39      	cmp	r3, #57	; 0x39
 800d636:	d90b      	bls.n	800d650 <_isHex+0x2e>
 800d638:	79fb      	ldrb	r3, [r7, #7]
 800d63a:	2b40      	cmp	r3, #64	; 0x40
 800d63c:	d902      	bls.n	800d644 <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||   \
 800d63e:	79fb      	ldrb	r3, [r7, #7]
 800d640:	2b46      	cmp	r3, #70	; 0x46
 800d642:	d905      	bls.n	800d650 <_isHex+0x2e>
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	2b60      	cmp	r3, #96	; 0x60
 800d648:	d904      	bls.n	800d654 <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800d64a:	79fb      	ldrb	r3, [r7, #7]
 800d64c:	2b66      	cmp	r3, #102	; 0x66
 800d64e:	d801      	bhi.n	800d654 <_isHex+0x32>
    return 1;
 800d650:	2301      	movs	r3, #1
 800d652:	e000      	b.n	800d656 <_isHex+0x34>
  return 0;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <_fromHex>:

static int _fromHex(char c) 
{
 800d662:	b480      	push	{r7}
 800d664:	b085      	sub	sp, #20
 800d666:	af00      	add	r7, sp, #0
 800d668:	4603      	mov	r3, r0
 800d66a:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800d670:	79fb      	ldrb	r3, [r7, #7]
 800d672:	2b2f      	cmp	r3, #47	; 0x2f
 800d674:	d906      	bls.n	800d684 <_fromHex+0x22>
 800d676:	79fb      	ldrb	r3, [r7, #7]
 800d678:	2b39      	cmp	r3, #57	; 0x39
 800d67a:	d803      	bhi.n	800d684 <_fromHex+0x22>
    ret = (c - '0');
 800d67c:	79fb      	ldrb	r3, [r7, #7]
 800d67e:	3b30      	subs	r3, #48	; 0x30
 800d680:	60fb      	str	r3, [r7, #12]
 800d682:	e012      	b.n	800d6aa <_fromHex+0x48>
  } 
  else if ((c >= 'a') && (c <= 'f')) {
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	2b60      	cmp	r3, #96	; 0x60
 800d688:	d906      	bls.n	800d698 <_fromHex+0x36>
 800d68a:	79fb      	ldrb	r3, [r7, #7]
 800d68c:	2b66      	cmp	r3, #102	; 0x66
 800d68e:	d803      	bhi.n	800d698 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	3b57      	subs	r3, #87	; 0x57
 800d694:	60fb      	str	r3, [r7, #12]
 800d696:	e008      	b.n	800d6aa <_fromHex+0x48>
  } 
  else if ((c >= 'A') && (c <= 'F')) {
 800d698:	79fb      	ldrb	r3, [r7, #7]
 800d69a:	2b40      	cmp	r3, #64	; 0x40
 800d69c:	d905      	bls.n	800d6aa <_fromHex+0x48>
 800d69e:	79fb      	ldrb	r3, [r7, #7]
 800d6a0:	2b46      	cmp	r3, #70	; 0x46
 800d6a2:	d802      	bhi.n	800d6aa <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	3b37      	subs	r3, #55	; 0x37
 800d6a8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b086      	sub	sp, #24
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d101      	bne.n	800d6ce <_strNoCaseCmp+0x16>
    return 0;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e026      	b.n	800d71c <_strNoCaseCmp+0x64>
  do {
    if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	60fa      	str	r2, [r7, #12]
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff ff7a 	bl	800d5d0 <_toLower>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	75fb      	strb	r3, [r7, #23]
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	1c5a      	adds	r2, r3, #1
 800d6e4:	60ba      	str	r2, [r7, #8]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7ff ff71 	bl	800d5d0 <_toLower>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	75bb      	strb	r3, [r7, #22]
 800d6f2:	7dfa      	ldrb	r2, [r7, #23]
 800d6f4:	7dbb      	ldrb	r3, [r7, #22]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d009      	beq.n	800d70e <_strNoCaseCmp+0x56>
      if ((c1 == 0) || (c2 == 0))
 800d6fa:	7dfb      	ldrb	r3, [r7, #23]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00c      	beq.n	800d71a <_strNoCaseCmp+0x62>
 800d700:	7dbb      	ldrb	r3, [r7, #22]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d009      	beq.n	800d71a <_strNoCaseCmp+0x62>
          break;
      return ((unsigned char)c1 - (unsigned char)c2);
 800d706:	7dfa      	ldrb	r2, [r7, #23]
 800d708:	7dbb      	ldrb	r3, [r7, #22]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	e006      	b.n	800d71c <_strNoCaseCmp+0x64>
    }
  } while (--nLenghth != 0);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3b01      	subs	r3, #1
 800d712:	607b      	str	r3, [r7, #4]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1d9      	bne.n	800d6ce <_strNoCaseCmp+0x16>
  return 0;
 800d71a:	2300      	movs	r3, #0
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3718      	adds	r7, #24
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
  while (nLength--) {
 800d730:	e007      	b.n	800d742 <_svMemCpy+0x1e>
    *dst++=*src++;
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	1c53      	adds	r3, r2, #1
 800d736:	60bb      	str	r3, [r7, #8]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	1c59      	adds	r1, r3, #1
 800d73c:	60f9      	str	r1, [r7, #12]
 800d73e:	7812      	ldrb	r2, [r2, #0]
 800d740:	701a      	strb	r2, [r3, #0]
  while (nLength--) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	1e5a      	subs	r2, r3, #1
 800d746:	607a      	str	r2, [r7, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1f2      	bne.n	800d732 <_svMemCpy+0xe>
  }
}
 800d74c:	bf00      	nop
 800d74e:	bf00      	nop
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
	...

0800d75c <_svClearLine>:

static void _svClearLine(void)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
  svPutChar('\r');
 800d762:	4b16      	ldr	r3, [pc, #88]	; (800d7bc <_svClearLine+0x60>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	200d      	movs	r0, #13
 800d768:	4798      	blx	r3
  // Remove Strings
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800d76a:	2300      	movs	r3, #0
 800d76c:	607b      	str	r3, [r7, #4]
 800d76e:	e006      	b.n	800d77e <_svClearLine+0x22>
    svPutChar(' ');
 800d770:	4b12      	ldr	r3, [pc, #72]	; (800d7bc <_svClearLine+0x60>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2020      	movs	r0, #32
 800d776:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3301      	adds	r3, #1
 800d77c:	607b      	str	r3, [r7, #4]
 800d77e:	4b10      	ldr	r3, [pc, #64]	; (800d7c0 <_svClearLine+0x64>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a10      	ldr	r2, [pc, #64]	; (800d7c4 <_svClearLine+0x68>)
 800d784:	6812      	ldr	r2, [r2, #0]
 800d786:	441a      	add	r2, r3
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d8f0      	bhi.n	800d770 <_svClearLine+0x14>
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800d78e:	2300      	movs	r3, #0
 800d790:	603b      	str	r3, [r7, #0]
 800d792:	e006      	b.n	800d7a2 <_svClearLine+0x46>
    svPutChar('\b');
 800d794:	4b09      	ldr	r3, [pc, #36]	; (800d7bc <_svClearLine+0x60>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2008      	movs	r0, #8
 800d79a:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	603b      	str	r3, [r7, #0]
 800d7a2:	4b07      	ldr	r3, [pc, #28]	; (800d7c0 <_svClearLine+0x64>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a07      	ldr	r2, [pc, #28]	; (800d7c4 <_svClearLine+0x68>)
 800d7a8:	6812      	ldr	r2, [r2, #0]
 800d7aa:	441a      	add	r2, r3
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d8f0      	bhi.n	800d794 <_svClearLine+0x38>
}
 800d7b2:	bf00      	nop
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	20000ddc 	.word	0x20000ddc
 800d7c0:	20000dcc 	.word	0x20000dcc
 800d7c4:	20000060 	.word	0x20000060

0800d7c8 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	71fb      	strb	r3, [r7, #7]
  switch (eHistoryCmd) {
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d03f      	beq.n	800d858 <svCLIHandleHistory+0x90>
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	dc6f      	bgt.n	800d8bc <svCLIHandleHistory+0xf4>
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d002      	beq.n	800d7e6 <svCLIHandleHistory+0x1e>
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d052      	beq.n	800d88a <svCLIHandleHistory+0xc2>
      if (snCLIHistoryPos >= snCLIHistoryCount)
        snCLIHistoryPos = 0;
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
      break;
    default:
      break;
 800d7e4:	e06a      	b.n	800d8bc <svCLIHandleHistory+0xf4>
      if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {  // Full
 800d7e6:	4b38      	ldr	r3, [pc, #224]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b03      	cmp	r3, #3
 800d7ec:	d11c      	bne.n	800d828 <svCLIHandleHistory+0x60>
        for (int i=1;i<snCLIHistoryCount;i++) {
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	60fb      	str	r3, [r7, #12]
 800d7f2:	e00f      	b.n	800d814 <svCLIHandleHistory+0x4c>
          _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	01db      	lsls	r3, r3, #7
 800d7fa:	4a34      	ldr	r2, [pc, #208]	; (800d8cc <svCLIHandleHistory+0x104>)
 800d7fc:	1898      	adds	r0, r3, r2
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	01db      	lsls	r3, r3, #7
 800d802:	4a32      	ldr	r2, [pc, #200]	; (800d8cc <svCLIHandleHistory+0x104>)
 800d804:	4413      	add	r3, r2
 800d806:	2280      	movs	r2, #128	; 0x80
 800d808:	4619      	mov	r1, r3
 800d80a:	f7ff ff8b 	bl	800d724 <_svMemCpy>
        for (int i=1;i<snCLIHistoryCount;i++) {
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3301      	adds	r3, #1
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	4b2c      	ldr	r3, [pc, #176]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	dbea      	blt.n	800d7f4 <svCLIHandleHistory+0x2c>
        snCLIHistoryCount--;
 800d81e:	4b2a      	ldr	r3, [pc, #168]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	3b01      	subs	r3, #1
 800d824:	4a28      	ldr	r2, [pc, #160]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d826:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 800d828:	4b27      	ldr	r3, [pc, #156]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	01db      	lsls	r3, r3, #7
 800d82e:	4a27      	ldr	r2, [pc, #156]	; (800d8cc <svCLIHandleHistory+0x104>)
 800d830:	4413      	add	r3, r2
 800d832:	2280      	movs	r2, #128	; 0x80
 800d834:	4926      	ldr	r1, [pc, #152]	; (800d8d0 <svCLIHandleHistory+0x108>)
 800d836:	4618      	mov	r0, r3
 800d838:	f7ff ff74 	bl	800d724 <_svMemCpy>
      if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 800d83c:	4b22      	ldr	r3, [pc, #136]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b02      	cmp	r3, #2
 800d842:	dc04      	bgt.n	800d84e <svCLIHandleHistory+0x86>
        snCLIHistoryCount++;
 800d844:	4b20      	ldr	r3, [pc, #128]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3301      	adds	r3, #1
 800d84a:	4a1f      	ldr	r2, [pc, #124]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d84c:	6013      	str	r3, [r2, #0]
      snCLIHistoryPos = snCLIHistoryCount;
 800d84e:	4b1e      	ldr	r3, [pc, #120]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a20      	ldr	r2, [pc, #128]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d854:	6013      	str	r3, [r2, #0]
      break;
 800d856:	e032      	b.n	800d8be <svCLIHandleHistory+0xf6>
      snCLIHistoryPos--;
 800d858:	4b1e      	ldr	r3, [pc, #120]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3b01      	subs	r3, #1
 800d85e:	4a1d      	ldr	r2, [pc, #116]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d860:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos < 0)
 800d862:	4b1c      	ldr	r3, [pc, #112]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	da04      	bge.n	800d874 <svCLIHandleHistory+0xac>
        snCLIHistoryPos = snCLIHistoryCount - 1;
 800d86a:	4b17      	ldr	r3, [pc, #92]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	3b01      	subs	r3, #1
 800d870:	4a18      	ldr	r2, [pc, #96]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d872:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800d874:	4b17      	ldr	r3, [pc, #92]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	01db      	lsls	r3, r3, #7
 800d87a:	4a14      	ldr	r2, [pc, #80]	; (800d8cc <svCLIHandleHistory+0x104>)
 800d87c:	4413      	add	r3, r2
 800d87e:	2280      	movs	r2, #128	; 0x80
 800d880:	4619      	mov	r1, r3
 800d882:	4813      	ldr	r0, [pc, #76]	; (800d8d0 <svCLIHandleHistory+0x108>)
 800d884:	f7ff ff4e 	bl	800d724 <_svMemCpy>
      break;
 800d888:	e019      	b.n	800d8be <svCLIHandleHistory+0xf6>
      snCLIHistoryPos++;
 800d88a:	4b12      	ldr	r3, [pc, #72]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3301      	adds	r3, #1
 800d890:	4a10      	ldr	r2, [pc, #64]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d892:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos >= snCLIHistoryCount)
 800d894:	4b0f      	ldr	r3, [pc, #60]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	4b0b      	ldr	r3, [pc, #44]	; (800d8c8 <svCLIHandleHistory+0x100>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	db02      	blt.n	800d8a6 <svCLIHandleHistory+0xde>
        snCLIHistoryPos = 0;
 800d8a0:	4b0c      	ldr	r3, [pc, #48]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	601a      	str	r2, [r3, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800d8a6:	4b0b      	ldr	r3, [pc, #44]	; (800d8d4 <svCLIHandleHistory+0x10c>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	01db      	lsls	r3, r3, #7
 800d8ac:	4a07      	ldr	r2, [pc, #28]	; (800d8cc <svCLIHandleHistory+0x104>)
 800d8ae:	4413      	add	r3, r2
 800d8b0:	2280      	movs	r2, #128	; 0x80
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	4806      	ldr	r0, [pc, #24]	; (800d8d0 <svCLIHandleHistory+0x108>)
 800d8b6:	f7ff ff35 	bl	800d724 <_svMemCpy>
      break;
 800d8ba:	e000      	b.n	800d8be <svCLIHandleHistory+0xf6>
      break;
 800d8bc:	bf00      	nop
  }
}
 800d8be:	bf00      	nop
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	20000dc4 	.word	0x20000dc4
 800d8cc:	20000c44 	.word	0x20000c44
 800d8d0:	20000bc4 	.word	0x20000bc4
 800d8d4:	20000dc8 	.word	0x20000dc8

0800d8d8 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b086      	sub	sp, #24
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  SVCLI_t* pCLIEntry;
  char* pCurrent = *line;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800d8e6:	e002      	b.n	800d8ee <svCLI_Search+0x16>
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	613b      	str	r3, [r7, #16]
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d003      	beq.n	800d8fe <svCLI_Search+0x26>
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b20      	cmp	r3, #32
 800d8fc:	d0f4      	beq.n	800d8e8 <svCLI_Search+0x10>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800d8fe:	4b22      	ldr	r3, [pc, #136]	; (800d988 <svCLI_Search+0xb0>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	617b      	str	r3, [r7, #20]
 800d904:	e035      	b.n	800d972 <svCLI_Search+0x9a>
    int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7ff fe33 	bl	800d576 <_strlenOffspace>
 800d910:	60f8      	str	r0, [r7, #12]
    int nArgLength = _strlenOffspace(pCurrent);
 800d912:	6938      	ldr	r0, [r7, #16]
 800d914:	f7ff fe2f 	bl	800d576 <_strlenOffspace>
 800d918:	60b8      	str	r0, [r7, #8]
    pCurrent[nArgLength] = 0; // NULL termination just after command for comparing
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	693a      	ldr	r2, [r7, #16]
 800d91e:	4413      	add	r3, r2
 800d920:	2200      	movs	r2, #0
 800d922:	701a      	strb	r2, [r3, #0]
    if (nCmdLength >= nArgLength) {
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	429a      	cmp	r2, r3
 800d92a:	db1f      	blt.n	800d96c <svCLI_Search+0x94>
      if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) { // Partial Command OK !!
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	4619      	mov	r1, r3
 800d934:	6938      	ldr	r0, [r7, #16]
 800d936:	f7ff febf 	bl	800d6b8 <_strNoCaseCmp>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d115      	bne.n	800d96c <svCLI_Search+0x94>
        pCurrent += (nArgLength + 1);
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	3301      	adds	r3, #1
 800d944:	693a      	ldr	r2, [r7, #16]
 800d946:	4413      	add	r3, r2
 800d948:	613b      	str	r3, [r7, #16]
        // strip off trailing spaces
        while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800d94a:	e002      	b.n	800d952 <svCLI_Search+0x7a>
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	3301      	adds	r3, #1
 800d950:	613b      	str	r3, [r7, #16]
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <svCLI_Search+0x8a>
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	2b20      	cmp	r3, #32
 800d960:	d0f4      	beq.n	800d94c <svCLI_Search+0x74>
        *line = pCurrent;   // remove command & return
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	601a      	str	r2, [r3, #0]

        return pCLIEntry;
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	e008      	b.n	800d97e <svCLI_Search+0xa6>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	330c      	adds	r3, #12
 800d970:	617b      	str	r3, [r7, #20]
 800d972:	4b06      	ldr	r3, [pc, #24]	; (800d98c <svCLI_Search+0xb4>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d3c4      	bcc.n	800d906 <svCLI_Search+0x2e>
      }
    }
  }
  return NULL;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3718      	adds	r7, #24
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	20000dd0 	.word	0x20000dd0
 800d98c:	20000dd4 	.word	0x20000dd4

0800d990 <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b08a      	sub	sp, #40	; 0x28
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
 800d99c:	603b      	str	r3, [r7, #0]
  int first = 1;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 800d9a2:	230a      	movs	r3, #10
 800d9a4:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	61fb      	str	r3, [r7, #28]
  int digit;
    // strip off leading spaces
    while (*s == ' ') s++;
 800d9aa:	e002      	b.n	800d9b2 <svCLI_ParseNumber+0x22>
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	60fb      	str	r3, [r7, #12]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	2b20      	cmp	r3, #32
 800d9b8:	d0f8      	beq.n	800d9ac <svCLI_ParseNumber+0x1c>
    if (*s == 0)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d14d      	bne.n	800da5e <svCLI_ParseNumber+0xce>
      return 0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	e05b      	b.n	800da7e <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 800d9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d011      	beq.n	800d9f0 <svCLI_ParseNumber+0x60>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b30      	cmp	r3, #48	; 0x30
 800d9d2:	d10d      	bne.n	800d9f0 <svCLI_ParseNumber+0x60>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7ff fdf8 	bl	800d5d0 <_toLower>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b78      	cmp	r3, #120	; 0x78
 800d9e4:	d104      	bne.n	800d9f0 <svCLI_ParseNumber+0x60>
        radix = 16;
 800d9e6:	2310      	movs	r3, #16
 800d9e8:	623b      	str	r3, [r7, #32]
        s += 2;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	3302      	adds	r3, #2
 800d9ee:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	1c5a      	adds	r2, r3, #1
 800d9f8:	60fa      	str	r2, [r7, #12]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 800d9fe:	7dfb      	ldrb	r3, [r7, #23]
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff fe0e 	bl	800d622 <_isHex>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d010      	beq.n	800da2e <svCLI_ParseNumber+0x9e>
 800da0c:	7dfb      	ldrb	r3, [r7, #23]
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff fe27 	bl	800d662 <_fromHex>
 800da14:	6138      	str	r0, [r7, #16]
 800da16:	693a      	ldr	r2, [r7, #16]
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	da07      	bge.n	800da2e <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 800da1e:	6a3b      	ldr	r3, [r7, #32]
 800da20:	69fa      	ldr	r2, [r7, #28]
 800da22:	fb03 f202 	mul.w	r2, r3, r2
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	4413      	add	r3, r2
 800da2a:	61fb      	str	r3, [r7, #28]
 800da2c:	e017      	b.n	800da5e <svCLI_ParseNumber+0xce>
      } 
      else {
        if (delimiter != (char *)0) {
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d012      	beq.n	800da5a <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 800da38:	e002      	b.n	800da40 <svCLI_ParseNumber+0xb0>
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	3301      	adds	r3, #1
 800da3e:	61bb      	str	r3, [r7, #24]
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d004      	beq.n	800da52 <svCLI_ParseNumber+0xc2>
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	7dfa      	ldrb	r2, [r7, #23]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d1f3      	bne.n	800da3a <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d106      	bne.n	800da68 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 800da5a:	2300      	movs	r3, #0
 800da5c:	e00f      	b.n	800da7e <svCLI_ParseNumber+0xee>
    while (*s) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d1af      	bne.n	800d9c6 <svCLI_ParseNumber+0x36>
 800da66:	e000      	b.n	800da6a <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 800da68:	bf00      	nop
      }
    }
    *val = result;
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	69fa      	ldr	r2, [r7, #28]
 800da6e:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d002      	beq.n	800da7c <svCLI_ParseNumber+0xec>
      *res = s;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800da7c:	2301      	movs	r3, #1
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3728      	adds	r7, #40	; 0x28
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
	...

0800da88 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 800da88:	b590      	push	{r4, r7, lr}
 800da8a:	b089      	sub	sp, #36	; 0x24
 800da8c:	af00      	add	r7, sp, #0
  if (s_bPwdOK == FALSE) {  // Input Password
 800da8e:	4b3a      	ldr	r3, [pc, #232]	; (800db78 <svCLI_ParsenExecute+0xf0>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d120      	bne.n	800dad8 <svCLI_ParsenExecute+0x50>
    if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 800da96:	4939      	ldr	r1, [pc, #228]	; (800db7c <svCLI_ParsenExecute+0xf4>)
 800da98:	4839      	ldr	r0, [pc, #228]	; (800db80 <svCLI_ParsenExecute+0xf8>)
 800da9a:	f7f2 fbf9 	bl	8000290 <strcmp>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d115      	bne.n	800dad0 <svCLI_ParsenExecute+0x48>
      s_bPwdOK = TRUE;
 800daa4:	4b34      	ldr	r3, [pc, #208]	; (800db78 <svCLI_ParsenExecute+0xf0>)
 800daa6:	2201      	movs	r2, #1
 800daa8:	601a      	str	r2, [r3, #0]
      svCLI_Printf("Welcome !!\r\n");
 800daaa:	4836      	ldr	r0, [pc, #216]	; (800db84 <svCLI_ParsenExecute+0xfc>)
 800daac:	f7ff fcba 	bl	800d424 <svCLI_Printf>
      strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800dab0:	4b35      	ldr	r3, [pc, #212]	; (800db88 <svCLI_ParsenExecute+0x100>)
 800dab2:	4a36      	ldr	r2, [pc, #216]	; (800db8c <svCLI_ParsenExecute+0x104>)
 800dab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dab8:	6018      	str	r0, [r3, #0]
 800daba:	3304      	adds	r3, #4
 800dabc:	8019      	strh	r1, [r3, #0]
 800dabe:	3302      	adds	r3, #2
 800dac0:	0c0a      	lsrs	r2, r1, #16
 800dac2:	701a      	strb	r2, [r3, #0]
      snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800dac4:	4b32      	ldr	r3, [pc, #200]	; (800db90 <svCLI_ParsenExecute+0x108>)
 800dac6:	2206      	movs	r2, #6
 800dac8:	601a      	str	r2, [r3, #0]
      svCLI_ShowHelp();
 800daca:	f7ff fcd7 	bl	800d47c <svCLI_ShowHelp>
    }
    else {
      svCLI_Printf("Invalid Password !!\r\n");
    }
    return;
 800dace:	e04f      	b.n	800db70 <svCLI_ParsenExecute+0xe8>
      svCLI_Printf("Invalid Password !!\r\n");
 800dad0:	4830      	ldr	r0, [pc, #192]	; (800db94 <svCLI_ParsenExecute+0x10c>)
 800dad2:	f7ff fca7 	bl	800d424 <svCLI_Printf>
    return;
 800dad6:	e04b      	b.n	800db70 <svCLI_ParsenExecute+0xe8>
  }
  SVCLI_t* pCLIEntry;
  if (sCLITableBegin == sCLITablEnd) {
 800dad8:	4b2f      	ldr	r3, [pc, #188]	; (800db98 <svCLI_ParsenExecute+0x110>)
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	4b2f      	ldr	r3, [pc, #188]	; (800db9c <svCLI_ParsenExecute+0x114>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d103      	bne.n	800daec <svCLI_ParsenExecute+0x64>
    svCLI_Printf("No CLI Entries !!!\r\n");
 800dae4:	482e      	ldr	r0, [pc, #184]	; (800dba0 <svCLI_ParsenExecute+0x118>)
 800dae6:	f7ff fc9d 	bl	800d424 <svCLI_Printf>
    return;
 800daea:	e041      	b.n	800db70 <svCLI_ParsenExecute+0xe8>
  }
  char* pLine = szCLIString;
 800daec:	4b24      	ldr	r3, [pc, #144]	; (800db80 <svCLI_ParsenExecute+0xf8>)
 800daee:	613b      	str	r3, [r7, #16]
  pCLIEntry = svCLI_Search(&pLine);
 800daf0:	f107 0310 	add.w	r3, r7, #16
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7ff feef 	bl	800d8d8 <svCLI_Search>
 800dafa:	61b8      	str	r0, [r7, #24]
  if (pCLIEntry) {
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d033      	beq.n	800db6a <svCLI_ParsenExecute+0xe2>
    // Parse more for CLI function
    unsigned int nFirst, nSecond, nCount;
    nCount = 0;
 800db02:	2300      	movs	r3, #0
 800db04:	61fb      	str	r3, [r7, #28]
    nFirst = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	60fb      	str	r3, [r7, #12]
    nSecond = 0;
 800db0a:	2300      	movs	r3, #0
 800db0c:	60bb      	str	r3, [r7, #8]
    char* pParseLine = pLine;
 800db0e:	693b      	ldr	r3, [r7, #16]
 800db10:	617b      	str	r3, [r7, #20]
    char delim[3] = ", ";
 800db12:	4a24      	ldr	r2, [pc, #144]	; (800dba4 <svCLI_ParsenExecute+0x11c>)
 800db14:	1d3b      	adds	r3, r7, #4
 800db16:	6812      	ldr	r2, [r2, #0]
 800db18:	4611      	mov	r1, r2
 800db1a:	8019      	strh	r1, [r3, #0]
 800db1c:	3302      	adds	r3, #2
 800db1e:	0c12      	lsrs	r2, r2, #16
 800db20:	701a      	strb	r2, [r3, #0]
    if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 800db22:	6938      	ldr	r0, [r7, #16]
 800db24:	1d3b      	adds	r3, r7, #4
 800db26:	f107 0210 	add.w	r2, r7, #16
 800db2a:	f107 010c 	add.w	r1, r7, #12
 800db2e:	f7ff ff2f 	bl	800d990 <svCLI_ParseNumber>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d010      	beq.n	800db5a <svCLI_ParsenExecute+0xd2>
      nCount++;
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	3301      	adds	r3, #1
 800db3c:	61fb      	str	r3, [r7, #28]
      if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 800db3e:	6938      	ldr	r0, [r7, #16]
 800db40:	1d3b      	adds	r3, r7, #4
 800db42:	f107 0210 	add.w	r2, r7, #16
 800db46:	f107 0108 	add.w	r1, r7, #8
 800db4a:	f7ff ff21 	bl	800d990 <svCLI_ParseNumber>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <svCLI_ParsenExecute+0xd2>
        nCount++;
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	3301      	adds	r3, #1
 800db58:	61fb      	str	r3, [r7, #28]
      }
    }
    pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	689c      	ldr	r4, [r3, #8]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	69f9      	ldr	r1, [r7, #28]
 800db64:	6978      	ldr	r0, [r7, #20]
 800db66:	47a0      	blx	r4
 800db68:	e002      	b.n	800db70 <svCLI_ParsenExecute+0xe8>
  }
  else {
    svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 800db6a:	480f      	ldr	r0, [pc, #60]	; (800dba8 <svCLI_ParsenExecute+0x120>)
 800db6c:	f7ff fc5a 	bl	800d424 <svCLI_Printf>
  }
}
 800db70:	3724      	adds	r7, #36	; 0x24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd90      	pop	{r4, r7, pc}
 800db76:	bf00      	nop
 800db78:	20000050 	.word	0x20000050
 800db7c:	08011578 	.word	0x08011578
 800db80:	20000bc4 	.word	0x20000bc4
 800db84:	08011584 	.word	0x08011584
 800db88:	20000054 	.word	0x20000054
 800db8c:	08011520 	.word	0x08011520
 800db90:	20000060 	.word	0x20000060
 800db94:	08011594 	.word	0x08011594
 800db98:	20000dd0 	.word	0x20000dd0
 800db9c:	20000dd4 	.word	0x20000dd4
 800dba0:	080115ac 	.word	0x080115ac
 800dba4:	080115ec 	.word	0x080115ec
 800dba8:	080115c4 	.word	0x080115c4

0800dbac <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	603b      	str	r3, [r7, #0]
 800dbb8:	4613      	mov	r3, r2
 800dbba:	71fb      	strb	r3, [r7, #7]
  if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d005      	beq.n	800dbce <svCLI_SetBypassFtn+0x22>
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d002      	beq.n	800dbce <svCLI_SetBypassFtn+0x22>
 800dbc8:	79fb      	ldrb	r3, [r7, #7]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d136      	bne.n	800dc3c <svCLI_SetBypassFtn+0x90>
    if (svBypass == NULL) {
 800dbce:	4b28      	ldr	r3, [pc, #160]	; (800dc70 <svCLI_SetBypassFtn+0xc4>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d048      	beq.n	800dc68 <svCLI_SetBypassFtn+0xbc>
      // Nothing to do..
      return;
    }
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800dbd6:	4b27      	ldr	r3, [pc, #156]	; (800dc74 <svCLI_SetBypassFtn+0xc8>)
 800dbd8:	4a27      	ldr	r2, [pc, #156]	; (800dc78 <svCLI_SetBypassFtn+0xcc>)
 800dbda:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dbde:	6018      	str	r0, [r3, #0]
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	8019      	strh	r1, [r3, #0]
 800dbe4:	3302      	adds	r3, #2
 800dbe6:	0c0a      	lsrs	r2, r1, #16
 800dbe8:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800dbea:	4b24      	ldr	r3, [pc, #144]	; (800dc7c <svCLI_SetBypassFtn+0xd0>)
 800dbec:	2206      	movs	r2, #6
 800dbee:	601a      	str	r2, [r3, #0]
    svBypass = NULL;
 800dbf0:	4b1f      	ldr	r3, [pc, #124]	; (800dc70 <svCLI_SetBypassFtn+0xc4>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	601a      	str	r2, [r3, #0]

    svExit = NULL;
 800dbf6:	4b22      	ldr	r3, [pc, #136]	; (800dc80 <svCLI_SetBypassFtn+0xd4>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	701a      	strb	r2, [r3, #0]
    sbEnter = FALSE;
 800dbfc:	4b21      	ldr	r3, [pc, #132]	; (800dc84 <svCLI_SetBypassFtn+0xd8>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	601a      	str	r2, [r3, #0]

    scntCLIString = 0;  // Clean Up Char
 800dc02:	4b21      	ldr	r3, [pc, #132]	; (800dc88 <svCLI_SetBypassFtn+0xdc>)
 800dc04:	2200      	movs	r2, #0
 800dc06:	601a      	str	r2, [r3, #0]
    // clean up line string
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 800dc08:	2300      	movs	r3, #0
 800dc0a:	617b      	str	r3, [r7, #20]
 800dc0c:	e007      	b.n	800dc1e <svCLI_SetBypassFtn+0x72>
      szCLIString[i] = '\0';
 800dc0e:	4a1f      	ldr	r2, [pc, #124]	; (800dc8c <svCLI_SetBypassFtn+0xe0>)
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	4413      	add	r3, r2
 800dc14:	2200      	movs	r2, #0
 800dc16:	701a      	strb	r2, [r3, #0]
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	617b      	str	r3, [r7, #20]
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	2b7f      	cmp	r3, #127	; 0x7f
 800dc22:	ddf4      	ble.n	800dc0e <svCLI_SetBypassFtn+0x62>
    }
    svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 800dc24:	4913      	ldr	r1, [pc, #76]	; (800dc74 <svCLI_SetBypassFtn+0xc8>)
 800dc26:	481a      	ldr	r0, [pc, #104]	; (800dc90 <svCLI_SetBypassFtn+0xe4>)
 800dc28:	f7ff fbfc 	bl	800d424 <svCLI_Printf>

    if (svCommit) {
 800dc2c:	4b19      	ldr	r3, [pc, #100]	; (800dc94 <svCLI_SetBypassFtn+0xe8>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d01a      	beq.n	800dc6a <svCLI_SetBypassFtn+0xbe>
      svCommit();
 800dc34:	4b17      	ldr	r3, [pc, #92]	; (800dc94 <svCLI_SetBypassFtn+0xe8>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4798      	blx	r3
    if (svCommit) {
 800dc3a:	e016      	b.n	800dc6a <svCLI_SetBypassFtn+0xbe>
    }
  }
  else {
    strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 800dc3c:	2209      	movs	r2, #9
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	480c      	ldr	r0, [pc, #48]	; (800dc74 <svCLI_SetBypassFtn+0xc8>)
 800dc42:	f002 ff1b 	bl	8010a7c <strncpy>
    snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 800dc46:	480b      	ldr	r0, [pc, #44]	; (800dc74 <svCLI_SetBypassFtn+0xc8>)
 800dc48:	f7f2 fb2c 	bl	80002a4 <strlen>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	461a      	mov	r2, r3
 800dc50:	4b0a      	ldr	r3, [pc, #40]	; (800dc7c <svCLI_SetBypassFtn+0xd0>)
 800dc52:	601a      	str	r2, [r3, #0]
    svBypass = pfnBypass;
 800dc54:	4a06      	ldr	r2, [pc, #24]	; (800dc70 <svCLI_SetBypassFtn+0xc4>)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6013      	str	r3, [r2, #0]
    svExit = szExit;
 800dc5a:	4a09      	ldr	r2, [pc, #36]	; (800dc80 <svCLI_SetBypassFtn+0xd4>)
 800dc5c:	79fb      	ldrb	r3, [r7, #7]
 800dc5e:	7013      	strb	r3, [r2, #0]
    sbEnter = bEnter;
 800dc60:	4a08      	ldr	r2, [pc, #32]	; (800dc84 <svCLI_SetBypassFtn+0xd8>)
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	6013      	str	r3, [r2, #0]
 800dc66:	e000      	b.n	800dc6a <svCLI_SetBypassFtn+0xbe>
      return;
 800dc68:	bf00      	nop
  }
}
 800dc6a:	3718      	adds	r7, #24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	20000de4 	.word	0x20000de4
 800dc74:	20000054 	.word	0x20000054
 800dc78:	08011520 	.word	0x08011520
 800dc7c:	20000060 	.word	0x20000060
 800dc80:	20000de8 	.word	0x20000de8
 800dc84:	20000dec 	.word	0x20000dec
 800dc88:	20000dcc 	.word	0x20000dcc
 800dc8c:	20000bc4 	.word	0x20000bc4
 800dc90:	080115f0 	.word	0x080115f0
 800dc94:	20000de0 	.word	0x20000de0

0800dc98 <svCLI_Handler>:

void svCLI_Handler(void)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
  if (sbFirst) {
    svCLI_Printf("\r\n%s", szCLI_PROMPT);
    sbFirst = 0;
  }
#endif
  if (svGetChar) {
 800dc9e:	4b92      	ldr	r3, [pc, #584]	; (800dee8 <svCLI_Handler+0x250>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 8114 	beq.w	800ded0 <svCLI_Handler+0x238>
    char bSkipPrompt = 0;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	73fb      	strb	r3, [r7, #15]
    char szChar = svGetChar();
 800dcac:	4b8e      	ldr	r3, [pc, #568]	; (800dee8 <svCLI_Handler+0x250>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4798      	blx	r3
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	71fb      	strb	r3, [r7, #7]
    if ((szChar != 0) && (szChar != '\n')) {
 800dcb6:	79fb      	ldrb	r3, [r7, #7]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f000 8109 	beq.w	800ded0 <svCLI_Handler+0x238>
 800dcbe:	79fb      	ldrb	r3, [r7, #7]
 800dcc0:	2b0a      	cmp	r3, #10
 800dcc2:	f000 8105 	beq.w	800ded0 <svCLI_Handler+0x238>
      if (szChar == '\r') {
 800dcc6:	79fb      	ldrb	r3, [r7, #7]
 800dcc8:	2b0d      	cmp	r3, #13
 800dcca:	d154      	bne.n	800dd76 <svCLI_Handler+0xde>
        sbInEsc = 0;
 800dccc:	4b87      	ldr	r3, [pc, #540]	; (800deec <svCLI_Handler+0x254>)
 800dcce:	2200      	movs	r2, #0
 800dcd0:	701a      	strb	r2, [r3, #0]
        svCLI_Printf("\r\n");
 800dcd2:	4887      	ldr	r0, [pc, #540]	; (800def0 <svCLI_Handler+0x258>)
 800dcd4:	f7ff fba6 	bl	800d424 <svCLI_Printf>
        if (scntCLIString > 0) {
 800dcd8:	4b86      	ldr	r3, [pc, #536]	; (800def4 <svCLI_Handler+0x25c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d031      	beq.n	800dd44 <svCLI_Handler+0xac>
          // Parse and Execute
          szCLIString[scntCLIString] = '\0';  // NULL Termination
 800dce0:	4b84      	ldr	r3, [pc, #528]	; (800def4 <svCLI_Handler+0x25c>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a84      	ldr	r2, [pc, #528]	; (800def8 <svCLI_Handler+0x260>)
 800dce6:	2100      	movs	r1, #0
 800dce8:	54d1      	strb	r1, [r2, r3]
          // Save to history Buffer
          svCLIHandleHistory(CLI_HISTORY_ADD);
 800dcea:	2000      	movs	r0, #0
 800dcec:	f7ff fd6c 	bl	800d7c8 <svCLIHandleHistory>
          // Call Parser
          if (svBypass) { // hellosmk 210225 added
 800dcf0:	4b82      	ldr	r3, [pc, #520]	; (800defc <svCLI_Handler+0x264>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d011      	beq.n	800dd1c <svCLI_Handler+0x84>
            bSkipPrompt = 1;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	73fb      	strb	r3, [r7, #15]
            szCLIString[scntCLIString] = '\r';
 800dcfc:	4b7d      	ldr	r3, [pc, #500]	; (800def4 <svCLI_Handler+0x25c>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a7d      	ldr	r2, [pc, #500]	; (800def8 <svCLI_Handler+0x260>)
 800dd02:	210d      	movs	r1, #13
 800dd04:	54d1      	strb	r1, [r2, r3]
            szCLIString[scntCLIString+1] = '\0';
 800dd06:	4b7b      	ldr	r3, [pc, #492]	; (800def4 <svCLI_Handler+0x25c>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	4a7a      	ldr	r2, [pc, #488]	; (800def8 <svCLI_Handler+0x260>)
 800dd0e:	2100      	movs	r1, #0
 800dd10:	54d1      	strb	r1, [r2, r3]
            svBypass(szCLIString);
 800dd12:	4b7a      	ldr	r3, [pc, #488]	; (800defc <svCLI_Handler+0x264>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4878      	ldr	r0, [pc, #480]	; (800def8 <svCLI_Handler+0x260>)
 800dd18:	4798      	blx	r3
 800dd1a:	e001      	b.n	800dd20 <svCLI_Handler+0x88>
          }
          else {
            svCLI_ParsenExecute();
 800dd1c:	f7ff feb4 	bl	800da88 <svCLI_ParsenExecute>
          }
          scntCLIString = 0;  // Clean Up Char
 800dd20:	4b74      	ldr	r3, [pc, #464]	; (800def4 <svCLI_Handler+0x25c>)
 800dd22:	2200      	movs	r2, #0
 800dd24:	601a      	str	r2, [r3, #0]
          // clean up line string
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 800dd26:	2300      	movs	r3, #0
 800dd28:	60bb      	str	r3, [r7, #8]
 800dd2a:	e007      	b.n	800dd3c <svCLI_Handler+0xa4>
            szCLIString[i] = '\0';
 800dd2c:	4a72      	ldr	r2, [pc, #456]	; (800def8 <svCLI_Handler+0x260>)
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	4413      	add	r3, r2
 800dd32:	2200      	movs	r2, #0
 800dd34:	701a      	strb	r2, [r3, #0]
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	60bb      	str	r3, [r7, #8]
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2b7f      	cmp	r3, #127	; 0x7f
 800dd40:	ddf4      	ble.n	800dd2c <svCLI_Handler+0x94>
 800dd42:	e010      	b.n	800dd66 <svCLI_Handler+0xce>
          }
        }
        else if (sbEnter && svBypass) {
 800dd44:	4b6e      	ldr	r3, [pc, #440]	; (800df00 <svCLI_Handler+0x268>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00c      	beq.n	800dd66 <svCLI_Handler+0xce>
 800dd4c:	4b6b      	ldr	r3, [pc, #428]	; (800defc <svCLI_Handler+0x264>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d008      	beq.n	800dd66 <svCLI_Handler+0xce>
          const char cszRet[2] = {'\n',0};
 800dd54:	230a      	movs	r3, #10
 800dd56:	80bb      	strh	r3, [r7, #4]
          svBypass((char*)cszRet);
 800dd58:	4b68      	ldr	r3, [pc, #416]	; (800defc <svCLI_Handler+0x264>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	1d3a      	adds	r2, r7, #4
 800dd5e:	4610      	mov	r0, r2
 800dd60:	4798      	blx	r3
          bSkipPrompt = 1;
 800dd62:	2301      	movs	r3, #1
 800dd64:	73fb      	strb	r3, [r7, #15]
        }

        if (bSkipPrompt == 0) {
 800dd66:	7bfb      	ldrb	r3, [r7, #15]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f040 80b1 	bne.w	800ded0 <svCLI_Handler+0x238>
          svCLI_Printf(szCLI_PROMPT);
 800dd6e:	4865      	ldr	r0, [pc, #404]	; (800df04 <svCLI_Handler+0x26c>)
 800dd70:	f7ff fb58 	bl	800d424 <svCLI_Printf>
 800dd74:	e0ac      	b.n	800ded0 <svCLI_Handler+0x238>
        }
      }
      else if (svBypass && (szChar == svExit)) {
 800dd76:	4b61      	ldr	r3, [pc, #388]	; (800defc <svCLI_Handler+0x264>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d019      	beq.n	800ddb2 <svCLI_Handler+0x11a>
 800dd7e:	4b62      	ldr	r3, [pc, #392]	; (800df08 <svCLI_Handler+0x270>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	79fa      	ldrb	r2, [r7, #7]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d114      	bne.n	800ddb2 <svCLI_Handler+0x11a>
        // Exit Bypass mode
        if (0x11 == svExit) {
 800dd88:	4b5f      	ldr	r3, [pc, #380]	; (800df08 <svCLI_Handler+0x270>)
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	2b11      	cmp	r3, #17
 800dd8e:	d102      	bne.n	800dd96 <svCLI_Handler+0xfe>
          svCLI_Printf("^Q");
 800dd90:	485e      	ldr	r0, [pc, #376]	; (800df0c <svCLI_Handler+0x274>)
 800dd92:	f7ff fb47 	bl	800d424 <svCLI_Printf>
        }
        svBypass(NULL); // Notify Exit !!
 800dd96:	4b59      	ldr	r3, [pc, #356]	; (800defc <svCLI_Handler+0x264>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	4798      	blx	r3
        svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 800dd9e:	2300      	movs	r3, #0
 800dda0:	2200      	movs	r2, #0
 800dda2:	2100      	movs	r1, #0
 800dda4:	2000      	movs	r0, #0
 800dda6:	f7ff ff01 	bl	800dbac <svCLI_SetBypassFtn>
        sbInEsc = 0;
 800ddaa:	4b50      	ldr	r3, [pc, #320]	; (800deec <svCLI_Handler+0x254>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	701a      	strb	r2, [r3, #0]
 800ddb0:	e08e      	b.n	800ded0 <svCLI_Handler+0x238>
      }
      else if (svBypass && (szChar == 0X1A)) {    // Ctrl+Z
 800ddb2:	4b52      	ldr	r3, [pc, #328]	; (800defc <svCLI_Handler+0x264>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d014      	beq.n	800dde4 <svCLI_Handler+0x14c>
 800ddba:	79fb      	ldrb	r3, [r7, #7]
 800ddbc:	2b1a      	cmp	r3, #26
 800ddbe:	d111      	bne.n	800dde4 <svCLI_Handler+0x14c>
        bSkipPrompt = 1;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	73fb      	strb	r3, [r7, #15]
        szCLIString[scntCLIString] = 0X1A;  //Ctrl+z
 800ddc4:	4b4b      	ldr	r3, [pc, #300]	; (800def4 <svCLI_Handler+0x25c>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a4b      	ldr	r2, [pc, #300]	; (800def8 <svCLI_Handler+0x260>)
 800ddca:	211a      	movs	r1, #26
 800ddcc:	54d1      	strb	r1, [r2, r3]
        szCLIString[scntCLIString+1] = '\0';  // NULL Termination
 800ddce:	4b49      	ldr	r3, [pc, #292]	; (800def4 <svCLI_Handler+0x25c>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	4a48      	ldr	r2, [pc, #288]	; (800def8 <svCLI_Handler+0x260>)
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	54d1      	strb	r1, [r2, r3]
        svBypass(szCLIString);
 800ddda:	4b48      	ldr	r3, [pc, #288]	; (800defc <svCLI_Handler+0x264>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4846      	ldr	r0, [pc, #280]	; (800def8 <svCLI_Handler+0x260>)
 800dde0:	4798      	blx	r3
 800dde2:	e075      	b.n	800ded0 <svCLI_Handler+0x238>
      }
      else {
        if (szChar == '\b') { // Back space
 800dde4:	79fb      	ldrb	r3, [r7, #7]
 800dde6:	2b08      	cmp	r3, #8
 800dde8:	d118      	bne.n	800de1c <svCLI_Handler+0x184>
          sbInEsc = 0;
 800ddea:	4b40      	ldr	r3, [pc, #256]	; (800deec <svCLI_Handler+0x254>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	701a      	strb	r2, [r3, #0]
          if (scntCLIString > 0) {
 800ddf0:	4b40      	ldr	r3, [pc, #256]	; (800def4 <svCLI_Handler+0x25c>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d06b      	beq.n	800ded0 <svCLI_Handler+0x238>
            _svClearLine();
 800ddf8:	f7ff fcb0 	bl	800d75c <_svClearLine>
            scntCLIString--;
 800ddfc:	4b3d      	ldr	r3, [pc, #244]	; (800def4 <svCLI_Handler+0x25c>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	3b01      	subs	r3, #1
 800de02:	4a3c      	ldr	r2, [pc, #240]	; (800def4 <svCLI_Handler+0x25c>)
 800de04:	6013      	str	r3, [r2, #0]
            szCLIString[scntCLIString] = '\0';  // NULL Termination
 800de06:	4b3b      	ldr	r3, [pc, #236]	; (800def4 <svCLI_Handler+0x25c>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a3b      	ldr	r2, [pc, #236]	; (800def8 <svCLI_Handler+0x260>)
 800de0c:	2100      	movs	r1, #0
 800de0e:	54d1      	strb	r1, [r2, r3]
            svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 800de10:	4a39      	ldr	r2, [pc, #228]	; (800def8 <svCLI_Handler+0x260>)
 800de12:	493c      	ldr	r1, [pc, #240]	; (800df04 <svCLI_Handler+0x26c>)
 800de14:	483e      	ldr	r0, [pc, #248]	; (800df10 <svCLI_Handler+0x278>)
 800de16:	f7ff fb05 	bl	800d424 <svCLI_Printf>
 800de1a:	e059      	b.n	800ded0 <svCLI_Handler+0x238>
          }
        }
        else if (szChar == '[') { // ESC sequence started
 800de1c:	79fb      	ldrb	r3, [r7, #7]
 800de1e:	2b5b      	cmp	r3, #91	; 0x5b
 800de20:	d103      	bne.n	800de2a <svCLI_Handler+0x192>
          sbInEsc = 1;
 800de22:	4b32      	ldr	r3, [pc, #200]	; (800deec <svCLI_Handler+0x254>)
 800de24:	2201      	movs	r2, #1
 800de26:	701a      	strb	r2, [r3, #0]
 800de28:	e052      	b.n	800ded0 <svCLI_Handler+0x238>
        }
        else if (_isPrintable(szChar)) {
 800de2a:	79fb      	ldrb	r3, [r7, #7]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7ff fbe4 	bl	800d5fa <_isPrintable>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d04b      	beq.n	800ded0 <svCLI_Handler+0x238>
          if (sbInEsc) {
 800de38:	4b2c      	ldr	r3, [pc, #176]	; (800deec <svCLI_Handler+0x254>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d036      	beq.n	800deae <svCLI_Handler+0x216>
            sbInEsc = 0;
 800de40:	4b2a      	ldr	r3, [pc, #168]	; (800deec <svCLI_Handler+0x254>)
 800de42:	2200      	movs	r2, #0
 800de44:	701a      	strb	r2, [r3, #0]
            if (snCLIHistoryCount > 0) {
 800de46:	4b33      	ldr	r3, [pc, #204]	; (800df14 <svCLI_Handler+0x27c>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	dd27      	ble.n	800de9e <svCLI_Handler+0x206>
              switch (szChar) {
 800de4e:	79fb      	ldrb	r3, [r7, #7]
 800de50:	2b41      	cmp	r3, #65	; 0x41
 800de52:	d002      	beq.n	800de5a <svCLI_Handler+0x1c2>
 800de54:	2b42      	cmp	r3, #66	; 0x42
 800de56:	d011      	beq.n	800de7c <svCLI_Handler+0x1e4>
                  // echo back
                  scntCLIString = svCLI_Printf("%s", szCLIString);
                  // echo back
                  break;
                default:  // Do Nothing
                  break;
 800de58:	e021      	b.n	800de9e <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_PREV);
 800de5a:	2002      	movs	r0, #2
 800de5c:	f7ff fcb4 	bl	800d7c8 <svCLIHandleHistory>
                  _svClearLine();
 800de60:	f7ff fc7c 	bl	800d75c <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 800de64:	4827      	ldr	r0, [pc, #156]	; (800df04 <svCLI_Handler+0x26c>)
 800de66:	f7ff fadd 	bl	800d424 <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 800de6a:	4923      	ldr	r1, [pc, #140]	; (800def8 <svCLI_Handler+0x260>)
 800de6c:	482a      	ldr	r0, [pc, #168]	; (800df18 <svCLI_Handler+0x280>)
 800de6e:	f7ff fad9 	bl	800d424 <svCLI_Printf>
 800de72:	4603      	mov	r3, r0
 800de74:	461a      	mov	r2, r3
 800de76:	4b1f      	ldr	r3, [pc, #124]	; (800def4 <svCLI_Handler+0x25c>)
 800de78:	601a      	str	r2, [r3, #0]
                  break;
 800de7a:	e010      	b.n	800de9e <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_NEXT);
 800de7c:	2001      	movs	r0, #1
 800de7e:	f7ff fca3 	bl	800d7c8 <svCLIHandleHistory>
                  _svClearLine();
 800de82:	f7ff fc6b 	bl	800d75c <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 800de86:	481f      	ldr	r0, [pc, #124]	; (800df04 <svCLI_Handler+0x26c>)
 800de88:	f7ff facc 	bl	800d424 <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 800de8c:	491a      	ldr	r1, [pc, #104]	; (800def8 <svCLI_Handler+0x260>)
 800de8e:	4822      	ldr	r0, [pc, #136]	; (800df18 <svCLI_Handler+0x280>)
 800de90:	f7ff fac8 	bl	800d424 <svCLI_Printf>
 800de94:	4603      	mov	r3, r0
 800de96:	461a      	mov	r2, r3
 800de98:	4b16      	ldr	r3, [pc, #88]	; (800def4 <svCLI_Handler+0x25c>)
 800de9a:	601a      	str	r2, [r3, #0]
                  break;
 800de9c:	bf00      	nop
              }
            }
            if (svCommit) {
 800de9e:	4b1f      	ldr	r3, [pc, #124]	; (800df1c <svCLI_Handler+0x284>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d01c      	beq.n	800dee0 <svCLI_Handler+0x248>
              svCommit();
 800dea6:	4b1d      	ldr	r3, [pc, #116]	; (800df1c <svCLI_Handler+0x284>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4798      	blx	r3
            }
            return;
 800deac:	e018      	b.n	800dee0 <svCLI_Handler+0x248>
          }
          if (scntCLIString < (MAX_CLI_CHARS-1)) {
 800deae:	4b11      	ldr	r3, [pc, #68]	; (800def4 <svCLI_Handler+0x25c>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b7e      	cmp	r3, #126	; 0x7e
 800deb4:	d80c      	bhi.n	800ded0 <svCLI_Handler+0x238>
            // echo back
            svPutChar(szChar);
 800deb6:	4b1a      	ldr	r3, [pc, #104]	; (800df20 <svCLI_Handler+0x288>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	79fa      	ldrb	r2, [r7, #7]
 800debc:	4610      	mov	r0, r2
 800debe:	4798      	blx	r3
            szCLIString[scntCLIString++] = szChar;
 800dec0:	4b0c      	ldr	r3, [pc, #48]	; (800def4 <svCLI_Handler+0x25c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	1c5a      	adds	r2, r3, #1
 800dec6:	490b      	ldr	r1, [pc, #44]	; (800def4 <svCLI_Handler+0x25c>)
 800dec8:	600a      	str	r2, [r1, #0]
 800deca:	490b      	ldr	r1, [pc, #44]	; (800def8 <svCLI_Handler+0x260>)
 800decc:	79fa      	ldrb	r2, [r7, #7]
 800dece:	54ca      	strb	r2, [r1, r3]
          }
        }
      }
    }
  }
  if (svCommit) {
 800ded0:	4b12      	ldr	r3, [pc, #72]	; (800df1c <svCLI_Handler+0x284>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d004      	beq.n	800dee2 <svCLI_Handler+0x24a>
    svCommit();
 800ded8:	4b10      	ldr	r3, [pc, #64]	; (800df1c <svCLI_Handler+0x284>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4798      	blx	r3
 800dede:	e000      	b.n	800dee2 <svCLI_Handler+0x24a>
            return;
 800dee0:	bf00      	nop
  }
}
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	20000dd8 	.word	0x20000dd8
 800deec:	20000ef0 	.word	0x20000ef0
 800def0:	08011534 	.word	0x08011534
 800def4:	20000dcc 	.word	0x20000dcc
 800def8:	20000bc4 	.word	0x20000bc4
 800defc:	20000de4 	.word	0x20000de4
 800df00:	20000dec 	.word	0x20000dec
 800df04:	20000054 	.word	0x20000054
 800df08:	20000de8 	.word	0x20000de8
 800df0c:	08011608 	.word	0x08011608
 800df10:	0801160c 	.word	0x0801160c
 800df14:	20000dc4 	.word	0x20000dc4
 800df18:	08011614 	.word	0x08011614
 800df1c:	20000de0 	.word	0x20000de0
 800df20:	20000ddc 	.word	0x20000ddc

0800df24 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
 800df30:	603b      	str	r3, [r7, #0]
  svCLI_ShowHelp();
 800df32:	f7ff faa3 	bl	800d47c <svCLI_ShowHelp>
}
 800df36:	bf00      	nop
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 800df3e:	b480      	push	{r7}
 800df40:	b085      	sub	sp, #20
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 800df52:	68fa      	ldr	r2, [r7, #12]
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	429a      	cmp	r2, r3
 800df58:	d303      	bcc.n	800df62 <svRingBuffer_GetCount+0x24>
	  return (h - t);
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	1ad3      	subs	r3, r2, r3
 800df60:	e009      	b.n	800df76 <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	68da      	ldr	r2, [r3, #12]
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	1ad3      	subs	r3, r2, r3
 800df6a:	461a      	mov	r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	441a      	add	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	1ad3      	subs	r3, r2, r3
}
 800df76:	4618      	mov	r0, r3
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 800df82:	b480      	push	{r7}
 800df84:	b083      	sub	sp, #12
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	609a      	str	r2, [r3, #8]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	689a      	ldr	r2, [r3, #8]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2200      	movs	r2, #0
 800df9e:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	619a      	str	r2, [r3, #24]
}
 800dfa6:	bf00      	nop
 800dfa8:	370c      	adds	r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr

0800dfb2 <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 800dfb2:	b480      	push	{r7}
 800dfb4:	b085      	sub	sp, #20
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
 800dfba:	460b      	mov	r3, r1
 800dfbc:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	78fa      	ldrb	r2, [r7, #3]
 800dfc8:	701a      	strb	r2, [r3, #0]
	rb->head++;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	685a      	ldr	r2, [r3, #4]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d109      	bne.n	800dff4 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	619a      	str	r2, [r3, #24]
		nRet = -1;
 800dfee:	f04f 33ff 	mov.w	r3, #4294967295
 800dff2:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	689b      	ldr	r3, [r3, #8]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d105      	bne.n	800e00c <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	615a      	str	r2, [r3, #20]
		nRet = -2;
 800e006:	f06f 0301 	mvn.w	r3, #1
 800e00a:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 800e00c:	68fb      	ldr	r3, [r7, #12]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3714      	adds	r7, #20
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 800e01a:	b480      	push	{r7}
 800e01c:	b085      	sub	sp, #20
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	689a      	ldr	r2, [r3, #8]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d103      	bne.n	800e048 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	609a      	str	r2, [r3, #8]
	return byData;
 800e048:	7bfb      	ldrb	r3, [r7, #15]
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3714      	adds	r7, #20
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr
	...

0800e058 <__NVIC_SetPriority>:
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	4603      	mov	r3, r0
 800e060:	6039      	str	r1, [r7, #0]
 800e062:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	db0a      	blt.n	800e082 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	490c      	ldr	r1, [pc, #48]	; (800e0a4 <__NVIC_SetPriority+0x4c>)
 800e072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e076:	0112      	lsls	r2, r2, #4
 800e078:	b2d2      	uxtb	r2, r2
 800e07a:	440b      	add	r3, r1
 800e07c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e080:	e00a      	b.n	800e098 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	b2da      	uxtb	r2, r3
 800e086:	4908      	ldr	r1, [pc, #32]	; (800e0a8 <__NVIC_SetPriority+0x50>)
 800e088:	88fb      	ldrh	r3, [r7, #6]
 800e08a:	f003 030f 	and.w	r3, r3, #15
 800e08e:	3b04      	subs	r3, #4
 800e090:	0112      	lsls	r2, r2, #4
 800e092:	b2d2      	uxtb	r2, r2
 800e094:	440b      	add	r3, r1
 800e096:	761a      	strb	r2, [r3, #24]
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	e000e100 	.word	0xe000e100
 800e0a8:	e000ed00 	.word	0xe000ed00

0800e0ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800e0b0:	4b05      	ldr	r3, [pc, #20]	; (800e0c8 <SysTick_Handler+0x1c>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e0b4:	f001 fb4e 	bl	800f754 <xTaskGetSchedulerState>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d001      	beq.n	800e0c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e0be:	f001 fef1 	bl	800fea4 <xPortSysTickHandler>
  }
}
 800e0c2:	bf00      	nop
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	e000e010 	.word	0xe000e010

0800e0cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	f06f 0004 	mvn.w	r0, #4
 800e0d6:	f7ff ffbf 	bl	800e058 <__NVIC_SetPriority>
#endif
}
 800e0da:	bf00      	nop
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b086      	sub	sp, #24
 800e0e2:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0e8:	f3ef 8305 	mrs	r3, IPSR
 800e0ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0ee:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	617b      	str	r3, [r7, #20]
 800e0f8:	e013      	b.n	800e122 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800e0fa:	f001 fb2b 	bl	800f754 <xTaskGetSchedulerState>
 800e0fe:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	2b01      	cmp	r3, #1
 800e104:	d00d      	beq.n	800e122 <IRQ_Context+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e106:	f3ef 8310 	mrs	r3, PRIMASK
 800e10a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e10c:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d105      	bne.n	800e11e <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e112:	f3ef 8311 	mrs	r3, BASEPRI
 800e116:	607b      	str	r3, [r7, #4]
  return(result);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800e11e:	2301      	movs	r3, #1
 800e120:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800e122:	697b      	ldr	r3, [r7, #20]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800e132:	f7ff ffd4 	bl	800e0de <IRQ_Context>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d003      	beq.n	800e144 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800e13c:	f06f 0305 	mvn.w	r3, #5
 800e140:	607b      	str	r3, [r7, #4]
 800e142:	e012      	b.n	800e16a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800e144:	f001 fb06 	bl	800f754 <xTaskGetSchedulerState>
 800e148:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d109      	bne.n	800e164 <osKernelInitialize+0x38>
 800e150:	4b08      	ldr	r3, [pc, #32]	; (800e174 <osKernelInitialize+0x48>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d105      	bne.n	800e164 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e158:	4b06      	ldr	r3, [pc, #24]	; (800e174 <osKernelInitialize+0x48>)
 800e15a:	2201      	movs	r2, #1
 800e15c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e15e:	2300      	movs	r3, #0
 800e160:	607b      	str	r3, [r7, #4]
 800e162:	e002      	b.n	800e16a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800e164:	f04f 33ff 	mov.w	r3, #4294967295
 800e168:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800e16a:	687b      	ldr	r3, [r7, #4]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	20000ef4 	.word	0x20000ef4

0800e178 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800e17e:	f7ff ffae 	bl	800e0de <IRQ_Context>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d003      	beq.n	800e190 <osKernelStart+0x18>
    stat = osErrorISR;
 800e188:	f06f 0305 	mvn.w	r3, #5
 800e18c:	607b      	str	r3, [r7, #4]
 800e18e:	e016      	b.n	800e1be <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800e190:	f001 fae0 	bl	800f754 <xTaskGetSchedulerState>
 800e194:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d10d      	bne.n	800e1b8 <osKernelStart+0x40>
 800e19c:	4b0a      	ldr	r3, [pc, #40]	; (800e1c8 <osKernelStart+0x50>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d109      	bne.n	800e1b8 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e1a4:	f7ff ff92 	bl	800e0cc <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800e1a8:	4b07      	ldr	r3, [pc, #28]	; (800e1c8 <osKernelStart+0x50>)
 800e1aa:	2202      	movs	r2, #2
 800e1ac:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e1ae:	f000 fda7 	bl	800ed00 <vTaskStartScheduler>
      stat = osOK;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	607b      	str	r3, [r7, #4]
 800e1b6:	e002      	b.n	800e1be <osKernelStart+0x46>
    } else {
      stat = osError;
 800e1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1bc:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800e1be:	687b      	ldr	r3, [r7, #4]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	20000ef4 	.word	0x20000ef4

0800e1cc <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08e      	sub	sp, #56	; 0x38
 800e1d0:	af04      	add	r7, sp, #16
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800e1dc:	f7ff ff7f 	bl	800e0de <IRQ_Context>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d17f      	bne.n	800e2e6 <osThreadNew+0x11a>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d07c      	beq.n	800e2e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e1ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e1f2:	2318      	movs	r3, #24
 800e1f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d045      	beq.n	800e292 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d002      	beq.n	800e214 <osThreadNew+0x48>
        name = attr->name;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	699b      	ldr	r3, [r3, #24]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	699b      	ldr	r3, [r3, #24]
 800e220:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d008      	beq.n	800e23a <osThreadNew+0x6e>
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	2b38      	cmp	r3, #56	; 0x38
 800e22c:	d805      	bhi.n	800e23a <osThreadNew+0x6e>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	f003 0301 	and.w	r3, r3, #1
 800e236:	2b00      	cmp	r3, #0
 800e238:	d001      	beq.n	800e23e <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800e23a:	2300      	movs	r3, #0
 800e23c:	e054      	b.n	800e2e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	695b      	ldr	r3, [r3, #20]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d003      	beq.n	800e24e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	695b      	ldr	r3, [r3, #20]
 800e24a:	089b      	lsrs	r3, r3, #2
 800e24c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	689b      	ldr	r3, [r3, #8]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d00e      	beq.n	800e274 <osThreadNew+0xa8>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	2b5b      	cmp	r3, #91	; 0x5b
 800e25c:	d90a      	bls.n	800e274 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e262:	2b00      	cmp	r3, #0
 800e264:	d006      	beq.n	800e274 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	695b      	ldr	r3, [r3, #20]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800e26e:	2301      	movs	r3, #1
 800e270:	61bb      	str	r3, [r7, #24]
 800e272:	e010      	b.n	800e296 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10c      	bne.n	800e296 <osThreadNew+0xca>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d108      	bne.n	800e296 <osThreadNew+0xca>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d104      	bne.n	800e296 <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800e28c:	2300      	movs	r3, #0
 800e28e:	61bb      	str	r3, [r7, #24]
 800e290:	e001      	b.n	800e296 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d110      	bne.n	800e2be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e2a4:	9202      	str	r2, [sp, #8]
 800e2a6:	9301      	str	r3, [sp, #4]
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	6a3a      	ldr	r2, [r7, #32]
 800e2b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2b2:	68f8      	ldr	r0, [r7, #12]
 800e2b4:	f000 fb80 	bl	800e9b8 <xTaskCreateStatic>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	617b      	str	r3, [r7, #20]
 800e2bc:	e013      	b.n	800e2e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e2be:	69bb      	ldr	r3, [r7, #24]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d110      	bne.n	800e2e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800e2c4:	6a3b      	ldr	r3, [r7, #32]
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	f107 0314 	add.w	r3, r7, #20
 800e2cc:	9301      	str	r3, [sp, #4]
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f000 fbb8 	bl	800ea4c <xTaskCreate>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d001      	beq.n	800e2e6 <osThreadNew+0x11a>
            hTask = NULL;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800e2e6:	697b      	ldr	r3, [r7, #20]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3728      	adds	r7, #40	; 0x28
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	4a07      	ldr	r2, [pc, #28]	; (800e31c <vApplicationGetIdleTaskMemory+0x2c>)
 800e300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	4a06      	ldr	r2, [pc, #24]	; (800e320 <vApplicationGetIdleTaskMemory+0x30>)
 800e306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e30e:	601a      	str	r2, [r3, #0]
}
 800e310:	bf00      	nop
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	20000ef8 	.word	0x20000ef8
 800e320:	20000f54 	.word	0x20000f54

0800e324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	4a07      	ldr	r2, [pc, #28]	; (800e350 <vApplicationGetTimerTaskMemory+0x2c>)
 800e334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	4a06      	ldr	r2, [pc, #24]	; (800e354 <vApplicationGetTimerTaskMemory+0x30>)
 800e33a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e342:	601a      	str	r2, [r3, #0]
}
 800e344:	bf00      	nop
 800e346:	3714      	adds	r7, #20
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr
 800e350:	20001754 	.word	0x20001754
 800e354:	200017b0 	.word	0x200017b0

0800e358 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f103 0208 	add.w	r2, r3, #8
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f04f 32ff 	mov.w	r2, #4294967295
 800e370:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f103 0208 	add.w	r2, r3, #8
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f103 0208 	add.w	r2, r3, #8
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e3a6:	bf00      	nop
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr

0800e3b2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800e3b2:	b480      	push	{r7}
 800e3b4:	b085      	sub	sp, #20
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
 800e3ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c8:	d103      	bne.n	800e3d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	691b      	ldr	r3, [r3, #16]
 800e3ce:	60fb      	str	r3, [r7, #12]
 800e3d0:	e00c      	b.n	800e3ec <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	60fb      	str	r3, [r7, #12]
 800e3d8:	e002      	b.n	800e3e0 <vListInsert+0x2e>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	60fb      	str	r3, [r7, #12]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d2f6      	bcs.n	800e3da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	685a      	ldr	r2, [r3, #4]
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	683a      	ldr	r2, [r7, #0]
 800e3fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	68fa      	ldr	r2, [r7, #12]
 800e400:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	1c5a      	adds	r2, r3, #1
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	601a      	str	r2, [r3, #0]
}
 800e418:	bf00      	nop
 800e41a:	3714      	adds	r7, #20
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	6892      	ldr	r2, [r2, #8]
 800e43a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	689b      	ldr	r3, [r3, #8]
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	6852      	ldr	r2, [r2, #4]
 800e444:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d103      	bne.n	800e458 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	689a      	ldr	r2, [r3, #8]
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	1e5a      	subs	r2, r3, #1
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3714      	adds	r7, #20
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800e482:	2301      	movs	r3, #1
 800e484:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d102      	bne.n	800e496 <xQueueGenericReset+0x1e>
 800e490:	f001 fe1a 	bl	80100c8 <ulSetInterruptMask>
 800e494:	e7fe      	b.n	800e494 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d057      	beq.n	800e54c <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d053      	beq.n	800e54c <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ac:	2100      	movs	r1, #0
 800e4ae:	fba3 2302 	umull	r2, r3, r3, r2
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d000      	beq.n	800e4b8 <xQueueGenericReset+0x40>
 800e4b6:	2101      	movs	r1, #1
 800e4b8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d146      	bne.n	800e54c <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 800e4be:	f001 fcc5 	bl	800fe4c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ca:	68b9      	ldr	r1, [r7, #8]
 800e4cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e4ce:	fb01 f303 	mul.w	r3, r1, r3
 800e4d2:	441a      	add	r2, r3
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ee:	3b01      	subs	r3, #1
 800e4f0:	68b9      	ldr	r1, [r7, #8]
 800e4f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e4f4:	fb01 f303 	mul.w	r3, r1, r3
 800e4f8:	441a      	add	r2, r3
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	22ff      	movs	r2, #255	; 0xff
 800e502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	22ff      	movs	r2, #255	; 0xff
 800e50a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10e      	bne.n	800e532 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	691b      	ldr	r3, [r3, #16]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d014      	beq.n	800e546 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	3310      	adds	r3, #16
 800e520:	4618      	mov	r0, r3
 800e522:	f000 ff0f 	bl	800f344 <xTaskRemoveFromEventList>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00c      	beq.n	800e546 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800e52c:	f001 fc7c 	bl	800fe28 <vPortYield>
 800e530:	e009      	b.n	800e546 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	3310      	adds	r3, #16
 800e536:	4618      	mov	r0, r3
 800e538:	f7ff ff0e 	bl	800e358 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	3324      	adds	r3, #36	; 0x24
 800e540:	4618      	mov	r0, r3
 800e542:	f7ff ff09 	bl	800e358 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800e546:	f001 fc93 	bl	800fe70 <vPortExitCritical>
 800e54a:	e001      	b.n	800e550 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 800e54c:	2300      	movs	r3, #0
 800e54e:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d102      	bne.n	800e55c <xQueueGenericReset+0xe4>
 800e556:	f001 fdb7 	bl	80100c8 <ulSetInterruptMask>
 800e55a:	e7fe      	b.n	800e55a <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800e55c:	68fb      	ldr	r3, [r7, #12]
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800e566:	b580      	push	{r7, lr}
 800e568:	b088      	sub	sp, #32
 800e56a:	af02      	add	r7, sp, #8
 800e56c:	60f8      	str	r0, [r7, #12]
 800e56e:	60b9      	str	r1, [r7, #8]
 800e570:	607a      	str	r2, [r7, #4]
 800e572:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800e574:	2300      	movs	r3, #0
 800e576:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d102      	bne.n	800e584 <xQueueGenericCreateStatic+0x1e>
 800e57e:	f001 fda3 	bl	80100c8 <ulSetInterruptMask>
 800e582:	e7fe      	b.n	800e582 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d028      	beq.n	800e5dc <xQueueGenericCreateStatic+0x76>
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d025      	beq.n	800e5dc <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d01f      	beq.n	800e5dc <xQueueGenericCreateStatic+0x76>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d102      	bne.n	800e5a8 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d119      	bne.n	800e5dc <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800e5a8:	2350      	movs	r3, #80	; 0x50
 800e5aa:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	2b50      	cmp	r3, #80	; 0x50
 800e5b0:	d002      	beq.n	800e5b8 <xQueueGenericCreateStatic+0x52>
 800e5b2:	f001 fd89 	bl	80100c8 <ulSetInterruptMask>
 800e5b6:	e7fe      	b.n	800e5b6 <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800e5b8:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e5c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	68b9      	ldr	r1, [r7, #8]
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f000 f80c 	bl	800e5f2 <prvInitialiseNewQueue>
 800e5da:	e005      	b.n	800e5e8 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d102      	bne.n	800e5e8 <xQueueGenericCreateStatic+0x82>
 800e5e2:	f001 fd71 	bl	80100c8 <ulSetInterruptMask>
 800e5e6:	e7fe      	b.n	800e5e6 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800e5e8:	697b      	ldr	r3, [r7, #20]
    }
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3718      	adds	r7, #24
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	60f8      	str	r0, [r7, #12]
 800e5fa:	60b9      	str	r1, [r7, #8]
 800e5fc:	607a      	str	r2, [r7, #4]
 800e5fe:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d103      	bne.n	800e60e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	69ba      	ldr	r2, [r7, #24]
 800e60a:	601a      	str	r2, [r3, #0]
 800e60c:	e002      	b.n	800e614 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	68fa      	ldr	r2, [r7, #12]
 800e618:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e620:	2101      	movs	r1, #1
 800e622:	69b8      	ldr	r0, [r7, #24]
 800e624:	f7ff ff28 	bl	800e478 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	78fa      	ldrb	r2, [r7, #3]
 800e62c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800e630:	bf00      	nop
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b08a      	sub	sp, #40	; 0x28
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800e644:	2300      	movs	r3, #0
 800e646:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d102      	bne.n	800e658 <xQueueReceive+0x20>
 800e652:	f001 fd39 	bl	80100c8 <ulSetInterruptMask>
 800e656:	e7fe      	b.n	800e656 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d103      	bne.n	800e666 <xQueueReceive+0x2e>
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e662:	2b00      	cmp	r3, #0
 800e664:	d101      	bne.n	800e66a <xQueueReceive+0x32>
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <xQueueReceive+0x34>
 800e66a:	2300      	movs	r3, #0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d102      	bne.n	800e676 <xQueueReceive+0x3e>
 800e670:	f001 fd2a 	bl	80100c8 <ulSetInterruptMask>
 800e674:	e7fe      	b.n	800e674 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e676:	f001 f86d 	bl	800f754 <xTaskGetSchedulerState>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d102      	bne.n	800e686 <xQueueReceive+0x4e>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d101      	bne.n	800e68a <xQueueReceive+0x52>
 800e686:	2301      	movs	r3, #1
 800e688:	e000      	b.n	800e68c <xQueueReceive+0x54>
 800e68a:	2300      	movs	r3, #0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d102      	bne.n	800e696 <xQueueReceive+0x5e>
 800e690:	f001 fd1a 	bl	80100c8 <ulSetInterruptMask>
 800e694:	e7fe      	b.n	800e694 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800e696:	f001 fbd9 	bl	800fe4c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e69e:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d019      	beq.n	800e6da <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6a6:	68b9      	ldr	r1, [r7, #8]
 800e6a8:	6a38      	ldr	r0, [r7, #32]
 800e6aa:	f000 f87e 	bl	800e7aa <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	1e5a      	subs	r2, r3, #1
 800e6b2:	6a3b      	ldr	r3, [r7, #32]
 800e6b4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	691b      	ldr	r3, [r3, #16]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d009      	beq.n	800e6d2 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6be:	6a3b      	ldr	r3, [r7, #32]
 800e6c0:	3310      	adds	r3, #16
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 fe3e 	bl	800f344 <xTaskRemoveFromEventList>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800e6ce:	f001 fbab 	bl	800fe28 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800e6d2:	f001 fbcd 	bl	800fe70 <vPortExitCritical>
                return pdPASS;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e063      	b.n	800e7a2 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d103      	bne.n	800e6e8 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800e6e0:	f001 fbc6 	bl	800fe70 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	e05c      	b.n	800e7a2 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d106      	bne.n	800e6fc <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800e6ee:	f107 0314 	add.w	r3, r7, #20
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f000 fef4 	bl	800f4e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800e6fc:	f001 fbb8 	bl	800fe70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800e700:	f000 fb58 	bl	800edb4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800e704:	f001 fba2 	bl	800fe4c <vPortEnterCritical>
 800e708:	6a3b      	ldr	r3, [r7, #32]
 800e70a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e70e:	b25b      	sxtb	r3, r3
 800e710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e714:	d103      	bne.n	800e71e <xQueueReceive+0xe6>
 800e716:	6a3b      	ldr	r3, [r7, #32]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e71e:	6a3b      	ldr	r3, [r7, #32]
 800e720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e724:	b25b      	sxtb	r3, r3
 800e726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e72a:	d103      	bne.n	800e734 <xQueueReceive+0xfc>
 800e72c:	6a3b      	ldr	r3, [r7, #32]
 800e72e:	2200      	movs	r2, #0
 800e730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e734:	f001 fb9c 	bl	800fe70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e738:	1d3a      	adds	r2, r7, #4
 800e73a:	f107 0314 	add.w	r3, r7, #20
 800e73e:	4611      	mov	r1, r2
 800e740:	4618      	mov	r0, r3
 800e742:	f000 fee3 	bl	800f50c <xTaskCheckForTimeOut>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d11d      	bne.n	800e788 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e74c:	6a38      	ldr	r0, [r7, #32]
 800e74e:	f000 f8a4 	bl	800e89a <prvIsQueueEmpty>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d011      	beq.n	800e77c <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e758:	6a3b      	ldr	r3, [r7, #32]
 800e75a:	3324      	adds	r3, #36	; 0x24
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	4611      	mov	r1, r2
 800e760:	4618      	mov	r0, r3
 800e762:	f000 fd95 	bl	800f290 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800e766:	6a38      	ldr	r0, [r7, #32]
 800e768:	f000 f845 	bl	800e7f6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800e76c:	f000 fb30 	bl	800edd0 <xTaskResumeAll>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d18f      	bne.n	800e696 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800e776:	f001 fb57 	bl	800fe28 <vPortYield>
 800e77a:	e78c      	b.n	800e696 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800e77c:	6a38      	ldr	r0, [r7, #32]
 800e77e:	f000 f83a 	bl	800e7f6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800e782:	f000 fb25 	bl	800edd0 <xTaskResumeAll>
 800e786:	e786      	b.n	800e696 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800e788:	6a38      	ldr	r0, [r7, #32]
 800e78a:	f000 f834 	bl	800e7f6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800e78e:	f000 fb1f 	bl	800edd0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e792:	6a38      	ldr	r0, [r7, #32]
 800e794:	f000 f881 	bl	800e89a <prvIsQueueEmpty>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f43f af7b 	beq.w	800e696 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800e7a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3728      	adds	r7, #40	; 0x28
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b082      	sub	sp, #8
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
 800e7b2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d018      	beq.n	800e7ee <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	68da      	ldr	r2, [r3, #12]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c4:	441a      	add	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	68da      	ldr	r2, [r3, #12]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d303      	bcc.n	800e7de <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	68d9      	ldr	r1, [r3, #12]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	6838      	ldr	r0, [r7, #0]
 800e7ea:	f002 f991 	bl	8010b10 <memcpy>
    }
}
 800e7ee:	bf00      	nop
 800e7f0:	3708      	adds	r7, #8
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800e7fe:	f001 fb25 	bl	800fe4c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e808:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800e80a:	e011      	b.n	800e830 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e810:	2b00      	cmp	r3, #0
 800e812:	d012      	beq.n	800e83a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	3324      	adds	r3, #36	; 0x24
 800e818:	4618      	mov	r0, r3
 800e81a:	f000 fd93 	bl	800f344 <xTaskRemoveFromEventList>
 800e81e:	4603      	mov	r3, r0
 800e820:	2b00      	cmp	r3, #0
 800e822:	d001      	beq.n	800e828 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800e824:	f000 fec8 	bl	800f5b8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800e828:	7bfb      	ldrb	r3, [r7, #15]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800e830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e834:	2b00      	cmp	r3, #0
 800e836:	dce9      	bgt.n	800e80c <prvUnlockQueue+0x16>
 800e838:	e000      	b.n	800e83c <prvUnlockQueue+0x46>
                    break;
 800e83a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	22ff      	movs	r2, #255	; 0xff
 800e840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800e844:	f001 fb14 	bl	800fe70 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800e848:	f001 fb00 	bl	800fe4c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e852:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800e854:	e011      	b.n	800e87a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	691b      	ldr	r3, [r3, #16]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d012      	beq.n	800e884 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3310      	adds	r3, #16
 800e862:	4618      	mov	r0, r3
 800e864:	f000 fd6e 	bl	800f344 <xTaskRemoveFromEventList>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d001      	beq.n	800e872 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800e86e:	f000 fea3 	bl	800f5b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800e872:	7bbb      	ldrb	r3, [r7, #14]
 800e874:	3b01      	subs	r3, #1
 800e876:	b2db      	uxtb	r3, r3
 800e878:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800e87a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	dce9      	bgt.n	800e856 <prvUnlockQueue+0x60>
 800e882:	e000      	b.n	800e886 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800e884:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	22ff      	movs	r2, #255	; 0xff
 800e88a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800e88e:	f001 faef 	bl	800fe70 <vPortExitCritical>
}
 800e892:	bf00      	nop
 800e894:	3710      	adds	r7, #16
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}

0800e89a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b084      	sub	sp, #16
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800e8a2:	f001 fad3 	bl	800fe4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d102      	bne.n	800e8b4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	60fb      	str	r3, [r7, #12]
 800e8b2:	e001      	b.n	800e8b8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800e8b8:	f001 fada 	bl	800fe70 <vPortExitCritical>

    return xReturn;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
	...

0800e8c8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <vQueueAddToRegistry+0x1a>
 800e8dc:	f001 fbf4 	bl	80100c8 <ulSetInterruptMask>
 800e8e0:	e7fe      	b.n	800e8e0 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d024      	beq.n	800e932 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	60fb      	str	r3, [r7, #12]
 800e8ec:	e01e      	b.n	800e92c <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800e8ee:	4a17      	ldr	r2, [pc, #92]	; (800e94c <vQueueAddToRegistry+0x84>)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	00db      	lsls	r3, r3, #3
 800e8f4:	4413      	add	r3, r2
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d105      	bne.n	800e90a <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	00db      	lsls	r3, r3, #3
 800e902:	4a12      	ldr	r2, [pc, #72]	; (800e94c <vQueueAddToRegistry+0x84>)
 800e904:	4413      	add	r3, r2
 800e906:	60bb      	str	r3, [r7, #8]
                    break;
 800e908:	e013      	b.n	800e932 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10a      	bne.n	800e926 <vQueueAddToRegistry+0x5e>
 800e910:	4a0e      	ldr	r2, [pc, #56]	; (800e94c <vQueueAddToRegistry+0x84>)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d104      	bne.n	800e926 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	4a0a      	ldr	r2, [pc, #40]	; (800e94c <vQueueAddToRegistry+0x84>)
 800e922:	4413      	add	r3, r2
 800e924:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3301      	adds	r3, #1
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2b07      	cmp	r3, #7
 800e930:	d9dd      	bls.n	800e8ee <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d005      	beq.n	800e944 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	683a      	ldr	r2, [r7, #0]
 800e93c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800e944:	bf00      	nop
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	200027b0 	.word	0x200027b0

0800e950 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800e960:	f001 fa74 	bl	800fe4c <vPortEnterCritical>
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e96a:	b25b      	sxtb	r3, r3
 800e96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e970:	d103      	bne.n	800e97a <vQueueWaitForMessageRestricted+0x2a>
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e980:	b25b      	sxtb	r3, r3
 800e982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e986:	d103      	bne.n	800e990 <vQueueWaitForMessageRestricted+0x40>
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2200      	movs	r2, #0
 800e98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e990:	f001 fa6e 	bl	800fe70 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d106      	bne.n	800e9aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	3324      	adds	r3, #36	; 0x24
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	68b9      	ldr	r1, [r7, #8]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f000 fc8f 	bl	800f2c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800e9aa:	6978      	ldr	r0, [r7, #20]
 800e9ac:	f7ff ff23 	bl	800e7f6 <prvUnlockQueue>
    }
 800e9b0:	bf00      	nop
 800e9b2:	3718      	adds	r7, #24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b08c      	sub	sp, #48	; 0x30
 800e9bc:	af04      	add	r7, sp, #16
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
 800e9c4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800e9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d102      	bne.n	800e9d2 <xTaskCreateStatic+0x1a>
 800e9cc:	f001 fb7c 	bl	80100c8 <ulSetInterruptMask>
 800e9d0:	e7fe      	b.n	800e9d0 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d102      	bne.n	800e9de <xTaskCreateStatic+0x26>
 800e9d8:	f001 fb76 	bl	80100c8 <ulSetInterruptMask>
 800e9dc:	e7fe      	b.n	800e9dc <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800e9de:	235c      	movs	r3, #92	; 0x5c
 800e9e0:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	2b5c      	cmp	r3, #92	; 0x5c
 800e9e6:	d002      	beq.n	800e9ee <xTaskCreateStatic+0x36>
 800e9e8:	f001 fb6e 	bl	80100c8 <ulSetInterruptMask>
 800e9ec:	e7fe      	b.n	800e9ec <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e9ee:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d023      	beq.n	800ea3e <xTaskCreateStatic+0x86>
 800e9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d020      	beq.n	800ea3e <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fe:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800ea00:	225c      	movs	r2, #92	; 0x5c
 800ea02:	2100      	movs	r1, #0
 800ea04:	69f8      	ldr	r0, [r7, #28]
 800ea06:	f002 f831 	bl	8010a6c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea0e:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	2202      	movs	r2, #2
 800ea14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ea18:	2300      	movs	r3, #0
 800ea1a:	9303      	str	r3, [sp, #12]
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	9302      	str	r3, [sp, #8]
 800ea20:	f107 0318 	add.w	r3, r7, #24
 800ea24:	9301      	str	r3, [sp, #4]
 800ea26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea28:	9300      	str	r3, [sp, #0]
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	68b9      	ldr	r1, [r7, #8]
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f000 f855 	bl	800eae0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800ea36:	69f8      	ldr	r0, [r7, #28]
 800ea38:	f000 f8d2 	bl	800ebe0 <prvAddNewTaskToReadyList>
 800ea3c:	e001      	b.n	800ea42 <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800ea42:	69bb      	ldr	r3, [r7, #24]
    }
 800ea44:	4618      	mov	r0, r3
 800ea46:	3720      	adds	r7, #32
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b08c      	sub	sp, #48	; 0x30
 800ea50:	af04      	add	r7, sp, #16
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	603b      	str	r3, [r7, #0]
 800ea58:	4613      	mov	r3, r2
 800ea5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ea5c:	88fb      	ldrh	r3, [r7, #6]
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4618      	mov	r0, r3
 800ea62:	f001 fb91 	bl	8010188 <pvPortMalloc>
 800ea66:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d013      	beq.n	800ea96 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ea6e:	205c      	movs	r0, #92	; 0x5c
 800ea70:	f001 fb8a 	bl	8010188 <pvPortMalloc>
 800ea74:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800ea76:	69fb      	ldr	r3, [r7, #28]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d008      	beq.n	800ea8e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800ea7c:	225c      	movs	r2, #92	; 0x5c
 800ea7e:	2100      	movs	r1, #0
 800ea80:	69f8      	ldr	r0, [r7, #28]
 800ea82:	f001 fff3 	bl	8010a6c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	631a      	str	r2, [r3, #48]	; 0x30
 800ea8c:	e005      	b.n	800ea9a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800ea8e:	6978      	ldr	r0, [r7, #20]
 800ea90:	f001 fc24 	bl	80102dc <vPortFree>
 800ea94:	e001      	b.n	800ea9a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800ea96:	2300      	movs	r3, #0
 800ea98:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d017      	beq.n	800ead0 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eaa8:	88fa      	ldrh	r2, [r7, #6]
 800eaaa:	2300      	movs	r3, #0
 800eaac:	9303      	str	r3, [sp, #12]
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	9302      	str	r3, [sp, #8]
 800eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab4:	9301      	str	r3, [sp, #4]
 800eab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	68b9      	ldr	r1, [r7, #8]
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f000 f80e 	bl	800eae0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800eac4:	69f8      	ldr	r0, [r7, #28]
 800eac6:	f000 f88b 	bl	800ebe0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800eaca:	2301      	movs	r3, #1
 800eacc:	61bb      	str	r3, [r7, #24]
 800eace:	e002      	b.n	800ead6 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ead0:	f04f 33ff 	mov.w	r3, #4294967295
 800ead4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800ead6:	69bb      	ldr	r3, [r7, #24]
    }
 800ead8:	4618      	mov	r0, r3
 800eada:	3720      	adds	r7, #32
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
 800eaec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	21a5      	movs	r1, #165	; 0xa5
 800eafa:	f001 ffb7 	bl	8010a6c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	4413      	add	r3, r2
 800eb0e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	f023 0307 	bic.w	r3, r3, #7
 800eb16:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	f003 0307 	and.w	r3, r3, #7
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d002      	beq.n	800eb28 <prvInitialiseNewTask+0x48>
 800eb22:	f001 fad1 	bl	80100c8 <ulSetInterruptMask>
 800eb26:	e7fe      	b.n	800eb26 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d01e      	beq.n	800eb6c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb2e:	2300      	movs	r3, #0
 800eb30:	617b      	str	r3, [r7, #20]
 800eb32:	e012      	b.n	800eb5a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eb34:	68ba      	ldr	r2, [r7, #8]
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	4413      	add	r3, r2
 800eb3a:	7819      	ldrb	r1, [r3, #0]
 800eb3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	4413      	add	r3, r2
 800eb42:	3334      	adds	r3, #52	; 0x34
 800eb44:	460a      	mov	r2, r1
 800eb46:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d006      	beq.n	800eb62 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	3301      	adds	r3, #1
 800eb58:	617b      	str	r3, [r7, #20]
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	2b0f      	cmp	r3, #15
 800eb5e:	d9e9      	bls.n	800eb34 <prvInitialiseNewTask+0x54>
 800eb60:	e000      	b.n	800eb64 <prvInitialiseNewTask+0x84>
            {
                break;
 800eb62:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800eb6c:	6a3b      	ldr	r3, [r7, #32]
 800eb6e:	2b37      	cmp	r3, #55	; 0x37
 800eb70:	d902      	bls.n	800eb78 <prvInitialiseNewTask+0x98>
 800eb72:	f001 faa9 	bl	80100c8 <ulSetInterruptMask>
 800eb76:	e7fe      	b.n	800eb76 <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eb78:	6a3b      	ldr	r3, [r7, #32]
 800eb7a:	2b37      	cmp	r3, #55	; 0x37
 800eb7c:	d901      	bls.n	800eb82 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eb7e:	2337      	movs	r3, #55	; 0x37
 800eb80:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	6a3a      	ldr	r2, [r7, #32]
 800eb86:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800eb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8a:	6a3a      	ldr	r2, [r7, #32]
 800eb8c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb90:	3304      	adds	r3, #4
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff fc00 	bl	800e398 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9a:	3318      	adds	r3, #24
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff fbfb 	bl	800e398 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eba6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eba8:	6a3b      	ldr	r3, [r7, #32]
 800ebaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ebae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebb6:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	6938      	ldr	r0, [r7, #16]
 800ebc2:	f001 f99f 	bl	800ff04 <pxPortInitialiseStack>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebca:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800ebcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d002      	beq.n	800ebd8 <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebd6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ebd8:	bf00      	nop
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800ebe8:	f001 f930 	bl	800fe4c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800ebec:	4b3e      	ldr	r3, [pc, #248]	; (800ece8 <prvAddNewTaskToReadyList+0x108>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	4a3d      	ldr	r2, [pc, #244]	; (800ece8 <prvAddNewTaskToReadyList+0x108>)
 800ebf4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800ebf6:	4b3d      	ldr	r3, [pc, #244]	; (800ecec <prvAddNewTaskToReadyList+0x10c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d109      	bne.n	800ec12 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800ebfe:	4a3b      	ldr	r2, [pc, #236]	; (800ecec <prvAddNewTaskToReadyList+0x10c>)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ec04:	4b38      	ldr	r3, [pc, #224]	; (800ece8 <prvAddNewTaskToReadyList+0x108>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d110      	bne.n	800ec2e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800ec0c:	f000 fcf0 	bl	800f5f0 <prvInitialiseTaskLists>
 800ec10:	e00d      	b.n	800ec2e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800ec12:	4b37      	ldr	r3, [pc, #220]	; (800ecf0 <prvAddNewTaskToReadyList+0x110>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d109      	bne.n	800ec2e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ec1a:	4b34      	ldr	r3, [pc, #208]	; (800ecec <prvAddNewTaskToReadyList+0x10c>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d802      	bhi.n	800ec2e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800ec28:	4a30      	ldr	r2, [pc, #192]	; (800ecec <prvAddNewTaskToReadyList+0x10c>)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800ec2e:	4b31      	ldr	r3, [pc, #196]	; (800ecf4 <prvAddNewTaskToReadyList+0x114>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	3301      	adds	r3, #1
 800ec34:	4a2f      	ldr	r2, [pc, #188]	; (800ecf4 <prvAddNewTaskToReadyList+0x114>)
 800ec36:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ec38:	4b2e      	ldr	r3, [pc, #184]	; (800ecf4 <prvAddNewTaskToReadyList+0x114>)
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec44:	4b2c      	ldr	r3, [pc, #176]	; (800ecf8 <prvAddNewTaskToReadyList+0x118>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d903      	bls.n	800ec54 <prvAddNewTaskToReadyList+0x74>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec50:	4a29      	ldr	r2, [pc, #164]	; (800ecf8 <prvAddNewTaskToReadyList+0x118>)
 800ec52:	6013      	str	r3, [r2, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec58:	4928      	ldr	r1, [pc, #160]	; (800ecfc <prvAddNewTaskToReadyList+0x11c>)
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4413      	add	r3, r2
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	440b      	add	r3, r1
 800ec64:	3304      	adds	r3, #4
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	60fb      	str	r3, [r7, #12]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	609a      	str	r2, [r3, #8]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	689a      	ldr	r2, [r3, #8]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	60da      	str	r2, [r3, #12]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	689b      	ldr	r3, [r3, #8]
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	3204      	adds	r2, #4
 800ec80:	605a      	str	r2, [r3, #4]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	1d1a      	adds	r2, r3, #4
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	609a      	str	r2, [r3, #8]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec8e:	4613      	mov	r3, r2
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	4413      	add	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4a19      	ldr	r2, [pc, #100]	; (800ecfc <prvAddNewTaskToReadyList+0x11c>)
 800ec98:	441a      	add	r2, r3
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	615a      	str	r2, [r3, #20]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eca2:	4916      	ldr	r1, [pc, #88]	; (800ecfc <prvAddNewTaskToReadyList+0x11c>)
 800eca4:	4613      	mov	r3, r2
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	4413      	add	r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	440b      	add	r3, r1
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	1c59      	adds	r1, r3, #1
 800ecb2:	4812      	ldr	r0, [pc, #72]	; (800ecfc <prvAddNewTaskToReadyList+0x11c>)
 800ecb4:	4613      	mov	r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	4413      	add	r3, r2
 800ecba:	009b      	lsls	r3, r3, #2
 800ecbc:	4403      	add	r3, r0
 800ecbe:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800ecc0:	f001 f8d6 	bl	800fe70 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800ecc4:	4b0a      	ldr	r3, [pc, #40]	; (800ecf0 <prvAddNewTaskToReadyList+0x110>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d008      	beq.n	800ecde <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eccc:	4b07      	ldr	r3, [pc, #28]	; (800ecec <prvAddNewTaskToReadyList+0x10c>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d201      	bcs.n	800ecde <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800ecda:	f001 f8a5 	bl	800fe28 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ecde:	bf00      	nop
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20002cc4 	.word	0x20002cc4
 800ecec:	200027f0 	.word	0x200027f0
 800ecf0:	20002cd0 	.word	0x20002cd0
 800ecf4:	20002ce0 	.word	0x20002ce0
 800ecf8:	20002ccc 	.word	0x20002ccc
 800ecfc:	200027f4 	.word	0x200027f4

0800ed00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b088      	sub	sp, #32
 800ed04:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ed0e:	463a      	mov	r2, r7
 800ed10:	1d39      	adds	r1, r7, #4
 800ed12:	f107 0308 	add.w	r3, r7, #8
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7ff faea 	bl	800e2f0 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	9202      	str	r2, [sp, #8]
 800ed24:	9301      	str	r3, [sp, #4]
 800ed26:	2300      	movs	r3, #0
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	460a      	mov	r2, r1
 800ed2e:	491a      	ldr	r1, [pc, #104]	; (800ed98 <vTaskStartScheduler+0x98>)
 800ed30:	481a      	ldr	r0, [pc, #104]	; (800ed9c <vTaskStartScheduler+0x9c>)
 800ed32:	f7ff fe41 	bl	800e9b8 <xTaskCreateStatic>
 800ed36:	4603      	mov	r3, r0
 800ed38:	4a19      	ldr	r2, [pc, #100]	; (800eda0 <vTaskStartScheduler+0xa0>)
 800ed3a:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800ed3c:	4b18      	ldr	r3, [pc, #96]	; (800eda0 <vTaskStartScheduler+0xa0>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d002      	beq.n	800ed4a <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800ed44:	2301      	movs	r3, #1
 800ed46:	60fb      	str	r3, [r7, #12]
 800ed48:	e001      	b.n	800ed4e <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d102      	bne.n	800ed5a <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800ed54:	f000 fd8a 	bl	800f86c <xTimerCreateTimerTask>
 800ed58:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d10e      	bne.n	800ed7e <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800ed60:	f001 f9b2 	bl	80100c8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800ed64:	4b0f      	ldr	r3, [pc, #60]	; (800eda4 <vTaskStartScheduler+0xa4>)
 800ed66:	f04f 32ff 	mov.w	r2, #4294967295
 800ed6a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800ed6c:	4b0e      	ldr	r3, [pc, #56]	; (800eda8 <vTaskStartScheduler+0xa8>)
 800ed6e:	2201      	movs	r2, #1
 800ed70:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed72:	4b0e      	ldr	r3, [pc, #56]	; (800edac <vTaskStartScheduler+0xac>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800ed78:	f001 f94e 	bl	8010018 <xPortStartScheduler>
 800ed7c:	e006      	b.n	800ed8c <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed84:	d102      	bne.n	800ed8c <vTaskStartScheduler+0x8c>
 800ed86:	f001 f99f 	bl	80100c8 <ulSetInterruptMask>
 800ed8a:	e7fe      	b.n	800ed8a <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800ed8c:	4b08      	ldr	r3, [pc, #32]	; (800edb0 <vTaskStartScheduler+0xb0>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
}
 800ed90:	bf00      	nop
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	08011634 	.word	0x08011634
 800ed9c:	0800f5d1 	.word	0x0800f5d1
 800eda0:	20002ce8 	.word	0x20002ce8
 800eda4:	20002ce4 	.word	0x20002ce4
 800eda8:	20002cd0 	.word	0x20002cd0
 800edac:	20002cc8 	.word	0x20002cc8
 800edb0:	20000064 	.word	0x20000064

0800edb4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800edb4:	b480      	push	{r7}
 800edb6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800edb8:	4b04      	ldr	r3, [pc, #16]	; (800edcc <vTaskSuspendAll+0x18>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	3301      	adds	r3, #1
 800edbe:	4a03      	ldr	r2, [pc, #12]	; (800edcc <vTaskSuspendAll+0x18>)
 800edc0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800edc2:	bf00      	nop
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr
 800edcc:	20002cec 	.word	0x20002cec

0800edd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800edd6:	2300      	movs	r3, #0
 800edd8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800edda:	2300      	movs	r3, #0
 800eddc:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800edde:	4b6a      	ldr	r3, [pc, #424]	; (800ef88 <xTaskResumeAll+0x1b8>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d102      	bne.n	800edec <xTaskResumeAll+0x1c>
 800ede6:	f001 f96f 	bl	80100c8 <ulSetInterruptMask>
 800edea:	e7fe      	b.n	800edea <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800edec:	f001 f82e 	bl	800fe4c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800edf0:	4b65      	ldr	r3, [pc, #404]	; (800ef88 <xTaskResumeAll+0x1b8>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3b01      	subs	r3, #1
 800edf6:	4a64      	ldr	r2, [pc, #400]	; (800ef88 <xTaskResumeAll+0x1b8>)
 800edf8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edfa:	4b63      	ldr	r3, [pc, #396]	; (800ef88 <xTaskResumeAll+0x1b8>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f040 80bb 	bne.w	800ef7a <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee04:	4b61      	ldr	r3, [pc, #388]	; (800ef8c <xTaskResumeAll+0x1bc>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	f000 80b6 	beq.w	800ef7a <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee0e:	e08b      	b.n	800ef28 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee10:	4b5f      	ldr	r3, [pc, #380]	; (800ef90 <xTaskResumeAll+0x1c0>)
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee1c:	60bb      	str	r3, [r7, #8]
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	69db      	ldr	r3, [r3, #28]
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	6a12      	ldr	r2, [r2, #32]
 800ee26:	609a      	str	r2, [r3, #8]
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	6a1b      	ldr	r3, [r3, #32]
 800ee2c:	697a      	ldr	r2, [r7, #20]
 800ee2e:	69d2      	ldr	r2, [r2, #28]
 800ee30:	605a      	str	r2, [r3, #4]
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	685a      	ldr	r2, [r3, #4]
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	3318      	adds	r3, #24
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d103      	bne.n	800ee46 <xTaskResumeAll+0x76>
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	6a1a      	ldr	r2, [r3, #32]
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	605a      	str	r2, [r3, #4]
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	629a      	str	r2, [r3, #40]	; 0x28
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	1e5a      	subs	r2, r3, #1
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	695b      	ldr	r3, [r3, #20]
 800ee5a:	607b      	str	r3, [r7, #4]
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	697a      	ldr	r2, [r7, #20]
 800ee62:	68d2      	ldr	r2, [r2, #12]
 800ee64:	609a      	str	r2, [r3, #8]
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	68db      	ldr	r3, [r3, #12]
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	6892      	ldr	r2, [r2, #8]
 800ee6e:	605a      	str	r2, [r3, #4]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685a      	ldr	r2, [r3, #4]
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	3304      	adds	r3, #4
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d103      	bne.n	800ee84 <xTaskResumeAll+0xb4>
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	68da      	ldr	r2, [r3, #12]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	605a      	str	r2, [r3, #4]
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	2200      	movs	r2, #0
 800ee88:	615a      	str	r2, [r3, #20]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	1e5a      	subs	r2, r3, #1
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee98:	4b3e      	ldr	r3, [pc, #248]	; (800ef94 <xTaskResumeAll+0x1c4>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d903      	bls.n	800eea8 <xTaskResumeAll+0xd8>
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea4:	4a3b      	ldr	r2, [pc, #236]	; (800ef94 <xTaskResumeAll+0x1c4>)
 800eea6:	6013      	str	r3, [r2, #0]
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeac:	493a      	ldr	r1, [pc, #232]	; (800ef98 <xTaskResumeAll+0x1c8>)
 800eeae:	4613      	mov	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4413      	add	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	440b      	add	r3, r1
 800eeb8:	3304      	adds	r3, #4
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	603b      	str	r3, [r7, #0]
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	609a      	str	r2, [r3, #8]
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	689a      	ldr	r2, [r3, #8]
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	60da      	str	r2, [r3, #12]
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	697a      	ldr	r2, [r7, #20]
 800eed2:	3204      	adds	r2, #4
 800eed4:	605a      	str	r2, [r3, #4]
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	1d1a      	adds	r2, r3, #4
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	609a      	str	r2, [r3, #8]
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee2:	4613      	mov	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	4413      	add	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4a2b      	ldr	r2, [pc, #172]	; (800ef98 <xTaskResumeAll+0x1c8>)
 800eeec:	441a      	add	r2, r3
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	615a      	str	r2, [r3, #20]
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef6:	4928      	ldr	r1, [pc, #160]	; (800ef98 <xTaskResumeAll+0x1c8>)
 800eef8:	4613      	mov	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	4413      	add	r3, r2
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	440b      	add	r3, r1
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	1c59      	adds	r1, r3, #1
 800ef06:	4824      	ldr	r0, [pc, #144]	; (800ef98 <xTaskResumeAll+0x1c8>)
 800ef08:	4613      	mov	r3, r2
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	4413      	add	r3, r2
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	4403      	add	r3, r0
 800ef12:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef18:	4b20      	ldr	r3, [pc, #128]	; (800ef9c <xTaskResumeAll+0x1cc>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d302      	bcc.n	800ef28 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 800ef22:	4b1f      	ldr	r3, [pc, #124]	; (800efa0 <xTaskResumeAll+0x1d0>)
 800ef24:	2201      	movs	r2, #1
 800ef26:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef28:	4b19      	ldr	r3, [pc, #100]	; (800ef90 <xTaskResumeAll+0x1c0>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f47f af6f 	bne.w	800ee10 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800ef38:	f000 fbf0 	bl	800f71c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ef3c:	4b19      	ldr	r3, [pc, #100]	; (800efa4 <xTaskResumeAll+0x1d4>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d010      	beq.n	800ef6a <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800ef48:	f000 f83e 	bl	800efc8 <xTaskIncrementTick>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d002      	beq.n	800ef58 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 800ef52:	4b13      	ldr	r3, [pc, #76]	; (800efa0 <xTaskResumeAll+0x1d0>)
 800ef54:	2201      	movs	r2, #1
 800ef56:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d1f1      	bne.n	800ef48 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 800ef64:	4b0f      	ldr	r3, [pc, #60]	; (800efa4 <xTaskResumeAll+0x1d4>)
 800ef66:	2200      	movs	r2, #0
 800ef68:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800ef6a:	4b0d      	ldr	r3, [pc, #52]	; (800efa0 <xTaskResumeAll+0x1d0>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d003      	beq.n	800ef7a <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800ef72:	2301      	movs	r3, #1
 800ef74:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800ef76:	f000 ff57 	bl	800fe28 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800ef7a:	f000 ff79 	bl	800fe70 <vPortExitCritical>

    return xAlreadyYielded;
 800ef7e:	693b      	ldr	r3, [r7, #16]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3718      	adds	r7, #24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	20002cec 	.word	0x20002cec
 800ef8c:	20002cc4 	.word	0x20002cc4
 800ef90:	20002c84 	.word	0x20002c84
 800ef94:	20002ccc 	.word	0x20002ccc
 800ef98:	200027f4 	.word	0x200027f4
 800ef9c:	200027f0 	.word	0x200027f0
 800efa0:	20002cd8 	.word	0x20002cd8
 800efa4:	20002cd4 	.word	0x20002cd4

0800efa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800efae:	4b05      	ldr	r3, [pc, #20]	; (800efc4 <xTaskGetTickCount+0x1c>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800efb4:	687b      	ldr	r3, [r7, #4]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	370c      	adds	r7, #12
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	20002cc8 	.word	0x20002cc8

0800efc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b088      	sub	sp, #32
 800efcc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800efce:	2300      	movs	r3, #0
 800efd0:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efd2:	4b7a      	ldr	r3, [pc, #488]	; (800f1bc <xTaskIncrementTick+0x1f4>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f040 80e5 	bne.w	800f1a6 <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800efdc:	4b78      	ldr	r3, [pc, #480]	; (800f1c0 <xTaskIncrementTick+0x1f8>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3301      	adds	r3, #1
 800efe2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800efe4:	4a76      	ldr	r2, [pc, #472]	; (800f1c0 <xTaskIncrementTick+0x1f8>)
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d118      	bne.n	800f022 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800eff0:	4b74      	ldr	r3, [pc, #464]	; (800f1c4 <xTaskIncrementTick+0x1fc>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d002      	beq.n	800f000 <xTaskIncrementTick+0x38>
 800effa:	f001 f865 	bl	80100c8 <ulSetInterruptMask>
 800effe:	e7fe      	b.n	800effe <xTaskIncrementTick+0x36>
 800f000:	4b70      	ldr	r3, [pc, #448]	; (800f1c4 <xTaskIncrementTick+0x1fc>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	617b      	str	r3, [r7, #20]
 800f006:	4b70      	ldr	r3, [pc, #448]	; (800f1c8 <xTaskIncrementTick+0x200>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a6e      	ldr	r2, [pc, #440]	; (800f1c4 <xTaskIncrementTick+0x1fc>)
 800f00c:	6013      	str	r3, [r2, #0]
 800f00e:	4a6e      	ldr	r2, [pc, #440]	; (800f1c8 <xTaskIncrementTick+0x200>)
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	4b6d      	ldr	r3, [pc, #436]	; (800f1cc <xTaskIncrementTick+0x204>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	3301      	adds	r3, #1
 800f01a:	4a6c      	ldr	r2, [pc, #432]	; (800f1cc <xTaskIncrementTick+0x204>)
 800f01c:	6013      	str	r3, [r2, #0]
 800f01e:	f000 fb7d 	bl	800f71c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800f022:	4b6b      	ldr	r3, [pc, #428]	; (800f1d0 <xTaskIncrementTick+0x208>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	69ba      	ldr	r2, [r7, #24]
 800f028:	429a      	cmp	r2, r3
 800f02a:	f0c0 80a7 	bcc.w	800f17c <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f02e:	4b65      	ldr	r3, [pc, #404]	; (800f1c4 <xTaskIncrementTick+0x1fc>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d104      	bne.n	800f042 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f038:	4b65      	ldr	r3, [pc, #404]	; (800f1d0 <xTaskIncrementTick+0x208>)
 800f03a:	f04f 32ff 	mov.w	r2, #4294967295
 800f03e:	601a      	str	r2, [r3, #0]
                    break;
 800f040:	e09c      	b.n	800f17c <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f042:	4b60      	ldr	r3, [pc, #384]	; (800f1c4 <xTaskIncrementTick+0x1fc>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800f052:	69ba      	ldr	r2, [r7, #24]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	429a      	cmp	r2, r3
 800f058:	d203      	bcs.n	800f062 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800f05a:	4a5d      	ldr	r2, [pc, #372]	; (800f1d0 <xTaskIncrementTick+0x208>)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800f060:	e08c      	b.n	800f17c <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	695b      	ldr	r3, [r3, #20]
 800f066:	60bb      	str	r3, [r7, #8]
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	693a      	ldr	r2, [r7, #16]
 800f06e:	68d2      	ldr	r2, [r2, #12]
 800f070:	609a      	str	r2, [r3, #8]
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	693a      	ldr	r2, [r7, #16]
 800f078:	6892      	ldr	r2, [r2, #8]
 800f07a:	605a      	str	r2, [r3, #4]
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	685a      	ldr	r2, [r3, #4]
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	3304      	adds	r3, #4
 800f084:	429a      	cmp	r2, r3
 800f086:	d103      	bne.n	800f090 <xTaskIncrementTick+0xc8>
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	68da      	ldr	r2, [r3, #12]
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	605a      	str	r2, [r3, #4]
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	2200      	movs	r2, #0
 800f094:	615a      	str	r2, [r3, #20]
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	1e5a      	subs	r2, r3, #1
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d01e      	beq.n	800f0e6 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ac:	607b      	str	r3, [r7, #4]
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	69db      	ldr	r3, [r3, #28]
 800f0b2:	693a      	ldr	r2, [r7, #16]
 800f0b4:	6a12      	ldr	r2, [r2, #32]
 800f0b6:	609a      	str	r2, [r3, #8]
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	6a1b      	ldr	r3, [r3, #32]
 800f0bc:	693a      	ldr	r2, [r7, #16]
 800f0be:	69d2      	ldr	r2, [r2, #28]
 800f0c0:	605a      	str	r2, [r3, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	685a      	ldr	r2, [r3, #4]
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	3318      	adds	r3, #24
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d103      	bne.n	800f0d6 <xTaskIncrementTick+0x10e>
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	6a1a      	ldr	r2, [r3, #32]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	605a      	str	r2, [r3, #4]
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	629a      	str	r2, [r3, #40]	; 0x28
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	1e5a      	subs	r2, r3, #1
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ea:	4b3a      	ldr	r3, [pc, #232]	; (800f1d4 <xTaskIncrementTick+0x20c>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d903      	bls.n	800f0fa <xTaskIncrementTick+0x132>
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f6:	4a37      	ldr	r2, [pc, #220]	; (800f1d4 <xTaskIncrementTick+0x20c>)
 800f0f8:	6013      	str	r3, [r2, #0]
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0fe:	4936      	ldr	r1, [pc, #216]	; (800f1d8 <xTaskIncrementTick+0x210>)
 800f100:	4613      	mov	r3, r2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	4413      	add	r3, r2
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	440b      	add	r3, r1
 800f10a:	3304      	adds	r3, #4
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	603b      	str	r3, [r7, #0]
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	609a      	str	r2, [r3, #8]
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	689a      	ldr	r2, [r3, #8]
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	60da      	str	r2, [r3, #12]
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	693a      	ldr	r2, [r7, #16]
 800f124:	3204      	adds	r2, #4
 800f126:	605a      	str	r2, [r3, #4]
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	1d1a      	adds	r2, r3, #4
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	609a      	str	r2, [r3, #8]
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f134:	4613      	mov	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	4413      	add	r3, r2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	4a26      	ldr	r2, [pc, #152]	; (800f1d8 <xTaskIncrementTick+0x210>)
 800f13e:	441a      	add	r2, r3
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	615a      	str	r2, [r3, #20]
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f148:	4923      	ldr	r1, [pc, #140]	; (800f1d8 <xTaskIncrementTick+0x210>)
 800f14a:	4613      	mov	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	440b      	add	r3, r1
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	1c59      	adds	r1, r3, #1
 800f158:	481f      	ldr	r0, [pc, #124]	; (800f1d8 <xTaskIncrementTick+0x210>)
 800f15a:	4613      	mov	r3, r2
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	4413      	add	r3, r2
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4403      	add	r3, r0
 800f164:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f16a:	4b1c      	ldr	r3, [pc, #112]	; (800f1dc <xTaskIncrementTick+0x214>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f170:	429a      	cmp	r2, r3
 800f172:	f67f af5c 	bls.w	800f02e <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800f176:	2301      	movs	r3, #1
 800f178:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f17a:	e758      	b.n	800f02e <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f17c:	4b17      	ldr	r3, [pc, #92]	; (800f1dc <xTaskIncrementTick+0x214>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f182:	4915      	ldr	r1, [pc, #84]	; (800f1d8 <xTaskIncrementTick+0x210>)
 800f184:	4613      	mov	r3, r2
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	4413      	add	r3, r2
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	440b      	add	r3, r1
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b01      	cmp	r3, #1
 800f192:	d901      	bls.n	800f198 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800f194:	2301      	movs	r3, #1
 800f196:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800f198:	4b11      	ldr	r3, [pc, #68]	; (800f1e0 <xTaskIncrementTick+0x218>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d007      	beq.n	800f1b0 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	61fb      	str	r3, [r7, #28]
 800f1a4:	e004      	b.n	800f1b0 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800f1a6:	4b0f      	ldr	r3, [pc, #60]	; (800f1e4 <xTaskIncrementTick+0x21c>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	4a0d      	ldr	r2, [pc, #52]	; (800f1e4 <xTaskIncrementTick+0x21c>)
 800f1ae:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800f1b0:	69fb      	ldr	r3, [r7, #28]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3720      	adds	r7, #32
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	20002cec 	.word	0x20002cec
 800f1c0:	20002cc8 	.word	0x20002cc8
 800f1c4:	20002c7c 	.word	0x20002c7c
 800f1c8:	20002c80 	.word	0x20002c80
 800f1cc:	20002cdc 	.word	0x20002cdc
 800f1d0:	20002ce4 	.word	0x20002ce4
 800f1d4:	20002ccc 	.word	0x20002ccc
 800f1d8:	200027f4 	.word	0x200027f4
 800f1dc:	200027f0 	.word	0x200027f0
 800f1e0:	20002cd8 	.word	0x20002cd8
 800f1e4:	20002cd4 	.word	0x20002cd4

0800f1e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f1ee:	4b23      	ldr	r3, [pc, #140]	; (800f27c <vTaskSwitchContext+0x94>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d003      	beq.n	800f1fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800f1f6:	4b22      	ldr	r3, [pc, #136]	; (800f280 <vTaskSwitchContext+0x98>)
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800f1fc:	e039      	b.n	800f272 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800f1fe:	4b20      	ldr	r3, [pc, #128]	; (800f280 <vTaskSwitchContext+0x98>)
 800f200:	2200      	movs	r2, #0
 800f202:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f204:	4b1f      	ldr	r3, [pc, #124]	; (800f284 <vTaskSwitchContext+0x9c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	607b      	str	r3, [r7, #4]
 800f20a:	e008      	b.n	800f21e <vTaskSwitchContext+0x36>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d102      	bne.n	800f218 <vTaskSwitchContext+0x30>
 800f212:	f000 ff59 	bl	80100c8 <ulSetInterruptMask>
 800f216:	e7fe      	b.n	800f216 <vTaskSwitchContext+0x2e>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3b01      	subs	r3, #1
 800f21c:	607b      	str	r3, [r7, #4]
 800f21e:	491a      	ldr	r1, [pc, #104]	; (800f288 <vTaskSwitchContext+0xa0>)
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	4613      	mov	r3, r2
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	4413      	add	r3, r2
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	440b      	add	r3, r1
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d0ec      	beq.n	800f20c <vTaskSwitchContext+0x24>
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	4613      	mov	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	4a12      	ldr	r2, [pc, #72]	; (800f288 <vTaskSwitchContext+0xa0>)
 800f23e:	4413      	add	r3, r2
 800f240:	603b      	str	r3, [r7, #0]
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	685a      	ldr	r2, [r3, #4]
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	605a      	str	r2, [r3, #4]
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	685a      	ldr	r2, [r3, #4]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	3308      	adds	r3, #8
 800f254:	429a      	cmp	r2, r3
 800f256:	d104      	bne.n	800f262 <vTaskSwitchContext+0x7a>
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	685a      	ldr	r2, [r3, #4]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	605a      	str	r2, [r3, #4]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	4a08      	ldr	r2, [pc, #32]	; (800f28c <vTaskSwitchContext+0xa4>)
 800f26a:	6013      	str	r3, [r2, #0]
 800f26c:	4a05      	ldr	r2, [pc, #20]	; (800f284 <vTaskSwitchContext+0x9c>)
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6013      	str	r3, [r2, #0]
}
 800f272:	bf00      	nop
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	20002cec 	.word	0x20002cec
 800f280:	20002cd8 	.word	0x20002cd8
 800f284:	20002ccc 	.word	0x20002ccc
 800f288:	200027f4 	.word	0x200027f4
 800f28c:	200027f0 	.word	0x200027f0

0800f290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d102      	bne.n	800f2a6 <vTaskPlaceOnEventList+0x16>
 800f2a0:	f000 ff12 	bl	80100c8 <ulSetInterruptMask>
 800f2a4:	e7fe      	b.n	800f2a4 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2a6:	4b07      	ldr	r3, [pc, #28]	; (800f2c4 <vTaskPlaceOnEventList+0x34>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	3318      	adds	r3, #24
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7ff f87f 	bl	800e3b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2b4:	2101      	movs	r1, #1
 800f2b6:	6838      	ldr	r0, [r7, #0]
 800f2b8:	f000 fa6a 	bl	800f790 <prvAddCurrentTaskToDelayedList>
}
 800f2bc:	bf00      	nop
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	200027f0 	.word	0x200027f0

0800f2c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d102      	bne.n	800f2e0 <vTaskPlaceOnEventListRestricted+0x18>
 800f2da:	f000 fef5 	bl	80100c8 <ulSetInterruptMask>
 800f2de:	e7fe      	b.n	800f2de <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	617b      	str	r3, [r7, #20]
 800f2e6:	4b16      	ldr	r3, [pc, #88]	; (800f340 <vTaskPlaceOnEventListRestricted+0x78>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	697a      	ldr	r2, [r7, #20]
 800f2ec:	61da      	str	r2, [r3, #28]
 800f2ee:	4b14      	ldr	r3, [pc, #80]	; (800f340 <vTaskPlaceOnEventListRestricted+0x78>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	697a      	ldr	r2, [r7, #20]
 800f2f4:	6892      	ldr	r2, [r2, #8]
 800f2f6:	621a      	str	r2, [r3, #32]
 800f2f8:	4b11      	ldr	r3, [pc, #68]	; (800f340 <vTaskPlaceOnEventListRestricted+0x78>)
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	689b      	ldr	r3, [r3, #8]
 800f300:	3218      	adds	r2, #24
 800f302:	605a      	str	r2, [r3, #4]
 800f304:	4b0e      	ldr	r3, [pc, #56]	; (800f340 <vTaskPlaceOnEventListRestricted+0x78>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f103 0218 	add.w	r2, r3, #24
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	609a      	str	r2, [r3, #8]
 800f310:	4b0b      	ldr	r3, [pc, #44]	; (800f340 <vTaskPlaceOnEventListRestricted+0x78>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	68fa      	ldr	r2, [r7, #12]
 800f316:	629a      	str	r2, [r3, #40]	; 0x28
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	1c5a      	adds	r2, r3, #1
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800f328:	f04f 33ff 	mov.w	r3, #4294967295
 800f32c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f32e:	6879      	ldr	r1, [r7, #4]
 800f330:	68b8      	ldr	r0, [r7, #8]
 800f332:	f000 fa2d 	bl	800f790 <prvAddCurrentTaskToDelayedList>
    }
 800f336:	bf00      	nop
 800f338:	3718      	adds	r7, #24
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	200027f0 	.word	0x200027f0

0800f344 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800f354:	69bb      	ldr	r3, [r7, #24]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d102      	bne.n	800f360 <xTaskRemoveFromEventList+0x1c>
 800f35a:	f000 feb5 	bl	80100c8 <ulSetInterruptMask>
 800f35e:	e7fe      	b.n	800f35e <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f364:	617b      	str	r3, [r7, #20]
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	69db      	ldr	r3, [r3, #28]
 800f36a:	69ba      	ldr	r2, [r7, #24]
 800f36c:	6a12      	ldr	r2, [r2, #32]
 800f36e:	609a      	str	r2, [r3, #8]
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	6a1b      	ldr	r3, [r3, #32]
 800f374:	69ba      	ldr	r2, [r7, #24]
 800f376:	69d2      	ldr	r2, [r2, #28]
 800f378:	605a      	str	r2, [r3, #4]
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	685a      	ldr	r2, [r3, #4]
 800f37e:	69bb      	ldr	r3, [r7, #24]
 800f380:	3318      	adds	r3, #24
 800f382:	429a      	cmp	r2, r3
 800f384:	d103      	bne.n	800f38e <xTaskRemoveFromEventList+0x4a>
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	6a1a      	ldr	r2, [r3, #32]
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	605a      	str	r2, [r3, #4]
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	2200      	movs	r2, #0
 800f392:	629a      	str	r2, [r3, #40]	; 0x28
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	1e5a      	subs	r2, r3, #1
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f39e:	4b4a      	ldr	r3, [pc, #296]	; (800f4c8 <xTaskRemoveFromEventList+0x184>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d15f      	bne.n	800f466 <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800f3a6:	69bb      	ldr	r3, [r7, #24]
 800f3a8:	695b      	ldr	r3, [r3, #20]
 800f3aa:	60fb      	str	r3, [r7, #12]
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	69ba      	ldr	r2, [r7, #24]
 800f3b2:	68d2      	ldr	r2, [r2, #12]
 800f3b4:	609a      	str	r2, [r3, #8]
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	69ba      	ldr	r2, [r7, #24]
 800f3bc:	6892      	ldr	r2, [r2, #8]
 800f3be:	605a      	str	r2, [r3, #4]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	685a      	ldr	r2, [r3, #4]
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d103      	bne.n	800f3d4 <xTaskRemoveFromEventList+0x90>
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	68da      	ldr	r2, [r3, #12]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	605a      	str	r2, [r3, #4]
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	615a      	str	r2, [r3, #20]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	1e5a      	subs	r2, r3, #1
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3e8:	4b38      	ldr	r3, [pc, #224]	; (800f4cc <xTaskRemoveFromEventList+0x188>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d903      	bls.n	800f3f8 <xTaskRemoveFromEventList+0xb4>
 800f3f0:	69bb      	ldr	r3, [r7, #24]
 800f3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f4:	4a35      	ldr	r2, [pc, #212]	; (800f4cc <xTaskRemoveFromEventList+0x188>)
 800f3f6:	6013      	str	r3, [r2, #0]
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3fc:	4934      	ldr	r1, [pc, #208]	; (800f4d0 <xTaskRemoveFromEventList+0x18c>)
 800f3fe:	4613      	mov	r3, r2
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	4413      	add	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	440b      	add	r3, r1
 800f408:	3304      	adds	r3, #4
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	60bb      	str	r3, [r7, #8]
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	68ba      	ldr	r2, [r7, #8]
 800f412:	609a      	str	r2, [r3, #8]
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	689a      	ldr	r2, [r3, #8]
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	60da      	str	r2, [r3, #12]
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	69ba      	ldr	r2, [r7, #24]
 800f422:	3204      	adds	r2, #4
 800f424:	605a      	str	r2, [r3, #4]
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	1d1a      	adds	r2, r3, #4
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	609a      	str	r2, [r3, #8]
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f432:	4613      	mov	r3, r2
 800f434:	009b      	lsls	r3, r3, #2
 800f436:	4413      	add	r3, r2
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	4a25      	ldr	r2, [pc, #148]	; (800f4d0 <xTaskRemoveFromEventList+0x18c>)
 800f43c:	441a      	add	r2, r3
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	615a      	str	r2, [r3, #20]
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f446:	4922      	ldr	r1, [pc, #136]	; (800f4d0 <xTaskRemoveFromEventList+0x18c>)
 800f448:	4613      	mov	r3, r2
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4413      	add	r3, r2
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	440b      	add	r3, r1
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	1c59      	adds	r1, r3, #1
 800f456:	481e      	ldr	r0, [pc, #120]	; (800f4d0 <xTaskRemoveFromEventList+0x18c>)
 800f458:	4613      	mov	r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4413      	add	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4403      	add	r3, r0
 800f462:	6019      	str	r1, [r3, #0]
 800f464:	e01b      	b.n	800f49e <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f466:	4b1b      	ldr	r3, [pc, #108]	; (800f4d4 <xTaskRemoveFromEventList+0x190>)
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	613b      	str	r3, [r7, #16]
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	693a      	ldr	r2, [r7, #16]
 800f470:	61da      	str	r2, [r3, #28]
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	689a      	ldr	r2, [r3, #8]
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	621a      	str	r2, [r3, #32]
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	69ba      	ldr	r2, [r7, #24]
 800f480:	3218      	adds	r2, #24
 800f482:	605a      	str	r2, [r3, #4]
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	f103 0218 	add.w	r2, r3, #24
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	609a      	str	r2, [r3, #8]
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	4a10      	ldr	r2, [pc, #64]	; (800f4d4 <xTaskRemoveFromEventList+0x190>)
 800f492:	629a      	str	r2, [r3, #40]	; 0x28
 800f494:	4b0f      	ldr	r3, [pc, #60]	; (800f4d4 <xTaskRemoveFromEventList+0x190>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	3301      	adds	r3, #1
 800f49a:	4a0e      	ldr	r2, [pc, #56]	; (800f4d4 <xTaskRemoveFromEventList+0x190>)
 800f49c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a2:	4b0d      	ldr	r3, [pc, #52]	; (800f4d8 <xTaskRemoveFromEventList+0x194>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d905      	bls.n	800f4b8 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800f4b0:	4b0a      	ldr	r3, [pc, #40]	; (800f4dc <xTaskRemoveFromEventList+0x198>)
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	601a      	str	r2, [r3, #0]
 800f4b6:	e001      	b.n	800f4bc <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800f4bc:	69fb      	ldr	r3, [r7, #28]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3720      	adds	r7, #32
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	20002cec 	.word	0x20002cec
 800f4cc:	20002ccc 	.word	0x20002ccc
 800f4d0:	200027f4 	.word	0x200027f4
 800f4d4:	20002c84 	.word	0x20002c84
 800f4d8:	200027f0 	.word	0x200027f0
 800f4dc:	20002cd8 	.word	0x20002cd8

0800f4e0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4e8:	4b06      	ldr	r3, [pc, #24]	; (800f504 <vTaskInternalSetTimeOutState+0x24>)
 800f4ea:	681a      	ldr	r2, [r3, #0]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800f4f0:	4b05      	ldr	r3, [pc, #20]	; (800f508 <vTaskInternalSetTimeOutState+0x28>)
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	605a      	str	r2, [r3, #4]
}
 800f4f8:	bf00      	nop
 800f4fa:	370c      	adds	r7, #12
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr
 800f504:	20002cdc 	.word	0x20002cdc
 800f508:	20002cc8 	.word	0x20002cc8

0800f50c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b086      	sub	sp, #24
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d102      	bne.n	800f522 <xTaskCheckForTimeOut+0x16>
 800f51c:	f000 fdd4 	bl	80100c8 <ulSetInterruptMask>
 800f520:	e7fe      	b.n	800f520 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d102      	bne.n	800f52e <xTaskCheckForTimeOut+0x22>
 800f528:	f000 fdce 	bl	80100c8 <ulSetInterruptMask>
 800f52c:	e7fe      	b.n	800f52c <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 800f52e:	f000 fc8d 	bl	800fe4c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800f532:	4b1f      	ldr	r3, [pc, #124]	; (800f5b0 <xTaskCheckForTimeOut+0xa4>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	693a      	ldr	r2, [r7, #16]
 800f53e:	1ad3      	subs	r3, r2, r3
 800f540:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54a:	d102      	bne.n	800f552 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	617b      	str	r3, [r7, #20]
 800f550:	e026      	b.n	800f5a0 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	4b17      	ldr	r3, [pc, #92]	; (800f5b4 <xTaskCheckForTimeOut+0xa8>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d00a      	beq.n	800f574 <xTaskCheckForTimeOut+0x68>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	693a      	ldr	r2, [r7, #16]
 800f564:	429a      	cmp	r2, r3
 800f566:	d305      	bcc.n	800f574 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800f568:	2301      	movs	r3, #1
 800f56a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	2200      	movs	r2, #0
 800f570:	601a      	str	r2, [r3, #0]
 800f572:	e015      	b.n	800f5a0 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d20b      	bcs.n	800f596 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	1ad2      	subs	r2, r2, r3
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f7ff ffa8 	bl	800f4e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800f590:	2300      	movs	r3, #0
 800f592:	617b      	str	r3, [r7, #20]
 800f594:	e004      	b.n	800f5a0 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800f59c:	2301      	movs	r3, #1
 800f59e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800f5a0:	f000 fc66 	bl	800fe70 <vPortExitCritical>

    return xReturn;
 800f5a4:	697b      	ldr	r3, [r7, #20]
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3718      	adds	r7, #24
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	20002cc8 	.word	0x20002cc8
 800f5b4:	20002cdc 	.word	0x20002cdc

0800f5b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800f5bc:	4b03      	ldr	r3, [pc, #12]	; (800f5cc <vTaskMissedYield+0x14>)
 800f5be:	2201      	movs	r2, #1
 800f5c0:	601a      	str	r2, [r3, #0]
}
 800f5c2:	bf00      	nop
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr
 800f5cc:	20002cd8 	.word	0x20002cd8

0800f5d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800f5d8:	f000 f84a 	bl	800f670 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f5dc:	4b03      	ldr	r3, [pc, #12]	; (800f5ec <prvIdleTask+0x1c>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d9f9      	bls.n	800f5d8 <prvIdleTask+0x8>
            {
                taskYIELD();
 800f5e4:	f000 fc20 	bl	800fe28 <vPortYield>
        prvCheckTasksWaitingTermination();
 800f5e8:	e7f6      	b.n	800f5d8 <prvIdleTask+0x8>
 800f5ea:	bf00      	nop
 800f5ec:	200027f4 	.word	0x200027f4

0800f5f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	607b      	str	r3, [r7, #4]
 800f5fa:	e00c      	b.n	800f616 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	4613      	mov	r3, r2
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	4413      	add	r3, r2
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4a12      	ldr	r2, [pc, #72]	; (800f650 <prvInitialiseTaskLists+0x60>)
 800f608:	4413      	add	r3, r2
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fe fea4 	bl	800e358 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	3301      	adds	r3, #1
 800f614:	607b      	str	r3, [r7, #4]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b37      	cmp	r3, #55	; 0x37
 800f61a:	d9ef      	bls.n	800f5fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800f61c:	480d      	ldr	r0, [pc, #52]	; (800f654 <prvInitialiseTaskLists+0x64>)
 800f61e:	f7fe fe9b 	bl	800e358 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800f622:	480d      	ldr	r0, [pc, #52]	; (800f658 <prvInitialiseTaskLists+0x68>)
 800f624:	f7fe fe98 	bl	800e358 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800f628:	480c      	ldr	r0, [pc, #48]	; (800f65c <prvInitialiseTaskLists+0x6c>)
 800f62a:	f7fe fe95 	bl	800e358 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800f62e:	480c      	ldr	r0, [pc, #48]	; (800f660 <prvInitialiseTaskLists+0x70>)
 800f630:	f7fe fe92 	bl	800e358 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800f634:	480b      	ldr	r0, [pc, #44]	; (800f664 <prvInitialiseTaskLists+0x74>)
 800f636:	f7fe fe8f 	bl	800e358 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800f63a:	4b0b      	ldr	r3, [pc, #44]	; (800f668 <prvInitialiseTaskLists+0x78>)
 800f63c:	4a05      	ldr	r2, [pc, #20]	; (800f654 <prvInitialiseTaskLists+0x64>)
 800f63e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f640:	4b0a      	ldr	r3, [pc, #40]	; (800f66c <prvInitialiseTaskLists+0x7c>)
 800f642:	4a05      	ldr	r2, [pc, #20]	; (800f658 <prvInitialiseTaskLists+0x68>)
 800f644:	601a      	str	r2, [r3, #0]
}
 800f646:	bf00      	nop
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	200027f4 	.word	0x200027f4
 800f654:	20002c54 	.word	0x20002c54
 800f658:	20002c68 	.word	0x20002c68
 800f65c:	20002c84 	.word	0x20002c84
 800f660:	20002c98 	.word	0x20002c98
 800f664:	20002cb0 	.word	0x20002cb0
 800f668:	20002c7c 	.word	0x20002c7c
 800f66c:	20002c80 	.word	0x20002c80

0800f670 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f676:	e019      	b.n	800f6ac <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800f678:	f000 fbe8 	bl	800fe4c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f67c:	4b10      	ldr	r3, [pc, #64]	; (800f6c0 <prvCheckTasksWaitingTermination+0x50>)
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	68db      	ldr	r3, [r3, #12]
 800f682:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	3304      	adds	r3, #4
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fe fecb 	bl	800e424 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800f68e:	4b0d      	ldr	r3, [pc, #52]	; (800f6c4 <prvCheckTasksWaitingTermination+0x54>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	3b01      	subs	r3, #1
 800f694:	4a0b      	ldr	r2, [pc, #44]	; (800f6c4 <prvCheckTasksWaitingTermination+0x54>)
 800f696:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800f698:	4b0b      	ldr	r3, [pc, #44]	; (800f6c8 <prvCheckTasksWaitingTermination+0x58>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	3b01      	subs	r3, #1
 800f69e:	4a0a      	ldr	r2, [pc, #40]	; (800f6c8 <prvCheckTasksWaitingTermination+0x58>)
 800f6a0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800f6a2:	f000 fbe5 	bl	800fe70 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 f810 	bl	800f6cc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6ac:	4b06      	ldr	r3, [pc, #24]	; (800f6c8 <prvCheckTasksWaitingTermination+0x58>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1e1      	bne.n	800f678 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	20002c98 	.word	0x20002c98
 800f6c4:	20002cc4 	.word	0x20002cc4
 800f6c8:	20002cac 	.word	0x20002cac

0800f6cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d108      	bne.n	800f6f0 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f000 fdfa 	bl	80102dc <vPortFree>
                vPortFree( pxTCB );
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 fdf7 	bl	80102dc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800f6ee:	e010      	b.n	800f712 <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d103      	bne.n	800f702 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 fdee 	bl	80102dc <vPortFree>
    }
 800f700:	e007      	b.n	800f712 <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f708:	2b02      	cmp	r3, #2
 800f70a:	d002      	beq.n	800f712 <prvDeleteTCB+0x46>
 800f70c:	f000 fcdc 	bl	80100c8 <ulSetInterruptMask>
 800f710:	e7fe      	b.n	800f710 <prvDeleteTCB+0x44>
    }
 800f712:	bf00      	nop
 800f714:	3708      	adds	r7, #8
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
	...

0800f71c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f720:	4b0a      	ldr	r3, [pc, #40]	; (800f74c <prvResetNextTaskUnblockTime+0x30>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d104      	bne.n	800f734 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800f72a:	4b09      	ldr	r3, [pc, #36]	; (800f750 <prvResetNextTaskUnblockTime+0x34>)
 800f72c:	f04f 32ff 	mov.w	r2, #4294967295
 800f730:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800f732:	e005      	b.n	800f740 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f734:	4b05      	ldr	r3, [pc, #20]	; (800f74c <prvResetNextTaskUnblockTime+0x30>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a04      	ldr	r2, [pc, #16]	; (800f750 <prvResetNextTaskUnblockTime+0x34>)
 800f73e:	6013      	str	r3, [r2, #0]
}
 800f740:	bf00      	nop
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	20002c7c 	.word	0x20002c7c
 800f750:	20002ce4 	.word	0x20002ce4

0800f754 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800f754:	b480      	push	{r7}
 800f756:	b083      	sub	sp, #12
 800f758:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800f75a:	4b0b      	ldr	r3, [pc, #44]	; (800f788 <xTaskGetSchedulerState+0x34>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d102      	bne.n	800f768 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800f762:	2301      	movs	r3, #1
 800f764:	607b      	str	r3, [r7, #4]
 800f766:	e008      	b.n	800f77a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f768:	4b08      	ldr	r3, [pc, #32]	; (800f78c <xTaskGetSchedulerState+0x38>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d102      	bne.n	800f776 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800f770:	2302      	movs	r3, #2
 800f772:	607b      	str	r3, [r7, #4]
 800f774:	e001      	b.n	800f77a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800f776:	2300      	movs	r3, #0
 800f778:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800f77a:	687b      	ldr	r3, [r7, #4]
    }
 800f77c:	4618      	mov	r0, r3
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	20002cd0 	.word	0x20002cd0
 800f78c:	20002cec 	.word	0x20002cec

0800f790 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b086      	sub	sp, #24
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800f79a:	4b2e      	ldr	r3, [pc, #184]	; (800f854 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7a0:	4b2d      	ldr	r3, [pc, #180]	; (800f858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	3304      	adds	r3, #4
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fe fe3c 	bl	800e424 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7b2:	d124      	bne.n	800f7fe <prvAddCurrentTaskToDelayedList+0x6e>
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d021      	beq.n	800f7fe <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7ba:	4b28      	ldr	r3, [pc, #160]	; (800f85c <prvAddCurrentTaskToDelayedList+0xcc>)
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	613b      	str	r3, [r7, #16]
 800f7c0:	4b25      	ldr	r3, [pc, #148]	; (800f858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	693a      	ldr	r2, [r7, #16]
 800f7c6:	609a      	str	r2, [r3, #8]
 800f7c8:	4b23      	ldr	r3, [pc, #140]	; (800f858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	693a      	ldr	r2, [r7, #16]
 800f7ce:	6892      	ldr	r2, [r2, #8]
 800f7d0:	60da      	str	r2, [r3, #12]
 800f7d2:	4b21      	ldr	r3, [pc, #132]	; (800f858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	3204      	adds	r2, #4
 800f7dc:	605a      	str	r2, [r3, #4]
 800f7de:	4b1e      	ldr	r3, [pc, #120]	; (800f858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	1d1a      	adds	r2, r3, #4
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	609a      	str	r2, [r3, #8]
 800f7e8:	4b1b      	ldr	r3, [pc, #108]	; (800f858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4a1b      	ldr	r2, [pc, #108]	; (800f85c <prvAddCurrentTaskToDelayedList+0xcc>)
 800f7ee:	615a      	str	r2, [r3, #20]
 800f7f0:	4b1a      	ldr	r3, [pc, #104]	; (800f85c <prvAddCurrentTaskToDelayedList+0xcc>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	4a19      	ldr	r2, [pc, #100]	; (800f85c <prvAddCurrentTaskToDelayedList+0xcc>)
 800f7f8:	6013      	str	r3, [r2, #0]
 800f7fa:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800f7fc:	e026      	b.n	800f84c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800f7fe:	697a      	ldr	r2, [r7, #20]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4413      	add	r3, r2
 800f804:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f806:	4b14      	ldr	r3, [pc, #80]	; (800f858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800f80e:	68fa      	ldr	r2, [r7, #12]
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	429a      	cmp	r2, r3
 800f814:	d209      	bcs.n	800f82a <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f816:	4b12      	ldr	r3, [pc, #72]	; (800f860 <prvAddCurrentTaskToDelayedList+0xd0>)
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	4b0f      	ldr	r3, [pc, #60]	; (800f858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	3304      	adds	r3, #4
 800f820:	4619      	mov	r1, r3
 800f822:	4610      	mov	r0, r2
 800f824:	f7fe fdc5 	bl	800e3b2 <vListInsert>
}
 800f828:	e010      	b.n	800f84c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f82a:	4b0e      	ldr	r3, [pc, #56]	; (800f864 <prvAddCurrentTaskToDelayedList+0xd4>)
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	4b0a      	ldr	r3, [pc, #40]	; (800f858 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	3304      	adds	r3, #4
 800f834:	4619      	mov	r1, r3
 800f836:	4610      	mov	r0, r2
 800f838:	f7fe fdbb 	bl	800e3b2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800f83c:	4b0a      	ldr	r3, [pc, #40]	; (800f868 <prvAddCurrentTaskToDelayedList+0xd8>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	429a      	cmp	r2, r3
 800f844:	d202      	bcs.n	800f84c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800f846:	4a08      	ldr	r2, [pc, #32]	; (800f868 <prvAddCurrentTaskToDelayedList+0xd8>)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6013      	str	r3, [r2, #0]
}
 800f84c:	bf00      	nop
 800f84e:	3718      	adds	r7, #24
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	20002cc8 	.word	0x20002cc8
 800f858:	200027f0 	.word	0x200027f0
 800f85c:	20002cb0 	.word	0x20002cb0
 800f860:	20002c80 	.word	0x20002c80
 800f864:	20002c7c 	.word	0x20002c7c
 800f868:	20002ce4 	.word	0x20002ce4

0800f86c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b088      	sub	sp, #32
 800f870:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800f872:	2300      	movs	r3, #0
 800f874:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800f876:	f000 fa59 	bl	800fd2c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800f87a:	4b18      	ldr	r3, [pc, #96]	; (800f8dc <xTimerCreateTimerTask+0x70>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d020      	beq.n	800f8c4 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800f882:	2300      	movs	r3, #0
 800f884:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800f886:	2300      	movs	r3, #0
 800f888:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f88a:	463a      	mov	r2, r7
 800f88c:	1d39      	adds	r1, r7, #4
 800f88e:	f107 0308 	add.w	r3, r7, #8
 800f892:	4618      	mov	r0, r3
 800f894:	f7fe fd46 	bl	800e324 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800f898:	6839      	ldr	r1, [r7, #0]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	9202      	str	r2, [sp, #8]
 800f8a0:	9301      	str	r3, [sp, #4]
 800f8a2:	2318      	movs	r3, #24
 800f8a4:	9300      	str	r3, [sp, #0]
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	460a      	mov	r2, r1
 800f8aa:	490d      	ldr	r1, [pc, #52]	; (800f8e0 <xTimerCreateTimerTask+0x74>)
 800f8ac:	480d      	ldr	r0, [pc, #52]	; (800f8e4 <xTimerCreateTimerTask+0x78>)
 800f8ae:	f7ff f883 	bl	800e9b8 <xTaskCreateStatic>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	4a0c      	ldr	r2, [pc, #48]	; (800f8e8 <xTimerCreateTimerTask+0x7c>)
 800f8b6:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800f8b8:	4b0b      	ldr	r3, [pc, #44]	; (800f8e8 <xTimerCreateTimerTask+0x7c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d001      	beq.n	800f8c4 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d102      	bne.n	800f8d0 <xTimerCreateTimerTask+0x64>
 800f8ca:	f000 fbfd 	bl	80100c8 <ulSetInterruptMask>
 800f8ce:	e7fe      	b.n	800f8ce <xTimerCreateTimerTask+0x62>
        return xReturn;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
    }
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	20002d20 	.word	0x20002d20
 800f8e0:	0801163c 	.word	0x0801163c
 800f8e4:	0800f991 	.word	0x0800f991
 800f8e8:	20002d24 	.word	0x20002d24

0800f8ec <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800f8f8:	e008      	b.n	800f90c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	699b      	ldr	r3, [r3, #24]
 800f8fe:	68ba      	ldr	r2, [r7, #8]
 800f900:	4413      	add	r3, r2
 800f902:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6a1b      	ldr	r3, [r3, #32]
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	699a      	ldr	r2, [r3, #24]
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	18d1      	adds	r1, r2, r3
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	68f8      	ldr	r0, [r7, #12]
 800f91a:	f000 f8d5 	bl	800fac8 <prvInsertTimerInActiveList>
 800f91e:	4603      	mov	r3, r0
 800f920:	2b00      	cmp	r3, #0
 800f922:	d1ea      	bne.n	800f8fa <prvReloadTimer+0xe>
        }
    }
 800f924:	bf00      	nop
 800f926:	bf00      	nop
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
	...

0800f930 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f93a:	4b14      	ldr	r3, [pc, #80]	; (800f98c <prvProcessExpiredTimer+0x5c>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	3304      	adds	r3, #4
 800f948:	4618      	mov	r0, r3
 800f94a:	f7fe fd6b 	bl	800e424 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f954:	f003 0304 	and.w	r3, r3, #4
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d005      	beq.n	800f968 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800f95c:	683a      	ldr	r2, [r7, #0]
 800f95e:	6879      	ldr	r1, [r7, #4]
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	f7ff ffc3 	bl	800f8ec <prvReloadTimer>
 800f966:	e008      	b.n	800f97a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f96e:	f023 0301 	bic.w	r3, r3, #1
 800f972:	b2da      	uxtb	r2, r3
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6a1b      	ldr	r3, [r3, #32]
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	4798      	blx	r3
    }
 800f982:	bf00      	nop
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	20002d18 	.word	0x20002d18

0800f990 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f998:	f107 0308 	add.w	r3, r7, #8
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 f84f 	bl	800fa40 <prvGetNextExpireTime>
 800f9a2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f000 f803 	bl	800f9b4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800f9ae:	f000 f8cd 	bl	800fb4c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f9b2:	e7f1      	b.n	800f998 <prvTimerTask+0x8>

0800f9b4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800f9be:	f7ff f9f9 	bl	800edb4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9c2:	f107 0308 	add.w	r3, r7, #8
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 f85e 	bl	800fa88 <prvSampleTimeNow>
 800f9cc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d12a      	bne.n	800fa2a <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d10a      	bne.n	800f9f0 <prvProcessTimerOrBlockTask+0x3c>
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d806      	bhi.n	800f9f0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800f9e2:	f7ff f9f5 	bl	800edd0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f9e6:	68f9      	ldr	r1, [r7, #12]
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f7ff ffa1 	bl	800f930 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800f9ee:	e01e      	b.n	800fa2e <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d008      	beq.n	800fa08 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f9f6:	4b10      	ldr	r3, [pc, #64]	; (800fa38 <prvProcessTimerOrBlockTask+0x84>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <prvProcessTimerOrBlockTask+0x50>
 800fa00:	2301      	movs	r3, #1
 800fa02:	e000      	b.n	800fa06 <prvProcessTimerOrBlockTask+0x52>
 800fa04:	2300      	movs	r3, #0
 800fa06:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fa08:	4b0c      	ldr	r3, [pc, #48]	; (800fa3c <prvProcessTimerOrBlockTask+0x88>)
 800fa0a:	6818      	ldr	r0, [r3, #0]
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	683a      	ldr	r2, [r7, #0]
 800fa14:	4619      	mov	r1, r3
 800fa16:	f7fe ff9b 	bl	800e950 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800fa1a:	f7ff f9d9 	bl	800edd0 <xTaskResumeAll>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d104      	bne.n	800fa2e <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800fa24:	f000 fa00 	bl	800fe28 <vPortYield>
    }
 800fa28:	e001      	b.n	800fa2e <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800fa2a:	f7ff f9d1 	bl	800edd0 <xTaskResumeAll>
    }
 800fa2e:	bf00      	nop
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	20002d1c 	.word	0x20002d1c
 800fa3c:	20002d20 	.word	0x20002d20

0800fa40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800fa40:	b480      	push	{r7}
 800fa42:	b085      	sub	sp, #20
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa48:	4b0e      	ldr	r3, [pc, #56]	; (800fa84 <prvGetNextExpireTime+0x44>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d101      	bne.n	800fa56 <prvGetNextExpireTime+0x16>
 800fa52:	2201      	movs	r2, #1
 800fa54:	e000      	b.n	800fa58 <prvGetNextExpireTime+0x18>
 800fa56:	2200      	movs	r2, #0
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d105      	bne.n	800fa70 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa64:	4b07      	ldr	r3, [pc, #28]	; (800fa84 <prvGetNextExpireTime+0x44>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	60fb      	str	r3, [r7, #12]
 800fa6e:	e001      	b.n	800fa74 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800fa70:	2300      	movs	r3, #0
 800fa72:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800fa74:	68fb      	ldr	r3, [r7, #12]
    }
 800fa76:	4618      	mov	r0, r3
 800fa78:	3714      	adds	r7, #20
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	20002d18 	.word	0x20002d18

0800fa88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800fa90:	f7ff fa8a 	bl	800efa8 <xTaskGetTickCount>
 800fa94:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800fa96:	4b0b      	ldr	r3, [pc, #44]	; (800fac4 <prvSampleTimeNow+0x3c>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d205      	bcs.n	800faac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800faa0:	f000 f91e 	bl	800fce0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2201      	movs	r2, #1
 800faa8:	601a      	str	r2, [r3, #0]
 800faaa:	e002      	b.n	800fab2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800fab2:	4a04      	ldr	r2, [pc, #16]	; (800fac4 <prvSampleTimeNow+0x3c>)
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800fab8:	68fb      	ldr	r3, [r7, #12]
    }
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	20002d28 	.word	0x20002d28

0800fac8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
 800fad4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800fad6:	2300      	movs	r3, #0
 800fad8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	68ba      	ldr	r2, [r7, #8]
 800fade:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800fae6:	68ba      	ldr	r2, [r7, #8]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	429a      	cmp	r2, r3
 800faec:	d812      	bhi.n	800fb14 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	1ad2      	subs	r2, r2, r3
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	699b      	ldr	r3, [r3, #24]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d302      	bcc.n	800fb02 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800fafc:	2301      	movs	r3, #1
 800fafe:	617b      	str	r3, [r7, #20]
 800fb00:	e01b      	b.n	800fb3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fb02:	4b10      	ldr	r3, [pc, #64]	; (800fb44 <prvInsertTimerInActiveList+0x7c>)
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	3304      	adds	r3, #4
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	4610      	mov	r0, r2
 800fb0e:	f7fe fc50 	bl	800e3b2 <vListInsert>
 800fb12:	e012      	b.n	800fb3a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d206      	bcs.n	800fb2a <prvInsertTimerInActiveList+0x62>
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d302      	bcc.n	800fb2a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800fb24:	2301      	movs	r3, #1
 800fb26:	617b      	str	r3, [r7, #20]
 800fb28:	e007      	b.n	800fb3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb2a:	4b07      	ldr	r3, [pc, #28]	; (800fb48 <prvInsertTimerInActiveList+0x80>)
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3304      	adds	r3, #4
 800fb32:	4619      	mov	r1, r3
 800fb34:	4610      	mov	r0, r2
 800fb36:	f7fe fc3c 	bl	800e3b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800fb3a:	697b      	ldr	r3, [r7, #20]
    }
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3718      	adds	r7, #24
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	20002d1c 	.word	0x20002d1c
 800fb48:	20002d18 	.word	0x20002d18

0800fb4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b088      	sub	sp, #32
 800fb50:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb52:	e0b2      	b.n	800fcba <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	da10      	bge.n	800fb7c <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fb5a:	1d3b      	adds	r3, r7, #4
 800fb5c:	3304      	adds	r3, #4
 800fb5e:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d102      	bne.n	800fb6c <prvProcessReceivedCommands+0x20>
 800fb66:	f000 faaf 	bl	80100c8 <ulSetInterruptMask>
 800fb6a:	e7fe      	b.n	800fb6a <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	69fa      	ldr	r2, [r7, #28]
 800fb72:	6850      	ldr	r0, [r2, #4]
 800fb74:	69fa      	ldr	r2, [r7, #28]
 800fb76:	6892      	ldr	r2, [r2, #8]
 800fb78:	4611      	mov	r1, r2
 800fb7a:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f2c0 809b 	blt.w	800fcba <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	695b      	ldr	r3, [r3, #20]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d004      	beq.n	800fb9a <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb90:	69bb      	ldr	r3, [r7, #24]
 800fb92:	3304      	adds	r3, #4
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fe fc45 	bl	800e424 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb9a:	463b      	mov	r3, r7
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7ff ff73 	bl	800fa88 <prvSampleTimeNow>
 800fba2:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	3b01      	subs	r3, #1
 800fba8:	2b08      	cmp	r3, #8
 800fbaa:	f200 8085 	bhi.w	800fcb8 <prvProcessReceivedCommands+0x16c>
 800fbae:	a201      	add	r2, pc, #4	; (adr r2, 800fbb4 <prvProcessReceivedCommands+0x68>)
 800fbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb4:	0800fbd9 	.word	0x0800fbd9
 800fbb8:	0800fbd9 	.word	0x0800fbd9
 800fbbc:	0800fc41 	.word	0x0800fc41
 800fbc0:	0800fc55 	.word	0x0800fc55
 800fbc4:	0800fc8f 	.word	0x0800fc8f
 800fbc8:	0800fbd9 	.word	0x0800fbd9
 800fbcc:	0800fbd9 	.word	0x0800fbd9
 800fbd0:	0800fc41 	.word	0x0800fc41
 800fbd4:	0800fc55 	.word	0x0800fc55
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fbd8:	69bb      	ldr	r3, [r7, #24]
 800fbda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbde:	f043 0301 	orr.w	r3, r3, #1
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	69bb      	ldr	r3, [r7, #24]
 800fbe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fbea:	68ba      	ldr	r2, [r7, #8]
 800fbec:	69bb      	ldr	r3, [r7, #24]
 800fbee:	699b      	ldr	r3, [r3, #24]
 800fbf0:	18d1      	adds	r1, r2, r3
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	697a      	ldr	r2, [r7, #20]
 800fbf6:	69b8      	ldr	r0, [r7, #24]
 800fbf8:	f7ff ff66 	bl	800fac8 <prvInsertTimerInActiveList>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d05b      	beq.n	800fcba <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc08:	f003 0304 	and.w	r3, r3, #4
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d009      	beq.n	800fc24 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800fc10:	68ba      	ldr	r2, [r7, #8]
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	699b      	ldr	r3, [r3, #24]
 800fc16:	4413      	add	r3, r2
 800fc18:	697a      	ldr	r2, [r7, #20]
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	69b8      	ldr	r0, [r7, #24]
 800fc1e:	f7ff fe65 	bl	800f8ec <prvReloadTimer>
 800fc22:	e008      	b.n	800fc36 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc2a:	f023 0301 	bic.w	r3, r3, #1
 800fc2e:	b2da      	uxtb	r2, r3
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc36:	69bb      	ldr	r3, [r7, #24]
 800fc38:	6a1b      	ldr	r3, [r3, #32]
 800fc3a:	69b8      	ldr	r0, [r7, #24]
 800fc3c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800fc3e:	e03c      	b.n	800fcba <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc46:	f023 0301 	bic.w	r3, r3, #1
 800fc4a:	b2da      	uxtb	r2, r3
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800fc52:	e032      	b.n	800fcba <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fc54:	69bb      	ldr	r3, [r7, #24]
 800fc56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc5a:	f043 0301 	orr.w	r3, r3, #1
 800fc5e:	b2da      	uxtb	r2, r3
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fc66:	68ba      	ldr	r2, [r7, #8]
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fc6c:	69bb      	ldr	r3, [r7, #24]
 800fc6e:	699b      	ldr	r3, [r3, #24]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d102      	bne.n	800fc7a <prvProcessReceivedCommands+0x12e>
 800fc74:	f000 fa28 	bl	80100c8 <ulSetInterruptMask>
 800fc78:	e7fe      	b.n	800fc78 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	699a      	ldr	r2, [r3, #24]
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	18d1      	adds	r1, r2, r3
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	697a      	ldr	r2, [r7, #20]
 800fc86:	69b8      	ldr	r0, [r7, #24]
 800fc88:	f7ff ff1e 	bl	800fac8 <prvInsertTimerInActiveList>
                        break;
 800fc8c:	e015      	b.n	800fcba <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc94:	f003 0302 	and.w	r3, r3, #2
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d103      	bne.n	800fca4 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 800fc9c:	69b8      	ldr	r0, [r7, #24]
 800fc9e:	f000 fb1d 	bl	80102dc <vPortFree>
 800fca2:	e00a      	b.n	800fcba <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcaa:	f023 0301 	bic.w	r3, r3, #1
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800fcb6:	e000      	b.n	800fcba <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800fcb8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fcba:	4b08      	ldr	r3, [pc, #32]	; (800fcdc <prvProcessReceivedCommands+0x190>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	1d39      	adds	r1, r7, #4
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fe fcb8 	bl	800e638 <xQueueReceive>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f47f af42 	bne.w	800fb54 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800fcd0:	bf00      	nop
 800fcd2:	bf00      	nop
 800fcd4:	3720      	adds	r7, #32
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	20002d20 	.word	0x20002d20

0800fce0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fce6:	e009      	b.n	800fcfc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fce8:	4b0e      	ldr	r3, [pc, #56]	; (800fd24 <prvSwitchTimerLists+0x44>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800fcf2:	f04f 31ff 	mov.w	r1, #4294967295
 800fcf6:	6838      	ldr	r0, [r7, #0]
 800fcf8:	f7ff fe1a 	bl	800f930 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fcfc:	4b09      	ldr	r3, [pc, #36]	; (800fd24 <prvSwitchTimerLists+0x44>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d1f0      	bne.n	800fce8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800fd06:	4b07      	ldr	r3, [pc, #28]	; (800fd24 <prvSwitchTimerLists+0x44>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800fd0c:	4b06      	ldr	r3, [pc, #24]	; (800fd28 <prvSwitchTimerLists+0x48>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a04      	ldr	r2, [pc, #16]	; (800fd24 <prvSwitchTimerLists+0x44>)
 800fd12:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800fd14:	4a04      	ldr	r2, [pc, #16]	; (800fd28 <prvSwitchTimerLists+0x48>)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6013      	str	r3, [r2, #0]
    }
 800fd1a:	bf00      	nop
 800fd1c:	3708      	adds	r7, #8
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop
 800fd24:	20002d18 	.word	0x20002d18
 800fd28:	20002d1c 	.word	0x20002d1c

0800fd2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800fd32:	f000 f88b 	bl	800fe4c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800fd36:	4b15      	ldr	r3, [pc, #84]	; (800fd8c <prvCheckForValidListAndQueue+0x60>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d120      	bne.n	800fd80 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800fd3e:	4814      	ldr	r0, [pc, #80]	; (800fd90 <prvCheckForValidListAndQueue+0x64>)
 800fd40:	f7fe fb0a 	bl	800e358 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800fd44:	4813      	ldr	r0, [pc, #76]	; (800fd94 <prvCheckForValidListAndQueue+0x68>)
 800fd46:	f7fe fb07 	bl	800e358 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800fd4a:	4b13      	ldr	r3, [pc, #76]	; (800fd98 <prvCheckForValidListAndQueue+0x6c>)
 800fd4c:	4a10      	ldr	r2, [pc, #64]	; (800fd90 <prvCheckForValidListAndQueue+0x64>)
 800fd4e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800fd50:	4b12      	ldr	r3, [pc, #72]	; (800fd9c <prvCheckForValidListAndQueue+0x70>)
 800fd52:	4a10      	ldr	r2, [pc, #64]	; (800fd94 <prvCheckForValidListAndQueue+0x68>)
 800fd54:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fd56:	2300      	movs	r3, #0
 800fd58:	9300      	str	r3, [sp, #0]
 800fd5a:	4b11      	ldr	r3, [pc, #68]	; (800fda0 <prvCheckForValidListAndQueue+0x74>)
 800fd5c:	4a11      	ldr	r2, [pc, #68]	; (800fda4 <prvCheckForValidListAndQueue+0x78>)
 800fd5e:	2110      	movs	r1, #16
 800fd60:	2014      	movs	r0, #20
 800fd62:	f7fe fc00 	bl	800e566 <xQueueGenericCreateStatic>
 800fd66:	4603      	mov	r3, r0
 800fd68:	4a08      	ldr	r2, [pc, #32]	; (800fd8c <prvCheckForValidListAndQueue+0x60>)
 800fd6a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800fd6c:	4b07      	ldr	r3, [pc, #28]	; (800fd8c <prvCheckForValidListAndQueue+0x60>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d005      	beq.n	800fd80 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fd74:	4b05      	ldr	r3, [pc, #20]	; (800fd8c <prvCheckForValidListAndQueue+0x60>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	490b      	ldr	r1, [pc, #44]	; (800fda8 <prvCheckForValidListAndQueue+0x7c>)
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fe fda4 	bl	800e8c8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800fd80:	f000 f876 	bl	800fe70 <vPortExitCritical>
    }
 800fd84:	bf00      	nop
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	20002d20 	.word	0x20002d20
 800fd90:	20002cf0 	.word	0x20002cf0
 800fd94:	20002d04 	.word	0x20002d04
 800fd98:	20002d18 	.word	0x20002d18
 800fd9c:	20002d1c 	.word	0x20002d1c
 800fda0:	20002e6c 	.word	0x20002e6c
 800fda4:	20002d2c 	.word	0x20002d2c
 800fda8:	08011644 	.word	0x08011644

0800fdac <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800fdac:	b480      	push	{r7}
 800fdae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fdb0:	4b0b      	ldr	r3, [pc, #44]	; (800fde0 <vPortSetupTimerInterrupt+0x34>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fdb6:	4b0b      	ldr	r3, [pc, #44]	; (800fde4 <vPortSetupTimerInterrupt+0x38>)
 800fdb8:	2200      	movs	r2, #0
 800fdba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fdbc:	4b0a      	ldr	r3, [pc, #40]	; (800fde8 <vPortSetupTimerInterrupt+0x3c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a0a      	ldr	r2, [pc, #40]	; (800fdec <vPortSetupTimerInterrupt+0x40>)
 800fdc2:	fba2 2303 	umull	r2, r3, r2, r3
 800fdc6:	099b      	lsrs	r3, r3, #6
 800fdc8:	4a09      	ldr	r2, [pc, #36]	; (800fdf0 <vPortSetupTimerInterrupt+0x44>)
 800fdca:	3b01      	subs	r3, #1
 800fdcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800fdce:	4b04      	ldr	r3, [pc, #16]	; (800fde0 <vPortSetupTimerInterrupt+0x34>)
 800fdd0:	2207      	movs	r2, #7
 800fdd2:	601a      	str	r2, [r3, #0]
}
 800fdd4:	bf00      	nop
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop
 800fde0:	e000e010 	.word	0xe000e010
 800fde4:	e000e018 	.word	0xe000e018
 800fde8:	20000000 	.word	0x20000000
 800fdec:	10624dd3 	.word	0x10624dd3
 800fdf0:	e000e014 	.word	0xe000e014

0800fdf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800fdfe:	4b09      	ldr	r3, [pc, #36]	; (800fe24 <prvTaskExitError+0x30>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe06:	d002      	beq.n	800fe0e <prvTaskExitError+0x1a>
 800fe08:	f000 f95e 	bl	80100c8 <ulSetInterruptMask>
 800fe0c:	e7fe      	b.n	800fe0c <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800fe0e:	f000 f95b 	bl	80100c8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800fe12:	bf00      	nop
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d0fc      	beq.n	800fe14 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800fe1a:	bf00      	nop
 800fe1c:	bf00      	nop
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	20000068 	.word	0x20000068

0800fe28 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800fe28:	b480      	push	{r7}
 800fe2a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe2c:	4b06      	ldr	r3, [pc, #24]	; (800fe48 <vPortYield+0x20>)
 800fe2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe32:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800fe34:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800fe38:	f3bf 8f6f 	isb	sy
}
 800fe3c:	bf00      	nop
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	e000ed04 	.word	0xe000ed04

0800fe4c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800fe50:	f000 f93a 	bl	80100c8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800fe54:	4b05      	ldr	r3, [pc, #20]	; (800fe6c <vPortEnterCritical+0x20>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	4a04      	ldr	r2, [pc, #16]	; (800fe6c <vPortEnterCritical+0x20>)
 800fe5c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800fe5e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800fe62:	f3bf 8f6f 	isb	sy
}
 800fe66:	bf00      	nop
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	20000068 	.word	0x20000068

0800fe70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800fe74:	4b0a      	ldr	r3, [pc, #40]	; (800fea0 <vPortExitCritical+0x30>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d102      	bne.n	800fe82 <vPortExitCritical+0x12>
 800fe7c:	f000 f924 	bl	80100c8 <ulSetInterruptMask>
 800fe80:	e7fe      	b.n	800fe80 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800fe82:	4b07      	ldr	r3, [pc, #28]	; (800fea0 <vPortExitCritical+0x30>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	3b01      	subs	r3, #1
 800fe88:	4a05      	ldr	r2, [pc, #20]	; (800fea0 <vPortExitCritical+0x30>)
 800fe8a:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800fe8c:	4b04      	ldr	r3, [pc, #16]	; (800fea0 <vPortExitCritical+0x30>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d102      	bne.n	800fe9a <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 800fe94:	2000      	movs	r0, #0
 800fe96:	f000 f924 	bl	80100e2 <vClearInterruptMask>
    }
}
 800fe9a:	bf00      	nop
 800fe9c:	bd80      	pop	{r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	20000068 	.word	0x20000068

0800fea4 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800feaa:	f000 f90d 	bl	80100c8 <ulSetInterruptMask>
 800feae:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800feb0:	f7ff f88a 	bl	800efc8 <xTaskIncrementTick>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d003      	beq.n	800fec2 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800feba:	4b05      	ldr	r3, [pc, #20]	; (800fed0 <xPortSysTickHandler+0x2c>)
 800febc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fec0:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f000 f90d 	bl	80100e2 <vClearInterruptMask>
}
 800fec8:	bf00      	nop
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	e000ed04 	.word	0xe000ed04

0800fed4 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	3b02      	subs	r3, #2
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800feea:	7afb      	ldrb	r3, [r7, #11]
 800feec:	2b02      	cmp	r3, #2
 800feee:	d102      	bne.n	800fef6 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800fef0:	f000 f8b6 	bl	8010060 <vRestoreContextOfFirstTask>
            break;
 800fef4:	e002      	b.n	800fefc <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800fef6:	f000 f8e7 	bl	80100c8 <ulSetInterruptMask>
 800fefa:	e7fe      	b.n	800fefa <vPortSVCHandler_C+0x26>
    }
}
 800fefc:	bf00      	nop
 800fefe:	3710      	adds	r7, #16
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800ff04:	b480      	push	{r7}
 800ff06:	b085      	sub	sp, #20
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
 800ff10:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	3b04      	subs	r3, #4
 800ff16:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ff1e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	3b04      	subs	r3, #4
 800ff24:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	3b04      	subs	r3, #4
 800ff30:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800ff32:	4a38      	ldr	r2, [pc, #224]	; (8010014 <pxPortInitialiseStack+0x110>)
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	3b04      	subs	r3, #4
 800ff3c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800ff44:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	3b04      	subs	r3, #4
 800ff4a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800ff52:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	3b04      	subs	r3, #4
 800ff58:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800ff60:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	3b04      	subs	r3, #4
 800ff66:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800ff6e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	3b04      	subs	r3, #4
 800ff74:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	3b04      	subs	r3, #4
 800ff80:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800ff88:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	3b04      	subs	r3, #4
 800ff8e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800ff96:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	3b04      	subs	r3, #4
 800ff9c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800ffa4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	3b04      	subs	r3, #4
 800ffaa:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800ffb2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	3b04      	subs	r3, #4
 800ffb8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800ffc0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	3b04      	subs	r3, #4
 800ffc6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800ffce:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	3b04      	subs	r3, #4
 800ffd4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800ffdc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	3b04      	subs	r3, #4
 800ffe2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800ffea:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	3b04      	subs	r3, #4
 800fff0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800fff8:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	3b04      	subs	r3, #4
 800fffe:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8010000:	68ba      	ldr	r2, [r7, #8]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 8010006:	68fb      	ldr	r3, [r7, #12]
}
 8010008:	4618      	mov	r0, r3
 801000a:	3714      	adds	r7, #20
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr
 8010014:	0800fdf5 	.word	0x0800fdf5

08010018 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8010018:	b580      	push	{r7, lr}
 801001a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 801001c:	4b0c      	ldr	r3, [pc, #48]	; (8010050 <xPortStartScheduler+0x38>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a0b      	ldr	r2, [pc, #44]	; (8010050 <xPortStartScheduler+0x38>)
 8010022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010026:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8010028:	4b09      	ldr	r3, [pc, #36]	; (8010050 <xPortStartScheduler+0x38>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a08      	ldr	r2, [pc, #32]	; (8010050 <xPortStartScheduler+0x38>)
 801002e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010032:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8010034:	f7ff feba 	bl	800fdac <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8010038:	4b06      	ldr	r3, [pc, #24]	; (8010054 <xPortStartScheduler+0x3c>)
 801003a:	2200      	movs	r2, #0
 801003c:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 801003e:	f000 f82f 	bl	80100a0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8010042:	f7ff f8d1 	bl	800f1e8 <vTaskSwitchContext>
    prvTaskExitError();
 8010046:	f7ff fed5 	bl	800fdf4 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 801004a:	2300      	movs	r3, #0
}
 801004c:	4618      	mov	r0, r3
 801004e:	bd80      	pop	{r7, pc}
 8010050:	e000ed20 	.word	0xe000ed20
 8010054:	20000068 	.word	0x20000068
	...

08010060 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8010060:	4a0b      	ldr	r2, [pc, #44]	; (8010090 <pxCurrentTCBConst2>)
 8010062:	6811      	ldr	r1, [r2, #0]
 8010064:	6808      	ldr	r0, [r1, #0]
 8010066:	c806      	ldmia	r0!, {r1, r2}
 8010068:	f381 880b 	msr	PSPLIM, r1
 801006c:	2102      	movs	r1, #2
 801006e:	f381 8814 	msr	CONTROL, r1
 8010072:	3020      	adds	r0, #32
 8010074:	f380 8809 	msr	PSP, r0
 8010078:	f3bf 8f6f 	isb	sy
 801007c:	f04f 0000 	mov.w	r0, #0
 8010080:	f380 8811 	msr	BASEPRI, r0
 8010084:	4710      	bx	r2
 8010086:	bf00      	nop
 8010088:	f3af 8000 	nop.w
 801008c:	f3af 8000 	nop.w

08010090 <pxCurrentTCBConst2>:
 8010090:	200027f0 	.word	0x200027f0
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 8010094:	bf00      	nop
 8010096:	bf00      	nop
	...

080100a0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80100a0:	4807      	ldr	r0, [pc, #28]	; (80100c0 <xVTORConst>)
 80100a2:	6800      	ldr	r0, [r0, #0]
 80100a4:	6800      	ldr	r0, [r0, #0]
 80100a6:	f380 8808 	msr	MSP, r0
 80100aa:	b662      	cpsie	i
 80100ac:	b661      	cpsie	f
 80100ae:	f3bf 8f4f 	dsb	sy
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	df02      	svc	2
 80100b8:	bf00      	nop
 80100ba:	bf00      	nop
 80100bc:	f3af 8000 	nop.w

080100c0 <xVTORConst>:
 80100c0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 80100c4:	bf00      	nop
 80100c6:	bf00      	nop

080100c8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80100c8:	f3ef 8011 	mrs	r0, BASEPRI
 80100cc:	f04f 0150 	mov.w	r1, #80	; 0x50
 80100d0:	f381 8811 	msr	BASEPRI, r1
 80100d4:	f3bf 8f4f 	dsb	sy
 80100d8:	f3bf 8f6f 	isb	sy
 80100dc:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80100de:	bf00      	nop
 80100e0:	4618      	mov	r0, r3

080100e2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80100e2:	f380 8811 	msr	BASEPRI, r0
 80100e6:	f3bf 8f4f 	dsb	sy
 80100ea:	f3bf 8f6f 	isb	sy
 80100ee:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 80100f0:	bf00      	nop
	...

08010100 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8010100:	f3ef 8009 	mrs	r0, PSP
 8010104:	f3ef 820b 	mrs	r2, PSPLIM
 8010108:	4673      	mov	r3, lr
 801010a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801010e:	4a10      	ldr	r2, [pc, #64]	; (8010150 <pxCurrentTCBConst>)
 8010110:	6811      	ldr	r1, [r2, #0]
 8010112:	6008      	str	r0, [r1, #0]
 8010114:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010118:	f380 8811 	msr	BASEPRI, r0
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	f3bf 8f6f 	isb	sy
 8010124:	f7ff f860 	bl	800f1e8 <vTaskSwitchContext>
 8010128:	f04f 0000 	mov.w	r0, #0
 801012c:	f380 8811 	msr	BASEPRI, r0
 8010130:	4a07      	ldr	r2, [pc, #28]	; (8010150 <pxCurrentTCBConst>)
 8010132:	6811      	ldr	r1, [r2, #0]
 8010134:	6808      	ldr	r0, [r1, #0]
 8010136:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801013a:	f382 880b 	msr	PSPLIM, r2
 801013e:	f380 8809 	msr	PSP, r0
 8010142:	4718      	bx	r3
 8010144:	f3af 8000 	nop.w
 8010148:	f3af 8000 	nop.w
 801014c:	f3af 8000 	nop.w

08010150 <pxCurrentTCBConst>:
 8010150:	200027f0 	.word	0x200027f0
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8010154:	bf00      	nop
 8010156:	bf00      	nop
	...

08010160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8010160:	f01e 0f04 	tst.w	lr, #4
 8010164:	bf0c      	ite	eq
 8010166:	f3ef 8008 	mrseq	r0, MSP
 801016a:	f3ef 8009 	mrsne	r0, PSP
 801016e:	4904      	ldr	r1, [pc, #16]	; (8010180 <svchandler_address_const>)
 8010170:	4708      	bx	r1
 8010172:	bf00      	nop
 8010174:	f3af 8000 	nop.w
 8010178:	f3af 8000 	nop.w
 801017c:	f3af 8000 	nop.w

08010180 <svchandler_address_const>:
 8010180:	0800fed5 	.word	0x0800fed5
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 8010184:	bf00      	nop
 8010186:	bf00      	nop

08010188 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b088      	sub	sp, #32
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8010190:	2300      	movs	r3, #0
 8010192:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8010194:	f7fe fe0e 	bl	800edb4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8010198:	4b4b      	ldr	r3, [pc, #300]	; (80102c8 <pvPortMalloc+0x140>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d101      	bne.n	80101a4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80101a0:	f000 f8e8 	bl	8010374 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d012      	beq.n	80101d0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80101aa:	2208      	movs	r2, #8
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f003 0307 	and.w	r3, r3, #7
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	3308      	adds	r3, #8
 80101b6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	43db      	mvns	r3, r3
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d804      	bhi.n	80101cc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	4413      	add	r3, r2
 80101c8:	607b      	str	r3, [r7, #4]
 80101ca:	e001      	b.n	80101d0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80101cc:	2300      	movs	r3, #0
 80101ce:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	db68      	blt.n	80102a8 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d065      	beq.n	80102a8 <pvPortMalloc+0x120>
 80101dc:	4b3b      	ldr	r3, [pc, #236]	; (80102cc <pvPortMalloc+0x144>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d860      	bhi.n	80102a8 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80101e6:	4b3a      	ldr	r3, [pc, #232]	; (80102d0 <pvPortMalloc+0x148>)
 80101e8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80101ea:	4b39      	ldr	r3, [pc, #228]	; (80102d0 <pvPortMalloc+0x148>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101f0:	e004      	b.n	80101fc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101fc:	69fb      	ldr	r3, [r7, #28]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	429a      	cmp	r2, r3
 8010204:	d903      	bls.n	801020e <pvPortMalloc+0x86>
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d1f1      	bne.n	80101f2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 801020e:	4b2e      	ldr	r3, [pc, #184]	; (80102c8 <pvPortMalloc+0x140>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	69fa      	ldr	r2, [r7, #28]
 8010214:	429a      	cmp	r2, r3
 8010216:	d047      	beq.n	80102a8 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2208      	movs	r2, #8
 801021e:	4413      	add	r3, r2
 8010220:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	685a      	ldr	r2, [r3, #4]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	1ad2      	subs	r2, r2, r3
 8010232:	2308      	movs	r3, #8
 8010234:	005b      	lsls	r3, r3, #1
 8010236:	429a      	cmp	r2, r3
 8010238:	d917      	bls.n	801026a <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801023a:	69fa      	ldr	r2, [r7, #28]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4413      	add	r3, r2
 8010240:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f003 0307 	and.w	r3, r3, #7
 8010248:	2b00      	cmp	r3, #0
 801024a:	d002      	beq.n	8010252 <pvPortMalloc+0xca>
 801024c:	f7ff ff3c 	bl	80100c8 <ulSetInterruptMask>
 8010250:	e7fe      	b.n	8010250 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010252:	69fb      	ldr	r3, [r7, #28]
 8010254:	685a      	ldr	r2, [r3, #4]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	1ad2      	subs	r2, r2, r3
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010264:	68f8      	ldr	r0, [r7, #12]
 8010266:	f000 f8e1 	bl	801042c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801026a:	4b18      	ldr	r3, [pc, #96]	; (80102cc <pvPortMalloc+0x144>)
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	1ad3      	subs	r3, r2, r3
 8010274:	4a15      	ldr	r2, [pc, #84]	; (80102cc <pvPortMalloc+0x144>)
 8010276:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010278:	4b14      	ldr	r3, [pc, #80]	; (80102cc <pvPortMalloc+0x144>)
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	4b15      	ldr	r3, [pc, #84]	; (80102d4 <pvPortMalloc+0x14c>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	429a      	cmp	r2, r3
 8010282:	d203      	bcs.n	801028c <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010284:	4b11      	ldr	r3, [pc, #68]	; (80102cc <pvPortMalloc+0x144>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4a12      	ldr	r2, [pc, #72]	; (80102d4 <pvPortMalloc+0x14c>)
 801028a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	2200      	movs	r2, #0
 801029c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 801029e:	4b0e      	ldr	r3, [pc, #56]	; (80102d8 <pvPortMalloc+0x150>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3301      	adds	r3, #1
 80102a4:	4a0c      	ldr	r2, [pc, #48]	; (80102d8 <pvPortMalloc+0x150>)
 80102a6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80102a8:	f7fe fd92 	bl	800edd0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	f003 0307 	and.w	r3, r3, #7
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d002      	beq.n	80102bc <pvPortMalloc+0x134>
 80102b6:	f7ff ff07 	bl	80100c8 <ulSetInterruptMask>
 80102ba:	e7fe      	b.n	80102ba <pvPortMalloc+0x132>
    return pvReturn;
 80102bc:	697b      	ldr	r3, [r7, #20]
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3720      	adds	r7, #32
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
 80102c6:	bf00      	nop
 80102c8:	200272c4 	.word	0x200272c4
 80102cc:	200272c8 	.word	0x200272c8
 80102d0:	200272bc 	.word	0x200272bc
 80102d4:	200272cc 	.word	0x200272cc
 80102d8:	200272d0 	.word	0x200272d0

080102dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d039      	beq.n	8010362 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80102ee:	2308      	movs	r3, #8
 80102f0:	425b      	negs	r3, r3
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	4413      	add	r3, r2
 80102f6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	2b00      	cmp	r3, #0
 8010302:	db02      	blt.n	801030a <vPortFree+0x2e>
 8010304:	f7ff fee0 	bl	80100c8 <ulSetInterruptMask>
 8010308:	e7fe      	b.n	8010308 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d002      	beq.n	8010318 <vPortFree+0x3c>
 8010312:	f7ff fed9 	bl	80100c8 <ulSetInterruptMask>
 8010316:	e7fe      	b.n	8010316 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	0fdb      	lsrs	r3, r3, #31
 801031e:	f003 0301 	and.w	r3, r3, #1
 8010322:	b2db      	uxtb	r3, r3
 8010324:	2b00      	cmp	r3, #0
 8010326:	d01c      	beq.n	8010362 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d118      	bne.n	8010362 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 801033c:	f7fe fd3a 	bl	800edb4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	685a      	ldr	r2, [r3, #4]
 8010344:	4b09      	ldr	r3, [pc, #36]	; (801036c <vPortFree+0x90>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4413      	add	r3, r2
 801034a:	4a08      	ldr	r2, [pc, #32]	; (801036c <vPortFree+0x90>)
 801034c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801034e:	68b8      	ldr	r0, [r7, #8]
 8010350:	f000 f86c 	bl	801042c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8010354:	4b06      	ldr	r3, [pc, #24]	; (8010370 <vPortFree+0x94>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	3301      	adds	r3, #1
 801035a:	4a05      	ldr	r2, [pc, #20]	; (8010370 <vPortFree+0x94>)
 801035c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 801035e:	f7fe fd37 	bl	800edd0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8010362:	bf00      	nop
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	200272c8 	.word	0x200272c8
 8010370:	200272d4 	.word	0x200272d4

08010374 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801037a:	f44f 3311 	mov.w	r3, #148480	; 0x24400
 801037e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8010380:	4b25      	ldr	r3, [pc, #148]	; (8010418 <prvHeapInit+0xa4>)
 8010382:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f003 0307 	and.w	r3, r3, #7
 801038a:	2b00      	cmp	r3, #0
 801038c:	d00c      	beq.n	80103a8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	3307      	adds	r3, #7
 8010392:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f023 0307 	bic.w	r3, r3, #7
 801039a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 801039c:	68ba      	ldr	r2, [r7, #8]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	4a1d      	ldr	r2, [pc, #116]	; (8010418 <prvHeapInit+0xa4>)
 80103a4:	4413      	add	r3, r2
 80103a6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80103ac:	4a1b      	ldr	r2, [pc, #108]	; (801041c <prvHeapInit+0xa8>)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80103b2:	4b1a      	ldr	r3, [pc, #104]	; (801041c <prvHeapInit+0xa8>)
 80103b4:	2200      	movs	r2, #0
 80103b6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	68ba      	ldr	r2, [r7, #8]
 80103bc:	4413      	add	r3, r2
 80103be:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80103c0:	2208      	movs	r2, #8
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	1a9b      	subs	r3, r3, r2
 80103c6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f023 0307 	bic.w	r3, r3, #7
 80103ce:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	4a13      	ldr	r2, [pc, #76]	; (8010420 <prvHeapInit+0xac>)
 80103d4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80103d6:	4b12      	ldr	r3, [pc, #72]	; (8010420 <prvHeapInit+0xac>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2200      	movs	r2, #0
 80103dc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80103de:	4b10      	ldr	r3, [pc, #64]	; (8010420 <prvHeapInit+0xac>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2200      	movs	r2, #0
 80103e4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	1ad2      	subs	r2, r2, r3
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80103f4:	4b0a      	ldr	r3, [pc, #40]	; (8010420 <prvHeapInit+0xac>)
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	4a08      	ldr	r2, [pc, #32]	; (8010424 <prvHeapInit+0xb0>)
 8010402:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	4a07      	ldr	r2, [pc, #28]	; (8010428 <prvHeapInit+0xb4>)
 801040a:	6013      	str	r3, [r2, #0]
}
 801040c:	bf00      	nop
 801040e:	3714      	adds	r7, #20
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	20002ebc 	.word	0x20002ebc
 801041c:	200272bc 	.word	0x200272bc
 8010420:	200272c4 	.word	0x200272c4
 8010424:	200272cc 	.word	0x200272cc
 8010428:	200272c8 	.word	0x200272c8

0801042c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 801042c:	b480      	push	{r7}
 801042e:	b085      	sub	sp, #20
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010434:	4b28      	ldr	r3, [pc, #160]	; (80104d8 <prvInsertBlockIntoFreeList+0xac>)
 8010436:	60fb      	str	r3, [r7, #12]
 8010438:	e002      	b.n	8010440 <prvInsertBlockIntoFreeList+0x14>
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	60fb      	str	r3, [r7, #12]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	429a      	cmp	r2, r3
 8010448:	d8f7      	bhi.n	801043a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	4413      	add	r3, r2
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	429a      	cmp	r2, r3
 801045a:	d108      	bne.n	801046e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	685a      	ldr	r2, [r3, #4]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	441a      	add	r2, r3
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	68ba      	ldr	r2, [r7, #8]
 8010478:	441a      	add	r2, r3
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	429a      	cmp	r2, r3
 8010480:	d118      	bne.n	80104b4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	4b15      	ldr	r3, [pc, #84]	; (80104dc <prvInsertBlockIntoFreeList+0xb0>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	429a      	cmp	r2, r3
 801048c:	d00d      	beq.n	80104aa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	685a      	ldr	r2, [r3, #4]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	441a      	add	r2, r3
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	601a      	str	r2, [r3, #0]
 80104a8:	e008      	b.n	80104bc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80104aa:	4b0c      	ldr	r3, [pc, #48]	; (80104dc <prvInsertBlockIntoFreeList+0xb0>)
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	601a      	str	r2, [r3, #0]
 80104b2:	e003      	b.n	80104bc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d002      	beq.n	80104ca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	687a      	ldr	r2, [r7, #4]
 80104c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80104ca:	bf00      	nop
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	200272bc 	.word	0x200272bc
 80104dc:	200272c4 	.word	0x200272c4

080104e0 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d005      	beq.n	80104fe <lwrb_init+0x1e>
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d002      	beq.n	80104fe <lwrb_init+0x1e>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d101      	bne.n	8010502 <lwrb_init+0x22>
        return 0;
 80104fe:	2300      	movs	r3, #0
 8010500:	e00b      	b.n	801051a <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 8010502:	2214      	movs	r2, #20
 8010504:	2100      	movs	r1, #0
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f000 fab0 	bl	8010a6c <memset>

    buff->size = size;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	68ba      	ldr	r2, [r7, #8]
 8010516:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 8010518:	2301      	movs	r3, #1
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 8010522:	b480      	push	{r7}
 8010524:	b083      	sub	sp, #12
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
 801052a:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d00a      	beq.n	8010548 <lwrb_set_evt_fn+0x26>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d006      	beq.n	8010548 <lwrb_set_evt_fn+0x26>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d002      	beq.n	8010548 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	683a      	ldr	r2, [r7, #0]
 8010546:	611a      	str	r2, [r3, #16]
    }
}
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 8010554:	b580      	push	{r7, lr}
 8010556:	b088      	sub	sp, #32
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00d      	beq.n	8010586 <lwrb_write+0x32>
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d009      	beq.n	8010586 <lwrb_write+0x32>
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d005      	beq.n	8010586 <lwrb_write+0x32>
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <lwrb_write+0x32>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <lwrb_write+0x36>
        return 0;
 8010586:	2300      	movs	r3, #0
 8010588:	e059      	b.n	801063e <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f000 f85b 	bl	8010646 <lwrb_get_free>
 8010590:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 8010592:	69fa      	ldr	r2, [r7, #28]
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	429a      	cmp	r2, r3
 8010598:	d20d      	bcs.n	80105b6 <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	691b      	ldr	r3, [r3, #16]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d005      	beq.n	80105ae <lwrb_write+0x5a>
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	691b      	ldr	r3, [r3, #16]
 80105a6:	69fa      	ldr	r2, [r7, #28]
 80105a8:	2102      	movs	r1, #2
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	4798      	blx	r3
			free = lwrb_get_free(buff);
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	f000 f849 	bl	8010646 <lwrb_get_free>
 80105b4:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	69fb      	ldr	r3, [r7, #28]
 80105ba:	4293      	cmp	r3, r2
 80105bc:	bf28      	it	cs
 80105be:	4613      	movcs	r3, r2
 80105c0:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d101      	bne.n	80105cc <lwrb_write+0x78>
        return 0;
 80105c8:	2300      	movs	r3, #0
 80105ca:	e038      	b.n	801063e <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	685a      	ldr	r2, [r3, #4]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	1ad3      	subs	r3, r2, r3
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	4293      	cmp	r3, r2
 80105da:	bf28      	it	cs
 80105dc:	4613      	movcs	r3, r2
 80105de:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	4413      	add	r3, r2
 80105ea:	697a      	ldr	r2, [r7, #20]
 80105ec:	69b9      	ldr	r1, [r7, #24]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f000 fa8e 	bl	8010b10 <memcpy>
    buff->w += tocopy;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	68da      	ldr	r2, [r3, #12]
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	441a      	add	r2, r3
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	1ad3      	subs	r3, r2, r3
 8010606:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d00b      	beq.n	8010626 <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6818      	ldr	r0, [r3, #0]
 8010612:	69ba      	ldr	r2, [r7, #24]
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	4413      	add	r3, r2
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	4619      	mov	r1, r3
 801061c:	f000 fa78 	bl	8010b10 <memcpy>
        buff->w = btw;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	68da      	ldr	r2, [r3, #12]
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	429a      	cmp	r2, r3
 8010630:	d302      	bcc.n	8010638 <lwrb_write+0xe4>
        buff->w = 0;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2200      	movs	r2, #0
 8010636:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 8010638:	697a      	ldr	r2, [r7, #20]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	4413      	add	r3, r2
}
 801063e:	4618      	mov	r0, r3
 8010640:	3720      	adds	r7, #32
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}

08010646 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 8010646:	b480      	push	{r7}
 8010648:	b087      	sub	sp, #28
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d007      	beq.n	8010664 <lwrb_get_free+0x1e>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d003      	beq.n	8010664 <lwrb_get_free+0x1e>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <lwrb_get_free+0x22>
        return 0;
 8010664:	2300      	movs	r3, #0
 8010666:	e01f      	b.n	80106a8 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	689b      	ldr	r3, [r3, #8]
 8010672:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8010674:	693a      	ldr	r2, [r7, #16]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	429a      	cmp	r2, r3
 801067a:	d103      	bne.n	8010684 <lwrb_get_free+0x3e>
        size = buff->size;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	617b      	str	r3, [r7, #20]
 8010682:	e00f      	b.n	80106a4 <lwrb_get_free+0x5e>
    } else if (r > w) {
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	429a      	cmp	r2, r3
 801068a:	d904      	bls.n	8010696 <lwrb_get_free+0x50>
        size = r - w;
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	617b      	str	r3, [r7, #20]
 8010694:	e006      	b.n	80106a4 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	685a      	ldr	r2, [r3, #4]
 801069a:	68f9      	ldr	r1, [r7, #12]
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	1acb      	subs	r3, r1, r3
 80106a0:	4413      	add	r3, r2
 80106a2:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	3b01      	subs	r3, #1
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	371c      	adds	r7, #28
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 80106b4:	b480      	push	{r7}
 80106b6:	b087      	sub	sp, #28
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d007      	beq.n	80106d2 <lwrb_get_full+0x1e>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d003      	beq.n	80106d2 <lwrb_get_full+0x1e>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d101      	bne.n	80106d6 <lwrb_get_full+0x22>
        return 0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	e01d      	b.n	8010712 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	613b      	str	r3, [r7, #16]
    r = buff->r;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	689b      	ldr	r3, [r3, #8]
 80106e0:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 80106e2:	693a      	ldr	r2, [r7, #16]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d102      	bne.n	80106f0 <lwrb_get_full+0x3c>
        size = 0;
 80106ea:	2300      	movs	r3, #0
 80106ec:	617b      	str	r3, [r7, #20]
 80106ee:	e00f      	b.n	8010710 <lwrb_get_full+0x5c>
    } else if (w > r) {
 80106f0:	693a      	ldr	r2, [r7, #16]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d904      	bls.n	8010702 <lwrb_get_full+0x4e>
        size = w - r;
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	617b      	str	r3, [r7, #20]
 8010700:	e006      	b.n	8010710 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	685a      	ldr	r2, [r3, #4]
 8010706:	6939      	ldr	r1, [r7, #16]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	1acb      	subs	r3, r1, r3
 801070c:	4413      	add	r3, r2
 801070e:	617b      	str	r3, [r7, #20]
    }
    return size;
 8010710:	697b      	ldr	r3, [r7, #20]
}
 8010712:	4618      	mov	r0, r3
 8010714:	371c      	adds	r7, #28
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr

0801071e <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 801071e:	b480      	push	{r7}
 8010720:	b083      	sub	sp, #12
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d007      	beq.n	801073c <lwrb_get_linear_block_read_address+0x1e>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d003      	beq.n	801073c <lwrb_get_linear_block_read_address+0x1e>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d101      	bne.n	8010740 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 801073c:	2300      	movs	r3, #0
 801073e:	e004      	b.n	801074a <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	689b      	ldr	r3, [r3, #8]
 8010748:	4413      	add	r3, r2
}
 801074a:	4618      	mov	r0, r3
 801074c:	370c      	adds	r7, #12
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 8010756:	b480      	push	{r7}
 8010758:	b087      	sub	sp, #28
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d007      	beq.n	8010774 <lwrb_get_linear_block_read_length+0x1e>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d003      	beq.n	8010774 <lwrb_get_linear_block_read_length+0x1e>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d101      	bne.n	8010778 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 8010774:	2300      	movs	r3, #0
 8010776:	e01b      	b.n	80107b0 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	613b      	str	r3, [r7, #16]
    r = buff->r;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	689b      	ldr	r3, [r3, #8]
 8010782:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8010784:	693a      	ldr	r2, [r7, #16]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	429a      	cmp	r2, r3
 801078a:	d904      	bls.n	8010796 <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 801078c:	693a      	ldr	r2, [r7, #16]
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	1ad3      	subs	r3, r2, r3
 8010792:	617b      	str	r3, [r7, #20]
 8010794:	e00b      	b.n	80107ae <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	429a      	cmp	r2, r3
 801079c:	d905      	bls.n	80107aa <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	685a      	ldr	r2, [r3, #4]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	1ad3      	subs	r3, r2, r3
 80107a6:	617b      	str	r3, [r7, #20]
 80107a8:	e001      	b.n	80107ae <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 80107aa:	2300      	movs	r3, #0
 80107ac:	617b      	str	r3, [r7, #20]
    }
    return len;
 80107ae:	697b      	ldr	r3, [r7, #20]
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	371c      	adds	r7, #28
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr

080107bc <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00a      	beq.n	80107e2 <lwrb_skip+0x26>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d006      	beq.n	80107e2 <lwrb_skip+0x26>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d002      	beq.n	80107e2 <lwrb_skip+0x26>
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d101      	bne.n	80107e6 <lwrb_skip+0x2a>
        return 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	e01d      	b.n	8010822 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7ff ff64 	bl	80106b4 <lwrb_get_full>
 80107ec:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 80107ee:	683a      	ldr	r2, [r7, #0]
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	4293      	cmp	r3, r2
 80107f4:	bf28      	it	cs
 80107f6:	4613      	movcs	r3, r2
 80107f8:	603b      	str	r3, [r7, #0]
    buff->r += len;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	689a      	ldr	r2, [r3, #8]
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	441a      	add	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	689a      	ldr	r2, [r3, #8]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	429a      	cmp	r2, r3
 8010810:	d306      	bcc.n	8010820 <lwrb_skip+0x64>
        buff->r -= buff->size;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	689a      	ldr	r2, [r3, #8]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	1ad2      	subs	r2, r2, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 8010820:	683b      	ldr	r3, [r7, #0]
}
 8010822:	4618      	mov	r0, r3
 8010824:	3710      	adds	r7, #16
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
	...

0801082c <sbrk_aligned>:
 801082c:	b570      	push	{r4, r5, r6, lr}
 801082e:	4e0e      	ldr	r6, [pc, #56]	; (8010868 <sbrk_aligned+0x3c>)
 8010830:	460c      	mov	r4, r1
 8010832:	4605      	mov	r5, r0
 8010834:	6831      	ldr	r1, [r6, #0]
 8010836:	b911      	cbnz	r1, 801083e <sbrk_aligned+0x12>
 8010838:	f000 f934 	bl	8010aa4 <_sbrk_r>
 801083c:	6030      	str	r0, [r6, #0]
 801083e:	4621      	mov	r1, r4
 8010840:	4628      	mov	r0, r5
 8010842:	f000 f92f 	bl	8010aa4 <_sbrk_r>
 8010846:	1c43      	adds	r3, r0, #1
 8010848:	d00a      	beq.n	8010860 <sbrk_aligned+0x34>
 801084a:	1cc4      	adds	r4, r0, #3
 801084c:	f024 0403 	bic.w	r4, r4, #3
 8010850:	42a0      	cmp	r0, r4
 8010852:	d007      	beq.n	8010864 <sbrk_aligned+0x38>
 8010854:	1a21      	subs	r1, r4, r0
 8010856:	4628      	mov	r0, r5
 8010858:	f000 f924 	bl	8010aa4 <_sbrk_r>
 801085c:	3001      	adds	r0, #1
 801085e:	d101      	bne.n	8010864 <sbrk_aligned+0x38>
 8010860:	f04f 34ff 	mov.w	r4, #4294967295
 8010864:	4620      	mov	r0, r4
 8010866:	bd70      	pop	{r4, r5, r6, pc}
 8010868:	200272dc 	.word	0x200272dc

0801086c <_malloc_r>:
 801086c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010870:	1ccd      	adds	r5, r1, #3
 8010872:	4607      	mov	r7, r0
 8010874:	f025 0503 	bic.w	r5, r5, #3
 8010878:	3508      	adds	r5, #8
 801087a:	2d0c      	cmp	r5, #12
 801087c:	bf38      	it	cc
 801087e:	250c      	movcc	r5, #12
 8010880:	2d00      	cmp	r5, #0
 8010882:	db01      	blt.n	8010888 <_malloc_r+0x1c>
 8010884:	42a9      	cmp	r1, r5
 8010886:	d905      	bls.n	8010894 <_malloc_r+0x28>
 8010888:	230c      	movs	r3, #12
 801088a:	2600      	movs	r6, #0
 801088c:	603b      	str	r3, [r7, #0]
 801088e:	4630      	mov	r0, r6
 8010890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010894:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010968 <_malloc_r+0xfc>
 8010898:	f000 f868 	bl	801096c <__malloc_lock>
 801089c:	f8d8 3000 	ldr.w	r3, [r8]
 80108a0:	461c      	mov	r4, r3
 80108a2:	bb5c      	cbnz	r4, 80108fc <_malloc_r+0x90>
 80108a4:	4629      	mov	r1, r5
 80108a6:	4638      	mov	r0, r7
 80108a8:	f7ff ffc0 	bl	801082c <sbrk_aligned>
 80108ac:	1c43      	adds	r3, r0, #1
 80108ae:	4604      	mov	r4, r0
 80108b0:	d155      	bne.n	801095e <_malloc_r+0xf2>
 80108b2:	f8d8 4000 	ldr.w	r4, [r8]
 80108b6:	4626      	mov	r6, r4
 80108b8:	2e00      	cmp	r6, #0
 80108ba:	d145      	bne.n	8010948 <_malloc_r+0xdc>
 80108bc:	2c00      	cmp	r4, #0
 80108be:	d048      	beq.n	8010952 <_malloc_r+0xe6>
 80108c0:	6823      	ldr	r3, [r4, #0]
 80108c2:	4631      	mov	r1, r6
 80108c4:	4638      	mov	r0, r7
 80108c6:	eb04 0903 	add.w	r9, r4, r3
 80108ca:	f000 f8eb 	bl	8010aa4 <_sbrk_r>
 80108ce:	4581      	cmp	r9, r0
 80108d0:	d13f      	bne.n	8010952 <_malloc_r+0xe6>
 80108d2:	6821      	ldr	r1, [r4, #0]
 80108d4:	4638      	mov	r0, r7
 80108d6:	1a6d      	subs	r5, r5, r1
 80108d8:	4629      	mov	r1, r5
 80108da:	f7ff ffa7 	bl	801082c <sbrk_aligned>
 80108de:	3001      	adds	r0, #1
 80108e0:	d037      	beq.n	8010952 <_malloc_r+0xe6>
 80108e2:	6823      	ldr	r3, [r4, #0]
 80108e4:	442b      	add	r3, r5
 80108e6:	6023      	str	r3, [r4, #0]
 80108e8:	f8d8 3000 	ldr.w	r3, [r8]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d038      	beq.n	8010962 <_malloc_r+0xf6>
 80108f0:	685a      	ldr	r2, [r3, #4]
 80108f2:	42a2      	cmp	r2, r4
 80108f4:	d12b      	bne.n	801094e <_malloc_r+0xe2>
 80108f6:	2200      	movs	r2, #0
 80108f8:	605a      	str	r2, [r3, #4]
 80108fa:	e00f      	b.n	801091c <_malloc_r+0xb0>
 80108fc:	6822      	ldr	r2, [r4, #0]
 80108fe:	1b52      	subs	r2, r2, r5
 8010900:	d41f      	bmi.n	8010942 <_malloc_r+0xd6>
 8010902:	2a0b      	cmp	r2, #11
 8010904:	d917      	bls.n	8010936 <_malloc_r+0xca>
 8010906:	1961      	adds	r1, r4, r5
 8010908:	42a3      	cmp	r3, r4
 801090a:	6025      	str	r5, [r4, #0]
 801090c:	bf18      	it	ne
 801090e:	6059      	strne	r1, [r3, #4]
 8010910:	6863      	ldr	r3, [r4, #4]
 8010912:	bf08      	it	eq
 8010914:	f8c8 1000 	streq.w	r1, [r8]
 8010918:	5162      	str	r2, [r4, r5]
 801091a:	604b      	str	r3, [r1, #4]
 801091c:	f104 060b 	add.w	r6, r4, #11
 8010920:	4638      	mov	r0, r7
 8010922:	f000 f829 	bl	8010978 <__malloc_unlock>
 8010926:	1d23      	adds	r3, r4, #4
 8010928:	f026 0607 	bic.w	r6, r6, #7
 801092c:	1af2      	subs	r2, r6, r3
 801092e:	d0ae      	beq.n	801088e <_malloc_r+0x22>
 8010930:	1b9b      	subs	r3, r3, r6
 8010932:	50a3      	str	r3, [r4, r2]
 8010934:	e7ab      	b.n	801088e <_malloc_r+0x22>
 8010936:	42a3      	cmp	r3, r4
 8010938:	6862      	ldr	r2, [r4, #4]
 801093a:	d1dd      	bne.n	80108f8 <_malloc_r+0x8c>
 801093c:	f8c8 2000 	str.w	r2, [r8]
 8010940:	e7ec      	b.n	801091c <_malloc_r+0xb0>
 8010942:	4623      	mov	r3, r4
 8010944:	6864      	ldr	r4, [r4, #4]
 8010946:	e7ac      	b.n	80108a2 <_malloc_r+0x36>
 8010948:	4634      	mov	r4, r6
 801094a:	6876      	ldr	r6, [r6, #4]
 801094c:	e7b4      	b.n	80108b8 <_malloc_r+0x4c>
 801094e:	4613      	mov	r3, r2
 8010950:	e7cc      	b.n	80108ec <_malloc_r+0x80>
 8010952:	230c      	movs	r3, #12
 8010954:	4638      	mov	r0, r7
 8010956:	603b      	str	r3, [r7, #0]
 8010958:	f000 f80e 	bl	8010978 <__malloc_unlock>
 801095c:	e797      	b.n	801088e <_malloc_r+0x22>
 801095e:	6025      	str	r5, [r4, #0]
 8010960:	e7dc      	b.n	801091c <_malloc_r+0xb0>
 8010962:	605b      	str	r3, [r3, #4]
 8010964:	deff      	udf	#255	; 0xff
 8010966:	bf00      	nop
 8010968:	200272d8 	.word	0x200272d8

0801096c <__malloc_lock>:
 801096c:	4801      	ldr	r0, [pc, #4]	; (8010974 <__malloc_lock+0x8>)
 801096e:	f000 b8cd 	b.w	8010b0c <__retarget_lock_acquire_recursive>
 8010972:	bf00      	nop
 8010974:	2002741c 	.word	0x2002741c

08010978 <__malloc_unlock>:
 8010978:	4801      	ldr	r0, [pc, #4]	; (8010980 <__malloc_unlock+0x8>)
 801097a:	f000 b8c8 	b.w	8010b0e <__retarget_lock_release_recursive>
 801097e:	bf00      	nop
 8010980:	2002741c 	.word	0x2002741c

08010984 <_vsniprintf_r>:
 8010984:	b530      	push	{r4, r5, lr}
 8010986:	4614      	mov	r4, r2
 8010988:	b09b      	sub	sp, #108	; 0x6c
 801098a:	4605      	mov	r5, r0
 801098c:	461a      	mov	r2, r3
 801098e:	2c00      	cmp	r4, #0
 8010990:	da05      	bge.n	801099e <_vsniprintf_r+0x1a>
 8010992:	238b      	movs	r3, #139	; 0x8b
 8010994:	6003      	str	r3, [r0, #0]
 8010996:	f04f 30ff 	mov.w	r0, #4294967295
 801099a:	b01b      	add	sp, #108	; 0x6c
 801099c:	bd30      	pop	{r4, r5, pc}
 801099e:	f44f 7302 	mov.w	r3, #520	; 0x208
 80109a2:	9100      	str	r1, [sp, #0]
 80109a4:	9104      	str	r1, [sp, #16]
 80109a6:	4669      	mov	r1, sp
 80109a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80109ac:	bf14      	ite	ne
 80109ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80109b2:	4623      	moveq	r3, r4
 80109b4:	9302      	str	r3, [sp, #8]
 80109b6:	9305      	str	r3, [sp, #20]
 80109b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80109bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80109c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80109c2:	f000 f959 	bl	8010c78 <_svfiprintf_r>
 80109c6:	1c43      	adds	r3, r0, #1
 80109c8:	bfbc      	itt	lt
 80109ca:	238b      	movlt	r3, #139	; 0x8b
 80109cc:	602b      	strlt	r3, [r5, #0]
 80109ce:	2c00      	cmp	r4, #0
 80109d0:	d0e3      	beq.n	801099a <_vsniprintf_r+0x16>
 80109d2:	9b00      	ldr	r3, [sp, #0]
 80109d4:	2200      	movs	r2, #0
 80109d6:	701a      	strb	r2, [r3, #0]
 80109d8:	e7df      	b.n	801099a <_vsniprintf_r+0x16>
	...

080109dc <vsniprintf>:
 80109dc:	b507      	push	{r0, r1, r2, lr}
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	4613      	mov	r3, r2
 80109e2:	460a      	mov	r2, r1
 80109e4:	4601      	mov	r1, r0
 80109e6:	4803      	ldr	r0, [pc, #12]	; (80109f4 <vsniprintf+0x18>)
 80109e8:	6800      	ldr	r0, [r0, #0]
 80109ea:	f7ff ffcb 	bl	8010984 <_vsniprintf_r>
 80109ee:	b003      	add	sp, #12
 80109f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80109f4:	200000b8 	.word	0x200000b8

080109f8 <_vsiprintf_r>:
 80109f8:	b500      	push	{lr}
 80109fa:	b09b      	sub	sp, #108	; 0x6c
 80109fc:	9100      	str	r1, [sp, #0]
 80109fe:	9104      	str	r1, [sp, #16]
 8010a00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a04:	9105      	str	r1, [sp, #20]
 8010a06:	9102      	str	r1, [sp, #8]
 8010a08:	4905      	ldr	r1, [pc, #20]	; (8010a20 <_vsiprintf_r+0x28>)
 8010a0a:	9103      	str	r1, [sp, #12]
 8010a0c:	4669      	mov	r1, sp
 8010a0e:	f000 f933 	bl	8010c78 <_svfiprintf_r>
 8010a12:	9b00      	ldr	r3, [sp, #0]
 8010a14:	2200      	movs	r2, #0
 8010a16:	701a      	strb	r2, [r3, #0]
 8010a18:	b01b      	add	sp, #108	; 0x6c
 8010a1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a1e:	bf00      	nop
 8010a20:	ffff0208 	.word	0xffff0208

08010a24 <vsiprintf>:
 8010a24:	4613      	mov	r3, r2
 8010a26:	460a      	mov	r2, r1
 8010a28:	4601      	mov	r1, r0
 8010a2a:	4802      	ldr	r0, [pc, #8]	; (8010a34 <vsiprintf+0x10>)
 8010a2c:	6800      	ldr	r0, [r0, #0]
 8010a2e:	f7ff bfe3 	b.w	80109f8 <_vsiprintf_r>
 8010a32:	bf00      	nop
 8010a34:	200000b8 	.word	0x200000b8

08010a38 <memmove>:
 8010a38:	4288      	cmp	r0, r1
 8010a3a:	b510      	push	{r4, lr}
 8010a3c:	eb01 0402 	add.w	r4, r1, r2
 8010a40:	d902      	bls.n	8010a48 <memmove+0x10>
 8010a42:	4284      	cmp	r4, r0
 8010a44:	4623      	mov	r3, r4
 8010a46:	d807      	bhi.n	8010a58 <memmove+0x20>
 8010a48:	1e43      	subs	r3, r0, #1
 8010a4a:	42a1      	cmp	r1, r4
 8010a4c:	d008      	beq.n	8010a60 <memmove+0x28>
 8010a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a56:	e7f8      	b.n	8010a4a <memmove+0x12>
 8010a58:	4402      	add	r2, r0
 8010a5a:	4601      	mov	r1, r0
 8010a5c:	428a      	cmp	r2, r1
 8010a5e:	d100      	bne.n	8010a62 <memmove+0x2a>
 8010a60:	bd10      	pop	{r4, pc}
 8010a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a6a:	e7f7      	b.n	8010a5c <memmove+0x24>

08010a6c <memset>:
 8010a6c:	4402      	add	r2, r0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d100      	bne.n	8010a76 <memset+0xa>
 8010a74:	4770      	bx	lr
 8010a76:	f803 1b01 	strb.w	r1, [r3], #1
 8010a7a:	e7f9      	b.n	8010a70 <memset+0x4>

08010a7c <strncpy>:
 8010a7c:	3901      	subs	r1, #1
 8010a7e:	4603      	mov	r3, r0
 8010a80:	b510      	push	{r4, lr}
 8010a82:	b132      	cbz	r2, 8010a92 <strncpy+0x16>
 8010a84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010a88:	3a01      	subs	r2, #1
 8010a8a:	f803 4b01 	strb.w	r4, [r3], #1
 8010a8e:	2c00      	cmp	r4, #0
 8010a90:	d1f7      	bne.n	8010a82 <strncpy+0x6>
 8010a92:	441a      	add	r2, r3
 8010a94:	2100      	movs	r1, #0
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d100      	bne.n	8010a9c <strncpy+0x20>
 8010a9a:	bd10      	pop	{r4, pc}
 8010a9c:	f803 1b01 	strb.w	r1, [r3], #1
 8010aa0:	e7f9      	b.n	8010a96 <strncpy+0x1a>
	...

08010aa4 <_sbrk_r>:
 8010aa4:	b538      	push	{r3, r4, r5, lr}
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	4d05      	ldr	r5, [pc, #20]	; (8010ac0 <_sbrk_r+0x1c>)
 8010aaa:	4604      	mov	r4, r0
 8010aac:	4608      	mov	r0, r1
 8010aae:	602b      	str	r3, [r5, #0]
 8010ab0:	f7f0 fa54 	bl	8000f5c <_sbrk>
 8010ab4:	1c43      	adds	r3, r0, #1
 8010ab6:	d102      	bne.n	8010abe <_sbrk_r+0x1a>
 8010ab8:	682b      	ldr	r3, [r5, #0]
 8010aba:	b103      	cbz	r3, 8010abe <_sbrk_r+0x1a>
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	bd38      	pop	{r3, r4, r5, pc}
 8010ac0:	20027418 	.word	0x20027418

08010ac4 <__libc_init_array>:
 8010ac4:	b570      	push	{r4, r5, r6, lr}
 8010ac6:	4d0d      	ldr	r5, [pc, #52]	; (8010afc <__libc_init_array+0x38>)
 8010ac8:	2600      	movs	r6, #0
 8010aca:	4c0d      	ldr	r4, [pc, #52]	; (8010b00 <__libc_init_array+0x3c>)
 8010acc:	1b64      	subs	r4, r4, r5
 8010ace:	10a4      	asrs	r4, r4, #2
 8010ad0:	42a6      	cmp	r6, r4
 8010ad2:	d109      	bne.n	8010ae8 <__libc_init_array+0x24>
 8010ad4:	4d0b      	ldr	r5, [pc, #44]	; (8010b04 <__libc_init_array+0x40>)
 8010ad6:	2600      	movs	r6, #0
 8010ad8:	4c0b      	ldr	r4, [pc, #44]	; (8010b08 <__libc_init_array+0x44>)
 8010ada:	f000 fba3 	bl	8011224 <_init>
 8010ade:	1b64      	subs	r4, r4, r5
 8010ae0:	10a4      	asrs	r4, r4, #2
 8010ae2:	42a6      	cmp	r6, r4
 8010ae4:	d105      	bne.n	8010af2 <__libc_init_array+0x2e>
 8010ae6:	bd70      	pop	{r4, r5, r6, pc}
 8010ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010aec:	3601      	adds	r6, #1
 8010aee:	4798      	blx	r3
 8010af0:	e7ee      	b.n	8010ad0 <__libc_init_array+0xc>
 8010af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010af6:	3601      	adds	r6, #1
 8010af8:	4798      	blx	r3
 8010afa:	e7f2      	b.n	8010ae2 <__libc_init_array+0x1e>
 8010afc:	08011864 	.word	0x08011864
 8010b00:	08011864 	.word	0x08011864
 8010b04:	08011864 	.word	0x08011864
 8010b08:	08011868 	.word	0x08011868

08010b0c <__retarget_lock_acquire_recursive>:
 8010b0c:	4770      	bx	lr

08010b0e <__retarget_lock_release_recursive>:
 8010b0e:	4770      	bx	lr

08010b10 <memcpy>:
 8010b10:	440a      	add	r2, r1
 8010b12:	1e43      	subs	r3, r0, #1
 8010b14:	4291      	cmp	r1, r2
 8010b16:	d100      	bne.n	8010b1a <memcpy+0xa>
 8010b18:	4770      	bx	lr
 8010b1a:	b510      	push	{r4, lr}
 8010b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b20:	4291      	cmp	r1, r2
 8010b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b26:	d1f9      	bne.n	8010b1c <memcpy+0xc>
 8010b28:	bd10      	pop	{r4, pc}
	...

08010b2c <_free_r>:
 8010b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b2e:	2900      	cmp	r1, #0
 8010b30:	d043      	beq.n	8010bba <_free_r+0x8e>
 8010b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b36:	1f0c      	subs	r4, r1, #4
 8010b38:	9001      	str	r0, [sp, #4]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	bfb8      	it	lt
 8010b3e:	18e4      	addlt	r4, r4, r3
 8010b40:	f7ff ff14 	bl	801096c <__malloc_lock>
 8010b44:	4a1e      	ldr	r2, [pc, #120]	; (8010bc0 <_free_r+0x94>)
 8010b46:	9801      	ldr	r0, [sp, #4]
 8010b48:	6813      	ldr	r3, [r2, #0]
 8010b4a:	b933      	cbnz	r3, 8010b5a <_free_r+0x2e>
 8010b4c:	6063      	str	r3, [r4, #4]
 8010b4e:	6014      	str	r4, [r2, #0]
 8010b50:	b003      	add	sp, #12
 8010b52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b56:	f7ff bf0f 	b.w	8010978 <__malloc_unlock>
 8010b5a:	42a3      	cmp	r3, r4
 8010b5c:	d908      	bls.n	8010b70 <_free_r+0x44>
 8010b5e:	6825      	ldr	r5, [r4, #0]
 8010b60:	1961      	adds	r1, r4, r5
 8010b62:	428b      	cmp	r3, r1
 8010b64:	bf01      	itttt	eq
 8010b66:	6819      	ldreq	r1, [r3, #0]
 8010b68:	685b      	ldreq	r3, [r3, #4]
 8010b6a:	1949      	addeq	r1, r1, r5
 8010b6c:	6021      	streq	r1, [r4, #0]
 8010b6e:	e7ed      	b.n	8010b4c <_free_r+0x20>
 8010b70:	461a      	mov	r2, r3
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	b10b      	cbz	r3, 8010b7a <_free_r+0x4e>
 8010b76:	42a3      	cmp	r3, r4
 8010b78:	d9fa      	bls.n	8010b70 <_free_r+0x44>
 8010b7a:	6811      	ldr	r1, [r2, #0]
 8010b7c:	1855      	adds	r5, r2, r1
 8010b7e:	42a5      	cmp	r5, r4
 8010b80:	d10b      	bne.n	8010b9a <_free_r+0x6e>
 8010b82:	6824      	ldr	r4, [r4, #0]
 8010b84:	4421      	add	r1, r4
 8010b86:	1854      	adds	r4, r2, r1
 8010b88:	6011      	str	r1, [r2, #0]
 8010b8a:	42a3      	cmp	r3, r4
 8010b8c:	d1e0      	bne.n	8010b50 <_free_r+0x24>
 8010b8e:	681c      	ldr	r4, [r3, #0]
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	440c      	add	r4, r1
 8010b94:	6053      	str	r3, [r2, #4]
 8010b96:	6014      	str	r4, [r2, #0]
 8010b98:	e7da      	b.n	8010b50 <_free_r+0x24>
 8010b9a:	d902      	bls.n	8010ba2 <_free_r+0x76>
 8010b9c:	230c      	movs	r3, #12
 8010b9e:	6003      	str	r3, [r0, #0]
 8010ba0:	e7d6      	b.n	8010b50 <_free_r+0x24>
 8010ba2:	6825      	ldr	r5, [r4, #0]
 8010ba4:	1961      	adds	r1, r4, r5
 8010ba6:	428b      	cmp	r3, r1
 8010ba8:	bf02      	ittt	eq
 8010baa:	6819      	ldreq	r1, [r3, #0]
 8010bac:	685b      	ldreq	r3, [r3, #4]
 8010bae:	1949      	addeq	r1, r1, r5
 8010bb0:	6063      	str	r3, [r4, #4]
 8010bb2:	bf08      	it	eq
 8010bb4:	6021      	streq	r1, [r4, #0]
 8010bb6:	6054      	str	r4, [r2, #4]
 8010bb8:	e7ca      	b.n	8010b50 <_free_r+0x24>
 8010bba:	b003      	add	sp, #12
 8010bbc:	bd30      	pop	{r4, r5, pc}
 8010bbe:	bf00      	nop
 8010bc0:	200272d8 	.word	0x200272d8

08010bc4 <__ssputs_r>:
 8010bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bc8:	461f      	mov	r7, r3
 8010bca:	688e      	ldr	r6, [r1, #8]
 8010bcc:	4682      	mov	sl, r0
 8010bce:	460c      	mov	r4, r1
 8010bd0:	42be      	cmp	r6, r7
 8010bd2:	4690      	mov	r8, r2
 8010bd4:	680b      	ldr	r3, [r1, #0]
 8010bd6:	d82c      	bhi.n	8010c32 <__ssputs_r+0x6e>
 8010bd8:	898a      	ldrh	r2, [r1, #12]
 8010bda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010bde:	d026      	beq.n	8010c2e <__ssputs_r+0x6a>
 8010be0:	6965      	ldr	r5, [r4, #20]
 8010be2:	6909      	ldr	r1, [r1, #16]
 8010be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010be8:	eba3 0901 	sub.w	r9, r3, r1
 8010bec:	1c7b      	adds	r3, r7, #1
 8010bee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bf2:	444b      	add	r3, r9
 8010bf4:	106d      	asrs	r5, r5, #1
 8010bf6:	429d      	cmp	r5, r3
 8010bf8:	bf38      	it	cc
 8010bfa:	461d      	movcc	r5, r3
 8010bfc:	0553      	lsls	r3, r2, #21
 8010bfe:	d527      	bpl.n	8010c50 <__ssputs_r+0x8c>
 8010c00:	4629      	mov	r1, r5
 8010c02:	f7ff fe33 	bl	801086c <_malloc_r>
 8010c06:	4606      	mov	r6, r0
 8010c08:	b360      	cbz	r0, 8010c64 <__ssputs_r+0xa0>
 8010c0a:	464a      	mov	r2, r9
 8010c0c:	6921      	ldr	r1, [r4, #16]
 8010c0e:	f7ff ff7f 	bl	8010b10 <memcpy>
 8010c12:	89a3      	ldrh	r3, [r4, #12]
 8010c14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c1c:	81a3      	strh	r3, [r4, #12]
 8010c1e:	6126      	str	r6, [r4, #16]
 8010c20:	444e      	add	r6, r9
 8010c22:	6165      	str	r5, [r4, #20]
 8010c24:	eba5 0509 	sub.w	r5, r5, r9
 8010c28:	6026      	str	r6, [r4, #0]
 8010c2a:	463e      	mov	r6, r7
 8010c2c:	60a5      	str	r5, [r4, #8]
 8010c2e:	42be      	cmp	r6, r7
 8010c30:	d900      	bls.n	8010c34 <__ssputs_r+0x70>
 8010c32:	463e      	mov	r6, r7
 8010c34:	4632      	mov	r2, r6
 8010c36:	4641      	mov	r1, r8
 8010c38:	6820      	ldr	r0, [r4, #0]
 8010c3a:	f7ff fefd 	bl	8010a38 <memmove>
 8010c3e:	68a3      	ldr	r3, [r4, #8]
 8010c40:	2000      	movs	r0, #0
 8010c42:	1b9b      	subs	r3, r3, r6
 8010c44:	60a3      	str	r3, [r4, #8]
 8010c46:	6823      	ldr	r3, [r4, #0]
 8010c48:	4433      	add	r3, r6
 8010c4a:	6023      	str	r3, [r4, #0]
 8010c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c50:	462a      	mov	r2, r5
 8010c52:	f000 faaf 	bl	80111b4 <_realloc_r>
 8010c56:	4606      	mov	r6, r0
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	d1e0      	bne.n	8010c1e <__ssputs_r+0x5a>
 8010c5c:	6921      	ldr	r1, [r4, #16]
 8010c5e:	4650      	mov	r0, sl
 8010c60:	f7ff ff64 	bl	8010b2c <_free_r>
 8010c64:	230c      	movs	r3, #12
 8010c66:	f04f 30ff 	mov.w	r0, #4294967295
 8010c6a:	f8ca 3000 	str.w	r3, [sl]
 8010c6e:	89a3      	ldrh	r3, [r4, #12]
 8010c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c74:	81a3      	strh	r3, [r4, #12]
 8010c76:	e7e9      	b.n	8010c4c <__ssputs_r+0x88>

08010c78 <_svfiprintf_r>:
 8010c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7c:	4698      	mov	r8, r3
 8010c7e:	898b      	ldrh	r3, [r1, #12]
 8010c80:	b09d      	sub	sp, #116	; 0x74
 8010c82:	4607      	mov	r7, r0
 8010c84:	061b      	lsls	r3, r3, #24
 8010c86:	460d      	mov	r5, r1
 8010c88:	4614      	mov	r4, r2
 8010c8a:	d50e      	bpl.n	8010caa <_svfiprintf_r+0x32>
 8010c8c:	690b      	ldr	r3, [r1, #16]
 8010c8e:	b963      	cbnz	r3, 8010caa <_svfiprintf_r+0x32>
 8010c90:	2140      	movs	r1, #64	; 0x40
 8010c92:	f7ff fdeb 	bl	801086c <_malloc_r>
 8010c96:	6028      	str	r0, [r5, #0]
 8010c98:	6128      	str	r0, [r5, #16]
 8010c9a:	b920      	cbnz	r0, 8010ca6 <_svfiprintf_r+0x2e>
 8010c9c:	230c      	movs	r3, #12
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca4:	e0d0      	b.n	8010e48 <_svfiprintf_r+0x1d0>
 8010ca6:	2340      	movs	r3, #64	; 0x40
 8010ca8:	616b      	str	r3, [r5, #20]
 8010caa:	2300      	movs	r3, #0
 8010cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cb0:	f04f 0901 	mov.w	r9, #1
 8010cb4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010e60 <_svfiprintf_r+0x1e8>
 8010cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8010cba:	2320      	movs	r3, #32
 8010cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010cc0:	2330      	movs	r3, #48	; 0x30
 8010cc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010cc6:	4623      	mov	r3, r4
 8010cc8:	469a      	mov	sl, r3
 8010cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cce:	b10a      	cbz	r2, 8010cd4 <_svfiprintf_r+0x5c>
 8010cd0:	2a25      	cmp	r2, #37	; 0x25
 8010cd2:	d1f9      	bne.n	8010cc8 <_svfiprintf_r+0x50>
 8010cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8010cd8:	d00b      	beq.n	8010cf2 <_svfiprintf_r+0x7a>
 8010cda:	465b      	mov	r3, fp
 8010cdc:	4622      	mov	r2, r4
 8010cde:	4629      	mov	r1, r5
 8010ce0:	4638      	mov	r0, r7
 8010ce2:	f7ff ff6f 	bl	8010bc4 <__ssputs_r>
 8010ce6:	3001      	adds	r0, #1
 8010ce8:	f000 80a9 	beq.w	8010e3e <_svfiprintf_r+0x1c6>
 8010cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cee:	445a      	add	r2, fp
 8010cf0:	9209      	str	r2, [sp, #36]	; 0x24
 8010cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	f000 80a1 	beq.w	8010e3e <_svfiprintf_r+0x1c6>
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8010d02:	f10a 0a01 	add.w	sl, sl, #1
 8010d06:	9304      	str	r3, [sp, #16]
 8010d08:	9307      	str	r3, [sp, #28]
 8010d0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d0e:	931a      	str	r3, [sp, #104]	; 0x68
 8010d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d14:	4654      	mov	r4, sl
 8010d16:	2205      	movs	r2, #5
 8010d18:	4851      	ldr	r0, [pc, #324]	; (8010e60 <_svfiprintf_r+0x1e8>)
 8010d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d1e:	f000 fa3b 	bl	8011198 <memchr>
 8010d22:	9a04      	ldr	r2, [sp, #16]
 8010d24:	b9d8      	cbnz	r0, 8010d5e <_svfiprintf_r+0xe6>
 8010d26:	06d0      	lsls	r0, r2, #27
 8010d28:	bf44      	itt	mi
 8010d2a:	2320      	movmi	r3, #32
 8010d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d30:	0711      	lsls	r1, r2, #28
 8010d32:	bf44      	itt	mi
 8010d34:	232b      	movmi	r3, #43	; 0x2b
 8010d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8010d40:	d015      	beq.n	8010d6e <_svfiprintf_r+0xf6>
 8010d42:	9a07      	ldr	r2, [sp, #28]
 8010d44:	4654      	mov	r4, sl
 8010d46:	2000      	movs	r0, #0
 8010d48:	f04f 0c0a 	mov.w	ip, #10
 8010d4c:	4621      	mov	r1, r4
 8010d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d52:	3b30      	subs	r3, #48	; 0x30
 8010d54:	2b09      	cmp	r3, #9
 8010d56:	d94d      	bls.n	8010df4 <_svfiprintf_r+0x17c>
 8010d58:	b1b0      	cbz	r0, 8010d88 <_svfiprintf_r+0x110>
 8010d5a:	9207      	str	r2, [sp, #28]
 8010d5c:	e014      	b.n	8010d88 <_svfiprintf_r+0x110>
 8010d5e:	eba0 0308 	sub.w	r3, r0, r8
 8010d62:	46a2      	mov	sl, r4
 8010d64:	fa09 f303 	lsl.w	r3, r9, r3
 8010d68:	4313      	orrs	r3, r2
 8010d6a:	9304      	str	r3, [sp, #16]
 8010d6c:	e7d2      	b.n	8010d14 <_svfiprintf_r+0x9c>
 8010d6e:	9b03      	ldr	r3, [sp, #12]
 8010d70:	1d19      	adds	r1, r3, #4
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	9103      	str	r1, [sp, #12]
 8010d78:	bfbb      	ittet	lt
 8010d7a:	425b      	neglt	r3, r3
 8010d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8010d80:	9307      	strge	r3, [sp, #28]
 8010d82:	9307      	strlt	r3, [sp, #28]
 8010d84:	bfb8      	it	lt
 8010d86:	9204      	strlt	r2, [sp, #16]
 8010d88:	7823      	ldrb	r3, [r4, #0]
 8010d8a:	2b2e      	cmp	r3, #46	; 0x2e
 8010d8c:	d10c      	bne.n	8010da8 <_svfiprintf_r+0x130>
 8010d8e:	7863      	ldrb	r3, [r4, #1]
 8010d90:	2b2a      	cmp	r3, #42	; 0x2a
 8010d92:	d134      	bne.n	8010dfe <_svfiprintf_r+0x186>
 8010d94:	9b03      	ldr	r3, [sp, #12]
 8010d96:	3402      	adds	r4, #2
 8010d98:	1d1a      	adds	r2, r3, #4
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	9203      	str	r2, [sp, #12]
 8010da0:	bfb8      	it	lt
 8010da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8010da6:	9305      	str	r3, [sp, #20]
 8010da8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010e70 <_svfiprintf_r+0x1f8>
 8010dac:	2203      	movs	r2, #3
 8010dae:	7821      	ldrb	r1, [r4, #0]
 8010db0:	4650      	mov	r0, sl
 8010db2:	f000 f9f1 	bl	8011198 <memchr>
 8010db6:	b138      	cbz	r0, 8010dc8 <_svfiprintf_r+0x150>
 8010db8:	eba0 000a 	sub.w	r0, r0, sl
 8010dbc:	2240      	movs	r2, #64	; 0x40
 8010dbe:	9b04      	ldr	r3, [sp, #16]
 8010dc0:	3401      	adds	r4, #1
 8010dc2:	4082      	lsls	r2, r0
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	9304      	str	r3, [sp, #16]
 8010dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dcc:	2206      	movs	r2, #6
 8010dce:	4825      	ldr	r0, [pc, #148]	; (8010e64 <_svfiprintf_r+0x1ec>)
 8010dd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010dd4:	f000 f9e0 	bl	8011198 <memchr>
 8010dd8:	2800      	cmp	r0, #0
 8010dda:	d038      	beq.n	8010e4e <_svfiprintf_r+0x1d6>
 8010ddc:	4b22      	ldr	r3, [pc, #136]	; (8010e68 <_svfiprintf_r+0x1f0>)
 8010dde:	bb1b      	cbnz	r3, 8010e28 <_svfiprintf_r+0x1b0>
 8010de0:	9b03      	ldr	r3, [sp, #12]
 8010de2:	3307      	adds	r3, #7
 8010de4:	f023 0307 	bic.w	r3, r3, #7
 8010de8:	3308      	adds	r3, #8
 8010dea:	9303      	str	r3, [sp, #12]
 8010dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dee:	4433      	add	r3, r6
 8010df0:	9309      	str	r3, [sp, #36]	; 0x24
 8010df2:	e768      	b.n	8010cc6 <_svfiprintf_r+0x4e>
 8010df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010df8:	460c      	mov	r4, r1
 8010dfa:	2001      	movs	r0, #1
 8010dfc:	e7a6      	b.n	8010d4c <_svfiprintf_r+0xd4>
 8010dfe:	2300      	movs	r3, #0
 8010e00:	3401      	adds	r4, #1
 8010e02:	f04f 0c0a 	mov.w	ip, #10
 8010e06:	4619      	mov	r1, r3
 8010e08:	9305      	str	r3, [sp, #20]
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e10:	3a30      	subs	r2, #48	; 0x30
 8010e12:	2a09      	cmp	r2, #9
 8010e14:	d903      	bls.n	8010e1e <_svfiprintf_r+0x1a6>
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d0c6      	beq.n	8010da8 <_svfiprintf_r+0x130>
 8010e1a:	9105      	str	r1, [sp, #20]
 8010e1c:	e7c4      	b.n	8010da8 <_svfiprintf_r+0x130>
 8010e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e22:	4604      	mov	r4, r0
 8010e24:	2301      	movs	r3, #1
 8010e26:	e7f0      	b.n	8010e0a <_svfiprintf_r+0x192>
 8010e28:	ab03      	add	r3, sp, #12
 8010e2a:	462a      	mov	r2, r5
 8010e2c:	a904      	add	r1, sp, #16
 8010e2e:	4638      	mov	r0, r7
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	4b0e      	ldr	r3, [pc, #56]	; (8010e6c <_svfiprintf_r+0x1f4>)
 8010e34:	f3af 8000 	nop.w
 8010e38:	1c42      	adds	r2, r0, #1
 8010e3a:	4606      	mov	r6, r0
 8010e3c:	d1d6      	bne.n	8010dec <_svfiprintf_r+0x174>
 8010e3e:	89ab      	ldrh	r3, [r5, #12]
 8010e40:	065b      	lsls	r3, r3, #25
 8010e42:	f53f af2d 	bmi.w	8010ca0 <_svfiprintf_r+0x28>
 8010e46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e48:	b01d      	add	sp, #116	; 0x74
 8010e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4e:	ab03      	add	r3, sp, #12
 8010e50:	462a      	mov	r2, r5
 8010e52:	a904      	add	r1, sp, #16
 8010e54:	4638      	mov	r0, r7
 8010e56:	9300      	str	r3, [sp, #0]
 8010e58:	4b04      	ldr	r3, [pc, #16]	; (8010e6c <_svfiprintf_r+0x1f4>)
 8010e5a:	f000 f87d 	bl	8010f58 <_printf_i>
 8010e5e:	e7eb      	b.n	8010e38 <_svfiprintf_r+0x1c0>
 8010e60:	08011828 	.word	0x08011828
 8010e64:	08011832 	.word	0x08011832
 8010e68:	00000000 	.word	0x00000000
 8010e6c:	08010bc5 	.word	0x08010bc5
 8010e70:	0801182e 	.word	0x0801182e

08010e74 <_printf_common>:
 8010e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e78:	4616      	mov	r6, r2
 8010e7a:	4699      	mov	r9, r3
 8010e7c:	688a      	ldr	r2, [r1, #8]
 8010e7e:	4607      	mov	r7, r0
 8010e80:	690b      	ldr	r3, [r1, #16]
 8010e82:	460c      	mov	r4, r1
 8010e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	bfb8      	it	lt
 8010e8c:	4613      	movlt	r3, r2
 8010e8e:	6033      	str	r3, [r6, #0]
 8010e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e94:	b10a      	cbz	r2, 8010e9a <_printf_common+0x26>
 8010e96:	3301      	adds	r3, #1
 8010e98:	6033      	str	r3, [r6, #0]
 8010e9a:	6823      	ldr	r3, [r4, #0]
 8010e9c:	0699      	lsls	r1, r3, #26
 8010e9e:	bf42      	ittt	mi
 8010ea0:	6833      	ldrmi	r3, [r6, #0]
 8010ea2:	3302      	addmi	r3, #2
 8010ea4:	6033      	strmi	r3, [r6, #0]
 8010ea6:	6825      	ldr	r5, [r4, #0]
 8010ea8:	f015 0506 	ands.w	r5, r5, #6
 8010eac:	d106      	bne.n	8010ebc <_printf_common+0x48>
 8010eae:	f104 0a19 	add.w	sl, r4, #25
 8010eb2:	68e3      	ldr	r3, [r4, #12]
 8010eb4:	6832      	ldr	r2, [r6, #0]
 8010eb6:	1a9b      	subs	r3, r3, r2
 8010eb8:	42ab      	cmp	r3, r5
 8010eba:	dc2b      	bgt.n	8010f14 <_printf_common+0xa0>
 8010ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010ec0:	1e13      	subs	r3, r2, #0
 8010ec2:	6822      	ldr	r2, [r4, #0]
 8010ec4:	bf18      	it	ne
 8010ec6:	2301      	movne	r3, #1
 8010ec8:	0692      	lsls	r2, r2, #26
 8010eca:	d430      	bmi.n	8010f2e <_printf_common+0xba>
 8010ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ed0:	4649      	mov	r1, r9
 8010ed2:	4638      	mov	r0, r7
 8010ed4:	47c0      	blx	r8
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	d023      	beq.n	8010f22 <_printf_common+0xae>
 8010eda:	6823      	ldr	r3, [r4, #0]
 8010edc:	341a      	adds	r4, #26
 8010ede:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010ee2:	f003 0306 	and.w	r3, r3, #6
 8010ee6:	2b04      	cmp	r3, #4
 8010ee8:	bf0a      	itet	eq
 8010eea:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8010eee:	2500      	movne	r5, #0
 8010ef0:	6833      	ldreq	r3, [r6, #0]
 8010ef2:	f04f 0600 	mov.w	r6, #0
 8010ef6:	bf08      	it	eq
 8010ef8:	1aed      	subeq	r5, r5, r3
 8010efa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8010efe:	bf08      	it	eq
 8010f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f04:	4293      	cmp	r3, r2
 8010f06:	bfc4      	itt	gt
 8010f08:	1a9b      	subgt	r3, r3, r2
 8010f0a:	18ed      	addgt	r5, r5, r3
 8010f0c:	42b5      	cmp	r5, r6
 8010f0e:	d11a      	bne.n	8010f46 <_printf_common+0xd2>
 8010f10:	2000      	movs	r0, #0
 8010f12:	e008      	b.n	8010f26 <_printf_common+0xb2>
 8010f14:	2301      	movs	r3, #1
 8010f16:	4652      	mov	r2, sl
 8010f18:	4649      	mov	r1, r9
 8010f1a:	4638      	mov	r0, r7
 8010f1c:	47c0      	blx	r8
 8010f1e:	3001      	adds	r0, #1
 8010f20:	d103      	bne.n	8010f2a <_printf_common+0xb6>
 8010f22:	f04f 30ff 	mov.w	r0, #4294967295
 8010f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f2a:	3501      	adds	r5, #1
 8010f2c:	e7c1      	b.n	8010eb2 <_printf_common+0x3e>
 8010f2e:	18e1      	adds	r1, r4, r3
 8010f30:	1c5a      	adds	r2, r3, #1
 8010f32:	2030      	movs	r0, #48	; 0x30
 8010f34:	3302      	adds	r3, #2
 8010f36:	4422      	add	r2, r4
 8010f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f44:	e7c2      	b.n	8010ecc <_printf_common+0x58>
 8010f46:	2301      	movs	r3, #1
 8010f48:	4622      	mov	r2, r4
 8010f4a:	4649      	mov	r1, r9
 8010f4c:	4638      	mov	r0, r7
 8010f4e:	47c0      	blx	r8
 8010f50:	3001      	adds	r0, #1
 8010f52:	d0e6      	beq.n	8010f22 <_printf_common+0xae>
 8010f54:	3601      	adds	r6, #1
 8010f56:	e7d9      	b.n	8010f0c <_printf_common+0x98>

08010f58 <_printf_i>:
 8010f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f5c:	7e0f      	ldrb	r7, [r1, #24]
 8010f5e:	4691      	mov	r9, r2
 8010f60:	4680      	mov	r8, r0
 8010f62:	460c      	mov	r4, r1
 8010f64:	2f78      	cmp	r7, #120	; 0x78
 8010f66:	469a      	mov	sl, r3
 8010f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010f6e:	d807      	bhi.n	8010f80 <_printf_i+0x28>
 8010f70:	2f62      	cmp	r7, #98	; 0x62
 8010f72:	d80a      	bhi.n	8010f8a <_printf_i+0x32>
 8010f74:	2f00      	cmp	r7, #0
 8010f76:	f000 80d3 	beq.w	8011120 <_printf_i+0x1c8>
 8010f7a:	2f58      	cmp	r7, #88	; 0x58
 8010f7c:	f000 80bf 	beq.w	80110fe <_printf_i+0x1a6>
 8010f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f88:	e03a      	b.n	8011000 <_printf_i+0xa8>
 8010f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f8e:	2b15      	cmp	r3, #21
 8010f90:	d8f6      	bhi.n	8010f80 <_printf_i+0x28>
 8010f92:	a101      	add	r1, pc, #4	; (adr r1, 8010f98 <_printf_i+0x40>)
 8010f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f98:	08010ff1 	.word	0x08010ff1
 8010f9c:	08011005 	.word	0x08011005
 8010fa0:	08010f81 	.word	0x08010f81
 8010fa4:	08010f81 	.word	0x08010f81
 8010fa8:	08010f81 	.word	0x08010f81
 8010fac:	08010f81 	.word	0x08010f81
 8010fb0:	08011005 	.word	0x08011005
 8010fb4:	08010f81 	.word	0x08010f81
 8010fb8:	08010f81 	.word	0x08010f81
 8010fbc:	08010f81 	.word	0x08010f81
 8010fc0:	08010f81 	.word	0x08010f81
 8010fc4:	08011107 	.word	0x08011107
 8010fc8:	08011031 	.word	0x08011031
 8010fcc:	080110c3 	.word	0x080110c3
 8010fd0:	08010f81 	.word	0x08010f81
 8010fd4:	08010f81 	.word	0x08010f81
 8010fd8:	08011129 	.word	0x08011129
 8010fdc:	08010f81 	.word	0x08010f81
 8010fe0:	08011031 	.word	0x08011031
 8010fe4:	08010f81 	.word	0x08010f81
 8010fe8:	08010f81 	.word	0x08010f81
 8010fec:	080110cb 	.word	0x080110cb
 8010ff0:	682b      	ldr	r3, [r5, #0]
 8010ff2:	1d1a      	adds	r2, r3, #4
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	602a      	str	r2, [r5, #0]
 8010ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011000:	2301      	movs	r3, #1
 8011002:	e09e      	b.n	8011142 <_printf_i+0x1ea>
 8011004:	6820      	ldr	r0, [r4, #0]
 8011006:	682b      	ldr	r3, [r5, #0]
 8011008:	0607      	lsls	r7, r0, #24
 801100a:	f103 0104 	add.w	r1, r3, #4
 801100e:	6029      	str	r1, [r5, #0]
 8011010:	d501      	bpl.n	8011016 <_printf_i+0xbe>
 8011012:	681e      	ldr	r6, [r3, #0]
 8011014:	e003      	b.n	801101e <_printf_i+0xc6>
 8011016:	0646      	lsls	r6, r0, #25
 8011018:	d5fb      	bpl.n	8011012 <_printf_i+0xba>
 801101a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801101e:	2e00      	cmp	r6, #0
 8011020:	da03      	bge.n	801102a <_printf_i+0xd2>
 8011022:	232d      	movs	r3, #45	; 0x2d
 8011024:	4276      	negs	r6, r6
 8011026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801102a:	4859      	ldr	r0, [pc, #356]	; (8011190 <_printf_i+0x238>)
 801102c:	230a      	movs	r3, #10
 801102e:	e012      	b.n	8011056 <_printf_i+0xfe>
 8011030:	682b      	ldr	r3, [r5, #0]
 8011032:	6820      	ldr	r0, [r4, #0]
 8011034:	1d19      	adds	r1, r3, #4
 8011036:	6029      	str	r1, [r5, #0]
 8011038:	0605      	lsls	r5, r0, #24
 801103a:	d501      	bpl.n	8011040 <_printf_i+0xe8>
 801103c:	681e      	ldr	r6, [r3, #0]
 801103e:	e002      	b.n	8011046 <_printf_i+0xee>
 8011040:	0641      	lsls	r1, r0, #25
 8011042:	d5fb      	bpl.n	801103c <_printf_i+0xe4>
 8011044:	881e      	ldrh	r6, [r3, #0]
 8011046:	2f6f      	cmp	r7, #111	; 0x6f
 8011048:	4851      	ldr	r0, [pc, #324]	; (8011190 <_printf_i+0x238>)
 801104a:	bf0c      	ite	eq
 801104c:	2308      	moveq	r3, #8
 801104e:	230a      	movne	r3, #10
 8011050:	2100      	movs	r1, #0
 8011052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011056:	6865      	ldr	r5, [r4, #4]
 8011058:	2d00      	cmp	r5, #0
 801105a:	60a5      	str	r5, [r4, #8]
 801105c:	bfa2      	ittt	ge
 801105e:	6821      	ldrge	r1, [r4, #0]
 8011060:	f021 0104 	bicge.w	r1, r1, #4
 8011064:	6021      	strge	r1, [r4, #0]
 8011066:	b90e      	cbnz	r6, 801106c <_printf_i+0x114>
 8011068:	2d00      	cmp	r5, #0
 801106a:	d04a      	beq.n	8011102 <_printf_i+0x1aa>
 801106c:	4615      	mov	r5, r2
 801106e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011072:	fb03 6711 	mls	r7, r3, r1, r6
 8011076:	5dc7      	ldrb	r7, [r0, r7]
 8011078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801107c:	4637      	mov	r7, r6
 801107e:	460e      	mov	r6, r1
 8011080:	42bb      	cmp	r3, r7
 8011082:	d9f4      	bls.n	801106e <_printf_i+0x116>
 8011084:	2b08      	cmp	r3, #8
 8011086:	d10b      	bne.n	80110a0 <_printf_i+0x148>
 8011088:	6823      	ldr	r3, [r4, #0]
 801108a:	07de      	lsls	r6, r3, #31
 801108c:	d508      	bpl.n	80110a0 <_printf_i+0x148>
 801108e:	6923      	ldr	r3, [r4, #16]
 8011090:	6861      	ldr	r1, [r4, #4]
 8011092:	4299      	cmp	r1, r3
 8011094:	bfde      	ittt	le
 8011096:	2330      	movle	r3, #48	; 0x30
 8011098:	f805 3c01 	strble.w	r3, [r5, #-1]
 801109c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80110a0:	1b52      	subs	r2, r2, r5
 80110a2:	6122      	str	r2, [r4, #16]
 80110a4:	464b      	mov	r3, r9
 80110a6:	aa03      	add	r2, sp, #12
 80110a8:	4621      	mov	r1, r4
 80110aa:	4640      	mov	r0, r8
 80110ac:	f8cd a000 	str.w	sl, [sp]
 80110b0:	f7ff fee0 	bl	8010e74 <_printf_common>
 80110b4:	3001      	adds	r0, #1
 80110b6:	d149      	bne.n	801114c <_printf_i+0x1f4>
 80110b8:	f04f 30ff 	mov.w	r0, #4294967295
 80110bc:	b004      	add	sp, #16
 80110be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110c2:	6823      	ldr	r3, [r4, #0]
 80110c4:	f043 0320 	orr.w	r3, r3, #32
 80110c8:	6023      	str	r3, [r4, #0]
 80110ca:	2778      	movs	r7, #120	; 0x78
 80110cc:	4831      	ldr	r0, [pc, #196]	; (8011194 <_printf_i+0x23c>)
 80110ce:	6823      	ldr	r3, [r4, #0]
 80110d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80110d4:	061f      	lsls	r7, r3, #24
 80110d6:	6829      	ldr	r1, [r5, #0]
 80110d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80110dc:	d402      	bmi.n	80110e4 <_printf_i+0x18c>
 80110de:	065f      	lsls	r7, r3, #25
 80110e0:	bf48      	it	mi
 80110e2:	b2b6      	uxthmi	r6, r6
 80110e4:	07df      	lsls	r7, r3, #31
 80110e6:	6029      	str	r1, [r5, #0]
 80110e8:	bf44      	itt	mi
 80110ea:	f043 0320 	orrmi.w	r3, r3, #32
 80110ee:	6023      	strmi	r3, [r4, #0]
 80110f0:	b91e      	cbnz	r6, 80110fa <_printf_i+0x1a2>
 80110f2:	6823      	ldr	r3, [r4, #0]
 80110f4:	f023 0320 	bic.w	r3, r3, #32
 80110f8:	6023      	str	r3, [r4, #0]
 80110fa:	2310      	movs	r3, #16
 80110fc:	e7a8      	b.n	8011050 <_printf_i+0xf8>
 80110fe:	4824      	ldr	r0, [pc, #144]	; (8011190 <_printf_i+0x238>)
 8011100:	e7e5      	b.n	80110ce <_printf_i+0x176>
 8011102:	4615      	mov	r5, r2
 8011104:	e7be      	b.n	8011084 <_printf_i+0x12c>
 8011106:	682b      	ldr	r3, [r5, #0]
 8011108:	6826      	ldr	r6, [r4, #0]
 801110a:	1d18      	adds	r0, r3, #4
 801110c:	6961      	ldr	r1, [r4, #20]
 801110e:	6028      	str	r0, [r5, #0]
 8011110:	0635      	lsls	r5, r6, #24
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	d501      	bpl.n	801111a <_printf_i+0x1c2>
 8011116:	6019      	str	r1, [r3, #0]
 8011118:	e002      	b.n	8011120 <_printf_i+0x1c8>
 801111a:	0670      	lsls	r0, r6, #25
 801111c:	d5fb      	bpl.n	8011116 <_printf_i+0x1be>
 801111e:	8019      	strh	r1, [r3, #0]
 8011120:	2300      	movs	r3, #0
 8011122:	4615      	mov	r5, r2
 8011124:	6123      	str	r3, [r4, #16]
 8011126:	e7bd      	b.n	80110a4 <_printf_i+0x14c>
 8011128:	682b      	ldr	r3, [r5, #0]
 801112a:	2100      	movs	r1, #0
 801112c:	1d1a      	adds	r2, r3, #4
 801112e:	602a      	str	r2, [r5, #0]
 8011130:	681d      	ldr	r5, [r3, #0]
 8011132:	6862      	ldr	r2, [r4, #4]
 8011134:	4628      	mov	r0, r5
 8011136:	f000 f82f 	bl	8011198 <memchr>
 801113a:	b108      	cbz	r0, 8011140 <_printf_i+0x1e8>
 801113c:	1b40      	subs	r0, r0, r5
 801113e:	6060      	str	r0, [r4, #4]
 8011140:	6863      	ldr	r3, [r4, #4]
 8011142:	6123      	str	r3, [r4, #16]
 8011144:	2300      	movs	r3, #0
 8011146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801114a:	e7ab      	b.n	80110a4 <_printf_i+0x14c>
 801114c:	6923      	ldr	r3, [r4, #16]
 801114e:	462a      	mov	r2, r5
 8011150:	4649      	mov	r1, r9
 8011152:	4640      	mov	r0, r8
 8011154:	47d0      	blx	sl
 8011156:	3001      	adds	r0, #1
 8011158:	d0ae      	beq.n	80110b8 <_printf_i+0x160>
 801115a:	6823      	ldr	r3, [r4, #0]
 801115c:	079b      	lsls	r3, r3, #30
 801115e:	d413      	bmi.n	8011188 <_printf_i+0x230>
 8011160:	68e0      	ldr	r0, [r4, #12]
 8011162:	9b03      	ldr	r3, [sp, #12]
 8011164:	4298      	cmp	r0, r3
 8011166:	bfb8      	it	lt
 8011168:	4618      	movlt	r0, r3
 801116a:	e7a7      	b.n	80110bc <_printf_i+0x164>
 801116c:	2301      	movs	r3, #1
 801116e:	4632      	mov	r2, r6
 8011170:	4649      	mov	r1, r9
 8011172:	4640      	mov	r0, r8
 8011174:	47d0      	blx	sl
 8011176:	3001      	adds	r0, #1
 8011178:	d09e      	beq.n	80110b8 <_printf_i+0x160>
 801117a:	3501      	adds	r5, #1
 801117c:	68e3      	ldr	r3, [r4, #12]
 801117e:	9903      	ldr	r1, [sp, #12]
 8011180:	1a5b      	subs	r3, r3, r1
 8011182:	42ab      	cmp	r3, r5
 8011184:	dcf2      	bgt.n	801116c <_printf_i+0x214>
 8011186:	e7eb      	b.n	8011160 <_printf_i+0x208>
 8011188:	2500      	movs	r5, #0
 801118a:	f104 0619 	add.w	r6, r4, #25
 801118e:	e7f5      	b.n	801117c <_printf_i+0x224>
 8011190:	08011839 	.word	0x08011839
 8011194:	0801184a 	.word	0x0801184a

08011198 <memchr>:
 8011198:	b2c9      	uxtb	r1, r1
 801119a:	4402      	add	r2, r0
 801119c:	b510      	push	{r4, lr}
 801119e:	4290      	cmp	r0, r2
 80111a0:	4603      	mov	r3, r0
 80111a2:	d101      	bne.n	80111a8 <memchr+0x10>
 80111a4:	2300      	movs	r3, #0
 80111a6:	e003      	b.n	80111b0 <memchr+0x18>
 80111a8:	781c      	ldrb	r4, [r3, #0]
 80111aa:	3001      	adds	r0, #1
 80111ac:	428c      	cmp	r4, r1
 80111ae:	d1f6      	bne.n	801119e <memchr+0x6>
 80111b0:	4618      	mov	r0, r3
 80111b2:	bd10      	pop	{r4, pc}

080111b4 <_realloc_r>:
 80111b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111b8:	4680      	mov	r8, r0
 80111ba:	4614      	mov	r4, r2
 80111bc:	460e      	mov	r6, r1
 80111be:	b921      	cbnz	r1, 80111ca <_realloc_r+0x16>
 80111c0:	4611      	mov	r1, r2
 80111c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111c6:	f7ff bb51 	b.w	801086c <_malloc_r>
 80111ca:	b92a      	cbnz	r2, 80111d8 <_realloc_r+0x24>
 80111cc:	4625      	mov	r5, r4
 80111ce:	f7ff fcad 	bl	8010b2c <_free_r>
 80111d2:	4628      	mov	r0, r5
 80111d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d8:	f000 f81b 	bl	8011212 <_malloc_usable_size_r>
 80111dc:	4284      	cmp	r4, r0
 80111de:	4607      	mov	r7, r0
 80111e0:	d802      	bhi.n	80111e8 <_realloc_r+0x34>
 80111e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80111e6:	d812      	bhi.n	801120e <_realloc_r+0x5a>
 80111e8:	4621      	mov	r1, r4
 80111ea:	4640      	mov	r0, r8
 80111ec:	f7ff fb3e 	bl	801086c <_malloc_r>
 80111f0:	4605      	mov	r5, r0
 80111f2:	2800      	cmp	r0, #0
 80111f4:	d0ed      	beq.n	80111d2 <_realloc_r+0x1e>
 80111f6:	42bc      	cmp	r4, r7
 80111f8:	4622      	mov	r2, r4
 80111fa:	4631      	mov	r1, r6
 80111fc:	bf28      	it	cs
 80111fe:	463a      	movcs	r2, r7
 8011200:	f7ff fc86 	bl	8010b10 <memcpy>
 8011204:	4631      	mov	r1, r6
 8011206:	4640      	mov	r0, r8
 8011208:	f7ff fc90 	bl	8010b2c <_free_r>
 801120c:	e7e1      	b.n	80111d2 <_realloc_r+0x1e>
 801120e:	4635      	mov	r5, r6
 8011210:	e7df      	b.n	80111d2 <_realloc_r+0x1e>

08011212 <_malloc_usable_size_r>:
 8011212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011216:	1f18      	subs	r0, r3, #4
 8011218:	2b00      	cmp	r3, #0
 801121a:	bfbc      	itt	lt
 801121c:	580b      	ldrlt	r3, [r1, r0]
 801121e:	18c0      	addlt	r0, r0, r3
 8011220:	4770      	bx	lr
	...

08011224 <_init>:
 8011224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011226:	bf00      	nop
 8011228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801122a:	bc08      	pop	{r3}
 801122c:	469e      	mov	lr, r3
 801122e:	4770      	bx	lr

08011230 <_fini>:
 8011230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011232:	bf00      	nop
 8011234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011236:	bc08      	pop	{r3}
 8011238:	469e      	mov	lr, r3
 801123a:	4770      	bx	lr
